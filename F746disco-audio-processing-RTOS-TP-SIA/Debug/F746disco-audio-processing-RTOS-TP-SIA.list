
F746disco-audio-processing-RTOS-TP-SIA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ec38  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001df8  0801ee08  0801ee08  0002ee08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020c00  08020c00  000401b4  2**0
                  CONTENTS
  4 .ARM          00000008  08020c00  08020c00  00030c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020c08  08020c08  000401b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020c08  08020c08  00030c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020c0c  08020c0c  00030c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b4  20000000  08020c10  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004bea4  200001b4  08020dc4  000401b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2004c058  08020dc4  0004c058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004ce6e  00000000  00000000  000401e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000abb3  00000000  00000000  0008d052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003b68  00000000  00000000  00097c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000036b0  00000000  00000000  0009b770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d13a  00000000  00000000  0009ee20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000545a4  00000000  00000000  000dbf5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012b931  00000000  00000000  001304fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0025be2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00010290  00000000  00000000  0025be80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b4 	.word	0x200001b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801edf0 	.word	0x0801edf0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001b8 	.word	0x200001b8
 800020c:	0801edf0 	.word	0x0801edf0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ab0:	f000 b974 	b.w	8000d9c <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	468e      	mov	lr, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14d      	bne.n	8000b76 <__udivmoddi4+0xaa>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4694      	mov	ip, r2
 8000ade:	d969      	bls.n	8000bb4 <__udivmoddi4+0xe8>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b152      	cbz	r2, 8000afc <__udivmoddi4+0x30>
 8000ae6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aea:	f1c2 0120 	rsb	r1, r2, #32
 8000aee:	fa20 f101 	lsr.w	r1, r0, r1
 8000af2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af6:	ea41 0e03 	orr.w	lr, r1, r3
 8000afa:	4094      	lsls	r4, r2
 8000afc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b00:	0c21      	lsrs	r1, r4, #16
 8000b02:	fbbe f6f8 	udiv	r6, lr, r8
 8000b06:	fa1f f78c 	uxth.w	r7, ip
 8000b0a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b12:	fb06 f107 	mul.w	r1, r6, r7
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x64>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b22:	f080 811f 	bcs.w	8000d64 <__udivmoddi4+0x298>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 811c 	bls.w	8000d64 <__udivmoddi4+0x298>
 8000b2c:	3e02      	subs	r6, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1a5b      	subs	r3, r3, r1
 8000b32:	b2a4      	uxth	r4, r4
 8000b34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b38:	fb08 3310 	mls	r3, r8, r0, r3
 8000b3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b40:	fb00 f707 	mul.w	r7, r0, r7
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	d90a      	bls.n	8000b5e <__udivmoddi4+0x92>
 8000b48:	eb1c 0404 	adds.w	r4, ip, r4
 8000b4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b50:	f080 810a 	bcs.w	8000d68 <__udivmoddi4+0x29c>
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	f240 8107 	bls.w	8000d68 <__udivmoddi4+0x29c>
 8000b5a:	4464      	add	r4, ip
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b62:	1be4      	subs	r4, r4, r7
 8000b64:	2600      	movs	r6, #0
 8000b66:	b11d      	cbz	r5, 8000b70 <__udivmoddi4+0xa4>
 8000b68:	40d4      	lsrs	r4, r2
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0xc2>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	f000 80ef 	beq.w	8000d5e <__udivmoddi4+0x292>
 8000b80:	2600      	movs	r6, #0
 8000b82:	e9c5 0100 	strd	r0, r1, [r5]
 8000b86:	4630      	mov	r0, r6
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	fab3 f683 	clz	r6, r3
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d14a      	bne.n	8000c2c <__udivmoddi4+0x160>
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xd4>
 8000b9a:	4282      	cmp	r2, r0
 8000b9c:	f200 80f9 	bhi.w	8000d92 <__udivmoddi4+0x2c6>
 8000ba0:	1a84      	subs	r4, r0, r2
 8000ba2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	469e      	mov	lr, r3
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	d0e0      	beq.n	8000b70 <__udivmoddi4+0xa4>
 8000bae:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bb2:	e7dd      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000bb4:	b902      	cbnz	r2, 8000bb8 <__udivmoddi4+0xec>
 8000bb6:	deff      	udf	#255	; 0xff
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	2a00      	cmp	r2, #0
 8000bbe:	f040 8092 	bne.w	8000ce6 <__udivmoddi4+0x21a>
 8000bc2:	eba1 010c 	sub.w	r1, r1, ip
 8000bc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bca:	fa1f fe8c 	uxth.w	lr, ip
 8000bce:	2601      	movs	r6, #1
 8000bd0:	0c20      	lsrs	r0, r4, #16
 8000bd2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bd6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bde:	fb0e f003 	mul.w	r0, lr, r3
 8000be2:	4288      	cmp	r0, r1
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x12c>
 8000be6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bea:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x12a>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f200 80cb 	bhi.w	8000d8c <__udivmoddi4+0x2c0>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	1a09      	subs	r1, r1, r0
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c00:	fb07 1110 	mls	r1, r7, r0, r1
 8000c04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c08:	fb0e fe00 	mul.w	lr, lr, r0
 8000c0c:	45a6      	cmp	lr, r4
 8000c0e:	d908      	bls.n	8000c22 <__udivmoddi4+0x156>
 8000c10:	eb1c 0404 	adds.w	r4, ip, r4
 8000c14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c18:	d202      	bcs.n	8000c20 <__udivmoddi4+0x154>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f200 80bb 	bhi.w	8000d96 <__udivmoddi4+0x2ca>
 8000c20:	4608      	mov	r0, r1
 8000c22:	eba4 040e 	sub.w	r4, r4, lr
 8000c26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c2a:	e79c      	b.n	8000b66 <__udivmoddi4+0x9a>
 8000c2c:	f1c6 0720 	rsb	r7, r6, #32
 8000c30:	40b3      	lsls	r3, r6
 8000c32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c42:	431c      	orrs	r4, r3
 8000c44:	40f9      	lsrs	r1, r7
 8000c46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c52:	0c20      	lsrs	r0, r4, #16
 8000c54:	fa1f fe8c 	uxth.w	lr, ip
 8000c58:	fb09 1118 	mls	r1, r9, r8, r1
 8000c5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c60:	fb08 f00e 	mul.w	r0, r8, lr
 8000c64:	4288      	cmp	r0, r1
 8000c66:	fa02 f206 	lsl.w	r2, r2, r6
 8000c6a:	d90b      	bls.n	8000c84 <__udivmoddi4+0x1b8>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c74:	f080 8088 	bcs.w	8000d88 <__udivmoddi4+0x2bc>
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	f240 8085 	bls.w	8000d88 <__udivmoddi4+0x2bc>
 8000c7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c82:	4461      	add	r1, ip
 8000c84:	1a09      	subs	r1, r1, r0
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c98:	458e      	cmp	lr, r1
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x1e2>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ca4:	d26c      	bcs.n	8000d80 <__udivmoddi4+0x2b4>
 8000ca6:	458e      	cmp	lr, r1
 8000ca8:	d96a      	bls.n	8000d80 <__udivmoddi4+0x2b4>
 8000caa:	3802      	subs	r0, #2
 8000cac:	4461      	add	r1, ip
 8000cae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cb2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cb6:	eba1 010e 	sub.w	r1, r1, lr
 8000cba:	42a1      	cmp	r1, r4
 8000cbc:	46c8      	mov	r8, r9
 8000cbe:	46a6      	mov	lr, r4
 8000cc0:	d356      	bcc.n	8000d70 <__udivmoddi4+0x2a4>
 8000cc2:	d053      	beq.n	8000d6c <__udivmoddi4+0x2a0>
 8000cc4:	b15d      	cbz	r5, 8000cde <__udivmoddi4+0x212>
 8000cc6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cca:	eb61 010e 	sbc.w	r1, r1, lr
 8000cce:	fa01 f707 	lsl.w	r7, r1, r7
 8000cd2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cd6:	40f1      	lsrs	r1, r6
 8000cd8:	431f      	orrs	r7, r3
 8000cda:	e9c5 7100 	strd	r7, r1, [r5]
 8000cde:	2600      	movs	r6, #0
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	f1c2 0320 	rsb	r3, r2, #32
 8000cea:	40d8      	lsrs	r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	4301      	orrs	r1, r0
 8000cf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfc:	fa1f fe8c 	uxth.w	lr, ip
 8000d00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d04:	fb07 3610 	mls	r6, r7, r0, r3
 8000d08:	0c0b      	lsrs	r3, r1, #16
 8000d0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d12:	429e      	cmp	r6, r3
 8000d14:	fa04 f402 	lsl.w	r4, r4, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x260>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d22:	d22f      	bcs.n	8000d84 <__udivmoddi4+0x2b8>
 8000d24:	429e      	cmp	r6, r3
 8000d26:	d92d      	bls.n	8000d84 <__udivmoddi4+0x2b8>
 8000d28:	3802      	subs	r0, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	b289      	uxth	r1, r1
 8000d30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d34:	fb07 3316 	mls	r3, r7, r6, r3
 8000d38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x28a>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d4c:	d216      	bcs.n	8000d7c <__udivmoddi4+0x2b0>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d914      	bls.n	8000d7c <__udivmoddi4+0x2b0>
 8000d52:	3e02      	subs	r6, #2
 8000d54:	4461      	add	r1, ip
 8000d56:	1ac9      	subs	r1, r1, r3
 8000d58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d5c:	e738      	b.n	8000bd0 <__udivmoddi4+0x104>
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e705      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e3      	b.n	8000b30 <__udivmoddi4+0x64>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6f8      	b.n	8000b5e <__udivmoddi4+0x92>
 8000d6c:	454b      	cmp	r3, r9
 8000d6e:	d2a9      	bcs.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d70:	ebb9 0802 	subs.w	r8, r9, r2
 8000d74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7a3      	b.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d7c:	4646      	mov	r6, r8
 8000d7e:	e7ea      	b.n	8000d56 <__udivmoddi4+0x28a>
 8000d80:	4620      	mov	r0, r4
 8000d82:	e794      	b.n	8000cae <__udivmoddi4+0x1e2>
 8000d84:	4640      	mov	r0, r8
 8000d86:	e7d1      	b.n	8000d2c <__udivmoddi4+0x260>
 8000d88:	46d0      	mov	r8, sl
 8000d8a:	e77b      	b.n	8000c84 <__udivmoddi4+0x1b8>
 8000d8c:	3b02      	subs	r3, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	e732      	b.n	8000bf8 <__udivmoddi4+0x12c>
 8000d92:	4630      	mov	r0, r6
 8000d94:	e709      	b.n	8000baa <__udivmoddi4+0xde>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	e742      	b.n	8000c22 <__udivmoddi4+0x156>

08000d9c <__aeabi_idiv0>:
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <audioLoop>:
 * This is the main audio loop (aka infinite while loop) which is responsible for real time audio processing tasks:
 * - transferring recorded audio from the DMA buffer to buf_input[]
 * - processing audio samples and writing them to buf_output[]
 * - transferring processed samples back to the DMA buffer
 */
void audioLoop() {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0

	uiDisplayBasic();
 8000da4:	f002 ffe4 	bl	8003d70 <uiDisplayBasic>
	/* Initialize SDRAM buffers */
	memset((int16_t*) AUDIO_SCRATCH_ADDR, 0, AUDIO_SCRATCH_SIZE * 2); // note that the size argument here always refers to bytes whatever the data type
 8000da8:	4a85      	ldr	r2, [pc, #532]	; (8000fc0 <audioLoop+0x220>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4885      	ldr	r0, [pc, #532]	; (8000fc4 <audioLoop+0x224>)
 8000dae:	f01c fde7 	bl	801d980 <memset>

	audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000db2:	4b85      	ldr	r3, [pc, #532]	; (8000fc8 <audioLoop+0x228>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]

	// start SAI (audio) DMA transfers:
	startAudioDMA(buf_output, buf_input, AUDIO_DMA_BUF_SIZE);
 8000db8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dbc:	4983      	ldr	r1, [pc, #524]	; (8000fcc <audioLoop+0x22c>)
 8000dbe:	4884      	ldr	r0, [pc, #528]	; (8000fd0 <audioLoop+0x230>)
 8000dc0:	f003 fe76 	bl	8004ab0 <startAudioDMA>
			inputLevelL = 0.;
			inputLevelR = 0.;
		}*/

		/* Wait until first half block has been recorded */
		while (audio_rec_buffer_state != BUFFER_OFFSET_HALF) {
 8000dc4:	e000      	b.n	8000dc8 <audioLoop+0x28>
			asm("NOP");
 8000dc6:	bf00      	nop
		while (audio_rec_buffer_state != BUFFER_OFFSET_HALF) {
 8000dc8:	4b7f      	ldr	r3, [pc, #508]	; (8000fc8 <audioLoop+0x228>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d1fa      	bne.n	8000dc6 <audioLoop+0x26>
		}
		audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000dd0:	4b7d      	ldr	r3, [pc, #500]	; (8000fc8 <audioLoop+0x228>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
		/* Copy recorded 1st half block */
		/*for (m = 1; m < AUDIO_DMA_BUF_SIZE/2; m+=2) {
		writeFloatToSDRAM((float)buf_input[m], 0);
		buf_input[m] = (int)(sign(readFloatFromSDRAM(0)) * (1- expf(-fabs(10*readFloatFromSDRAM(0)))));
		}*/
		for (m = 0; m < AUDIO_DMA_BUF_SIZE/2; m+=2) {
 8000dd6:	4b7f      	ldr	r3, [pc, #508]	; (8000fd4 <audioLoop+0x234>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	e01b      	b.n	8000e16 <audioLoop+0x76>
			buf_input_half[m]=buf_input[m%20];
 8000dde:	4b7d      	ldr	r3, [pc, #500]	; (8000fd4 <audioLoop+0x234>)
 8000de0:	6819      	ldr	r1, [r3, #0]
 8000de2:	4b7d      	ldr	r3, [pc, #500]	; (8000fd8 <audioLoop+0x238>)
 8000de4:	fb83 2301 	smull	r2, r3, r3, r1
 8000de8:	10da      	asrs	r2, r3, #3
 8000dea:	17cb      	asrs	r3, r1, #31
 8000dec:	1ad2      	subs	r2, r2, r3
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	1aca      	subs	r2, r1, r3
 8000df8:	4b78      	ldr	r3, [pc, #480]	; (8000fdc <audioLoop+0x23c>)
 8000dfa:	6819      	ldr	r1, [r3, #0]
 8000dfc:	4b75      	ldr	r3, [pc, #468]	; (8000fd4 <audioLoop+0x234>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	440b      	add	r3, r1
 8000e04:	4971      	ldr	r1, [pc, #452]	; (8000fcc <audioLoop+0x22c>)
 8000e06:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8000e0a:	801a      	strh	r2, [r3, #0]
		for (m = 0; m < AUDIO_DMA_BUF_SIZE/2; m+=2) {
 8000e0c:	4b71      	ldr	r3, [pc, #452]	; (8000fd4 <audioLoop+0x234>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	3302      	adds	r3, #2
 8000e12:	4a70      	ldr	r2, [pc, #448]	; (8000fd4 <audioLoop+0x234>)
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	4b6f      	ldr	r3, [pc, #444]	; (8000fd4 <audioLoop+0x234>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e1e:	d3de      	bcc.n	8000dde <audioLoop+0x3e>
				}
		processAudio(buf_output, buf_input);
 8000e20:	496a      	ldr	r1, [pc, #424]	; (8000fcc <audioLoop+0x22c>)
 8000e22:	486b      	ldr	r0, [pc, #428]	; (8000fd0 <audioLoop+0x230>)
 8000e24:	f000 f90e 	bl	8001044 <processAudio>
		if(cnt < 480){
 8000e28:	4b6d      	ldr	r3, [pc, #436]	; (8000fe0 <audioLoop+0x240>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000e30:	da58      	bge.n	8000ee4 <audioLoop+0x144>
			check = (int) (buf_output[0]/6.6);
 8000e32:	4b67      	ldr	r3, [pc, #412]	; (8000fd0 <audioLoop+0x230>)
 8000e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fb8b 	bl	8000554 <__aeabi_i2d>
 8000e3e:	a35e      	add	r3, pc, #376	; (adr r3, 8000fb8 <audioLoop+0x218>)
 8000e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e44:	f7ff fd1a 	bl	800087c <__aeabi_ddiv>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f7ff fdfc 	bl	8000a4c <__aeabi_d2iz>
 8000e54:	4603      	mov	r3, r0
 8000e56:	4a63      	ldr	r2, [pc, #396]	; (8000fe4 <audioLoop+0x244>)
 8000e58:	6013      	str	r3, [r2, #0]
			if(check>110){check=110;}
 8000e5a:	4b62      	ldr	r3, [pc, #392]	; (8000fe4 <audioLoop+0x244>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b6e      	cmp	r3, #110	; 0x6e
 8000e60:	dd02      	ble.n	8000e68 <audioLoop+0xc8>
 8000e62:	4b60      	ldr	r3, [pc, #384]	; (8000fe4 <audioLoop+0x244>)
 8000e64:	226e      	movs	r2, #110	; 0x6e
 8000e66:	601a      	str	r2, [r3, #0]
			if(check<-110){check=-110;}
 8000e68:	4b5e      	ldr	r3, [pc, #376]	; (8000fe4 <audioLoop+0x244>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f113 0f6e 	cmn.w	r3, #110	; 0x6e
 8000e70:	da03      	bge.n	8000e7a <audioLoop+0xda>
 8000e72:	4b5c      	ldr	r3, [pc, #368]	; (8000fe4 <audioLoop+0x244>)
 8000e74:	f06f 026d 	mvn.w	r2, #109	; 0x6d
 8000e78:	601a      	str	r2, [r3, #0]
			LCD_DrawLine(cnt, PLOT_OFFSET, cnt, check+PLOT_OFFSET);
 8000e7a:	4b59      	ldr	r3, [pc, #356]	; (8000fe0 <audioLoop+0x240>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	b298      	uxth	r0, r3
 8000e80:	4b57      	ldr	r3, [pc, #348]	; (8000fe0 <audioLoop+0x240>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	4b57      	ldr	r3, [pc, #348]	; (8000fe4 <audioLoop+0x244>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	3382      	adds	r3, #130	; 0x82
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	2182      	movs	r1, #130	; 0x82
 8000e92:	f003 fa83 	bl	800439c <LCD_DrawLine>
			del_buf[cnt]=check;
 8000e96:	4b53      	ldr	r3, [pc, #332]	; (8000fe4 <audioLoop+0x244>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	4b51      	ldr	r3, [pc, #324]	; (8000fe0 <audioLoop+0x240>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	b211      	sxth	r1, r2
 8000ea0:	4a51      	ldr	r2, [pc, #324]	; (8000fe8 <audioLoop+0x248>)
 8000ea2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			LCD_EraseLine(cnt_del, PLOT_OFFSET, cnt_del, del_buf[cnt_del]+PLOT_OFFSET);
 8000ea6:	4b51      	ldr	r3, [pc, #324]	; (8000fec <audioLoop+0x24c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	b298      	uxth	r0, r3
 8000eac:	4b4f      	ldr	r3, [pc, #316]	; (8000fec <audioLoop+0x24c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	4b4e      	ldr	r3, [pc, #312]	; (8000fec <audioLoop+0x24c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	494c      	ldr	r1, [pc, #304]	; (8000fe8 <audioLoop+0x248>)
 8000eb8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	3382      	adds	r3, #130	; 0x82
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	2182      	movs	r1, #130	; 0x82
 8000ec4:	f003 fa8c 	bl	80043e0 <LCD_EraseLine>
			if(abs(buf_output[0] >  save)){
 8000ec8:	4b41      	ldr	r3, [pc, #260]	; (8000fd0 <audioLoop+0x230>)
 8000eca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b47      	ldr	r3, [pc, #284]	; (8000ff0 <audioLoop+0x250>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	dd05      	ble.n	8000ee4 <audioLoop+0x144>
				save=buf_output[0];
 8000ed8:	4b3d      	ldr	r3, [pc, #244]	; (8000fd0 <audioLoop+0x230>)
 8000eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4b43      	ldr	r3, [pc, #268]	; (8000ff0 <audioLoop+0x250>)
 8000ee2:	601a      	str	r2, [r3, #0]
			}
		}
		cnt++;
 8000ee4:	4b3e      	ldr	r3, [pc, #248]	; (8000fe0 <audioLoop+0x240>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	4a3d      	ldr	r2, [pc, #244]	; (8000fe0 <audioLoop+0x240>)
 8000eec:	6013      	str	r3, [r2, #0]
		cnt_del++;
 8000eee:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <audioLoop+0x24c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	4a3d      	ldr	r2, [pc, #244]	; (8000fec <audioLoop+0x24c>)
 8000ef6:	6013      	str	r3, [r2, #0]
		if(cnt_del==480){
 8000ef8:	4b3c      	ldr	r3, [pc, #240]	; (8000fec <audioLoop+0x24c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000f00:	d102      	bne.n	8000f08 <audioLoop+0x168>
			cnt_del=0;
 8000f02:	4b3a      	ldr	r3, [pc, #232]	; (8000fec <audioLoop+0x24c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
		}
		if(cnt==480){
 8000f08:	4b35      	ldr	r3, [pc, #212]	; (8000fe0 <audioLoop+0x240>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000f10:	d116      	bne.n	8000f40 <audioLoop+0x1a0>
			sprintf((char*) buf, "Max Amp is: %d U \n\r", save);
 8000f12:	4b37      	ldr	r3, [pc, #220]	; (8000ff0 <audioLoop+0x250>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	4936      	ldr	r1, [pc, #216]	; (8000ff4 <audioLoop+0x254>)
 8000f1a:	4837      	ldr	r0, [pc, #220]	; (8000ff8 <audioLoop+0x258>)
 8000f1c:	f01c fecc 	bl	801dcb8 <siprintf>
			CDC_Transmit_HS((unsigned char*)buf,sizeof(buf));
 8000f20:	2164      	movs	r1, #100	; 0x64
 8000f22:	4835      	ldr	r0, [pc, #212]	; (8000ff8 <audioLoop+0x258>)
 8000f24:	f01b fcde 	bl	801c8e4 <CDC_Transmit_HS>
			CDC_Transmit_HS((unsigned char*)"Data aquired\n\r",sizeof("Data aquired\n"));
 8000f28:	210e      	movs	r1, #14
 8000f2a:	4834      	ldr	r0, [pc, #208]	; (8000ffc <audioLoop+0x25c>)
 8000f2c:	f01b fcda 	bl	801c8e4 <CDC_Transmit_HS>
			cnt=0;
 8000f30:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <audioLoop+0x240>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
			save=0;
 8000f36:	4b2e      	ldr	r3, [pc, #184]	; (8000ff0 <audioLoop+0x250>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
		}
		/*sprintf((char*) buf, "%d U   ", buf_output[0]);
		LCD_DrawString(90, 80, (uint8_t*) buf, LEFT_MODE, true);*/
		/* Wait until second half block has been recorded */
		while (audio_rec_buffer_state != BUFFER_OFFSET_FULL) {
 8000f3c:	e000      	b.n	8000f40 <audioLoop+0x1a0>
			asm("NOP");
 8000f3e:	bf00      	nop
		while (audio_rec_buffer_state != BUFFER_OFFSET_FULL) {
 8000f40:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <audioLoop+0x228>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d1fa      	bne.n	8000f3e <audioLoop+0x19e>
		}
		/*for (m = 1; m < AUDIO_DMA_BUF_SIZE/2; m+=2) {
				writeFloatToSDRAM((float)buf_input_half[m], 0);
				buf_input_half[m] = (int)(sign(readFloatFromSDRAM(0)) * (1- expf(-fabs(10*readFloatFromSDRAM(0)))));
				}*/
		for (m = 0; m < AUDIO_DMA_BUF_SIZE/2; m+=2) {
 8000f48:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <audioLoop+0x234>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	e01f      	b.n	8000f90 <audioLoop+0x1f0>
			buf_input_half[m]=buf_input_half[m%20];
 8000f50:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <audioLoop+0x23c>)
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <audioLoop+0x234>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <audioLoop+0x238>)
 8000f5a:	fb83 1302 	smull	r1, r3, r3, r2
 8000f5e:	10d9      	asrs	r1, r3, #3
 8000f60:	17d3      	asrs	r3, r2, #31
 8000f62:	1ac9      	subs	r1, r1, r3
 8000f64:	460b      	mov	r3, r1
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	440b      	add	r3, r1
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	1ad1      	subs	r1, r2, r3
 8000f6e:	460b      	mov	r3, r1
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	18c2      	adds	r2, r0, r3
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <audioLoop+0x23c>)
 8000f76:	6819      	ldr	r1, [r3, #0]
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <audioLoop+0x234>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	440b      	add	r3, r1
 8000f80:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f84:	801a      	strh	r2, [r3, #0]
		for (m = 0; m < AUDIO_DMA_BUF_SIZE/2; m+=2) {
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <audioLoop+0x234>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	4a11      	ldr	r2, [pc, #68]	; (8000fd4 <audioLoop+0x234>)
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <audioLoop+0x234>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f98:	d3da      	bcc.n	8000f50 <audioLoop+0x1b0>
			}
		audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <audioLoop+0x228>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
		/* Copy recorded 2nd half block */
		processAudio(buf_output_half, buf_input_half);
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <audioLoop+0x260>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <audioLoop+0x23c>)
 8000fa6:	6812      	ldr	r2, [r2, #0]
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 f84a 	bl	8001044 <processAudio>
		while (audio_rec_buffer_state != BUFFER_OFFSET_HALF) {
 8000fb0:	e70a      	b.n	8000dc8 <audioLoop+0x28>
 8000fb2:	bf00      	nop
 8000fb4:	f3af 8000 	nop.w
 8000fb8:	66666666 	.word	0x66666666
 8000fbc:	401a6666 	.word	0x401a6666
 8000fc0:	0076a000 	.word	0x0076a000
 8000fc4:	c0096000 	.word	0xc0096000
 8000fc8:	200001d0 	.word	0x200001d0
 8000fcc:	200001d4 	.word	0x200001d4
 8000fd0:	200009d4 	.word	0x200009d4
 8000fd4:	200011dc 	.word	0x200011dc
 8000fd8:	66666667 	.word	0x66666667
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	200011d4 	.word	0x200011d4
 8000fe4:	200011d8 	.word	0x200011d8
 8000fe8:	20001244 	.word	0x20001244
 8000fec:	2000000c 	.word	0x2000000c
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	0801ee08 	.word	0x0801ee08
 8000ff8:	200011e0 	.word	0x200011e0
 8000ffc:	0801ee1c 	.word	0x0801ee1c
 8001000:	20000004 	.word	0x20000004

08001004 <HAL_SAI_RxCpltCallback>:
// --------------------------- Callbacks implementation ---------------------------

/**
 * Audio IN DMA Transfer complete interrupt.
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <HAL_SAI_RxCpltCallback+0x1c>)
 800100e:	2202      	movs	r2, #2
 8001010:	601a      	str	r2, [r3, #0]
	return;
 8001012:	bf00      	nop
}
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	200001d0 	.word	0x200001d0

08001024 <HAL_SAI_RxHalfCpltCallback>:

/**
 * Audio IN DMA Half Transfer complete interrupt.
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]
	return;
 8001032:	bf00      	nop
}
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	200001d0 	.word	0x200001d0

08001044 <processAudio>:
 * has been filled by the DMA, that is,  AUDIO_BUF_SIZE samples
 * have just been transferred from the CODEC
 * (keep in mind that this number represents interleaved L and R samples,
 * hence the true corresponding duration of this audio frame is AUDIO_BUF_SIZE/2 divided by the sampling frequency).
 */
static void processAudio(int16_t *out, int16_t *in) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
	LED_On(); // for oscilloscope measurements...
 800104e:	f002 feb1 	bl	8003db4 <LED_On>
	for (int n = 0; n < AUDIO_BUF_SIZE; n++) {
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	e019      	b.n	800108c <processAudio+0x48>
		if(n%2==0){
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10b      	bne.n	800107a <processAudio+0x36>
			out[n] = in[n];
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	441a      	add	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	440b      	add	r3, r1
 8001072:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001076:	801a      	strh	r2, [r3, #0]
 8001078:	e005      	b.n	8001086 <processAudio+0x42>
		}
		else{
			out[n]=0;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	2200      	movs	r2, #0
 8001084:	801a      	strh	r2, [r3, #0]
	for (int n = 0; n < AUDIO_BUF_SIZE; n++) {
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	3301      	adds	r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001092:	d3e1      	bcc.n	8001058 <processAudio+0x14>
		}
	}

	LED_Off();
 8001094:	f002 fe9a 	bl	8003dcc <LED_Off>
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4a07      	ldr	r2, [pc, #28]	; (8001100 <vApplicationGetIdleTaskMemory+0x2c>)
 80010e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	4a06      	ldr	r2, [pc, #24]	; (8001104 <vApplicationGetIdleTaskMemory+0x30>)
 80010ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2280      	movs	r2, #128	; 0x80
 80010f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010f2:	bf00      	nop
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20001604 	.word	0x20001604
 8001104:	2000165c 	.word	0x2000165c

08001108 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800110c:	f3bf 8f4f 	dsb	sy
}
 8001110:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001112:	f3bf 8f6f 	isb	sy
}
 8001116:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <SCB_EnableICache+0x48>)
 800111a:	2200      	movs	r2, #0
 800111c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001120:	f3bf 8f4f 	dsb	sy
}
 8001124:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001126:	f3bf 8f6f 	isb	sy
}
 800112a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <SCB_EnableICache+0x48>)
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	4a07      	ldr	r2, [pc, #28]	; (8001150 <SCB_EnableICache+0x48>)
 8001132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001136:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001138:	f3bf 8f4f 	dsb	sy
}
 800113c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800113e:	f3bf 8f6f 	isb	sy
}
 8001142:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <SCB_InvalidateICache>:
/**
  \brief   Invalidate I-Cache
  \details Invalidates I-Cache
  */
__STATIC_INLINE void SCB_InvalidateICache (void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001158:	f3bf 8f4f 	dsb	sy
}
 800115c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800115e:	f3bf 8f6f 	isb	sy
}
 8001162:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <SCB_InvalidateICache+0x30>)
 8001166:	2200      	movs	r2, #0
 8001168:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800116c:	f3bf 8f4f 	dsb	sy
}
 8001170:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001172:	f3bf 8f6f 	isb	sy
}
 8001176:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <SCB_EnableDCache+0x84>)
 8001190:	2200      	movs	r2, #0
 8001192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001196:	f3bf 8f4f 	dsb	sy
}
 800119a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <SCB_EnableDCache+0x84>)
 800119e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011a2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	0b5b      	lsrs	r3, r3, #13
 80011a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80011ac:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	08db      	lsrs	r3, r3, #3
 80011b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011b6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	015a      	lsls	r2, r3, #5
 80011bc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80011c0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80011c6:	4911      	ldr	r1, [pc, #68]	; (800120c <SCB_EnableDCache+0x84>)
 80011c8:	4313      	orrs	r3, r2
 80011ca:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1e5a      	subs	r2, r3, #1
 80011d2:	60ba      	str	r2, [r7, #8]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1ef      	bne.n	80011b8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	1e5a      	subs	r2, r3, #1
 80011dc:	60fa      	str	r2, [r7, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1e5      	bne.n	80011ae <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80011e2:	f3bf 8f4f 	dsb	sy
}
 80011e6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <SCB_EnableDCache+0x84>)
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <SCB_EnableDCache+0x84>)
 80011ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80011f4:	f3bf 8f4f 	dsb	sy
}
 80011f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011fa:	f3bf 8f6f 	isb	sy
}
 80011fe:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <SCB_InvalidateDCache>:
/**
  \brief   Invalidate D-Cache
  \details Invalidates D-Cache
  */
__STATIC_INLINE void SCB_InvalidateDCache (void)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001216:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <SCB_InvalidateDCache+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800121e:	f3bf 8f4f 	dsb	sy
}
 8001222:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <SCB_InvalidateDCache+0x74>)
 8001226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800122a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	0b5b      	lsrs	r3, r3, #13
 8001230:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001234:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	08db      	lsrs	r3, r3, #3
 800123a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800123e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	015a      	lsls	r2, r3, #5
 8001244:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001248:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800124e:	490d      	ldr	r1, [pc, #52]	; (8001284 <SCB_InvalidateDCache+0x74>)
 8001250:	4313      	orrs	r3, r2
 8001252:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	60ba      	str	r2, [r7, #8]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1ef      	bne.n	8001240 <SCB_InvalidateDCache+0x30>
    } while(sets-- != 0U);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	1e5a      	subs	r2, r3, #1
 8001264:	60fa      	str	r2, [r7, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1e5      	bne.n	8001236 <SCB_InvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800126a:	f3bf 8f4f 	dsb	sy
}
 800126e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001270:	f3bf 8f6f 	isb	sy
}
 8001274:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001288:	b5b0      	push	{r4, r5, r7, lr}
 800128a:	b08e      	sub	sp, #56	; 0x38
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	SCB_InvalidateDCache();
 800128e:	f7ff ffbf 	bl	8001210 <SCB_InvalidateDCache>
	SCB_InvalidateICache();
 8001292:	f7ff ff5f 	bl	8001154 <SCB_InvalidateICache>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001296:	f004 fc1a 	bl	8005ace <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129a:	f000 f87d 	bl	8001398 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800129e:	f000 f8ed 	bl	800147c <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_USB_DEVICE_Init();
 80012a2:	f01b fa61 	bl	801c768 <MX_USB_DEVICE_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a6:	f001 f8b9 	bl	800241c <MX_GPIO_Init>
  MX_DMA_Init();
 80012aa:	f000 fff5 	bl	8002298 <MX_DMA_Init>
  MX_ADC3_Init();
 80012ae:	f000 f917 	bl	80014e0 <MX_ADC3_Init>
  MX_CRC_Init();
 80012b2:	f000 f967 	bl	8001584 <MX_CRC_Init>
  MX_DCMI_Init();
 80012b6:	f000 f987 	bl	80015c8 <MX_DCMI_Init>
  MX_DMA2D_Init();
 80012ba:	f000 f9b9 	bl	8001630 <MX_DMA2D_Init>
  MX_FMC_Init();
 80012be:	f001 f859 	bl	8002374 <MX_FMC_Init>
  MX_I2C1_Init();
 80012c2:	f000 f9e7 	bl	8001694 <MX_I2C1_Init>
  MX_I2C3_Init();
 80012c6:	f000 fa25 	bl	8001714 <MX_I2C3_Init>
  MX_LTDC_Init();
 80012ca:	f000 fa63 	bl	8001794 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80012ce:	f000 fae5 	bl	800189c <MX_QUADSPI_Init>
  MX_RTC_Init();
 80012d2:	f000 fb25 	bl	8001920 <MX_RTC_Init>
  MX_SAI2_Init();
 80012d6:	f000 fbc7 	bl	8001a68 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80012da:	f000 fc81 	bl	8001be0 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80012de:	f000 fc9f 	bl	8001c20 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 80012e2:	f000 fccd 	bl	8001c80 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012e6:	f000 fd77 	bl	8001dd8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012ea:	f000 fdeb 	bl	8001ec4 <MX_TIM3_Init>
  MX_TIM5_Init();
 80012ee:	f000 fe61 	bl	8001fb4 <MX_TIM5_Init>
  MX_TIM8_Init();
 80012f2:	f000 fed7 	bl	80020a4 <MX_TIM8_Init>
  MX_TIM12_Init();
 80012f6:	f000 ff29 	bl	800214c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80012fa:	f000 ff6d 	bl	80021d8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80012fe:	f000 ff9b 	bl	8002238 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001302:	f013 ffb7 	bl	8015274 <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 8001306:	f014 fa05 	bl	8015714 <MX_LIBJPEG_Init>

	//MPU_Init(); // uncomment in case of weird behaviors with SDRAM or LCD, see comment at mpu.c:74

	/* post-init SDRAM */
	// Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
	FMC_Bank1->BTCR[0] = 0x000030D2;
 800130a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800130e:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001312:	601a      	str	r2, [r3, #0]

	/* post-init touchscreen */
	TS_Init();
 8001314:	f003 fcc0 	bl	8004c98 <TS_Init>
	printf("Touchscreen Init: OK\n");
 8001318:	4819      	ldr	r0, [pc, #100]	; (8001380 <main+0xf8>)
 800131a:	f01c fcb5 	bl	801dc88 <puts>

	SCB_EnableICache(); // comment out if in step debugging to avoid weird behaviours
 800131e:	f7ff fef3 	bl	8001108 <SCB_EnableICache>
	SCB_EnableDCache();
 8001322:	f7ff ff31 	bl	8001188 <SCB_EnableDCache>
	printf("Cache enabled\n");
 8001326:	4817      	ldr	r0, [pc, #92]	; (8001384 <main+0xfc>)
 8001328:	f01c fcae 	bl	801dc88 <puts>
	//test();
	audioLoop(); // comment to use RTOS (see below)
 800132c:	f7ff fd38 	bl	8000da0 <audioLoop>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <main+0x100>)
 8001332:	f107 041c 	add.w	r4, r7, #28
 8001336:	461d      	mov	r5, r3
 8001338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800133a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001340:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f018 fcc2 	bl	8019cd4 <osThreadCreate>
 8001350:	4603      	mov	r3, r0
 8001352:	4a0e      	ldr	r2, [pc, #56]	; (800138c <main+0x104>)
 8001354:	6013      	str	r3, [r2, #0]

  /* definition and creation of uiTask */
  osThreadDef(uiTask, startUITask, osPriorityLow, 0, 1024);
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <main+0x108>)
 8001358:	463c      	mov	r4, r7
 800135a:	461d      	mov	r5, r3
 800135c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001360:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001364:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uiTaskHandle = osThreadCreate(osThread(uiTask), NULL);
 8001368:	463b      	mov	r3, r7
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f018 fcb1 	bl	8019cd4 <osThreadCreate>
 8001372:	4603      	mov	r3, r0
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <main+0x10c>)
 8001376:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001378:	f018 fc89 	bl	8019c8e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800137c:	e7fe      	b.n	800137c <main+0xf4>
 800137e:	bf00      	nop
 8001380:	0801ee40 	.word	0x0801ee40
 8001384:	0801ee58 	.word	0x0801ee58
 8001388:	0801ee68 	.word	0x0801ee68
 800138c:	20002178 	.word	0x20002178
 8001390:	0801ee84 	.word	0x0801ee84
 8001394:	2000217c 	.word	0x2000217c

08001398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b094      	sub	sp, #80	; 0x50
 800139c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139e:	f107 0320 	add.w	r3, r7, #32
 80013a2:	2230      	movs	r2, #48	; 0x30
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f01c faea 	bl	801d980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013bc:	f00a fd7e 	bl	800bebc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c0:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <SystemClock_Config+0xdc>)
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	4a2b      	ldr	r2, [pc, #172]	; (8001474 <SystemClock_Config+0xdc>)
 80013c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ca:	6413      	str	r3, [r2, #64]	; 0x40
 80013cc:	4b29      	ldr	r3, [pc, #164]	; (8001474 <SystemClock_Config+0xdc>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d8:	4b27      	ldr	r3, [pc, #156]	; (8001478 <SystemClock_Config+0xe0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a26      	ldr	r2, [pc, #152]	; (8001478 <SystemClock_Config+0xe0>)
 80013de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	4b24      	ldr	r3, [pc, #144]	; (8001478 <SystemClock_Config+0xe0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80013f0:	2309      	movs	r3, #9
 80013f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013fa:	2301      	movs	r3, #1
 80013fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fe:	2302      	movs	r3, #2
 8001400:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001402:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001406:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001408:	2319      	movs	r3, #25
 800140a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 800140c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001410:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001412:	2302      	movs	r3, #2
 8001414:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001416:	2309      	movs	r3, #9
 8001418:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800141a:	f107 0320 	add.w	r3, r7, #32
 800141e:	4618      	mov	r0, r3
 8001420:	f00b fd88 	bl	800cf34 <HAL_RCC_OscConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800142a:	f001 fa33 	bl	8002894 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800142e:	f00a fd55 	bl	800bedc <HAL_PWREx_EnableOverDrive>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001438:	f001 fa2c 	bl	8002894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143c:	230f      	movs	r3, #15
 800143e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001440:	2302      	movs	r3, #2
 8001442:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001448:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800144c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800144e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001452:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	2106      	movs	r1, #6
 800145a:	4618      	mov	r0, r3
 800145c:	f00c f80e 	bl	800d47c <HAL_RCC_ClockConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001466:	f001 fa15 	bl	8002894 <Error_Handler>
  }
}
 800146a:	bf00      	nop
 800146c:	3750      	adds	r7, #80	; 0x50
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40007000 	.word	0x40007000

0800147c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b0a2      	sub	sp, #136	; 0x88
 8001480:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2284      	movs	r2, #132	; 0x84
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f01c fa79 	bl	801d980 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <PeriphCommonClock_Config+0x60>)
 8001490:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001492:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001496:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001498:	2305      	movs	r3, #5
 800149a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 8;
 800149c:	2308      	movs	r3, #8
 800149e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80014a0:	2303      	movs	r3, #3
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80014a4:	2301      	movs	r3, #1
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80014a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ac:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80014ae:	2300      	movs	r3, #0
 80014b0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80014b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80014b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	4618      	mov	r0, r3
 80014c4:	f00c f9f2 	bl	800d8ac <HAL_RCCEx_PeriphCLKConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80014ce:	f001 f9e1 	bl	8002894 <Error_Handler>
  }
}
 80014d2:	bf00      	nop
 80014d4:	3788      	adds	r7, #136	; 0x88
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	00b00008 	.word	0x00b00008

080014e0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014e6:	463b      	mov	r3, r7
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <MX_ADC3_Init+0x98>)
 80014f4:	4a21      	ldr	r2, [pc, #132]	; (800157c <MX_ADC3_Init+0x9c>)
 80014f6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014f8:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <MX_ADC3_Init+0x98>)
 80014fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014fe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001500:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <MX_ADC3_Init+0x98>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <MX_ADC3_Init+0x98>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800150c:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <MX_ADC3_Init+0x98>)
 800150e:	2200      	movs	r2, #0
 8001510:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001512:	4b19      	ldr	r3, [pc, #100]	; (8001578 <MX_ADC3_Init+0x98>)
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <MX_ADC3_Init+0x98>)
 800151c:	2200      	movs	r2, #0
 800151e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <MX_ADC3_Init+0x98>)
 8001522:	4a17      	ldr	r2, [pc, #92]	; (8001580 <MX_ADC3_Init+0xa0>)
 8001524:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001526:	4b14      	ldr	r3, [pc, #80]	; (8001578 <MX_ADC3_Init+0x98>)
 8001528:	2200      	movs	r2, #0
 800152a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <MX_ADC3_Init+0x98>)
 800152e:	2201      	movs	r2, #1
 8001530:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_ADC3_Init+0x98>)
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <MX_ADC3_Init+0x98>)
 800153c:	2201      	movs	r2, #1
 800153e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001540:	480d      	ldr	r0, [pc, #52]	; (8001578 <MX_ADC3_Init+0x98>)
 8001542:	f004 fb15 	bl	8005b70 <HAL_ADC_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800154c:	f001 f9a2 	bl	8002894 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001550:	2304      	movs	r3, #4
 8001552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001554:	2301      	movs	r3, #1
 8001556:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800155c:	463b      	mov	r3, r7
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_ADC3_Init+0x98>)
 8001562:	f004 fb49 	bl	8005bf8 <HAL_ADC_ConfigChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800156c:	f001 f992 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	2000185c 	.word	0x2000185c
 800157c:	40012200 	.word	0x40012200
 8001580:	0f000001 	.word	0x0f000001

08001584 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <MX_CRC_Init+0x3c>)
 800158a:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <MX_CRC_Init+0x40>)
 800158c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800158e:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <MX_CRC_Init+0x3c>)
 8001590:	2200      	movs	r2, #0
 8001592:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <MX_CRC_Init+0x3c>)
 8001596:	2200      	movs	r2, #0
 8001598:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <MX_CRC_Init+0x3c>)
 800159c:	2200      	movs	r2, #0
 800159e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <MX_CRC_Init+0x3c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <MX_CRC_Init+0x3c>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80015ac:	4804      	ldr	r0, [pc, #16]	; (80015c0 <MX_CRC_Init+0x3c>)
 80015ae:	f004 fe87 	bl	80062c0 <HAL_CRC_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80015b8:	f001 f96c 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	200018a4 	.word	0x200018a4
 80015c4:	40023000 	.word	0x40023000

080015c8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80015cc:	4b16      	ldr	r3, [pc, #88]	; (8001628 <MX_DCMI_Init+0x60>)
 80015ce:	4a17      	ldr	r2, [pc, #92]	; (800162c <MX_DCMI_Init+0x64>)
 80015d0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <MX_DCMI_Init+0x60>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80015d8:	4b13      	ldr	r3, [pc, #76]	; (8001628 <MX_DCMI_Init+0x60>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <MX_DCMI_Init+0x60>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80015e4:	4b10      	ldr	r3, [pc, #64]	; (8001628 <MX_DCMI_Init+0x60>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <MX_DCMI_Init+0x60>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80015f0:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <MX_DCMI_Init+0x60>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_DCMI_Init+0x60>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <MX_DCMI_Init+0x60>)
 80015fe:	2200      	movs	r2, #0
 8001600:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_DCMI_Init+0x60>)
 8001604:	2200      	movs	r2, #0
 8001606:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <MX_DCMI_Init+0x60>)
 800160a:	2200      	movs	r2, #0
 800160c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_DCMI_Init+0x60>)
 8001610:	2200      	movs	r2, #0
 8001612:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <MX_DCMI_Init+0x60>)
 8001616:	f004 ff3d 	bl	8006494 <HAL_DCMI_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001620:	f001 f938 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	200018c8 	.word	0x200018c8
 800162c:	50050000 	.word	0x50050000

08001630 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001634:	4b15      	ldr	r3, [pc, #84]	; (800168c <MX_DMA2D_Init+0x5c>)
 8001636:	4a16      	ldr	r2, [pc, #88]	; (8001690 <MX_DMA2D_Init+0x60>)
 8001638:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800163a:	4b14      	ldr	r3, [pc, #80]	; (800168c <MX_DMA2D_Init+0x5c>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <MX_DMA2D_Init+0x5c>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <MX_DMA2D_Init+0x5c>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <MX_DMA2D_Init+0x5c>)
 800164e:	2200      	movs	r2, #0
 8001650:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <MX_DMA2D_Init+0x5c>)
 8001654:	2200      	movs	r2, #0
 8001656:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <MX_DMA2D_Init+0x5c>)
 800165a:	2200      	movs	r2, #0
 800165c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <MX_DMA2D_Init+0x5c>)
 8001660:	2200      	movs	r2, #0
 8001662:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001664:	4809      	ldr	r0, [pc, #36]	; (800168c <MX_DMA2D_Init+0x5c>)
 8001666:	f005 fc75 	bl	8006f54 <HAL_DMA2D_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001670:	f001 f910 	bl	8002894 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001674:	2101      	movs	r1, #1
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_DMA2D_Init+0x5c>)
 8001678:	f005 feda 	bl	8007430 <HAL_DMA2D_ConfigLayer>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001682:	f001 f907 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20001978 	.word	0x20001978
 8001690:	4002b000 	.word	0x4002b000

08001694 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <MX_I2C1_Init+0x74>)
 800169a:	4a1c      	ldr	r2, [pc, #112]	; (800170c <MX_I2C1_Init+0x78>)
 800169c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <MX_I2C1_Init+0x74>)
 80016a0:	4a1b      	ldr	r2, [pc, #108]	; (8001710 <MX_I2C1_Init+0x7c>)
 80016a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016a4:	4b18      	ldr	r3, [pc, #96]	; (8001708 <MX_I2C1_Init+0x74>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <MX_I2C1_Init+0x74>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <MX_I2C1_Init+0x74>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016b6:	4b14      	ldr	r3, [pc, #80]	; (8001708 <MX_I2C1_Init+0x74>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <MX_I2C1_Init+0x74>)
 80016be:	2200      	movs	r2, #0
 80016c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_I2C1_Init+0x74>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <MX_I2C1_Init+0x74>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ce:	480e      	ldr	r0, [pc, #56]	; (8001708 <MX_I2C1_Init+0x74>)
 80016d0:	f008 f83e 	bl	8009750 <HAL_I2C_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016da:	f001 f8db 	bl	8002894 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016de:	2100      	movs	r1, #0
 80016e0:	4809      	ldr	r0, [pc, #36]	; (8001708 <MX_I2C1_Init+0x74>)
 80016e2:	f008 fdbd 	bl	800a260 <HAL_I2CEx_ConfigAnalogFilter>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016ec:	f001 f8d2 	bl	8002894 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016f0:	2100      	movs	r1, #0
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_I2C1_Init+0x74>)
 80016f4:	f008 fdff 	bl	800a2f6 <HAL_I2CEx_ConfigDigitalFilter>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016fe:	f001 f8c9 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200019b8 	.word	0x200019b8
 800170c:	40005400 	.word	0x40005400
 8001710:	00c0eaff 	.word	0x00c0eaff

08001714 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <MX_I2C3_Init+0x74>)
 800171a:	4a1c      	ldr	r2, [pc, #112]	; (800178c <MX_I2C3_Init+0x78>)
 800171c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800171e:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <MX_I2C3_Init+0x74>)
 8001720:	4a1b      	ldr	r2, [pc, #108]	; (8001790 <MX_I2C3_Init+0x7c>)
 8001722:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <MX_I2C3_Init+0x74>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <MX_I2C3_Init+0x74>)
 800172c:	2201      	movs	r2, #1
 800172e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001730:	4b15      	ldr	r3, [pc, #84]	; (8001788 <MX_I2C3_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <MX_I2C3_Init+0x74>)
 8001738:	2200      	movs	r2, #0
 800173a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <MX_I2C3_Init+0x74>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <MX_I2C3_Init+0x74>)
 8001744:	2200      	movs	r2, #0
 8001746:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <MX_I2C3_Init+0x74>)
 800174a:	2200      	movs	r2, #0
 800174c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800174e:	480e      	ldr	r0, [pc, #56]	; (8001788 <MX_I2C3_Init+0x74>)
 8001750:	f007 fffe 	bl	8009750 <HAL_I2C_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800175a:	f001 f89b 	bl	8002894 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800175e:	2100      	movs	r1, #0
 8001760:	4809      	ldr	r0, [pc, #36]	; (8001788 <MX_I2C3_Init+0x74>)
 8001762:	f008 fd7d 	bl	800a260 <HAL_I2CEx_ConfigAnalogFilter>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800176c:	f001 f892 	bl	8002894 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001770:	2100      	movs	r1, #0
 8001772:	4805      	ldr	r0, [pc, #20]	; (8001788 <MX_I2C3_Init+0x74>)
 8001774:	f008 fdbf 	bl	800a2f6 <HAL_I2CEx_ConfigDigitalFilter>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800177e:	f001 f889 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20001a0c 	.word	0x20001a0c
 800178c:	40005c00 	.word	0x40005c00
 8001790:	00c0eaff 	.word	0x00c0eaff

08001794 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08e      	sub	sp, #56	; 0x38
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	2234      	movs	r2, #52	; 0x34
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f01c f8ed 	bl	801d980 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80017a6:	4b3b      	ldr	r3, [pc, #236]	; (8001894 <MX_LTDC_Init+0x100>)
 80017a8:	4a3b      	ldr	r2, [pc, #236]	; (8001898 <MX_LTDC_Init+0x104>)
 80017aa:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80017ac:	4b39      	ldr	r3, [pc, #228]	; (8001894 <MX_LTDC_Init+0x100>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80017b2:	4b38      	ldr	r3, [pc, #224]	; (8001894 <MX_LTDC_Init+0x100>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80017b8:	4b36      	ldr	r3, [pc, #216]	; (8001894 <MX_LTDC_Init+0x100>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80017be:	4b35      	ldr	r3, [pc, #212]	; (8001894 <MX_LTDC_Init+0x100>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80017c4:	4b33      	ldr	r3, [pc, #204]	; (8001894 <MX_LTDC_Init+0x100>)
 80017c6:	2228      	movs	r2, #40	; 0x28
 80017c8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80017ca:	4b32      	ldr	r3, [pc, #200]	; (8001894 <MX_LTDC_Init+0x100>)
 80017cc:	2209      	movs	r2, #9
 80017ce:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80017d0:	4b30      	ldr	r3, [pc, #192]	; (8001894 <MX_LTDC_Init+0x100>)
 80017d2:	2235      	movs	r2, #53	; 0x35
 80017d4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80017d6:	4b2f      	ldr	r3, [pc, #188]	; (8001894 <MX_LTDC_Init+0x100>)
 80017d8:	220b      	movs	r2, #11
 80017da:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80017dc:	4b2d      	ldr	r3, [pc, #180]	; (8001894 <MX_LTDC_Init+0x100>)
 80017de:	f240 2215 	movw	r2, #533	; 0x215
 80017e2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80017e4:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <MX_LTDC_Init+0x100>)
 80017e6:	f240 121b 	movw	r2, #283	; 0x11b
 80017ea:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80017ec:	4b29      	ldr	r3, [pc, #164]	; (8001894 <MX_LTDC_Init+0x100>)
 80017ee:	f240 2235 	movw	r2, #565	; 0x235
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80017f4:	4b27      	ldr	r3, [pc, #156]	; (8001894 <MX_LTDC_Init+0x100>)
 80017f6:	f240 121d 	movw	r2, #285	; 0x11d
 80017fa:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80017fc:	4b25      	ldr	r3, [pc, #148]	; (8001894 <MX_LTDC_Init+0x100>)
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001804:	4b23      	ldr	r3, [pc, #140]	; (8001894 <MX_LTDC_Init+0x100>)
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <MX_LTDC_Init+0x100>)
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001814:	481f      	ldr	r0, [pc, #124]	; (8001894 <MX_LTDC_Init+0x100>)
 8001816:	f008 fdbb 	bl	800a390 <HAL_LTDC_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001820:	f001 f838 	bl	8002894 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001828:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800182c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001832:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001836:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001838:	2302      	movs	r3, #2
 800183a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800183c:	23ff      	movs	r3, #255	; 0xff
 800183e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001844:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001848:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800184a:	2307      	movs	r3, #7
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800184e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001854:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001858:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800185a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800185e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	2200      	movs	r2, #0
 8001876:	4619      	mov	r1, r3
 8001878:	4806      	ldr	r0, [pc, #24]	; (8001894 <MX_LTDC_Init+0x100>)
 800187a:	f008 fe59 	bl	800a530 <HAL_LTDC_ConfigLayer>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001884:	f001 f806 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

	LCD_Init();
 8001888:	f002 fbe6 	bl	8004058 <LCD_Init>

  /* USER CODE END LTDC_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	3738      	adds	r7, #56	; 0x38
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20001a60 	.word	0x20001a60
 8001898:	40016800 	.word	0x40016800

0800189c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <MX_QUADSPI_Init+0x7c>)
 80018a2:	4a1e      	ldr	r2, [pc, #120]	; (800191c <MX_QUADSPI_Init+0x80>)
 80018a4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <MX_QUADSPI_Init+0x7c>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <MX_QUADSPI_Init+0x7c>)
 80018ae:	2204      	movs	r2, #4
 80018b0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <MX_QUADSPI_Init+0x7c>)
 80018b4:	2210      	movs	r2, #16
 80018b6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <MX_QUADSPI_Init+0x7c>)
 80018ba:	2218      	movs	r2, #24
 80018bc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <MX_QUADSPI_Init+0x7c>)
 80018c0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80018c4:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80018c6:	4b14      	ldr	r3, [pc, #80]	; (8001918 <MX_QUADSPI_Init+0x7c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <MX_QUADSPI_Init+0x7c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <MX_QUADSPI_Init+0x7c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80018d8:	480f      	ldr	r0, [pc, #60]	; (8001918 <MX_QUADSPI_Init+0x7c>)
 80018da:	f00a fb4f 	bl	800bf7c <HAL_QSPI_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80018e4:	f000 ffd6 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

	// + memory reset + config dummy cycles on QSPI memory side, see disco_qspi.c
	/* QSPI memory reset */
	if (DISCO_QSPI_ResetMemory(&hqspi) != HAL_OK) Error_Handler();
 80018e8:	480b      	ldr	r0, [pc, #44]	; (8001918 <MX_QUADSPI_Init+0x7c>)
 80018ea:	f002 ffa9 	bl	8004840 <DISCO_QSPI_ResetMemory>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_QUADSPI_Init+0x5c>
 80018f4:	f000 ffce 	bl	8002894 <Error_Handler>
	/* Configuration of the dummy cycles on QSPI memory side */
	if (DISCO_QSPI_DummyCyclesCfg(&hqspi) != HAL_OK) Error_Handler();
 80018f8:	4807      	ldr	r0, [pc, #28]	; (8001918 <MX_QUADSPI_Init+0x7c>)
 80018fa:	f002 ffe3 	bl	80048c4 <DISCO_QSPI_DummyCyclesCfg>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_QUADSPI_Init+0x6c>
 8001904:	f000 ffc6 	bl	8002894 <Error_Handler>

	DISCO_QSPI_EnableMemoryMappedMode();
 8001908:	f002 ff68 	bl	80047dc <DISCO_QSPI_EnableMemoryMappedMode>
	HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 800190c:	205c      	movs	r0, #92	; 0x5c
 800190e:	f004 fcc9 	bl	80062a4 <HAL_NVIC_DisableIRQ>


  /* USER CODE END QUADSPI_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20001b08 	.word	0x20001b08
 800191c:	a0001000 	.word	0xa0001000

08001920 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b090      	sub	sp, #64	; 0x40
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001926:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
 8001934:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001936:	2300      	movs	r3, #0
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800193a:	463b      	mov	r3, r7
 800193c:	2228      	movs	r2, #40	; 0x28
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f01c f81d 	bl	801d980 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001946:	4b46      	ldr	r3, [pc, #280]	; (8001a60 <MX_RTC_Init+0x140>)
 8001948:	4a46      	ldr	r2, [pc, #280]	; (8001a64 <MX_RTC_Init+0x144>)
 800194a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800194c:	4b44      	ldr	r3, [pc, #272]	; (8001a60 <MX_RTC_Init+0x140>)
 800194e:	2200      	movs	r2, #0
 8001950:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001952:	4b43      	ldr	r3, [pc, #268]	; (8001a60 <MX_RTC_Init+0x140>)
 8001954:	227f      	movs	r2, #127	; 0x7f
 8001956:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001958:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <MX_RTC_Init+0x140>)
 800195a:	22ff      	movs	r2, #255	; 0xff
 800195c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800195e:	4b40      	ldr	r3, [pc, #256]	; (8001a60 <MX_RTC_Init+0x140>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001964:	4b3e      	ldr	r3, [pc, #248]	; (8001a60 <MX_RTC_Init+0x140>)
 8001966:	2200      	movs	r2, #0
 8001968:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800196a:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <MX_RTC_Init+0x140>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001970:	483b      	ldr	r0, [pc, #236]	; (8001a60 <MX_RTC_Init+0x140>)
 8001972:	f00c fccf 	bl	800e314 <HAL_RTC_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800197c:	f000 ff8a 	bl	8002894 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001980:	2300      	movs	r3, #0
 8001982:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001986:	2300      	movs	r3, #0
 8001988:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 800198c:	2300      	movs	r3, #0
 800198e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001992:	2300      	movs	r3, #0
 8001994:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800199a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800199e:	2201      	movs	r2, #1
 80019a0:	4619      	mov	r1, r3
 80019a2:	482f      	ldr	r0, [pc, #188]	; (8001a60 <MX_RTC_Init+0x140>)
 80019a4:	f00c fd3a 	bl	800e41c <HAL_RTC_SetTime>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80019ae:	f000 ff71 	bl	8002894 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80019b2:	2301      	movs	r3, #1
 80019b4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80019b8:	2301      	movs	r3, #1
 80019ba:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80019be:	2301      	movs	r3, #1
 80019c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ce:	2201      	movs	r2, #1
 80019d0:	4619      	mov	r1, r3
 80019d2:	4823      	ldr	r0, [pc, #140]	; (8001a60 <MX_RTC_Init+0x140>)
 80019d4:	f00c fdbc 	bl	800e550 <HAL_RTC_SetDate>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80019de:	f000 ff59 	bl	8002894 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001a06:	2301      	movs	r3, #1
 8001a08:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001a0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a12:	463b      	mov	r3, r7
 8001a14:	2201      	movs	r2, #1
 8001a16:	4619      	mov	r1, r3
 8001a18:	4811      	ldr	r0, [pc, #68]	; (8001a60 <MX_RTC_Init+0x140>)
 8001a1a:	f00c fe1d 	bl	800e658 <HAL_RTC_SetAlarm>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001a24:	f000 ff36 	bl	8002894 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2201      	movs	r2, #1
 8001a32:	4619      	mov	r1, r3
 8001a34:	480a      	ldr	r0, [pc, #40]	; (8001a60 <MX_RTC_Init+0x140>)
 8001a36:	f00c fe0f 	bl	800e658 <HAL_RTC_SetAlarm>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8001a40:	f000 ff28 	bl	8002894 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001a44:	2202      	movs	r2, #2
 8001a46:	2100      	movs	r1, #0
 8001a48:	4805      	ldr	r0, [pc, #20]	; (8001a60 <MX_RTC_Init+0x140>)
 8001a4a:	f00c ffd1 	bl	800e9f0 <HAL_RTCEx_SetTimeStamp>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8001a54:	f000 ff1e 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a58:	bf00      	nop
 8001a5a:	3740      	adds	r7, #64	; 0x40
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20001b54 	.word	0x20001b54
 8001a64:	40002800 	.word	0x40002800

08001a68 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001a6c:	4b58      	ldr	r3, [pc, #352]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001a6e:	4a59      	ldr	r2, [pc, #356]	; (8001bd4 <MX_SAI2_Init+0x16c>)
 8001a70:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001a72:	4b57      	ldr	r3, [pc, #348]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001a78:	4b55      	ldr	r3, [pc, #340]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8001a7e:	4b54      	ldr	r3, [pc, #336]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001a80:	2280      	movs	r2, #128	; 0x80
 8001a82:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001a84:	4b52      	ldr	r3, [pc, #328]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001a8a:	4b51      	ldr	r3, [pc, #324]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001a90:	4b4f      	ldr	r3, [pc, #316]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001a96:	4b4e      	ldr	r3, [pc, #312]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001a98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a9c:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001a9e:	4b4c      	ldr	r3, [pc, #304]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001aa4:	4b4a      	ldr	r3, [pc, #296]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8001aaa:	4b49      	ldr	r3, [pc, #292]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001aac:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001ab0:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001ab2:	4b47      	ldr	r3, [pc, #284]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001ab8:	4b45      	ldr	r3, [pc, #276]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001abe:	4b44      	ldr	r3, [pc, #272]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001ac4:	4b42      	ldr	r3, [pc, #264]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 64;
 8001aca:	4b41      	ldr	r3, [pc, #260]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001acc:	2240      	movs	r2, #64	; 0x40
 8001ace:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 8001ad0:	4b3f      	ldr	r3, [pc, #252]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001ad6:	4b3e      	ldr	r3, [pc, #248]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001ad8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001adc:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001ade:	4b3c      	ldr	r3, [pc, #240]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001ae4:	4b3a      	ldr	r3, [pc, #232]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001ae6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001aea:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001aec:	4b38      	ldr	r3, [pc, #224]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001af2:	4b37      	ldr	r3, [pc, #220]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 4;
 8001af8:	4b35      	ldr	r3, [pc, #212]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001afa:	2204      	movs	r2, #4
 8001afc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000005;
 8001afe:	4b34      	ldr	r3, [pc, #208]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001b00:	2205      	movs	r2, #5
 8001b02:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001b04:	4832      	ldr	r0, [pc, #200]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001b06:	f00c ffdb 	bl	800eac0 <HAL_SAI_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_SAI2_Init+0xac>
  {
    Error_Handler();
 8001b10:	f000 fec0 	bl	8002894 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001b14:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001b16:	4a31      	ldr	r2, [pc, #196]	; (8001bdc <MX_SAI2_Init+0x174>)
 8001b18:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b1a:	4b2f      	ldr	r3, [pc, #188]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001b20:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001b22:	2203      	movs	r2, #3
 8001b24:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 8001b26:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001b28:	2280      	movs	r2, #128	; 0x80
 8001b2a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001b2c:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001b32:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001b38:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b3e:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001b44:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b4a:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b50:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b56:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b5c:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 64;
 8001b62:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001b64:	2240      	movs	r2, #64	; 0x40
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 8001b68:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001b70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b74:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001b7e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b82:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001b84:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b8a:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 4;
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001b92:	2204      	movs	r2, #4
 8001b94:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x0000000A;
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001b98:	220a      	movs	r2, #10
 8001b9a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001b9c:	480e      	ldr	r0, [pc, #56]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001b9e:	f00c ff8f 	bl	800eac0 <HAL_SAI_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_SAI2_Init+0x144>
  {
    Error_Handler();
 8001ba8:	f000 fe74 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

	// bug fix:
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <MX_SAI2_Init+0x168>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001bba:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2);
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <MX_SAI2_Init+0x170>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001bca:	601a      	str	r2, [r3, #0]

  /* USER CODE END SAI2_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20001b74 	.word	0x20001b74
 8001bd4:	40015c04 	.word	0x40015c04
 8001bd8:	20001bf8 	.word	0x20001bf8
 8001bdc:	40015c24 	.word	0x40015c24

08001be0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <MX_SDMMC1_SD_Init+0x38>)
 8001be6:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <MX_SDMMC1_SD_Init+0x3c>)
 8001be8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <MX_SDMMC1_SD_Init+0x38>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <MX_SDMMC1_SD_Init+0x38>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <MX_SDMMC1_SD_Init+0x38>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <MX_SDMMC1_SD_Init+0x38>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <MX_SDMMC1_SD_Init+0x38>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001c08:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <MX_SDMMC1_SD_Init+0x38>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	20001d3c 	.word	0x20001d3c
 8001c1c:	40012c00 	.word	0x40012c00

08001c20 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c26:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001c2a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001c32:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001c38:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001c44:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001c5c:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001c68:	4804      	ldr	r0, [pc, #16]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c6a:	f00e fc35 	bl	80104d8 <HAL_SPDIFRX_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001c74:	f000 fe0e 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20001dc0 	.word	0x20001dc0

08001c80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b09a      	sub	sp, #104	; 0x68
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
 8001cb0:	615a      	str	r2, [r3, #20]
 8001cb2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	222c      	movs	r2, #44	; 0x2c
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f01b fe60 	bl	801d980 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cc0:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <MX_TIM1_Init+0x150>)
 8001cc2:	4a44      	ldr	r2, [pc, #272]	; (8001dd4 <MX_TIM1_Init+0x154>)
 8001cc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cc6:	4b42      	ldr	r3, [pc, #264]	; (8001dd0 <MX_TIM1_Init+0x150>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ccc:	4b40      	ldr	r3, [pc, #256]	; (8001dd0 <MX_TIM1_Init+0x150>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001cd2:	4b3f      	ldr	r3, [pc, #252]	; (8001dd0 <MX_TIM1_Init+0x150>)
 8001cd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cda:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <MX_TIM1_Init+0x150>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ce0:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <MX_TIM1_Init+0x150>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce6:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <MX_TIM1_Init+0x150>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cec:	4838      	ldr	r0, [pc, #224]	; (8001dd0 <MX_TIM1_Init+0x150>)
 8001cee:	f00e fc4f 	bl	8010590 <HAL_TIM_Base_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001cf8:	f000 fdcc 	bl	8002894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d00:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d06:	4619      	mov	r1, r3
 8001d08:	4831      	ldr	r0, [pc, #196]	; (8001dd0 <MX_TIM1_Init+0x150>)
 8001d0a:	f00e ff9b 	bl	8010c44 <HAL_TIM_ConfigClockSource>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001d14:	f000 fdbe 	bl	8002894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d18:	482d      	ldr	r0, [pc, #180]	; (8001dd0 <MX_TIM1_Init+0x150>)
 8001d1a:	f00e fd09 	bl	8010730 <HAL_TIM_PWM_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001d24:	f000 fdb6 	bl	8002894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4825      	ldr	r0, [pc, #148]	; (8001dd0 <MX_TIM1_Init+0x150>)
 8001d3c:	f00f fc0c 	bl	8011558 <HAL_TIMEx_MasterConfigSynchronization>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001d46:	f000 fda5 	bl	8002894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d4a:	2360      	movs	r3, #96	; 0x60
 8001d4c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d52:	2300      	movs	r3, #0
 8001d54:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d56:	2300      	movs	r3, #0
 8001d58:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d62:	2300      	movs	r3, #0
 8001d64:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4818      	ldr	r0, [pc, #96]	; (8001dd0 <MX_TIM1_Init+0x150>)
 8001d70:	f00e fe54 	bl	8010a1c <HAL_TIM_PWM_ConfigChannel>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001d7a:	f000 fd8b 	bl	8002894 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001da0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	4619      	mov	r1, r3
 8001db2:	4807      	ldr	r0, [pc, #28]	; (8001dd0 <MX_TIM1_Init+0x150>)
 8001db4:	f00f fc5e 	bl	8011674 <HAL_TIMEx_ConfigBreakDeadTime>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001dbe:	f000 fd69 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001dc2:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <MX_TIM1_Init+0x150>)
 8001dc4:	f001 faee 	bl	80033a4 <HAL_TIM_MspPostInit>

}
 8001dc8:	bf00      	nop
 8001dca:	3768      	adds	r7, #104	; 0x68
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20001e0c 	.word	0x20001e0c
 8001dd4:	40010000 	.word	0x40010000

08001dd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08e      	sub	sp, #56	; 0x38
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001df8:	463b      	mov	r3, r7
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	611a      	str	r2, [r3, #16]
 8001e06:	615a      	str	r2, [r3, #20]
 8001e08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001e0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e12:	4b2b      	ldr	r3, [pc, #172]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e18:	4b29      	ldr	r3, [pc, #164]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e1e:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e26:	4b26      	ldr	r3, [pc, #152]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2c:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e32:	4823      	ldr	r0, [pc, #140]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001e34:	f00e fbac 	bl	8010590 <HAL_TIM_Base_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001e3e:	f000 fd29 	bl	8002894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e46:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	481c      	ldr	r0, [pc, #112]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001e50:	f00e fef8 	bl	8010c44 <HAL_TIM_ConfigClockSource>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001e5a:	f000 fd1b 	bl	8002894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e5e:	4818      	ldr	r0, [pc, #96]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001e60:	f00e fc66 	bl	8010730 <HAL_TIM_PWM_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001e6a:	f000 fd13 	bl	8002894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4810      	ldr	r0, [pc, #64]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001e7e:	f00f fb6b 	bl	8011558 <HAL_TIMEx_MasterConfigSynchronization>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001e88:	f000 fd04 	bl	8002894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e8c:	2360      	movs	r3, #96	; 0x60
 8001e8e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4807      	ldr	r0, [pc, #28]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001ea4:	f00e fdba 	bl	8010a1c <HAL_TIM_PWM_ConfigChannel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001eae:	f000 fcf1 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001eb2:	4803      	ldr	r0, [pc, #12]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001eb4:	f001 fa76 	bl	80033a4 <HAL_TIM_MspPostInit>

}
 8001eb8:	bf00      	nop
 8001eba:	3738      	adds	r7, #56	; 0x38
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20001e58 	.word	0x20001e58

08001ec4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08e      	sub	sp, #56	; 0x38
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]
 8001ef0:	611a      	str	r2, [r3, #16]
 8001ef2:	615a      	str	r2, [r3, #20]
 8001ef4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ef6:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <MX_TIM3_Init+0xe8>)
 8001ef8:	4a2d      	ldr	r2, [pc, #180]	; (8001fb0 <MX_TIM3_Init+0xec>)
 8001efa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001efc:	4b2b      	ldr	r3, [pc, #172]	; (8001fac <MX_TIM3_Init+0xe8>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f02:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <MX_TIM3_Init+0xe8>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f08:	4b28      	ldr	r3, [pc, #160]	; (8001fac <MX_TIM3_Init+0xe8>)
 8001f0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f10:	4b26      	ldr	r3, [pc, #152]	; (8001fac <MX_TIM3_Init+0xe8>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f16:	4b25      	ldr	r3, [pc, #148]	; (8001fac <MX_TIM3_Init+0xe8>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f1c:	4823      	ldr	r0, [pc, #140]	; (8001fac <MX_TIM3_Init+0xe8>)
 8001f1e:	f00e fb37 	bl	8010590 <HAL_TIM_Base_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001f28:	f000 fcb4 	bl	8002894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f30:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f36:	4619      	mov	r1, r3
 8001f38:	481c      	ldr	r0, [pc, #112]	; (8001fac <MX_TIM3_Init+0xe8>)
 8001f3a:	f00e fe83 	bl	8010c44 <HAL_TIM_ConfigClockSource>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001f44:	f000 fca6 	bl	8002894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f48:	4818      	ldr	r0, [pc, #96]	; (8001fac <MX_TIM3_Init+0xe8>)
 8001f4a:	f00e fbf1 	bl	8010730 <HAL_TIM_PWM_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001f54:	f000 fc9e 	bl	8002894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f60:	f107 031c 	add.w	r3, r7, #28
 8001f64:	4619      	mov	r1, r3
 8001f66:	4811      	ldr	r0, [pc, #68]	; (8001fac <MX_TIM3_Init+0xe8>)
 8001f68:	f00f faf6 	bl	8011558 <HAL_TIMEx_MasterConfigSynchronization>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001f72:	f000 fc8f 	bl	8002894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f76:	2360      	movs	r3, #96	; 0x60
 8001f78:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f86:	463b      	mov	r3, r7
 8001f88:	2200      	movs	r2, #0
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4807      	ldr	r0, [pc, #28]	; (8001fac <MX_TIM3_Init+0xe8>)
 8001f8e:	f00e fd45 	bl	8010a1c <HAL_TIM_PWM_ConfigChannel>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001f98:	f000 fc7c 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <MX_TIM3_Init+0xe8>)
 8001f9e:	f001 fa01 	bl	80033a4 <HAL_TIM_MspPostInit>

}
 8001fa2:	bf00      	nop
 8001fa4:	3738      	adds	r7, #56	; 0x38
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20001ea4 	.word	0x20001ea4
 8001fb0:	40000400 	.word	0x40000400

08001fb4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08e      	sub	sp, #56	; 0x38
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc8:	f107 031c 	add.w	r3, r7, #28
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fd4:	463b      	mov	r3, r7
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]
 8001fe0:	611a      	str	r2, [r3, #16]
 8001fe2:	615a      	str	r2, [r3, #20]
 8001fe4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001fe6:	4b2d      	ldr	r3, [pc, #180]	; (800209c <MX_TIM5_Init+0xe8>)
 8001fe8:	4a2d      	ldr	r2, [pc, #180]	; (80020a0 <MX_TIM5_Init+0xec>)
 8001fea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001fec:	4b2b      	ldr	r3, [pc, #172]	; (800209c <MX_TIM5_Init+0xe8>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff2:	4b2a      	ldr	r3, [pc, #168]	; (800209c <MX_TIM5_Init+0xe8>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001ff8:	4b28      	ldr	r3, [pc, #160]	; (800209c <MX_TIM5_Init+0xe8>)
 8001ffa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ffe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002000:	4b26      	ldr	r3, [pc, #152]	; (800209c <MX_TIM5_Init+0xe8>)
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002006:	4b25      	ldr	r3, [pc, #148]	; (800209c <MX_TIM5_Init+0xe8>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800200c:	4823      	ldr	r0, [pc, #140]	; (800209c <MX_TIM5_Init+0xe8>)
 800200e:	f00e fabf 	bl	8010590 <HAL_TIM_Base_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002018:	f000 fc3c 	bl	8002894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800201c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002020:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002026:	4619      	mov	r1, r3
 8002028:	481c      	ldr	r0, [pc, #112]	; (800209c <MX_TIM5_Init+0xe8>)
 800202a:	f00e fe0b 	bl	8010c44 <HAL_TIM_ConfigClockSource>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002034:	f000 fc2e 	bl	8002894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002038:	4818      	ldr	r0, [pc, #96]	; (800209c <MX_TIM5_Init+0xe8>)
 800203a:	f00e fb79 	bl	8010730 <HAL_TIM_PWM_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002044:	f000 fc26 	bl	8002894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	4811      	ldr	r0, [pc, #68]	; (800209c <MX_TIM5_Init+0xe8>)
 8002058:	f00f fa7e 	bl	8011558 <HAL_TIMEx_MasterConfigSynchronization>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002062:	f000 fc17 	bl	8002894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002066:	2360      	movs	r3, #96	; 0x60
 8002068:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800206e:	2300      	movs	r3, #0
 8002070:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002076:	463b      	mov	r3, r7
 8002078:	220c      	movs	r2, #12
 800207a:	4619      	mov	r1, r3
 800207c:	4807      	ldr	r0, [pc, #28]	; (800209c <MX_TIM5_Init+0xe8>)
 800207e:	f00e fccd 	bl	8010a1c <HAL_TIM_PWM_ConfigChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002088:	f000 fc04 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800208c:	4803      	ldr	r0, [pc, #12]	; (800209c <MX_TIM5_Init+0xe8>)
 800208e:	f001 f989 	bl	80033a4 <HAL_TIM_MspPostInit>

}
 8002092:	bf00      	nop
 8002094:	3738      	adds	r7, #56	; 0x38
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20001ef0 	.word	0x20001ef0
 80020a0:	40000c00 	.word	0x40000c00

080020a4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020aa:	f107 0310 	add.w	r3, r7, #16
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b8:	1d3b      	adds	r3, r7, #4
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <MX_TIM8_Init+0xa0>)
 80020c4:	4a20      	ldr	r2, [pc, #128]	; (8002148 <MX_TIM8_Init+0xa4>)
 80020c6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80020c8:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <MX_TIM8_Init+0xa0>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <MX_TIM8_Init+0xa0>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <MX_TIM8_Init+0xa0>)
 80020d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020da:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <MX_TIM8_Init+0xa0>)
 80020de:	2200      	movs	r2, #0
 80020e0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80020e2:	4b18      	ldr	r3, [pc, #96]	; (8002144 <MX_TIM8_Init+0xa0>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e8:	4b16      	ldr	r3, [pc, #88]	; (8002144 <MX_TIM8_Init+0xa0>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80020ee:	4815      	ldr	r0, [pc, #84]	; (8002144 <MX_TIM8_Init+0xa0>)
 80020f0:	f00e fa4e 	bl	8010590 <HAL_TIM_Base_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80020fa:	f000 fbcb 	bl	8002894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002102:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002104:	f107 0310 	add.w	r3, r7, #16
 8002108:	4619      	mov	r1, r3
 800210a:	480e      	ldr	r0, [pc, #56]	; (8002144 <MX_TIM8_Init+0xa0>)
 800210c:	f00e fd9a 	bl	8010c44 <HAL_TIM_ConfigClockSource>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002116:	f000 fbbd 	bl	8002894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800211a:	2300      	movs	r3, #0
 800211c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002126:	1d3b      	adds	r3, r7, #4
 8002128:	4619      	mov	r1, r3
 800212a:	4806      	ldr	r0, [pc, #24]	; (8002144 <MX_TIM8_Init+0xa0>)
 800212c:	f00f fa14 	bl	8011558 <HAL_TIMEx_MasterConfigSynchronization>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002136:	f000 fbad 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	3720      	adds	r7, #32
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20001f3c 	.word	0x20001f3c
 8002148:	40010400 	.word	0x40010400

0800214c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
 8002160:	615a      	str	r2, [r3, #20]
 8002162:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002164:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <MX_TIM12_Init+0x84>)
 8002166:	4a1b      	ldr	r2, [pc, #108]	; (80021d4 <MX_TIM12_Init+0x88>)
 8002168:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800216a:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <MX_TIM12_Init+0x84>)
 800216c:	2200      	movs	r2, #0
 800216e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002170:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <MX_TIM12_Init+0x84>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002176:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <MX_TIM12_Init+0x84>)
 8002178:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800217c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800217e:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <MX_TIM12_Init+0x84>)
 8002180:	2200      	movs	r2, #0
 8002182:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <MX_TIM12_Init+0x84>)
 8002186:	2200      	movs	r2, #0
 8002188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800218a:	4811      	ldr	r0, [pc, #68]	; (80021d0 <MX_TIM12_Init+0x84>)
 800218c:	f00e fad0 	bl	8010730 <HAL_TIM_PWM_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002196:	f000 fb7d 	bl	8002894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800219a:	2360      	movs	r3, #96	; 0x60
 800219c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	2200      	movs	r2, #0
 80021ae:	4619      	mov	r1, r3
 80021b0:	4807      	ldr	r0, [pc, #28]	; (80021d0 <MX_TIM12_Init+0x84>)
 80021b2:	f00e fc33 	bl	8010a1c <HAL_TIM_PWM_ConfigChannel>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80021bc:	f000 fb6a 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80021c0:	4803      	ldr	r0, [pc, #12]	; (80021d0 <MX_TIM12_Init+0x84>)
 80021c2:	f001 f8ef 	bl	80033a4 <HAL_TIM_MspPostInit>

}
 80021c6:	bf00      	nop
 80021c8:	3720      	adds	r7, #32
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20001f88 	.word	0x20001f88
 80021d4:	40001800 	.word	0x40001800

080021d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021dc:	4b14      	ldr	r3, [pc, #80]	; (8002230 <MX_USART1_UART_Init+0x58>)
 80021de:	4a15      	ldr	r2, [pc, #84]	; (8002234 <MX_USART1_UART_Init+0x5c>)
 80021e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021e2:	4b13      	ldr	r3, [pc, #76]	; (8002230 <MX_USART1_UART_Init+0x58>)
 80021e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <MX_USART1_UART_Init+0x58>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <MX_USART1_UART_Init+0x58>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021f6:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <MX_USART1_UART_Init+0x58>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <MX_USART1_UART_Init+0x58>)
 80021fe:	220c      	movs	r2, #12
 8002200:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <MX_USART1_UART_Init+0x58>)
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <MX_USART1_UART_Init+0x58>)
 800220a:	2200      	movs	r2, #0
 800220c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <MX_USART1_UART_Init+0x58>)
 8002210:	2200      	movs	r2, #0
 8002212:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <MX_USART1_UART_Init+0x58>)
 8002216:	2200      	movs	r2, #0
 8002218:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800221a:	4805      	ldr	r0, [pc, #20]	; (8002230 <MX_USART1_UART_Init+0x58>)
 800221c:	f00f fac6 	bl	80117ac <HAL_UART_Init>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002226:	f000 fb35 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20001fd4 	.word	0x20001fd4
 8002234:	40011000 	.word	0x40011000

08002238 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800223c:	4b14      	ldr	r3, [pc, #80]	; (8002290 <MX_USART6_UART_Init+0x58>)
 800223e:	4a15      	ldr	r2, [pc, #84]	; (8002294 <MX_USART6_UART_Init+0x5c>)
 8002240:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002242:	4b13      	ldr	r3, [pc, #76]	; (8002290 <MX_USART6_UART_Init+0x58>)
 8002244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002248:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <MX_USART6_UART_Init+0x58>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002250:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <MX_USART6_UART_Init+0x58>)
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002256:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <MX_USART6_UART_Init+0x58>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <MX_USART6_UART_Init+0x58>)
 800225e:	220c      	movs	r2, #12
 8002260:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <MX_USART6_UART_Init+0x58>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <MX_USART6_UART_Init+0x58>)
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <MX_USART6_UART_Init+0x58>)
 8002270:	2200      	movs	r2, #0
 8002272:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <MX_USART6_UART_Init+0x58>)
 8002276:	2200      	movs	r2, #0
 8002278:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800227a:	4805      	ldr	r0, [pc, #20]	; (8002290 <MX_USART6_UART_Init+0x58>)
 800227c:	f00f fa96 	bl	80117ac <HAL_UART_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002286:	f000 fb05 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2000205c 	.word	0x2000205c
 8002294:	40011400 	.word	0x40011400

08002298 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800229e:	4b32      	ldr	r3, [pc, #200]	; (8002368 <MX_DMA_Init+0xd0>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a31      	ldr	r2, [pc, #196]	; (8002368 <MX_DMA_Init+0xd0>)
 80022a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b2f      	ldr	r3, [pc, #188]	; (8002368 <MX_DMA_Init+0xd0>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80022b6:	4b2d      	ldr	r3, [pc, #180]	; (800236c <MX_DMA_Init+0xd4>)
 80022b8:	4a2d      	ldr	r2, [pc, #180]	; (8002370 <MX_DMA_Init+0xd8>)
 80022ba:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 80022bc:	4b2b      	ldr	r3, [pc, #172]	; (800236c <MX_DMA_Init+0xd4>)
 80022be:	2200      	movs	r2, #0
 80022c0:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80022c2:	4b2a      	ldr	r3, [pc, #168]	; (800236c <MX_DMA_Init+0xd4>)
 80022c4:	2280      	movs	r2, #128	; 0x80
 80022c6:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 80022c8:	4b28      	ldr	r3, [pc, #160]	; (800236c <MX_DMA_Init+0xd4>)
 80022ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ce:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80022d0:	4b26      	ldr	r3, [pc, #152]	; (800236c <MX_DMA_Init+0xd4>)
 80022d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022d6:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022d8:	4b24      	ldr	r3, [pc, #144]	; (800236c <MX_DMA_Init+0xd4>)
 80022da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022de:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022e0:	4b22      	ldr	r3, [pc, #136]	; (800236c <MX_DMA_Init+0xd4>)
 80022e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022e6:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 80022e8:	4b20      	ldr	r3, [pc, #128]	; (800236c <MX_DMA_Init+0xd4>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 80022ee:	4b1f      	ldr	r3, [pc, #124]	; (800236c <MX_DMA_Init+0xd4>)
 80022f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022f4:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80022f6:	4b1d      	ldr	r3, [pc, #116]	; (800236c <MX_DMA_Init+0xd4>)
 80022f8:	2204      	movs	r2, #4
 80022fa:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <MX_DMA_Init+0xd4>)
 80022fe:	2203      	movs	r2, #3
 8002300:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8002302:	4b1a      	ldr	r3, [pc, #104]	; (800236c <MX_DMA_Init+0xd4>)
 8002304:	2200      	movs	r2, #0
 8002306:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002308:	4b18      	ldr	r3, [pc, #96]	; (800236c <MX_DMA_Init+0xd4>)
 800230a:	2200      	movs	r2, #0
 800230c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 800230e:	4817      	ldr	r0, [pc, #92]	; (800236c <MX_DMA_Init+0xd4>)
 8002310:	f004 fa0a 	bl	8006728 <HAL_DMA_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_DMA_Init+0x86>
  {
    Error_Handler( );
 800231a:	f000 fabb 	bl	8002894 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	2105      	movs	r1, #5
 8002322:	2038      	movs	r0, #56	; 0x38
 8002324:	f003 ff94 	bl	8006250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002328:	2038      	movs	r0, #56	; 0x38
 800232a:	f003 ffad 	bl	8006288 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800232e:	2200      	movs	r2, #0
 8002330:	2105      	movs	r1, #5
 8002332:	2039      	movs	r0, #57	; 0x39
 8002334:	f003 ff8c 	bl	8006250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002338:	2039      	movs	r0, #57	; 0x39
 800233a:	f003 ffa5 	bl	8006288 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2105      	movs	r1, #5
 8002342:	203c      	movs	r0, #60	; 0x3c
 8002344:	f003 ff84 	bl	8006250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002348:	203c      	movs	r0, #60	; 0x3c
 800234a:	f003 ff9d 	bl	8006288 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800234e:	2200      	movs	r2, #0
 8002350:	2105      	movs	r1, #5
 8002352:	2046      	movs	r0, #70	; 0x46
 8002354:	f003 ff7c 	bl	8006250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002358:	2046      	movs	r0, #70	; 0x46
 800235a:	f003 ff95 	bl	8006288 <HAL_NVIC_EnableIRQ>

}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800
 800236c:	200020e4 	.word	0x200020e4
 8002370:	40026410 	.word	0x40026410

08002374 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
 8002388:	615a      	str	r2, [r3, #20]
 800238a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800238c:	4b21      	ldr	r3, [pc, #132]	; (8002414 <MX_FMC_Init+0xa0>)
 800238e:	4a22      	ldr	r2, [pc, #136]	; (8002418 <MX_FMC_Init+0xa4>)
 8002390:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002392:	4b20      	ldr	r3, [pc, #128]	; (8002414 <MX_FMC_Init+0xa0>)
 8002394:	2200      	movs	r2, #0
 8002396:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002398:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <MX_FMC_Init+0xa0>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800239e:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <MX_FMC_Init+0xa0>)
 80023a0:	2204      	movs	r2, #4
 80023a2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80023a4:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <MX_FMC_Init+0xa0>)
 80023a6:	2210      	movs	r2, #16
 80023a8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80023aa:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <MX_FMC_Init+0xa0>)
 80023ac:	2240      	movs	r2, #64	; 0x40
 80023ae:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80023b0:	4b18      	ldr	r3, [pc, #96]	; (8002414 <MX_FMC_Init+0xa0>)
 80023b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023b6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80023b8:	4b16      	ldr	r3, [pc, #88]	; (8002414 <MX_FMC_Init+0xa0>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <MX_FMC_Init+0xa0>)
 80023c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023c4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80023c6:	4b13      	ldr	r3, [pc, #76]	; (8002414 <MX_FMC_Init+0xa0>)
 80023c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023cc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <MX_FMC_Init+0xa0>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80023d4:	2302      	movs	r3, #2
 80023d6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80023d8:	2307      	movs	r3, #7
 80023da:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80023dc:	2304      	movs	r3, #4
 80023de:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80023e0:	2307      	movs	r3, #7
 80023e2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80023e4:	2303      	movs	r3, #3
 80023e6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80023e8:	2302      	movs	r3, #2
 80023ea:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80023ec:	2302      	movs	r3, #2
 80023ee:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80023f0:	1d3b      	adds	r3, r7, #4
 80023f2:	4619      	mov	r1, r3
 80023f4:	4807      	ldr	r0, [pc, #28]	; (8002414 <MX_FMC_Init+0xa0>)
 80023f6:	f00d ffde 	bl	80103b6 <HAL_SDRAM_Init>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002400:	f000 fa48 	bl	8002894 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

	DISCO_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002404:	f240 6003 	movw	r0, #1539	; 0x603
 8002408:	f002 fbe6 	bl	8004bd8 <DISCO_SDRAM_Initialization_sequence>

  /* USER CODE END FMC_Init 2 */
}
 800240c:	bf00      	nop
 800240e:	3720      	adds	r7, #32
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20002144 	.word	0x20002144
 8002418:	a0000140 	.word	0xa0000140

0800241c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b090      	sub	sp, #64	; 0x40
 8002420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002422:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	609a      	str	r2, [r3, #8]
 800242e:	60da      	str	r2, [r3, #12]
 8002430:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002432:	4bb0      	ldr	r3, [pc, #704]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4aaf      	ldr	r2, [pc, #700]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 8002438:	f043 0310 	orr.w	r3, r3, #16
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4bad      	ldr	r3, [pc, #692]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0310 	and.w	r3, r3, #16
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28
 8002448:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800244a:	4baa      	ldr	r3, [pc, #680]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4aa9      	ldr	r2, [pc, #676]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 8002450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	4ba7      	ldr	r3, [pc, #668]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002462:	4ba4      	ldr	r3, [pc, #656]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	4aa3      	ldr	r2, [pc, #652]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 8002468:	f043 0302 	orr.w	r3, r3, #2
 800246c:	6313      	str	r3, [r2, #48]	; 0x30
 800246e:	4ba1      	ldr	r3, [pc, #644]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	623b      	str	r3, [r7, #32]
 8002478:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800247a:	4b9e      	ldr	r3, [pc, #632]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4a9d      	ldr	r2, [pc, #628]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 8002480:	f043 0308 	orr.w	r3, r3, #8
 8002484:	6313      	str	r3, [r2, #48]	; 0x30
 8002486:	4b9b      	ldr	r3, [pc, #620]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	61fb      	str	r3, [r7, #28]
 8002490:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002492:	4b98      	ldr	r3, [pc, #608]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	4a97      	ldr	r2, [pc, #604]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 8002498:	f043 0304 	orr.w	r3, r3, #4
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b95      	ldr	r3, [pc, #596]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	61bb      	str	r3, [r7, #24]
 80024a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024aa:	4b92      	ldr	r3, [pc, #584]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	4a91      	ldr	r2, [pc, #580]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	6313      	str	r3, [r2, #48]	; 0x30
 80024b6:	4b8f      	ldr	r3, [pc, #572]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80024c2:	4b8c      	ldr	r3, [pc, #560]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a8b      	ldr	r2, [pc, #556]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 80024c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b89      	ldr	r3, [pc, #548]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80024da:	4b86      	ldr	r3, [pc, #536]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	4a85      	ldr	r2, [pc, #532]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 80024e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e4:	6313      	str	r3, [r2, #48]	; 0x30
 80024e6:	4b83      	ldr	r3, [pc, #524]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80024f2:	4b80      	ldr	r3, [pc, #512]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	4a7f      	ldr	r2, [pc, #508]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 80024f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024fc:	6313      	str	r3, [r2, #48]	; 0x30
 80024fe:	4b7d      	ldr	r3, [pc, #500]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800250a:	4b7a      	ldr	r3, [pc, #488]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a79      	ldr	r2, [pc, #484]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 8002510:	f043 0320 	orr.w	r3, r3, #32
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b77      	ldr	r3, [pc, #476]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002522:	4b74      	ldr	r3, [pc, #464]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4a73      	ldr	r2, [pc, #460]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 8002528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800252c:	6313      	str	r3, [r2, #48]	; 0x30
 800252e:	4b71      	ldr	r3, [pc, #452]	; (80026f4 <MX_GPIO_Init+0x2d8>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800253a:	2201      	movs	r2, #1
 800253c:	2120      	movs	r1, #32
 800253e:	486e      	ldr	r0, [pc, #440]	; (80026f8 <MX_GPIO_Init+0x2dc>)
 8002540:	f005 fb74 	bl	8007c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 8002544:	2200      	movs	r2, #0
 8002546:	210e      	movs	r1, #14
 8002548:	486c      	ldr	r0, [pc, #432]	; (80026fc <MX_GPIO_Init+0x2e0>)
 800254a:	f005 fb6f 	bl	8007c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800254e:	2201      	movs	r2, #1
 8002550:	2108      	movs	r1, #8
 8002552:	486b      	ldr	r0, [pc, #428]	; (8002700 <MX_GPIO_Init+0x2e4>)
 8002554:	f005 fb6a 	bl	8007c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002558:	2201      	movs	r2, #1
 800255a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800255e:	4867      	ldr	r0, [pc, #412]	; (80026fc <MX_GPIO_Init+0x2e0>)
 8002560:	f005 fb64 	bl	8007c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002564:	2200      	movs	r2, #0
 8002566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800256a:	4866      	ldr	r0, [pc, #408]	; (8002704 <MX_GPIO_Init+0x2e8>)
 800256c:	f005 fb5e 	bl	8007c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002570:	2200      	movs	r2, #0
 8002572:	21c8      	movs	r1, #200	; 0xc8
 8002574:	4864      	ldr	r0, [pc, #400]	; (8002708 <MX_GPIO_Init+0x2ec>)
 8002576:	f005 fb59 	bl	8007c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800257a:	2308      	movs	r3, #8
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800257e:	2300      	movs	r3, #0
 8002580:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800258a:	4619      	mov	r1, r3
 800258c:	485f      	ldr	r0, [pc, #380]	; (800270c <MX_GPIO_Init+0x2f0>)
 800258e:	f005 f87d 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002592:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002598:	2302      	movs	r3, #2
 800259a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a0:	2303      	movs	r3, #3
 80025a2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025a4:	230b      	movs	r3, #11
 80025a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ac:	4619      	mov	r1, r3
 80025ae:	4856      	ldr	r0, [pc, #344]	; (8002708 <MX_GPIO_Init+0x2ec>)
 80025b0:	f005 f86c 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80025b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ba:	2300      	movs	r3, #0
 80025bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80025c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c6:	4619      	mov	r1, r3
 80025c8:	4851      	ldr	r0, [pc, #324]	; (8002710 <MX_GPIO_Init+0x2f4>)
 80025ca:	f005 f85f 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80025ce:	2340      	movs	r3, #64	; 0x40
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80025d2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80025d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80025dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025e0:	4619      	mov	r1, r3
 80025e2:	4845      	ldr	r0, [pc, #276]	; (80026f8 <MX_GPIO_Init+0x2dc>)
 80025e4:	f005 f852 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80025e8:	2320      	movs	r3, #32
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ec:	2301      	movs	r3, #1
 80025ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f4:	2300      	movs	r3, #0
 80025f6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80025f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025fc:	4619      	mov	r1, r3
 80025fe:	483e      	ldr	r0, [pc, #248]	; (80026f8 <MX_GPIO_Init+0x2dc>)
 8002600:	f005 f844 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 8002604:	f241 030e 	movw	r3, #4110	; 0x100e
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260a:	2301      	movs	r3, #1
 800260c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002612:	2300      	movs	r3, #0
 8002614:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002616:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800261a:	4619      	mov	r1, r3
 800261c:	4837      	ldr	r0, [pc, #220]	; (80026fc <MX_GPIO_Init+0x2e0>)
 800261e:	f005 f835 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002622:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002628:	2300      	movs	r3, #0
 800262a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002630:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002634:	4619      	mov	r1, r3
 8002636:	4837      	ldr	r0, [pc, #220]	; (8002714 <MX_GPIO_Init+0x2f8>)
 8002638:	f005 f828 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800263c:	2308      	movs	r3, #8
 800263e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002640:	2301      	movs	r3, #1
 8002642:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002648:	2300      	movs	r3, #0
 800264a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800264c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002650:	4619      	mov	r1, r3
 8002652:	482b      	ldr	r0, [pc, #172]	; (8002700 <MX_GPIO_Init+0x2e4>)
 8002654:	f005 f81a 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002658:	2310      	movs	r3, #16
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800265c:	2300      	movs	r3, #0
 800265e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002664:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002668:	4619      	mov	r1, r3
 800266a:	4823      	ldr	r0, [pc, #140]	; (80026f8 <MX_GPIO_Init+0x2dc>)
 800266c:	f005 f80e 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002670:	f248 0304 	movw	r3, #32772	; 0x8004
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002676:	2300      	movs	r3, #0
 8002678:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800267e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002682:	4619      	mov	r1, r3
 8002684:	481f      	ldr	r0, [pc, #124]	; (8002704 <MX_GPIO_Init+0x2e8>)
 8002686:	f005 f801 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800268a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002690:	2301      	movs	r3, #1
 8002692:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002698:	2300      	movs	r3, #0
 800269a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800269c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026a0:	4619      	mov	r1, r3
 80026a2:	4818      	ldr	r0, [pc, #96]	; (8002704 <MX_GPIO_Init+0x2e8>)
 80026a4:	f004 fff2 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BTN_Pin */
  GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 80026a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ae:	2300      	movs	r3, #0
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 80026b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026ba:	4619      	mov	r1, r3
 80026bc:	480f      	ldr	r0, [pc, #60]	; (80026fc <MX_GPIO_Init+0x2e0>)
 80026be:	f004 ffe5 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80026c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80026cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80026d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026d6:	4619      	mov	r1, r3
 80026d8:	4808      	ldr	r0, [pc, #32]	; (80026fc <MX_GPIO_Init+0x2e0>)
 80026da:	f004 ffd7 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80026de:	23c8      	movs	r3, #200	; 0xc8
 80026e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e2:	2301      	movs	r3, #1
 80026e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	2300      	movs	r3, #0
 80026ec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026f2:	e011      	b.n	8002718 <MX_GPIO_Init+0x2fc>
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40020c00 	.word	0x40020c00
 80026fc:	40022000 	.word	0x40022000
 8002700:	40022800 	.word	0x40022800
 8002704:	40021c00 	.word	0x40021c00
 8002708:	40021800 	.word	0x40021800
 800270c:	40021000 	.word	0x40021000
 8002710:	40022400 	.word	0x40022400
 8002714:	40020800 	.word	0x40020800
 8002718:	4619      	mov	r1, r3
 800271a:	4826      	ldr	r0, [pc, #152]	; (80027b4 <MX_GPIO_Init+0x398>)
 800271c:	f004 ffb6 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002720:	2332      	movs	r3, #50	; 0x32
 8002722:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002724:	2302      	movs	r3, #2
 8002726:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272c:	2303      	movs	r3, #3
 800272e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002730:	230b      	movs	r3, #11
 8002732:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002734:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002738:	4619      	mov	r1, r3
 800273a:	481f      	ldr	r0, [pc, #124]	; (80027b8 <MX_GPIO_Init+0x39c>)
 800273c:	f004 ffa6 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002740:	2304      	movs	r3, #4
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002744:	2300      	movs	r3, #0
 8002746:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800274c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002750:	4619      	mov	r1, r3
 8002752:	4818      	ldr	r0, [pc, #96]	; (80027b4 <MX_GPIO_Init+0x398>)
 8002754:	f004 ff9a 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002758:	2386      	movs	r3, #134	; 0x86
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002764:	2303      	movs	r3, #3
 8002766:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002768:	230b      	movs	r3, #11
 800276a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002770:	4619      	mov	r1, r3
 8002772:	4812      	ldr	r0, [pc, #72]	; (80027bc <MX_GPIO_Init+0x3a0>)
 8002774:	f004 ff8a 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002778:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	2302      	movs	r3, #2
 8002780:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002786:	2300      	movs	r3, #0
 8002788:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800278a:	2305      	movs	r3, #5
 800278c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002792:	4619      	mov	r1, r3
 8002794:	480a      	ldr	r0, [pc, #40]	; (80027c0 <MX_GPIO_Init+0x3a4>)
 8002796:	f004 ff79 	bl	800768c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	2105      	movs	r1, #5
 800279e:	2028      	movs	r0, #40	; 0x28
 80027a0:	f003 fd56 	bl	8006250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80027a4:	2028      	movs	r0, #40	; 0x28
 80027a6:	f003 fd6f 	bl	8006288 <HAL_NVIC_EnableIRQ>

}
 80027aa:	bf00      	nop
 80027ac:	3740      	adds	r7, #64	; 0x40
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40021800 	.word	0x40021800
 80027b8:	40020800 	.word	0x40020800
 80027bc:	40020000 	.word	0x40020000
 80027c0:	40020400 	.word	0x40020400

080027c4 <Error>:

/* USER CODE BEGIN 4 */

void Error(char* msg)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
	printf(msg);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f01b f9bf 	bl	801db50 <iprintf>
	printf("\n");
 80027d2:	200a      	movs	r0, #10
 80027d4:	f01b f9d4 	bl	801db80 <putchar>
	Error_Handler();
 80027d8:	f000 f85c 	bl	8002894 <Error_Handler>
}
 80027dc:	bf00      	nop
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6178      	str	r0, [r7, #20]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80027ec:	f01a fd8a 	bl	801d304 <MX_USB_HOST_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80027f0:	f019 ffba 	bl	801c768 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

	printf("StartDefaultTask\n");
 80027f4:	480b      	ldr	r0, [pc, #44]	; (8002824 <StartDefaultTask+0x40>)
 80027f6:	f01b fa47 	bl	801dc88 <puts>

	//uint32_t PreviousWakeTime = osKernelSysTick();
	/* Infinite loop */
	int i=0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
	for(;;)
	{
		//osDelay(1000);
		//osDelayUntil (&PreviousWakeTime, 500);
		printf("thread alive : %d\n", i++);
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	61fa      	str	r2, [r7, #28]
 8002804:	4619      	mov	r1, r3
 8002806:	4808      	ldr	r0, [pc, #32]	; (8002828 <StartDefaultTask+0x44>)
 8002808:	f01b f9a2 	bl	801db50 <iprintf>
		printf("waiting for signal...\n");
 800280c:	4807      	ldr	r0, [pc, #28]	; (800282c <StartDefaultTask+0x48>)
 800280e:	f01b fa3b 	bl	801dc88 <puts>
		osSignalWait (0x0001, osWaitForever);
 8002812:	463b      	mov	r3, r7
 8002814:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002818:	2101      	movs	r1, #1
 800281a:	4618      	mov	r0, r3
 800281c:	f017 fafa 	bl	8019e14 <osSignalWait>
		printf("thread alive : %d\n", i++);
 8002820:	e7ed      	b.n	80027fe <StartDefaultTask+0x1a>
 8002822:	bf00      	nop
 8002824:	0801eea0 	.word	0x0801eea0
 8002828:	0801eeb4 	.word	0x0801eeb4
 800282c:	0801eec8 	.word	0x0801eec8

08002830 <startUITask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUITask */
void startUITask(void const * argument)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUITask */

	osDelay(200);
 8002838:	20c8      	movs	r0, #200	; 0xc8
 800283a:	f017 fa97 	bl	8019d6c <osDelay>
	printf("StartLedTask\n");
 800283e:	480a      	ldr	r0, [pc, #40]	; (8002868 <startUITask+0x38>)
 8002840:	f01b fa22 	bl	801dc88 <puts>
	// PB_GetState() = GPIO_PIN_SET ou GPIO_PIN_RESET

	/* Infinite loop */
	for(;;)
	{
		osDelay(900);
 8002844:	f44f 7061 	mov.w	r0, #900	; 0x384
 8002848:	f017 fa90 	bl	8019d6c <osDelay>
		LED_Toggle();
 800284c:	f001 faca 	bl	8003de4 <LED_Toggle>
		if (PB_GetState() == GPIO_PIN_SET ) osSignalSet(defaultTaskHandle, 0x0001);
 8002850:	f001 fad2 	bl	8003df8 <PB_GetState>
 8002854:	4603      	mov	r3, r0
 8002856:	2b01      	cmp	r3, #1
 8002858:	d1f4      	bne.n	8002844 <startUITask+0x14>
 800285a:	4b04      	ldr	r3, [pc, #16]	; (800286c <startUITask+0x3c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2101      	movs	r1, #1
 8002860:	4618      	mov	r0, r3
 8002862:	f017 fa97 	bl	8019d94 <osSignalSet>
		osDelay(900);
 8002866:	e7ed      	b.n	8002844 <startUITask+0x14>
 8002868:	0801eee0 	.word	0x0801eee0
 800286c:	20002178 	.word	0x20002178

08002870 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a04      	ldr	r2, [pc, #16]	; (8002890 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d101      	bne.n	8002886 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002882:	f003 f931 	bl	8005ae8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40001000 	.word	0x40001000

08002894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	while (1)
	{
		LED_Toggle();
 8002898:	f001 faa4 	bl	8003de4 <LED_Toggle>
		HAL_Delay(100);
 800289c:	2064      	movs	r0, #100	; 0x64
 800289e:	f003 f943 	bl	8005b28 <HAL_Delay>
		LED_Toggle();
 80028a2:	e7f9      	b.n	8002898 <Error_Handler+0x4>

080028a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80028aa:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <HAL_MspInit+0x4c>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	4a10      	ldr	r2, [pc, #64]	; (80028f0 <HAL_MspInit+0x4c>)
 80028b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b4:	6413      	str	r3, [r2, #64]	; 0x40
 80028b6:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <HAL_MspInit+0x4c>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c2:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_MspInit+0x4c>)
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <HAL_MspInit+0x4c>)
 80028c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028cc:	6453      	str	r3, [r2, #68]	; 0x44
 80028ce:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <HAL_MspInit+0x4c>)
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028da:	2200      	movs	r2, #0
 80028dc:	210f      	movs	r1, #15
 80028de:	f06f 0001 	mvn.w	r0, #1
 80028e2:	f003 fcb5 	bl	8006250 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800

080028f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	; 0x28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a21      	ldr	r2, [pc, #132]	; (8002998 <HAL_ADC_MspInit+0xa4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d13c      	bne.n	8002990 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002916:	4b21      	ldr	r3, [pc, #132]	; (800299c <HAL_ADC_MspInit+0xa8>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	4a20      	ldr	r2, [pc, #128]	; (800299c <HAL_ADC_MspInit+0xa8>)
 800291c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002920:	6453      	str	r3, [r2, #68]	; 0x44
 8002922:	4b1e      	ldr	r3, [pc, #120]	; (800299c <HAL_ADC_MspInit+0xa8>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800292e:	4b1b      	ldr	r3, [pc, #108]	; (800299c <HAL_ADC_MspInit+0xa8>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4a1a      	ldr	r2, [pc, #104]	; (800299c <HAL_ADC_MspInit+0xa8>)
 8002934:	f043 0320 	orr.w	r3, r3, #32
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4b18      	ldr	r3, [pc, #96]	; (800299c <HAL_ADC_MspInit+0xa8>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0320 	and.w	r3, r3, #32
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <HAL_ADC_MspInit+0xa8>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	4a14      	ldr	r2, [pc, #80]	; (800299c <HAL_ADC_MspInit+0xa8>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	6313      	str	r3, [r2, #48]	; 0x30
 8002952:	4b12      	ldr	r3, [pc, #72]	; (800299c <HAL_ADC_MspInit+0xa8>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800295e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002962:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002964:	2303      	movs	r3, #3
 8002966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	4619      	mov	r1, r3
 8002972:	480b      	ldr	r0, [pc, #44]	; (80029a0 <HAL_ADC_MspInit+0xac>)
 8002974:	f004 fe8a 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002978:	2301      	movs	r3, #1
 800297a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800297c:	2303      	movs	r3, #3
 800297e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	4619      	mov	r1, r3
 800298a:	4806      	ldr	r0, [pc, #24]	; (80029a4 <HAL_ADC_MspInit+0xb0>)
 800298c:	f004 fe7e 	bl	800768c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002990:	bf00      	nop
 8002992:	3728      	adds	r7, #40	; 0x28
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40012200 	.word	0x40012200
 800299c:	40023800 	.word	0x40023800
 80029a0:	40021400 	.word	0x40021400
 80029a4:	40020000 	.word	0x40020000

080029a8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <HAL_CRC_MspInit+0x38>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d10b      	bne.n	80029d2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80029ba:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <HAL_CRC_MspInit+0x3c>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	4a09      	ldr	r2, [pc, #36]	; (80029e4 <HAL_CRC_MspInit+0x3c>)
 80029c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029c4:	6313      	str	r3, [r2, #48]	; 0x30
 80029c6:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <HAL_CRC_MspInit+0x3c>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40023000 	.word	0x40023000
 80029e4:	40023800 	.word	0x40023800

080029e8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08e      	sub	sp, #56	; 0x38
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a6c      	ldr	r2, [pc, #432]	; (8002bb8 <HAL_DCMI_MspInit+0x1d0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	f040 80d2 	bne.w	8002bb0 <HAL_DCMI_MspInit+0x1c8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002a0c:	4b6b      	ldr	r3, [pc, #428]	; (8002bbc <HAL_DCMI_MspInit+0x1d4>)
 8002a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a10:	4a6a      	ldr	r2, [pc, #424]	; (8002bbc <HAL_DCMI_MspInit+0x1d4>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	6353      	str	r3, [r2, #52]	; 0x34
 8002a18:	4b68      	ldr	r3, [pc, #416]	; (8002bbc <HAL_DCMI_MspInit+0x1d4>)
 8002a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	623b      	str	r3, [r7, #32]
 8002a22:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a24:	4b65      	ldr	r3, [pc, #404]	; (8002bbc <HAL_DCMI_MspInit+0x1d4>)
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	4a64      	ldr	r2, [pc, #400]	; (8002bbc <HAL_DCMI_MspInit+0x1d4>)
 8002a2a:	f043 0310 	orr.w	r3, r3, #16
 8002a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a30:	4b62      	ldr	r3, [pc, #392]	; (8002bbc <HAL_DCMI_MspInit+0x1d4>)
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a3c:	4b5f      	ldr	r3, [pc, #380]	; (8002bbc <HAL_DCMI_MspInit+0x1d4>)
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	4a5e      	ldr	r2, [pc, #376]	; (8002bbc <HAL_DCMI_MspInit+0x1d4>)
 8002a42:	f043 0308 	orr.w	r3, r3, #8
 8002a46:	6313      	str	r3, [r2, #48]	; 0x30
 8002a48:	4b5c      	ldr	r3, [pc, #368]	; (8002bbc <HAL_DCMI_MspInit+0x1d4>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a54:	4b59      	ldr	r3, [pc, #356]	; (8002bbc <HAL_DCMI_MspInit+0x1d4>)
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	4a58      	ldr	r2, [pc, #352]	; (8002bbc <HAL_DCMI_MspInit+0x1d4>)
 8002a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a60:	4b56      	ldr	r3, [pc, #344]	; (8002bbc <HAL_DCMI_MspInit+0x1d4>)
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a6c:	4b53      	ldr	r3, [pc, #332]	; (8002bbc <HAL_DCMI_MspInit+0x1d4>)
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	4a52      	ldr	r2, [pc, #328]	; (8002bbc <HAL_DCMI_MspInit+0x1d4>)
 8002a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a76:	6313      	str	r3, [r2, #48]	; 0x30
 8002a78:	4b50      	ldr	r3, [pc, #320]	; (8002bbc <HAL_DCMI_MspInit+0x1d4>)
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a84:	4b4d      	ldr	r3, [pc, #308]	; (8002bbc <HAL_DCMI_MspInit+0x1d4>)
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	4a4c      	ldr	r2, [pc, #304]	; (8002bbc <HAL_DCMI_MspInit+0x1d4>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a90:	4b4a      	ldr	r3, [pc, #296]	; (8002bbc <HAL_DCMI_MspInit+0x1d4>)
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002a9c:	2360      	movs	r3, #96	; 0x60
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002aac:	230d      	movs	r3, #13
 8002aae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4842      	ldr	r0, [pc, #264]	; (8002bc0 <HAL_DCMI_MspInit+0x1d8>)
 8002ab8:	f004 fde8 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002abc:	2308      	movs	r3, #8
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002acc:	230d      	movs	r3, #13
 8002ace:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	483b      	ldr	r0, [pc, #236]	; (8002bc4 <HAL_DCMI_MspInit+0x1dc>)
 8002ad8:	f004 fdd8 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002adc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aea:	2300      	movs	r3, #0
 8002aec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002aee:	230d      	movs	r3, #13
 8002af0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002af6:	4619      	mov	r1, r3
 8002af8:	4833      	ldr	r0, [pc, #204]	; (8002bc8 <HAL_DCMI_MspInit+0x1e0>)
 8002afa:	f004 fdc7 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002afe:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b04:	2302      	movs	r3, #2
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002b10:	230d      	movs	r3, #13
 8002b12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b18:	4619      	mov	r1, r3
 8002b1a:	482c      	ldr	r0, [pc, #176]	; (8002bcc <HAL_DCMI_MspInit+0x1e4>)
 8002b1c:	f004 fdb6 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002b20:	2350      	movs	r3, #80	; 0x50
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b24:	2302      	movs	r3, #2
 8002b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002b30:	230d      	movs	r3, #13
 8002b32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4825      	ldr	r0, [pc, #148]	; (8002bd0 <HAL_DCMI_MspInit+0x1e8>)
 8002b3c:	f004 fda6 	bl	800768c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8002b40:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <HAL_DCMI_MspInit+0x1ec>)
 8002b42:	4a25      	ldr	r2, [pc, #148]	; (8002bd8 <HAL_DCMI_MspInit+0x1f0>)
 8002b44:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8002b46:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <HAL_DCMI_MspInit+0x1ec>)
 8002b48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b4c:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b4e:	4b21      	ldr	r3, [pc, #132]	; (8002bd4 <HAL_DCMI_MspInit+0x1ec>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b54:	4b1f      	ldr	r3, [pc, #124]	; (8002bd4 <HAL_DCMI_MspInit+0x1ec>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002b5a:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <HAL_DCMI_MspInit+0x1ec>)
 8002b5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b60:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b62:	4b1c      	ldr	r3, [pc, #112]	; (8002bd4 <HAL_DCMI_MspInit+0x1ec>)
 8002b64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b68:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b6a:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <HAL_DCMI_MspInit+0x1ec>)
 8002b6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b70:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8002b72:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <HAL_DCMI_MspInit+0x1ec>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8002b78:	4b16      	ldr	r3, [pc, #88]	; (8002bd4 <HAL_DCMI_MspInit+0x1ec>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b7e:	4b15      	ldr	r3, [pc, #84]	; (8002bd4 <HAL_DCMI_MspInit+0x1ec>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002b84:	4813      	ldr	r0, [pc, #76]	; (8002bd4 <HAL_DCMI_MspInit+0x1ec>)
 8002b86:	f003 fdcf 	bl	8006728 <HAL_DMA_Init>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_DCMI_MspInit+0x1ac>
    {
      Error_Handler();
 8002b90:	f7ff fe80 	bl	8002894 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a0f      	ldr	r2, [pc, #60]	; (8002bd4 <HAL_DCMI_MspInit+0x1ec>)
 8002b98:	649a      	str	r2, [r3, #72]	; 0x48
 8002b9a:	4a0e      	ldr	r2, [pc, #56]	; (8002bd4 <HAL_DCMI_MspInit+0x1ec>)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2105      	movs	r1, #5
 8002ba4:	204e      	movs	r0, #78	; 0x4e
 8002ba6:	f003 fb53 	bl	8006250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8002baa:	204e      	movs	r0, #78	; 0x4e
 8002bac:	f003 fb6c 	bl	8006288 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002bb0:	bf00      	nop
 8002bb2:	3738      	adds	r7, #56	; 0x38
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	50050000 	.word	0x50050000
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	40020c00 	.word	0x40020c00
 8002bc8:	40021800 	.word	0x40021800
 8002bcc:	40021c00 	.word	0x40021c00
 8002bd0:	40020000 	.word	0x40020000
 8002bd4:	20001918 	.word	0x20001918
 8002bd8:	40026428 	.word	0x40026428

08002bdc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a0d      	ldr	r2, [pc, #52]	; (8002c20 <HAL_DMA2D_MspInit+0x44>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d113      	bne.n	8002c16 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <HAL_DMA2D_MspInit+0x48>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a0c      	ldr	r2, [pc, #48]	; (8002c24 <HAL_DMA2D_MspInit+0x48>)
 8002bf4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <HAL_DMA2D_MspInit+0x48>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002c06:	2200      	movs	r2, #0
 8002c08:	2105      	movs	r1, #5
 8002c0a:	205a      	movs	r0, #90	; 0x5a
 8002c0c:	f003 fb20 	bl	8006250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002c10:	205a      	movs	r0, #90	; 0x5a
 8002c12:	f003 fb39 	bl	8006288 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	4002b000 	.word	0x4002b000
 8002c24:	40023800 	.word	0x40023800

08002c28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b0ac      	sub	sp, #176	; 0xb0
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	60da      	str	r2, [r3, #12]
 8002c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c40:	f107 0318 	add.w	r3, r7, #24
 8002c44:	2284      	movs	r2, #132	; 0x84
 8002c46:	2100      	movs	r1, #0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f01a fe99 	bl	801d980 <memset>
  if(hi2c->Instance==I2C1)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a44      	ldr	r2, [pc, #272]	; (8002d64 <HAL_I2C_MspInit+0x13c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d13d      	bne.n	8002cd4 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c62:	f107 0318 	add.w	r3, r7, #24
 8002c66:	4618      	mov	r0, r3
 8002c68:	f00a fe20 	bl	800d8ac <HAL_RCCEx_PeriphCLKConfig>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002c72:	f7ff fe0f 	bl	8002894 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c76:	4b3c      	ldr	r3, [pc, #240]	; (8002d68 <HAL_I2C_MspInit+0x140>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a3b      	ldr	r2, [pc, #236]	; (8002d68 <HAL_I2C_MspInit+0x140>)
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b39      	ldr	r3, [pc, #228]	; (8002d68 <HAL_I2C_MspInit+0x140>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002c8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c96:	2312      	movs	r3, #18
 8002c98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ca8:	2304      	movs	r3, #4
 8002caa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	482d      	ldr	r0, [pc, #180]	; (8002d6c <HAL_I2C_MspInit+0x144>)
 8002cb6:	f004 fce9 	bl	800768c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cba:	4b2b      	ldr	r3, [pc, #172]	; (8002d68 <HAL_I2C_MspInit+0x140>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	4a2a      	ldr	r2, [pc, #168]	; (8002d68 <HAL_I2C_MspInit+0x140>)
 8002cc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc6:	4b28      	ldr	r3, [pc, #160]	; (8002d68 <HAL_I2C_MspInit+0x140>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002cd2:	e042      	b.n	8002d5a <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a25      	ldr	r2, [pc, #148]	; (8002d70 <HAL_I2C_MspInit+0x148>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d13d      	bne.n	8002d5a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002cde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ce2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cea:	f107 0318 	add.w	r3, r7, #24
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f00a fddc 	bl	800d8ac <HAL_RCCEx_PeriphCLKConfig>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8002cfa:	f7ff fdcb 	bl	8002894 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cfe:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <HAL_I2C_MspInit+0x140>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	4a19      	ldr	r2, [pc, #100]	; (8002d68 <HAL_I2C_MspInit+0x140>)
 8002d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d08:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0a:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <HAL_I2C_MspInit+0x140>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002d16:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002d1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d1e:	2312      	movs	r3, #18
 8002d20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d24:	2301      	movs	r3, #1
 8002d26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d30:	2304      	movs	r3, #4
 8002d32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	480d      	ldr	r0, [pc, #52]	; (8002d74 <HAL_I2C_MspInit+0x14c>)
 8002d3e:	f004 fca5 	bl	800768c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d42:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <HAL_I2C_MspInit+0x140>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	4a08      	ldr	r2, [pc, #32]	; (8002d68 <HAL_I2C_MspInit+0x140>)
 8002d48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_I2C_MspInit+0x140>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	68bb      	ldr	r3, [r7, #8]
}
 8002d5a:	bf00      	nop
 8002d5c:	37b0      	adds	r7, #176	; 0xb0
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40005400 	.word	0x40005400
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40020400 	.word	0x40020400
 8002d70:	40005c00 	.word	0x40005c00
 8002d74:	40021c00 	.word	0x40021c00

08002d78 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a15      	ldr	r2, [pc, #84]	; (8002ddc <HAL_I2C_MspDeInit+0x64>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d110      	bne.n	8002dac <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002d8a:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <HAL_I2C_MspDeInit+0x68>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <HAL_I2C_MspDeInit+0x68>)
 8002d90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d94:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8002d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d9a:	4812      	ldr	r0, [pc, #72]	; (8002de4 <HAL_I2C_MspDeInit+0x6c>)
 8002d9c:	f004 fe22 	bl	80079e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8002da0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002da4:	480f      	ldr	r0, [pc, #60]	; (8002de4 <HAL_I2C_MspDeInit+0x6c>)
 8002da6:	f004 fe1d 	bl	80079e4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002daa:	e013      	b.n	8002dd4 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a0d      	ldr	r2, [pc, #52]	; (8002de8 <HAL_I2C_MspDeInit+0x70>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d10e      	bne.n	8002dd4 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <HAL_I2C_MspDeInit+0x68>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	4a09      	ldr	r2, [pc, #36]	; (8002de0 <HAL_I2C_MspDeInit+0x68>)
 8002dbc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002dc0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8002dc2:	2180      	movs	r1, #128	; 0x80
 8002dc4:	4809      	ldr	r0, [pc, #36]	; (8002dec <HAL_I2C_MspDeInit+0x74>)
 8002dc6:	f004 fe0d 	bl	80079e4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8002dca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dce:	4807      	ldr	r0, [pc, #28]	; (8002dec <HAL_I2C_MspDeInit+0x74>)
 8002dd0:	f004 fe08 	bl	80079e4 <HAL_GPIO_DeInit>
}
 8002dd4:	bf00      	nop
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40005400 	.word	0x40005400
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40020400 	.word	0x40020400
 8002de8:	40005c00 	.word	0x40005c00
 8002dec:	40021c00 	.word	0x40021c00

08002df0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08e      	sub	sp, #56	; 0x38
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	60da      	str	r2, [r3, #12]
 8002e06:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a51      	ldr	r2, [pc, #324]	; (8002f54 <HAL_LTDC_MspInit+0x164>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	f040 809b 	bne.w	8002f4a <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002e14:	4b50      	ldr	r3, [pc, #320]	; (8002f58 <HAL_LTDC_MspInit+0x168>)
 8002e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e18:	4a4f      	ldr	r2, [pc, #316]	; (8002f58 <HAL_LTDC_MspInit+0x168>)
 8002e1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e1e:	6453      	str	r3, [r2, #68]	; 0x44
 8002e20:	4b4d      	ldr	r3, [pc, #308]	; (8002f58 <HAL_LTDC_MspInit+0x168>)
 8002e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e28:	623b      	str	r3, [r7, #32]
 8002e2a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e2c:	4b4a      	ldr	r3, [pc, #296]	; (8002f58 <HAL_LTDC_MspInit+0x168>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	4a49      	ldr	r2, [pc, #292]	; (8002f58 <HAL_LTDC_MspInit+0x168>)
 8002e32:	f043 0310 	orr.w	r3, r3, #16
 8002e36:	6313      	str	r3, [r2, #48]	; 0x30
 8002e38:	4b47      	ldr	r3, [pc, #284]	; (8002f58 <HAL_LTDC_MspInit+0x168>)
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002e44:	4b44      	ldr	r3, [pc, #272]	; (8002f58 <HAL_LTDC_MspInit+0x168>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	4a43      	ldr	r2, [pc, #268]	; (8002f58 <HAL_LTDC_MspInit+0x168>)
 8002e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e50:	4b41      	ldr	r3, [pc, #260]	; (8002f58 <HAL_LTDC_MspInit+0x168>)
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002e5c:	4b3e      	ldr	r3, [pc, #248]	; (8002f58 <HAL_LTDC_MspInit+0x168>)
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	4a3d      	ldr	r2, [pc, #244]	; (8002f58 <HAL_LTDC_MspInit+0x168>)
 8002e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e66:	6313      	str	r3, [r2, #48]	; 0x30
 8002e68:	4b3b      	ldr	r3, [pc, #236]	; (8002f58 <HAL_LTDC_MspInit+0x168>)
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e74:	4b38      	ldr	r3, [pc, #224]	; (8002f58 <HAL_LTDC_MspInit+0x168>)
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	4a37      	ldr	r2, [pc, #220]	; (8002f58 <HAL_LTDC_MspInit+0x168>)
 8002e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e80:	4b35      	ldr	r3, [pc, #212]	; (8002f58 <HAL_LTDC_MspInit+0x168>)
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e8c:	4b32      	ldr	r3, [pc, #200]	; (8002f58 <HAL_LTDC_MspInit+0x168>)
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	4a31      	ldr	r2, [pc, #196]	; (8002f58 <HAL_LTDC_MspInit+0x168>)
 8002e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e96:	6313      	str	r3, [r2, #48]	; 0x30
 8002e98:	4b2f      	ldr	r3, [pc, #188]	; (8002f58 <HAL_LTDC_MspInit+0x168>)
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002ea4:	2310      	movs	r3, #16
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002eb4:	230e      	movs	r3, #14
 8002eb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4827      	ldr	r0, [pc, #156]	; (8002f5c <HAL_LTDC_MspInit+0x16c>)
 8002ec0:	f004 fbe4 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002ec4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ed6:	230e      	movs	r3, #14
 8002ed8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ede:	4619      	mov	r1, r3
 8002ee0:	481f      	ldr	r0, [pc, #124]	; (8002f60 <HAL_LTDC_MspInit+0x170>)
 8002ee2:	f004 fbd3 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002ee6:	23f7      	movs	r3, #247	; 0xf7
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eea:	2302      	movs	r3, #2
 8002eec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ef6:	230e      	movs	r3, #14
 8002ef8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002efe:	4619      	mov	r1, r3
 8002f00:	4818      	ldr	r0, [pc, #96]	; (8002f64 <HAL_LTDC_MspInit+0x174>)
 8002f02:	f004 fbc3 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f14:	2300      	movs	r3, #0
 8002f16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002f18:	2309      	movs	r3, #9
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f20:	4619      	mov	r1, r3
 8002f22:	4811      	ldr	r0, [pc, #68]	; (8002f68 <HAL_LTDC_MspInit+0x178>)
 8002f24:	f004 fbb2 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002f28:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f36:	2300      	movs	r3, #0
 8002f38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f3a:	230e      	movs	r3, #14
 8002f3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f42:	4619      	mov	r1, r3
 8002f44:	4809      	ldr	r0, [pc, #36]	; (8002f6c <HAL_LTDC_MspInit+0x17c>)
 8002f46:	f004 fba1 	bl	800768c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002f4a:	bf00      	nop
 8002f4c:	3738      	adds	r7, #56	; 0x38
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40016800 	.word	0x40016800
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40022400 	.word	0x40022400
 8002f64:	40022800 	.word	0x40022800
 8002f68:	40021800 	.word	0x40021800
 8002f6c:	40022000 	.word	0x40022000

08002f70 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08c      	sub	sp, #48	; 0x30
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	f107 031c 	add.w	r3, r7, #28
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a3f      	ldr	r2, [pc, #252]	; (800308c <HAL_QSPI_MspInit+0x11c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d178      	bne.n	8003084 <HAL_QSPI_MspInit+0x114>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002f92:	4b3f      	ldr	r3, [pc, #252]	; (8003090 <HAL_QSPI_MspInit+0x120>)
 8002f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f96:	4a3e      	ldr	r2, [pc, #248]	; (8003090 <HAL_QSPI_MspInit+0x120>)
 8002f98:	f043 0302 	orr.w	r3, r3, #2
 8002f9c:	6393      	str	r3, [r2, #56]	; 0x38
 8002f9e:	4b3c      	ldr	r3, [pc, #240]	; (8003090 <HAL_QSPI_MspInit+0x120>)
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	61bb      	str	r3, [r7, #24]
 8002fa8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002faa:	4b39      	ldr	r3, [pc, #228]	; (8003090 <HAL_QSPI_MspInit+0x120>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	4a38      	ldr	r2, [pc, #224]	; (8003090 <HAL_QSPI_MspInit+0x120>)
 8002fb0:	f043 0310 	orr.w	r3, r3, #16
 8002fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb6:	4b36      	ldr	r3, [pc, #216]	; (8003090 <HAL_QSPI_MspInit+0x120>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc2:	4b33      	ldr	r3, [pc, #204]	; (8003090 <HAL_QSPI_MspInit+0x120>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	4a32      	ldr	r2, [pc, #200]	; (8003090 <HAL_QSPI_MspInit+0x120>)
 8002fc8:	f043 0302 	orr.w	r3, r3, #2
 8002fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fce:	4b30      	ldr	r3, [pc, #192]	; (8003090 <HAL_QSPI_MspInit+0x120>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fda:	4b2d      	ldr	r3, [pc, #180]	; (8003090 <HAL_QSPI_MspInit+0x120>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	4a2c      	ldr	r2, [pc, #176]	; (8003090 <HAL_QSPI_MspInit+0x120>)
 8002fe0:	f043 0308 	orr.w	r3, r3, #8
 8002fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe6:	4b2a      	ldr	r3, [pc, #168]	; (8003090 <HAL_QSPI_MspInit+0x120>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002ff2:	2304      	movs	r3, #4
 8002ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffe:	2303      	movs	r3, #3
 8003000:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003002:	2309      	movs	r3, #9
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003006:	f107 031c 	add.w	r3, r7, #28
 800300a:	4619      	mov	r1, r3
 800300c:	4821      	ldr	r0, [pc, #132]	; (8003094 <HAL_QSPI_MspInit+0x124>)
 800300e:	f004 fb3d 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003012:	2340      	movs	r3, #64	; 0x40
 8003014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003016:	2302      	movs	r3, #2
 8003018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301a:	2300      	movs	r3, #0
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800301e:	2303      	movs	r3, #3
 8003020:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003022:	230a      	movs	r3, #10
 8003024:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003026:	f107 031c 	add.w	r3, r7, #28
 800302a:	4619      	mov	r1, r3
 800302c:	481a      	ldr	r0, [pc, #104]	; (8003098 <HAL_QSPI_MspInit+0x128>)
 800302e:	f004 fb2d 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003032:	2304      	movs	r3, #4
 8003034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003036:	2302      	movs	r3, #2
 8003038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800303e:	2303      	movs	r3, #3
 8003040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003042:	2309      	movs	r3, #9
 8003044:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003046:	f107 031c 	add.w	r3, r7, #28
 800304a:	4619      	mov	r1, r3
 800304c:	4812      	ldr	r0, [pc, #72]	; (8003098 <HAL_QSPI_MspInit+0x128>)
 800304e:	f004 fb1d 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003052:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003058:	2302      	movs	r3, #2
 800305a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003060:	2303      	movs	r3, #3
 8003062:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003064:	2309      	movs	r3, #9
 8003066:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003068:	f107 031c 	add.w	r3, r7, #28
 800306c:	4619      	mov	r1, r3
 800306e:	480b      	ldr	r0, [pc, #44]	; (800309c <HAL_QSPI_MspInit+0x12c>)
 8003070:	f004 fb0c 	bl	800768c <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8003074:	2200      	movs	r2, #0
 8003076:	2105      	movs	r1, #5
 8003078:	205c      	movs	r0, #92	; 0x5c
 800307a:	f003 f8e9 	bl	8006250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800307e:	205c      	movs	r0, #92	; 0x5c
 8003080:	f003 f902 	bl	8006288 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003084:	bf00      	nop
 8003086:	3730      	adds	r7, #48	; 0x30
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	a0001000 	.word	0xa0001000
 8003090:	40023800 	.word	0x40023800
 8003094:	40021000 	.word	0x40021000
 8003098:	40020400 	.word	0x40020400
 800309c:	40020c00 	.word	0x40020c00

080030a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b0a4      	sub	sp, #144	; 0x90
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030a8:	f107 030c 	add.w	r3, r7, #12
 80030ac:	2284      	movs	r2, #132	; 0x84
 80030ae:	2100      	movs	r1, #0
 80030b0:	4618      	mov	r0, r3
 80030b2:	f01a fc65 	bl	801d980 <memset>
  if(hrtc->Instance==RTC)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a0e      	ldr	r2, [pc, #56]	; (80030f4 <HAL_RTC_MspInit+0x54>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d114      	bne.n	80030ea <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80030c0:	2320      	movs	r3, #32
 80030c2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80030c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030ca:	f107 030c 	add.w	r3, r7, #12
 80030ce:	4618      	mov	r0, r3
 80030d0:	f00a fbec 	bl	800d8ac <HAL_RCCEx_PeriphCLKConfig>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80030da:	f7ff fbdb 	bl	8002894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_RTC_MspInit+0x58>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e2:	4a05      	ldr	r2, [pc, #20]	; (80030f8 <HAL_RTC_MspInit+0x58>)
 80030e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030e8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80030ea:	bf00      	nop
 80030ec:	3790      	adds	r7, #144	; 0x90
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40002800 	.word	0x40002800
 80030f8:	40023800 	.word	0x40023800

080030fc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08a      	sub	sp, #40	; 0x28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003104:	f107 0314 	add.w	r3, r7, #20
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a25      	ldr	r2, [pc, #148]	; (80031b0 <HAL_SD_MspInit+0xb4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d144      	bne.n	80031a8 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800311e:	4b25      	ldr	r3, [pc, #148]	; (80031b4 <HAL_SD_MspInit+0xb8>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	4a24      	ldr	r2, [pc, #144]	; (80031b4 <HAL_SD_MspInit+0xb8>)
 8003124:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003128:	6453      	str	r3, [r2, #68]	; 0x44
 800312a:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <HAL_SD_MspInit+0xb8>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003136:	4b1f      	ldr	r3, [pc, #124]	; (80031b4 <HAL_SD_MspInit+0xb8>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	4a1e      	ldr	r2, [pc, #120]	; (80031b4 <HAL_SD_MspInit+0xb8>)
 800313c:	f043 0304 	orr.w	r3, r3, #4
 8003140:	6313      	str	r3, [r2, #48]	; 0x30
 8003142:	4b1c      	ldr	r3, [pc, #112]	; (80031b4 <HAL_SD_MspInit+0xb8>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800314e:	4b19      	ldr	r3, [pc, #100]	; (80031b4 <HAL_SD_MspInit+0xb8>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4a18      	ldr	r2, [pc, #96]	; (80031b4 <HAL_SD_MspInit+0xb8>)
 8003154:	f043 0308 	orr.w	r3, r3, #8
 8003158:	6313      	str	r3, [r2, #48]	; 0x30
 800315a:	4b16      	ldr	r3, [pc, #88]	; (80031b4 <HAL_SD_MspInit+0xb8>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003166:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800316a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316c:	2302      	movs	r3, #2
 800316e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003174:	2303      	movs	r3, #3
 8003176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003178:	230c      	movs	r3, #12
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800317c:	f107 0314 	add.w	r3, r7, #20
 8003180:	4619      	mov	r1, r3
 8003182:	480d      	ldr	r0, [pc, #52]	; (80031b8 <HAL_SD_MspInit+0xbc>)
 8003184:	f004 fa82 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003188:	2304      	movs	r3, #4
 800318a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318c:	2302      	movs	r3, #2
 800318e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	2300      	movs	r3, #0
 8003192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003194:	2303      	movs	r3, #3
 8003196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003198:	230c      	movs	r3, #12
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800319c:	f107 0314 	add.w	r3, r7, #20
 80031a0:	4619      	mov	r1, r3
 80031a2:	4806      	ldr	r0, [pc, #24]	; (80031bc <HAL_SD_MspInit+0xc0>)
 80031a4:	f004 fa72 	bl	800768c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80031a8:	bf00      	nop
 80031aa:	3728      	adds	r7, #40	; 0x28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40012c00 	.word	0x40012c00
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40020800 	.word	0x40020800
 80031bc:	40020c00 	.word	0x40020c00

080031c0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b0aa      	sub	sp, #168	; 0xa8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031d8:	f107 0310 	add.w	r3, r7, #16
 80031dc:	2284      	movs	r2, #132	; 0x84
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f01a fbcd 	bl	801d980 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80031ee:	d143      	bne.n	8003278 <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 80031f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80031f6:	2364      	movs	r3, #100	; 0x64
 80031f8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80031fa:	2302      	movs	r3, #2
 80031fc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80031fe:	2302      	movs	r3, #2
 8003200:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8003202:	2302      	movs	r3, #2
 8003204:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8003206:	2301      	movs	r3, #1
 8003208:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800320a:	f107 0310 	add.w	r3, r7, #16
 800320e:	4618      	mov	r0, r3
 8003210:	f00a fb4c 	bl	800d8ac <HAL_RCCEx_PeriphCLKConfig>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 800321a:	f7ff fb3b 	bl	8002894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800321e:	4b18      	ldr	r3, [pc, #96]	; (8003280 <HAL_SPDIFRX_MspInit+0xc0>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	4a17      	ldr	r2, [pc, #92]	; (8003280 <HAL_SPDIFRX_MspInit+0xc0>)
 8003224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003228:	6413      	str	r3, [r2, #64]	; 0x40
 800322a:	4b15      	ldr	r3, [pc, #84]	; (8003280 <HAL_SPDIFRX_MspInit+0xc0>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003236:	4b12      	ldr	r3, [pc, #72]	; (8003280 <HAL_SPDIFRX_MspInit+0xc0>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	4a11      	ldr	r2, [pc, #68]	; (8003280 <HAL_SPDIFRX_MspInit+0xc0>)
 800323c:	f043 0308 	orr.w	r3, r3, #8
 8003240:	6313      	str	r3, [r2, #48]	; 0x30
 8003242:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <HAL_SPDIFRX_MspInit+0xc0>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	60bb      	str	r3, [r7, #8]
 800324c:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800324e:	2380      	movs	r3, #128	; 0x80
 8003250:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003254:	2302      	movs	r3, #2
 8003256:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325a:	2300      	movs	r3, #0
 800325c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003260:	2300      	movs	r3, #0
 8003262:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003266:	2308      	movs	r3, #8
 8003268:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800326c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003270:	4619      	mov	r1, r3
 8003272:	4804      	ldr	r0, [pc, #16]	; (8003284 <HAL_SPDIFRX_MspInit+0xc4>)
 8003274:	f004 fa0a 	bl	800768c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8003278:	bf00      	nop
 800327a:	37a8      	adds	r7, #168	; 0xa8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40023800 	.word	0x40023800
 8003284:	40020c00 	.word	0x40020c00

08003288 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003288:	b480      	push	{r7}
 800328a:	b089      	sub	sp, #36	; 0x24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a2e      	ldr	r2, [pc, #184]	; (8003350 <HAL_TIM_Base_MspInit+0xc8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d10c      	bne.n	80032b4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800329a:	4b2e      	ldr	r3, [pc, #184]	; (8003354 <HAL_TIM_Base_MspInit+0xcc>)
 800329c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329e:	4a2d      	ldr	r2, [pc, #180]	; (8003354 <HAL_TIM_Base_MspInit+0xcc>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	6453      	str	r3, [r2, #68]	; 0x44
 80032a6:	4b2b      	ldr	r3, [pc, #172]	; (8003354 <HAL_TIM_Base_MspInit+0xcc>)
 80032a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	61fb      	str	r3, [r7, #28]
 80032b0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80032b2:	e046      	b.n	8003342 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032bc:	d10c      	bne.n	80032d8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032be:	4b25      	ldr	r3, [pc, #148]	; (8003354 <HAL_TIM_Base_MspInit+0xcc>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	4a24      	ldr	r2, [pc, #144]	; (8003354 <HAL_TIM_Base_MspInit+0xcc>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ca:	4b22      	ldr	r3, [pc, #136]	; (8003354 <HAL_TIM_Base_MspInit+0xcc>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	61bb      	str	r3, [r7, #24]
 80032d4:	69bb      	ldr	r3, [r7, #24]
}
 80032d6:	e034      	b.n	8003342 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a1e      	ldr	r2, [pc, #120]	; (8003358 <HAL_TIM_Base_MspInit+0xd0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d10c      	bne.n	80032fc <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032e2:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <HAL_TIM_Base_MspInit+0xcc>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <HAL_TIM_Base_MspInit+0xcc>)
 80032e8:	f043 0302 	orr.w	r3, r3, #2
 80032ec:	6413      	str	r3, [r2, #64]	; 0x40
 80032ee:	4b19      	ldr	r3, [pc, #100]	; (8003354 <HAL_TIM_Base_MspInit+0xcc>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	697b      	ldr	r3, [r7, #20]
}
 80032fa:	e022      	b.n	8003342 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a16      	ldr	r2, [pc, #88]	; (800335c <HAL_TIM_Base_MspInit+0xd4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d10c      	bne.n	8003320 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003306:	4b13      	ldr	r3, [pc, #76]	; (8003354 <HAL_TIM_Base_MspInit+0xcc>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	4a12      	ldr	r2, [pc, #72]	; (8003354 <HAL_TIM_Base_MspInit+0xcc>)
 800330c:	f043 0308 	orr.w	r3, r3, #8
 8003310:	6413      	str	r3, [r2, #64]	; 0x40
 8003312:	4b10      	ldr	r3, [pc, #64]	; (8003354 <HAL_TIM_Base_MspInit+0xcc>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	693b      	ldr	r3, [r7, #16]
}
 800331e:	e010      	b.n	8003342 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a0e      	ldr	r2, [pc, #56]	; (8003360 <HAL_TIM_Base_MspInit+0xd8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d10b      	bne.n	8003342 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800332a:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <HAL_TIM_Base_MspInit+0xcc>)
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	4a09      	ldr	r2, [pc, #36]	; (8003354 <HAL_TIM_Base_MspInit+0xcc>)
 8003330:	f043 0302 	orr.w	r3, r3, #2
 8003334:	6453      	str	r3, [r2, #68]	; 0x44
 8003336:	4b07      	ldr	r3, [pc, #28]	; (8003354 <HAL_TIM_Base_MspInit+0xcc>)
 8003338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
}
 8003342:	bf00      	nop
 8003344:	3724      	adds	r7, #36	; 0x24
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40010000 	.word	0x40010000
 8003354:	40023800 	.word	0x40023800
 8003358:	40000400 	.word	0x40000400
 800335c:	40000c00 	.word	0x40000c00
 8003360:	40010400 	.word	0x40010400

08003364 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a0a      	ldr	r2, [pc, #40]	; (800339c <HAL_TIM_PWM_MspInit+0x38>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d10b      	bne.n	800338e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003376:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <HAL_TIM_PWM_MspInit+0x3c>)
 800337c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003380:	6413      	str	r3, [r2, #64]	; 0x40
 8003382:	4b07      	ldr	r3, [pc, #28]	; (80033a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800338e:	bf00      	nop
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40001800 	.word	0x40001800
 80033a0:	40023800 	.word	0x40023800

080033a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08c      	sub	sp, #48	; 0x30
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ac:	f107 031c 	add.w	r3, r7, #28
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	60da      	str	r2, [r3, #12]
 80033ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a56      	ldr	r2, [pc, #344]	; (800351c <HAL_TIM_MspPostInit+0x178>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d11d      	bne.n	8003402 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033c6:	4b56      	ldr	r3, [pc, #344]	; (8003520 <HAL_TIM_MspPostInit+0x17c>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	4a55      	ldr	r2, [pc, #340]	; (8003520 <HAL_TIM_MspPostInit+0x17c>)
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	6313      	str	r3, [r2, #48]	; 0x30
 80033d2:	4b53      	ldr	r3, [pc, #332]	; (8003520 <HAL_TIM_MspPostInit+0x17c>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	61bb      	str	r3, [r7, #24]
 80033dc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80033de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e4:	2302      	movs	r3, #2
 80033e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ec:	2300      	movs	r3, #0
 80033ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80033f0:	2301      	movs	r3, #1
 80033f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80033f4:	f107 031c 	add.w	r3, r7, #28
 80033f8:	4619      	mov	r1, r3
 80033fa:	484a      	ldr	r0, [pc, #296]	; (8003524 <HAL_TIM_MspPostInit+0x180>)
 80033fc:	f004 f946 	bl	800768c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003400:	e087      	b.n	8003512 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800340a:	d11d      	bne.n	8003448 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800340c:	4b44      	ldr	r3, [pc, #272]	; (8003520 <HAL_TIM_MspPostInit+0x17c>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	4a43      	ldr	r2, [pc, #268]	; (8003520 <HAL_TIM_MspPostInit+0x17c>)
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	6313      	str	r3, [r2, #48]	; 0x30
 8003418:	4b41      	ldr	r3, [pc, #260]	; (8003520 <HAL_TIM_MspPostInit+0x17c>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003424:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342a:	2302      	movs	r3, #2
 800342c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342e:	2300      	movs	r3, #0
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003432:	2300      	movs	r3, #0
 8003434:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003436:	2301      	movs	r3, #1
 8003438:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800343a:	f107 031c 	add.w	r3, r7, #28
 800343e:	4619      	mov	r1, r3
 8003440:	4838      	ldr	r0, [pc, #224]	; (8003524 <HAL_TIM_MspPostInit+0x180>)
 8003442:	f004 f923 	bl	800768c <HAL_GPIO_Init>
}
 8003446:	e064      	b.n	8003512 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a36      	ldr	r2, [pc, #216]	; (8003528 <HAL_TIM_MspPostInit+0x184>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d11c      	bne.n	800348c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003452:	4b33      	ldr	r3, [pc, #204]	; (8003520 <HAL_TIM_MspPostInit+0x17c>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	4a32      	ldr	r2, [pc, #200]	; (8003520 <HAL_TIM_MspPostInit+0x17c>)
 8003458:	f043 0302 	orr.w	r3, r3, #2
 800345c:	6313      	str	r3, [r2, #48]	; 0x30
 800345e:	4b30      	ldr	r3, [pc, #192]	; (8003520 <HAL_TIM_MspPostInit+0x17c>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800346a:	2310      	movs	r3, #16
 800346c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346e:	2302      	movs	r3, #2
 8003470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003476:	2300      	movs	r3, #0
 8003478:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800347a:	2302      	movs	r3, #2
 800347c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800347e:	f107 031c 	add.w	r3, r7, #28
 8003482:	4619      	mov	r1, r3
 8003484:	4829      	ldr	r0, [pc, #164]	; (800352c <HAL_TIM_MspPostInit+0x188>)
 8003486:	f004 f901 	bl	800768c <HAL_GPIO_Init>
}
 800348a:	e042      	b.n	8003512 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a27      	ldr	r2, [pc, #156]	; (8003530 <HAL_TIM_MspPostInit+0x18c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d11c      	bne.n	80034d0 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003496:	4b22      	ldr	r3, [pc, #136]	; (8003520 <HAL_TIM_MspPostInit+0x17c>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	4a21      	ldr	r2, [pc, #132]	; (8003520 <HAL_TIM_MspPostInit+0x17c>)
 800349c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a0:	6313      	str	r3, [r2, #48]	; 0x30
 80034a2:	4b1f      	ldr	r3, [pc, #124]	; (8003520 <HAL_TIM_MspPostInit+0x17c>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80034ae:	2301      	movs	r3, #1
 80034b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b2:	2302      	movs	r3, #2
 80034b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ba:	2300      	movs	r3, #0
 80034bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80034be:	2302      	movs	r3, #2
 80034c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80034c2:	f107 031c 	add.w	r3, r7, #28
 80034c6:	4619      	mov	r1, r3
 80034c8:	481a      	ldr	r0, [pc, #104]	; (8003534 <HAL_TIM_MspPostInit+0x190>)
 80034ca:	f004 f8df 	bl	800768c <HAL_GPIO_Init>
}
 80034ce:	e020      	b.n	8003512 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a18      	ldr	r2, [pc, #96]	; (8003538 <HAL_TIM_MspPostInit+0x194>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d11b      	bne.n	8003512 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80034da:	4b11      	ldr	r3, [pc, #68]	; (8003520 <HAL_TIM_MspPostInit+0x17c>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	4a10      	ldr	r2, [pc, #64]	; (8003520 <HAL_TIM_MspPostInit+0x17c>)
 80034e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e4:	6313      	str	r3, [r2, #48]	; 0x30
 80034e6:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <HAL_TIM_MspPostInit+0x17c>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80034f2:	2340      	movs	r3, #64	; 0x40
 80034f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f6:	2302      	movs	r3, #2
 80034f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fe:	2300      	movs	r3, #0
 8003500:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003502:	2309      	movs	r3, #9
 8003504:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003506:	f107 031c 	add.w	r3, r7, #28
 800350a:	4619      	mov	r1, r3
 800350c:	480b      	ldr	r0, [pc, #44]	; (800353c <HAL_TIM_MspPostInit+0x198>)
 800350e:	f004 f8bd 	bl	800768c <HAL_GPIO_Init>
}
 8003512:	bf00      	nop
 8003514:	3730      	adds	r7, #48	; 0x30
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40010000 	.word	0x40010000
 8003520:	40023800 	.word	0x40023800
 8003524:	40020000 	.word	0x40020000
 8003528:	40000400 	.word	0x40000400
 800352c:	40020400 	.word	0x40020400
 8003530:	40000c00 	.word	0x40000c00
 8003534:	40022000 	.word	0x40022000
 8003538:	40001800 	.word	0x40001800
 800353c:	40021c00 	.word	0x40021c00

08003540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b0ae      	sub	sp, #184	; 0xb8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003548:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003558:	f107 0320 	add.w	r3, r7, #32
 800355c:	2284      	movs	r2, #132	; 0x84
 800355e:	2100      	movs	r1, #0
 8003560:	4618      	mov	r0, r3
 8003562:	f01a fa0d 	bl	801d980 <memset>
  if(huart->Instance==USART1)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a53      	ldr	r2, [pc, #332]	; (80036b8 <HAL_UART_MspInit+0x178>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d15d      	bne.n	800362c <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003570:	2340      	movs	r3, #64	; 0x40
 8003572:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003574:	2300      	movs	r3, #0
 8003576:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003578:	f107 0320 	add.w	r3, r7, #32
 800357c:	4618      	mov	r0, r3
 800357e:	f00a f995 	bl	800d8ac <HAL_RCCEx_PeriphCLKConfig>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003588:	f7ff f984 	bl	8002894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800358c:	4b4b      	ldr	r3, [pc, #300]	; (80036bc <HAL_UART_MspInit+0x17c>)
 800358e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003590:	4a4a      	ldr	r2, [pc, #296]	; (80036bc <HAL_UART_MspInit+0x17c>)
 8003592:	f043 0310 	orr.w	r3, r3, #16
 8003596:	6453      	str	r3, [r2, #68]	; 0x44
 8003598:	4b48      	ldr	r3, [pc, #288]	; (80036bc <HAL_UART_MspInit+0x17c>)
 800359a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359c:	f003 0310 	and.w	r3, r3, #16
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035a4:	4b45      	ldr	r3, [pc, #276]	; (80036bc <HAL_UART_MspInit+0x17c>)
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	4a44      	ldr	r2, [pc, #272]	; (80036bc <HAL_UART_MspInit+0x17c>)
 80035aa:	f043 0302 	orr.w	r3, r3, #2
 80035ae:	6313      	str	r3, [r2, #48]	; 0x30
 80035b0:	4b42      	ldr	r3, [pc, #264]	; (80036bc <HAL_UART_MspInit+0x17c>)
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	61bb      	str	r3, [r7, #24]
 80035ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035bc:	4b3f      	ldr	r3, [pc, #252]	; (80036bc <HAL_UART_MspInit+0x17c>)
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	4a3e      	ldr	r2, [pc, #248]	; (80036bc <HAL_UART_MspInit+0x17c>)
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	6313      	str	r3, [r2, #48]	; 0x30
 80035c8:	4b3c      	ldr	r3, [pc, #240]	; (80036bc <HAL_UART_MspInit+0x17c>)
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035da:	2302      	movs	r3, #2
 80035dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e6:	2300      	movs	r3, #0
 80035e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035ec:	2307      	movs	r3, #7
 80035ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80035f2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80035f6:	4619      	mov	r1, r3
 80035f8:	4831      	ldr	r0, [pc, #196]	; (80036c0 <HAL_UART_MspInit+0x180>)
 80035fa:	f004 f847 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80035fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003602:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003606:	2302      	movs	r3, #2
 8003608:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360c:	2300      	movs	r3, #0
 800360e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003612:	2300      	movs	r3, #0
 8003614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003618:	2307      	movs	r3, #7
 800361a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800361e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003622:	4619      	mov	r1, r3
 8003624:	4827      	ldr	r0, [pc, #156]	; (80036c4 <HAL_UART_MspInit+0x184>)
 8003626:	f004 f831 	bl	800768c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800362a:	e040      	b.n	80036ae <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a25      	ldr	r2, [pc, #148]	; (80036c8 <HAL_UART_MspInit+0x188>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d13b      	bne.n	80036ae <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003636:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800363a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800363c:	2300      	movs	r3, #0
 800363e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003640:	f107 0320 	add.w	r3, r7, #32
 8003644:	4618      	mov	r0, r3
 8003646:	f00a f931 	bl	800d8ac <HAL_RCCEx_PeriphCLKConfig>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8003650:	f7ff f920 	bl	8002894 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003654:	4b19      	ldr	r3, [pc, #100]	; (80036bc <HAL_UART_MspInit+0x17c>)
 8003656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003658:	4a18      	ldr	r2, [pc, #96]	; (80036bc <HAL_UART_MspInit+0x17c>)
 800365a:	f043 0320 	orr.w	r3, r3, #32
 800365e:	6453      	str	r3, [r2, #68]	; 0x44
 8003660:	4b16      	ldr	r3, [pc, #88]	; (80036bc <HAL_UART_MspInit+0x17c>)
 8003662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800366c:	4b13      	ldr	r3, [pc, #76]	; (80036bc <HAL_UART_MspInit+0x17c>)
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	4a12      	ldr	r2, [pc, #72]	; (80036bc <HAL_UART_MspInit+0x17c>)
 8003672:	f043 0304 	orr.w	r3, r3, #4
 8003676:	6313      	str	r3, [r2, #48]	; 0x30
 8003678:	4b10      	ldr	r3, [pc, #64]	; (80036bc <HAL_UART_MspInit+0x17c>)
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003684:	23c0      	movs	r3, #192	; 0xc0
 8003686:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368a:	2302      	movs	r3, #2
 800368c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	2300      	movs	r3, #0
 8003692:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003696:	2303      	movs	r3, #3
 8003698:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800369c:	2308      	movs	r3, #8
 800369e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036a6:	4619      	mov	r1, r3
 80036a8:	4808      	ldr	r0, [pc, #32]	; (80036cc <HAL_UART_MspInit+0x18c>)
 80036aa:	f003 ffef 	bl	800768c <HAL_GPIO_Init>
}
 80036ae:	bf00      	nop
 80036b0:	37b8      	adds	r7, #184	; 0xb8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40011000 	.word	0x40011000
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40020400 	.word	0x40020400
 80036c4:	40020000 	.word	0x40020000
 80036c8:	40011400 	.word	0x40011400
 80036cc:	40020800 	.word	0x40020800

080036d0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80036d6:	1d3b      	adds	r3, r7, #4
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80036e4:	4b3d      	ldr	r3, [pc, #244]	; (80037dc <HAL_FMC_MspInit+0x10c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d173      	bne.n	80037d4 <HAL_FMC_MspInit+0x104>
    return;
  }
  FMC_Initialized = 1;
 80036ec:	4b3b      	ldr	r3, [pc, #236]	; (80037dc <HAL_FMC_MspInit+0x10c>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80036f2:	4b3b      	ldr	r3, [pc, #236]	; (80037e0 <HAL_FMC_MspInit+0x110>)
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	4a3a      	ldr	r2, [pc, #232]	; (80037e0 <HAL_FMC_MspInit+0x110>)
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	6393      	str	r3, [r2, #56]	; 0x38
 80036fe:	4b38      	ldr	r3, [pc, #224]	; (80037e0 <HAL_FMC_MspInit+0x110>)
 8003700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800370a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800370e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003710:	2302      	movs	r3, #2
 8003712:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003718:	2303      	movs	r3, #3
 800371a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800371c:	230c      	movs	r3, #12
 800371e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003720:	1d3b      	adds	r3, r7, #4
 8003722:	4619      	mov	r1, r3
 8003724:	482f      	ldr	r0, [pc, #188]	; (80037e4 <HAL_FMC_MspInit+0x114>)
 8003726:	f003 ffb1 	bl	800768c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800372a:	f248 1333 	movw	r3, #33075	; 0x8133
 800372e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003730:	2302      	movs	r3, #2
 8003732:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003738:	2303      	movs	r3, #3
 800373a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800373c:	230c      	movs	r3, #12
 800373e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003740:	1d3b      	adds	r3, r7, #4
 8003742:	4619      	mov	r1, r3
 8003744:	4828      	ldr	r0, [pc, #160]	; (80037e8 <HAL_FMC_MspInit+0x118>)
 8003746:	f003 ffa1 	bl	800768c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800374a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800374e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003750:	2302      	movs	r3, #2
 8003752:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003758:	2303      	movs	r3, #3
 800375a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800375c:	230c      	movs	r3, #12
 800375e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	4619      	mov	r1, r3
 8003764:	4821      	ldr	r0, [pc, #132]	; (80037ec <HAL_FMC_MspInit+0x11c>)
 8003766:	f003 ff91 	bl	800768c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800376a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800376e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003770:	2302      	movs	r3, #2
 8003772:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003778:	2303      	movs	r3, #3
 800377a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800377c:	230c      	movs	r3, #12
 800377e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003780:	1d3b      	adds	r3, r7, #4
 8003782:	4619      	mov	r1, r3
 8003784:	481a      	ldr	r0, [pc, #104]	; (80037f0 <HAL_FMC_MspInit+0x120>)
 8003786:	f003 ff81 	bl	800768c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800378a:	2328      	movs	r3, #40	; 0x28
 800378c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378e:	2302      	movs	r3, #2
 8003790:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003796:	2303      	movs	r3, #3
 8003798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800379a:	230c      	movs	r3, #12
 800379c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800379e:	1d3b      	adds	r3, r7, #4
 80037a0:	4619      	mov	r1, r3
 80037a2:	4814      	ldr	r0, [pc, #80]	; (80037f4 <HAL_FMC_MspInit+0x124>)
 80037a4:	f003 ff72 	bl	800768c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80037a8:	2308      	movs	r3, #8
 80037aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ac:	2302      	movs	r3, #2
 80037ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b0:	2300      	movs	r3, #0
 80037b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b4:	2303      	movs	r3, #3
 80037b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80037b8:	230c      	movs	r3, #12
 80037ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80037bc:	1d3b      	adds	r3, r7, #4
 80037be:	4619      	mov	r1, r3
 80037c0:	480d      	ldr	r0, [pc, #52]	; (80037f8 <HAL_FMC_MspInit+0x128>)
 80037c2:	f003 ff63 	bl	800768c <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  // syd:
  /* Associate mem2mem DMA handle with SDRAM */
  __HAL_LINKDMA(&hsdram1, hdma, hdma_memtomem_dma2_stream0);
 80037c6:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <HAL_FMC_MspInit+0x12c>)
 80037c8:	4a0d      	ldr	r2, [pc, #52]	; (8003800 <HAL_FMC_MspInit+0x130>)
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <HAL_FMC_MspInit+0x130>)
 80037ce:	4a0b      	ldr	r2, [pc, #44]	; (80037fc <HAL_FMC_MspInit+0x12c>)
 80037d0:	639a      	str	r2, [r3, #56]	; 0x38
 80037d2:	e000      	b.n	80037d6 <HAL_FMC_MspInit+0x106>
    return;
 80037d4:	bf00      	nop
  //i.e.:
  // hsdram1.hdma = &hdma_memtomem_dma2_stream0;
  // hdma_memtomem_dma2_stream0.Parent = &hsdram1;

  /* USER CODE END FMC_MspInit 1 */
}
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20002180 	.word	0x20002180
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40021000 	.word	0x40021000
 80037e8:	40021800 	.word	0x40021800
 80037ec:	40020c00 	.word	0x40020c00
 80037f0:	40021400 	.word	0x40021400
 80037f4:	40021c00 	.word	0x40021c00
 80037f8:	40020800 	.word	0x40020800
 80037fc:	20002144 	.word	0x20002144
 8003800:	200020e4 	.word	0x200020e4

08003804 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800380c:	f7ff ff60 	bl	80036d0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	; 0x28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a6f      	ldr	r2, [pc, #444]	; (80039e4 <HAL_SAI_MspInit+0x1cc>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d175      	bne.n	8003916 <HAL_SAI_MspInit+0xfe>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800382a:	4b6f      	ldr	r3, [pc, #444]	; (80039e8 <HAL_SAI_MspInit+0x1d0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10b      	bne.n	800384a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003832:	4b6e      	ldr	r3, [pc, #440]	; (80039ec <HAL_SAI_MspInit+0x1d4>)
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	4a6d      	ldr	r2, [pc, #436]	; (80039ec <HAL_SAI_MspInit+0x1d4>)
 8003838:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800383c:	6453      	str	r3, [r2, #68]	; 0x44
 800383e:	4b6b      	ldr	r3, [pc, #428]	; (80039ec <HAL_SAI_MspInit+0x1d4>)
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800384a:	4b67      	ldr	r3, [pc, #412]	; (80039e8 <HAL_SAI_MspInit+0x1d0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	3301      	adds	r3, #1
 8003850:	4a65      	ldr	r2, [pc, #404]	; (80039e8 <HAL_SAI_MspInit+0x1d0>)
 8003852:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin;
 8003854:	2310      	movs	r3, #16
 8003856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003858:	2302      	movs	r3, #2
 800385a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385c:	2300      	movs	r3, #0
 800385e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003860:	2303      	movs	r3, #3
 8003862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003864:	230a      	movs	r3, #10
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8003868:	f107 0314 	add.w	r3, r7, #20
 800386c:	4619      	mov	r1, r3
 800386e:	4860      	ldr	r0, [pc, #384]	; (80039f0 <HAL_SAI_MspInit+0x1d8>)
 8003870:	f003 ff0c 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003874:	23e0      	movs	r3, #224	; 0xe0
 8003876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003878:	2302      	movs	r3, #2
 800387a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387c:	2300      	movs	r3, #0
 800387e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003880:	2302      	movs	r3, #2
 8003882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003884:	230a      	movs	r3, #10
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003888:	f107 0314 	add.w	r3, r7, #20
 800388c:	4619      	mov	r1, r3
 800388e:	4858      	ldr	r0, [pc, #352]	; (80039f0 <HAL_SAI_MspInit+0x1d8>)
 8003890:	f003 fefc 	bl	800768c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8003894:	4b57      	ldr	r3, [pc, #348]	; (80039f4 <HAL_SAI_MspInit+0x1dc>)
 8003896:	4a58      	ldr	r2, [pc, #352]	; (80039f8 <HAL_SAI_MspInit+0x1e0>)
 8003898:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 800389a:	4b56      	ldr	r3, [pc, #344]	; (80039f4 <HAL_SAI_MspInit+0x1dc>)
 800389c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80038a0:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038a2:	4b54      	ldr	r3, [pc, #336]	; (80039f4 <HAL_SAI_MspInit+0x1dc>)
 80038a4:	2240      	movs	r2, #64	; 0x40
 80038a6:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80038a8:	4b52      	ldr	r3, [pc, #328]	; (80039f4 <HAL_SAI_MspInit+0x1dc>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 80038ae:	4b51      	ldr	r3, [pc, #324]	; (80039f4 <HAL_SAI_MspInit+0x1dc>)
 80038b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038b4:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80038b6:	4b4f      	ldr	r3, [pc, #316]	; (80039f4 <HAL_SAI_MspInit+0x1dc>)
 80038b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038bc:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80038be:	4b4d      	ldr	r3, [pc, #308]	; (80039f4 <HAL_SAI_MspInit+0x1dc>)
 80038c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038c4:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 80038c6:	4b4b      	ldr	r3, [pc, #300]	; (80039f4 <HAL_SAI_MspInit+0x1dc>)
 80038c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038cc:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 80038ce:	4b49      	ldr	r3, [pc, #292]	; (80039f4 <HAL_SAI_MspInit+0x1dc>)
 80038d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038d4:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80038d6:	4b47      	ldr	r3, [pc, #284]	; (80039f4 <HAL_SAI_MspInit+0x1dc>)
 80038d8:	2204      	movs	r2, #4
 80038da:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80038dc:	4b45      	ldr	r3, [pc, #276]	; (80039f4 <HAL_SAI_MspInit+0x1dc>)
 80038de:	2203      	movs	r2, #3
 80038e0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 80038e2:	4b44      	ldr	r3, [pc, #272]	; (80039f4 <HAL_SAI_MspInit+0x1dc>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80038e8:	4b42      	ldr	r3, [pc, #264]	; (80039f4 <HAL_SAI_MspInit+0x1dc>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 80038ee:	4841      	ldr	r0, [pc, #260]	; (80039f4 <HAL_SAI_MspInit+0x1dc>)
 80038f0:	f002 ff1a 	bl	8006728 <HAL_DMA_Init>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_SAI_MspInit+0xe6>
    {
      Error_Handler();
 80038fa:	f7fe ffcb 	bl	8002894 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a3c      	ldr	r2, [pc, #240]	; (80039f4 <HAL_SAI_MspInit+0x1dc>)
 8003902:	671a      	str	r2, [r3, #112]	; 0x70
 8003904:	4a3b      	ldr	r2, [pc, #236]	; (80039f4 <HAL_SAI_MspInit+0x1dc>)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a39      	ldr	r2, [pc, #228]	; (80039f4 <HAL_SAI_MspInit+0x1dc>)
 800390e:	66da      	str	r2, [r3, #108]	; 0x6c
 8003910:	4a38      	ldr	r2, [pc, #224]	; (80039f4 <HAL_SAI_MspInit+0x1dc>)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a38      	ldr	r2, [pc, #224]	; (80039fc <HAL_SAI_MspInit+0x1e4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d15c      	bne.n	80039da <HAL_SAI_MspInit+0x1c2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003920:	4b31      	ldr	r3, [pc, #196]	; (80039e8 <HAL_SAI_MspInit+0x1d0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10b      	bne.n	8003940 <HAL_SAI_MspInit+0x128>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003928:	4b30      	ldr	r3, [pc, #192]	; (80039ec <HAL_SAI_MspInit+0x1d4>)
 800392a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392c:	4a2f      	ldr	r2, [pc, #188]	; (80039ec <HAL_SAI_MspInit+0x1d4>)
 800392e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003932:	6453      	str	r3, [r2, #68]	; 0x44
 8003934:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <HAL_SAI_MspInit+0x1d4>)
 8003936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003938:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003940:	4b29      	ldr	r3, [pc, #164]	; (80039e8 <HAL_SAI_MspInit+0x1d0>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3301      	adds	r3, #1
 8003946:	4a28      	ldr	r2, [pc, #160]	; (80039e8 <HAL_SAI_MspInit+0x1d0>)
 8003948:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800394a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800394e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003950:	2302      	movs	r3, #2
 8003952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003954:	2300      	movs	r3, #0
 8003956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003958:	2302      	movs	r3, #2
 800395a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800395c:	230a      	movs	r3, #10
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003960:	f107 0314 	add.w	r3, r7, #20
 8003964:	4619      	mov	r1, r3
 8003966:	4826      	ldr	r0, [pc, #152]	; (8003a00 <HAL_SAI_MspInit+0x1e8>)
 8003968:	f003 fe90 	bl	800768c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 800396c:	4b25      	ldr	r3, [pc, #148]	; (8003a04 <HAL_SAI_MspInit+0x1ec>)
 800396e:	4a26      	ldr	r2, [pc, #152]	; (8003a08 <HAL_SAI_MspInit+0x1f0>)
 8003970:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 8003972:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <HAL_SAI_MspInit+0x1ec>)
 8003974:	2200      	movs	r2, #0
 8003976:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003978:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <HAL_SAI_MspInit+0x1ec>)
 800397a:	2200      	movs	r2, #0
 800397c:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800397e:	4b21      	ldr	r3, [pc, #132]	; (8003a04 <HAL_SAI_MspInit+0x1ec>)
 8003980:	2200      	movs	r2, #0
 8003982:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8003984:	4b1f      	ldr	r3, [pc, #124]	; (8003a04 <HAL_SAI_MspInit+0x1ec>)
 8003986:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800398a:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800398c:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <HAL_SAI_MspInit+0x1ec>)
 800398e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003992:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003994:	4b1b      	ldr	r3, [pc, #108]	; (8003a04 <HAL_SAI_MspInit+0x1ec>)
 8003996:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800399a:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 800399c:	4b19      	ldr	r3, [pc, #100]	; (8003a04 <HAL_SAI_MspInit+0x1ec>)
 800399e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039a2:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 80039a4:	4b17      	ldr	r3, [pc, #92]	; (8003a04 <HAL_SAI_MspInit+0x1ec>)
 80039a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039aa:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039ac:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <HAL_SAI_MspInit+0x1ec>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80039b2:	4814      	ldr	r0, [pc, #80]	; (8003a04 <HAL_SAI_MspInit+0x1ec>)
 80039b4:	f002 feb8 	bl	8006728 <HAL_DMA_Init>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_SAI_MspInit+0x1aa>
    {
      Error_Handler();
 80039be:	f7fe ff69 	bl	8002894 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a0f      	ldr	r2, [pc, #60]	; (8003a04 <HAL_SAI_MspInit+0x1ec>)
 80039c6:	671a      	str	r2, [r3, #112]	; 0x70
 80039c8:	4a0e      	ldr	r2, [pc, #56]	; (8003a04 <HAL_SAI_MspInit+0x1ec>)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a0c      	ldr	r2, [pc, #48]	; (8003a04 <HAL_SAI_MspInit+0x1ec>)
 80039d2:	66da      	str	r2, [r3, #108]	; 0x6c
 80039d4:	4a0b      	ldr	r2, [pc, #44]	; (8003a04 <HAL_SAI_MspInit+0x1ec>)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80039da:	bf00      	nop
 80039dc:	3728      	adds	r7, #40	; 0x28
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40015c04 	.word	0x40015c04
 80039e8:	20002184 	.word	0x20002184
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40022000 	.word	0x40022000
 80039f4:	20001c7c 	.word	0x20001c7c
 80039f8:	40026470 	.word	0x40026470
 80039fc:	40015c24 	.word	0x40015c24
 8003a00:	40021800 	.word	0x40021800
 8003a04:	20001cdc 	.word	0x20001cdc
 8003a08:	400264b8 	.word	0x400264b8

08003a0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08e      	sub	sp, #56	; 0x38
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003a1c:	4b33      	ldr	r3, [pc, #204]	; (8003aec <HAL_InitTick+0xe0>)
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	4a32      	ldr	r2, [pc, #200]	; (8003aec <HAL_InitTick+0xe0>)
 8003a22:	f043 0310 	orr.w	r3, r3, #16
 8003a26:	6413      	str	r3, [r2, #64]	; 0x40
 8003a28:	4b30      	ldr	r3, [pc, #192]	; (8003aec <HAL_InitTick+0xe0>)
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a34:	f107 0210 	add.w	r2, r7, #16
 8003a38:	f107 0314 	add.w	r3, r7, #20
 8003a3c:	4611      	mov	r1, r2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f009 ff02 	bl	800d848 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d103      	bne.n	8003a56 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003a4e:	f009 fed3 	bl	800d7f8 <HAL_RCC_GetPCLK1Freq>
 8003a52:	6378      	str	r0, [r7, #52]	; 0x34
 8003a54:	e004      	b.n	8003a60 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003a56:	f009 fecf 	bl	800d7f8 <HAL_RCC_GetPCLK1Freq>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a62:	4a23      	ldr	r2, [pc, #140]	; (8003af0 <HAL_InitTick+0xe4>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	0c9b      	lsrs	r3, r3, #18
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003a6e:	4b21      	ldr	r3, [pc, #132]	; (8003af4 <HAL_InitTick+0xe8>)
 8003a70:	4a21      	ldr	r2, [pc, #132]	; (8003af8 <HAL_InitTick+0xec>)
 8003a72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003a74:	4b1f      	ldr	r3, [pc, #124]	; (8003af4 <HAL_InitTick+0xe8>)
 8003a76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a7a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003a7c:	4a1d      	ldr	r2, [pc, #116]	; (8003af4 <HAL_InitTick+0xe8>)
 8003a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a80:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003a82:	4b1c      	ldr	r3, [pc, #112]	; (8003af4 <HAL_InitTick+0xe8>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a88:	4b1a      	ldr	r3, [pc, #104]	; (8003af4 <HAL_InitTick+0xe8>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a8e:	4b19      	ldr	r3, [pc, #100]	; (8003af4 <HAL_InitTick+0xe8>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003a94:	4817      	ldr	r0, [pc, #92]	; (8003af4 <HAL_InitTick+0xe8>)
 8003a96:	f00c fd7b 	bl	8010590 <HAL_TIM_Base_Init>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003aa0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d11b      	bne.n	8003ae0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003aa8:	4812      	ldr	r0, [pc, #72]	; (8003af4 <HAL_InitTick+0xe8>)
 8003aaa:	f00c fdc9 	bl	8010640 <HAL_TIM_Base_Start_IT>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003ab4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d111      	bne.n	8003ae0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003abc:	2036      	movs	r0, #54	; 0x36
 8003abe:	f002 fbe3 	bl	8006288 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b0f      	cmp	r3, #15
 8003ac6:	d808      	bhi.n	8003ada <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003ac8:	2200      	movs	r2, #0
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	2036      	movs	r0, #54	; 0x36
 8003ace:	f002 fbbf 	bl	8006250 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ad2:	4a0a      	ldr	r2, [pc, #40]	; (8003afc <HAL_InitTick+0xf0>)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	e002      	b.n	8003ae0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003ae0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3738      	adds	r7, #56	; 0x38
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40023800 	.word	0x40023800
 8003af0:	431bde83 	.word	0x431bde83
 8003af4:	20002188 	.word	0x20002188
 8003af8:	40001000 	.word	0x40001000
 8003afc:	20000024 	.word	0x20000024

08003b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b04:	e7fe      	b.n	8003b04 <NMI_Handler+0x4>

08003b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b06:	b480      	push	{r7}
 8003b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b0a:	e7fe      	b.n	8003b0a <HardFault_Handler+0x4>

08003b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b10:	e7fe      	b.n	8003b10 <MemManage_Handler+0x4>

08003b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b12:	b480      	push	{r7}
 8003b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b16:	e7fe      	b.n	8003b16 <BusFault_Handler+0x4>

08003b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b1c:	e7fe      	b.n	8003b1c <UsageFault_Handler+0x4>

08003b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b22:	bf00      	nop
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 8003b30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003b34:	f004 f8ae 	bl	8007c94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b38:	bf00      	nop
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b40:	4802      	ldr	r0, [pc, #8]	; (8003b4c <TIM6_DAC_IRQHandler+0x10>)
 8003b42:	f00c fe4c 	bl	80107de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20002188 	.word	0x20002188

08003b50 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	// mem2mem DMA (eg SDRAM to RAM)

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8003b54:	4802      	ldr	r0, [pc, #8]	; (8003b60 <DMA2_Stream0_IRQHandler+0x10>)
 8003b56:	f002 ff87 	bl	8006a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	200020e4 	.word	0x200020e4

08003b64 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	// DMA streaming from camera to memory

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003b68:	4802      	ldr	r0, [pc, #8]	; (8003b74 <DMA2_Stream1_IRQHandler+0x10>)
 8003b6a:	f002 ff7d 	bl	8006a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20001918 	.word	0x20001918

08003b78 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

	// audio out

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8003b7c:	4802      	ldr	r0, [pc, #8]	; (8003b88 <DMA2_Stream4_IRQHandler+0x10>)
 8003b7e:	f002 ff73 	bl	8006a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20001c7c 	.word	0x20001c7c

08003b8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003b90:	4802      	ldr	r0, [pc, #8]	; (8003b9c <OTG_FS_IRQHandler+0x10>)
 8003b92:	f004 fb0d 	bl	80081b0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	2004bd44 	.word	0x2004bd44

08003ba0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

	// audio in

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8003ba4:	4802      	ldr	r0, [pc, #8]	; (8003bb0 <DMA2_Stream7_IRQHandler+0x10>)
 8003ba6:	f002 ff5f 	bl	8006a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003baa:	bf00      	nop
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20001cdc 	.word	0x20001cdc

08003bb4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003bb8:	4802      	ldr	r0, [pc, #8]	; (8003bc4 <OTG_HS_IRQHandler+0x10>)
 8003bba:	f007 f80d 	bl	800abd8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	2004b454 	.word	0x2004b454

08003bc8 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

	// c'était BSP_CAMERA_IRQHandler()

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003bcc:	4802      	ldr	r0, [pc, #8]	; (8003bd8 <DCMI_IRQHandler+0x10>)
 8003bce:	f002 fcdb 	bl	8006588 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200018c8 	.word	0x200018c8

08003bdc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

	// c'était BSP_LCD_DMA2D_IRQHandler();

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003be0:	4802      	ldr	r0, [pc, #8]	; (8003bec <DMA2D_IRQHandler+0x10>)
 8003be2:	f003 fb15 	bl	8007210 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003be6:	bf00      	nop
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20001978 	.word	0x20001978

08003bf0 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8003bf4:	4802      	ldr	r0, [pc, #8]	; (8003c00 <QUADSPI_IRQHandler+0x10>)
 8003bf6:	f008 fa3d 	bl	800c074 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8003bfa:	bf00      	nop
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20001b08 	.word	0x20001b08

08003c04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c10:	2300      	movs	r3, #0
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	e00a      	b.n	8003c2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c16:	f3af 8000 	nop.w
 8003c1a:	4601      	mov	r1, r0
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	60ba      	str	r2, [r7, #8]
 8003c22:	b2ca      	uxtb	r2, r1
 8003c24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	dbf0      	blt.n	8003c16 <_read+0x12>
	}

return len;
 8003c34:	687b      	ldr	r3, [r7, #4]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b086      	sub	sp, #24
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	e009      	b.n	8003c64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	60ba      	str	r2, [r7, #8]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 f8d9 	bl	8003e10 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	3301      	adds	r3, #1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	dbf1      	blt.n	8003c50 <_write+0x12>
	}
	return len;
 8003c6c:	687b      	ldr	r3, [r7, #4]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <_close>:

int _close(int file)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
	return -1;
 8003c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c9e:	605a      	str	r2, [r3, #4]
	return 0;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <_isatty>:

int _isatty(int file)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
	return 1;
 8003cb6:	2301      	movs	r3, #1
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
	return 0;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ce8:	4a14      	ldr	r2, [pc, #80]	; (8003d3c <_sbrk+0x5c>)
 8003cea:	4b15      	ldr	r3, [pc, #84]	; (8003d40 <_sbrk+0x60>)
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cf4:	4b13      	ldr	r3, [pc, #76]	; (8003d44 <_sbrk+0x64>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d102      	bne.n	8003d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cfc:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <_sbrk+0x64>)
 8003cfe:	4a12      	ldr	r2, [pc, #72]	; (8003d48 <_sbrk+0x68>)
 8003d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d02:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <_sbrk+0x64>)
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4413      	add	r3, r2
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d207      	bcs.n	8003d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d10:	f019 fdee 	bl	801d8f0 <__errno>
 8003d14:	4603      	mov	r3, r0
 8003d16:	220c      	movs	r2, #12
 8003d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d1e:	e009      	b.n	8003d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d20:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <_sbrk+0x64>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d26:	4b07      	ldr	r3, [pc, #28]	; (8003d44 <_sbrk+0x64>)
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	4a05      	ldr	r2, [pc, #20]	; (8003d44 <_sbrk+0x64>)
 8003d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d32:	68fb      	ldr	r3, [r7, #12]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20050000 	.word	0x20050000
 8003d40:	00000400 	.word	0x00000400
 8003d44:	200021d4 	.word	0x200021d4
 8003d48:	2004c058 	.word	0x2004c058

08003d4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d50:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <SystemInit+0x20>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d56:	4a05      	ldr	r2, [pc, #20]	; (8003d6c <SystemInit+0x20>)
 8003d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	e000ed00 	.word	0xe000ed00

08003d70 <uiDisplayBasic>:
#include <stdio.h>

/**
 * Display basic UI information.
 */
void uiDisplayBasic(void) {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af02      	add	r7, sp, #8

	LCD_Clear(LCD_COLOR_WHITE);
 8003d76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d7a:	f000 fa31 	bl	80041e0 <LCD_Clear>

	//LCD_SetTextColor(LCD_COLOR_BLUE);
	//LCD_FillRect(0, 0, LCD_GetXSize(), 90);

	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8003d7e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003d82:	f000 f9b3 	bl	80040ec <LCD_SetStrokeColor>
	LCD_SetBackColor(LCD_COLOR_WHITE);
 8003d86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d8a:	f000 f9df 	bl	800414c <LCD_SetBackColor>
	LCD_SetFont(&Font24);
 8003d8e:	4807      	ldr	r0, [pc, #28]	; (8003dac <uiDisplayBasic+0x3c>)
 8003d90:	f000 f9f4 	bl	800417c <LCD_SetFont>
	LCD_DrawString(0, 0, (uint8_t*) "TEST AUDIO E_MUTE", CENTER_MODE, true);
 8003d94:	2301      	movs	r3, #1
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	2301      	movs	r3, #1
 8003d9a:	4a05      	ldr	r2, [pc, #20]	; (8003db0 <uiDisplayBasic+0x40>)
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	2000      	movs	r0, #0
 8003da0:	f000 fa66 	bl	8004270 <LCD_DrawString>

	/* Set the LCD Text Color */
	//LCD_SetTextColor(LCD_COLOR_BLUE);
	//LCD_DrawRect(10, 100, LCD_GetXSize() - 20, LCD_GetYSize() - 110);
	//LCD_DrawRect(11, 101, LCD_GetXSize() - 22, LCD_GetYSize() - 112);
}
 8003da4:	bf00      	nop
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	2000001c 	.word	0x2000001c
 8003db0:	0801eef0 	.word	0x0801eef0

08003db4 <LED_On>:
#include "stdio.h"


// -------------------------------- onboard green led (CN7, pin D13) --------------------------------

void LED_On(){
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_SET);
 8003db8:	2201      	movs	r2, #1
 8003dba:	2102      	movs	r1, #2
 8003dbc:	4802      	ldr	r0, [pc, #8]	; (8003dc8 <LED_On+0x14>)
 8003dbe:	f003 ff35 	bl	8007c2c <HAL_GPIO_WritePin>
}
 8003dc2:	bf00      	nop
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40022000 	.word	0x40022000

08003dcc <LED_Off>:

void LED_Off(){
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2102      	movs	r1, #2
 8003dd4:	4802      	ldr	r0, [pc, #8]	; (8003de0 <LED_Off+0x14>)
 8003dd6:	f003 ff29 	bl	8007c2c <HAL_GPIO_WritePin>
}
 8003dda:	bf00      	nop
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40022000 	.word	0x40022000

08003de4 <LED_Toggle>:

void LED_Toggle(){
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 8003de8:	2102      	movs	r1, #2
 8003dea:	4802      	ldr	r0, [pc, #8]	; (8003df4 <LED_Toggle+0x10>)
 8003dec:	f003 ff37 	bl	8007c5e <HAL_GPIO_TogglePin>

}
 8003df0:	bf00      	nop
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40022000 	.word	0x40022000

08003df8 <PB_GetState>:
// --------------------------------- onboard blue button ------------------------------

/**
 * @return GPIO_PIN_SET or GPIO_PIN_RESET depending on the state of the onboard blue (push) button
 */
uint32_t PB_GetState(){
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0

  return HAL_GPIO_ReadPin(BLUE_BTN_GPIO_Port, BLUE_BTN_Pin);
 8003dfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e00:	4802      	ldr	r0, [pc, #8]	; (8003e0c <PB_GetState+0x14>)
 8003e02:	f003 fefb 	bl	8007bfc <HAL_GPIO_ReadPin>
 8003e06:	4603      	mov	r3, r0

}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40022000 	.word	0x40022000

08003e10 <__io_putchar>:
 * of the STLink (USB) programming port, it is enough to open a serial terminal on the host PC
 * (e.g., Hyperterminal or Putty on Windows, screen on Linux or Macos) to obtain a debugging console.
 * On linux/MacOS, this VCP shows up as /dev/ttyUSBSomething (ls /dev etc will provide you with its real name),
 * while on Windows, it's COMSOmething (from COM1 to ...).
 */
int __io_putchar(int ch){
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF); // beware blocking call! TODO => use DMA
 8003e18:	1d39      	adds	r1, r7, #4
 8003e1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e1e:	2201      	movs	r2, #1
 8003e20:	4803      	ldr	r0, [pc, #12]	; (8003e30 <__io_putchar+0x20>)
 8003e22:	f00d fd11 	bl	8011848 <HAL_UART_Transmit>
	return ch;
 8003e26:	687b      	ldr	r3, [r7, #4]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	20001fd4 	.word	0x20001fd4

08003e34 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08a      	sub	sp, #40	; 0x28
 8003e38:	af04      	add	r7, sp, #16
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	4608      	mov	r0, r1
 8003e3e:	4611      	mov	r1, r2
 8003e40:	461a      	mov	r2, r3
 8003e42:	4603      	mov	r3, r0
 8003e44:	72fb      	strb	r3, [r7, #11]
 8003e46:	460b      	mov	r3, r1
 8003e48:	813b      	strh	r3, [r7, #8]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003e52:	7afb      	ldrb	r3, [r7, #11]
 8003e54:	b299      	uxth	r1, r3
 8003e56:	88f8      	ldrh	r0, [r7, #6]
 8003e58:	893a      	ldrh	r2, [r7, #8]
 8003e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e5e:	9302      	str	r3, [sp, #8]
 8003e60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e62:	9301      	str	r3, [sp, #4]
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	4603      	mov	r3, r0
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f005 fe44 	bl	8009af8 <HAL_I2C_Mem_Read>
 8003e70:	4603      	mov	r3, r0
 8003e72:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d004      	beq.n	8003e84 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003e7a:	7afb      	ldrb	r3, [r7, #11]
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f832 	bl	8003ee8 <I2Cx_Error>
  }
  return status;
 8003e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b08a      	sub	sp, #40	; 0x28
 8003e92:	af04      	add	r7, sp, #16
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	4608      	mov	r0, r1
 8003e98:	4611      	mov	r1, r2
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	72fb      	strb	r3, [r7, #11]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	813b      	strh	r3, [r7, #8]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003eac:	7afb      	ldrb	r3, [r7, #11]
 8003eae:	b299      	uxth	r1, r3
 8003eb0:	88f8      	ldrh	r0, [r7, #6]
 8003eb2:	893a      	ldrh	r2, [r7, #8]
 8003eb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eb8:	9302      	str	r3, [sp, #8]
 8003eba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ebc:	9301      	str	r3, [sp, #4]
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f005 fd03 	bl	80098d0 <HAL_I2C_Mem_Write>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003ece:	7dfb      	ldrb	r3, [r7, #23]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d004      	beq.n	8003ede <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003ed4:	7afb      	ldrb	r3, [r7, #11]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 f805 	bl	8003ee8 <I2Cx_Error>
  }
  return status;
 8003ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f005 fcbb 	bl	8009870 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  HAL_I2C_Init(i2c_handler);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f005 fc28 	bl	8009750 <HAL_I2C_Init>
}
 8003f00:	bf00      	nop
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <AUDIO_I2C_Write>:
  * Writes a single CONTROL data to the audio codec over the I2C bus.
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_I2C_Write(uint16_t Reg, uint16_t Value){
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	4603      	mov	r3, r0
 8003f10:	460a      	mov	r2, r1
 8003f12:	80fb      	strh	r3, [r7, #6]
 8003f14:	4613      	mov	r3, r2
 8003f16:	80bb      	strh	r3, [r7, #4]

  uint16_t tmp = Value;
 8003f18:	88bb      	ldrh	r3, [r7, #4]
 8003f1a:	81fb      	strh	r3, [r7, #14]

  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8003f1c:	89fb      	ldrh	r3, [r7, #14]
 8003f1e:	0a1b      	lsrs	r3, r3, #8
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	80bb      	strh	r3, [r7, #4]

  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8003f24:	89fb      	ldrh	r3, [r7, #14]
 8003f26:	021b      	lsls	r3, r3, #8
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	b21a      	sxth	r2, r3
 8003f2c:	88bb      	ldrh	r3, [r7, #4]
 8003f2e:	b21b      	sxth	r3, r3
 8003f30:	4313      	orrs	r3, r2
 8003f32:	b21b      	sxth	r3, r3
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	80bb      	strh	r3, [r7, #4]

  I2Cx_WriteMultiple(&hi2c3, AUDIO_I2C_ADDRESS, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8003f38:	88fa      	ldrh	r2, [r7, #6]
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	9301      	str	r3, [sp, #4]
 8003f3e:	1d3b      	adds	r3, r7, #4
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	2302      	movs	r3, #2
 8003f44:	2134      	movs	r1, #52	; 0x34
 8003f46:	4803      	ldr	r0, [pc, #12]	; (8003f54 <AUDIO_I2C_Write+0x4c>)
 8003f48:	f7ff ffa1 	bl	8003e8e <I2Cx_WriteMultiple>
  //I2Cx_WriteMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
}
 8003f4c:	bf00      	nop
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20001a0c 	.word	0x20001a0c

08003f58 <AUDIO_I2C_Read>:
/**
  * Reads a single CONTROL data from the audio codec over the I2C bus.
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint16_t AUDIO_I2C_Read(uint16_t Reg){
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	4603      	mov	r3, r0
 8003f60:	80fb      	strh	r3, [r7, #6]

  uint16_t read_value = 0, tmp = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	81bb      	strh	r3, [r7, #12]
 8003f66:	2300      	movs	r3, #0
 8003f68:	81fb      	strh	r3, [r7, #14]

  I2Cx_ReadMultiple(&hi2c3, AUDIO_I2C_ADDRESS, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8003f6a:	88fa      	ldrh	r2, [r7, #6]
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	9301      	str	r3, [sp, #4]
 8003f70:	f107 030c 	add.w	r3, r7, #12
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	2302      	movs	r3, #2
 8003f78:	2134      	movs	r1, #52	; 0x34
 8003f7a:	480b      	ldr	r0, [pc, #44]	; (8003fa8 <AUDIO_I2C_Read+0x50>)
 8003f7c:	f7ff ff5a 	bl	8003e34 <I2Cx_ReadMultiple>
  //I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);

  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8003f80:	89bb      	ldrh	r3, [r7, #12]
 8003f82:	0a1b      	lsrs	r3, r3, #8
 8003f84:	81fb      	strh	r3, [r7, #14]

  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8003f86:	89bb      	ldrh	r3, [r7, #12]
 8003f88:	021b      	lsls	r3, r3, #8
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	b21a      	sxth	r2, r3
 8003f8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	b21b      	sxth	r3, r3
 8003f96:	81fb      	strh	r3, [r7, #14]

  read_value = tmp;
 8003f98:	89fb      	ldrh	r3, [r7, #14]
 8003f9a:	81bb      	strh	r3, [r7, #12]

  return read_value;
 8003f9c:	89bb      	ldrh	r3, [r7, #12]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20001a0c 	.word	0x20001a0c

08003fac <TS_I2C_Write>:
  * Writes a single control data to the touchscreen controller over the I2C bus.
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_I2C_Write(uint8_t Reg, uint8_t Value){
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	460a      	mov	r2, r1
 8003fb6:	71fb      	strb	r3, [r7, #7]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	71bb      	strb	r3, [r7, #6]

  I2Cx_WriteMultiple(&hi2c3, TS_I2C_ADDRESS, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	9301      	str	r3, [sp, #4]
 8003fc4:	1dbb      	adds	r3, r7, #6
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	2301      	movs	r3, #1
 8003fca:	2170      	movs	r1, #112	; 0x70
 8003fcc:	4803      	ldr	r0, [pc, #12]	; (8003fdc <TS_I2C_Write+0x30>)
 8003fce:	f7ff ff5e 	bl	8003e8e <I2Cx_WriteMultiple>

}
 8003fd2:	bf00      	nop
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20001a0c 	.word	0x20001a0c

08003fe0 <SCB_CleanDCache>:
/**
  \brief   Clean D-Cache
  \details Cleans D-Cache
  */
__STATIC_INLINE void SCB_CleanDCache (void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

     SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003fe6:	4b1b      	ldr	r3, [pc, #108]	; (8004054 <SCB_CleanDCache+0x74>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003fee:	f3bf 8f4f 	dsb	sy
}
 8003ff2:	bf00      	nop
   __DSB();

    ccsidr = SCB->CCSIDR;
 8003ff4:	4b17      	ldr	r3, [pc, #92]	; (8004054 <SCB_CleanDCache+0x74>)
 8003ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ffa:	607b      	str	r3, [r7, #4]

                                            /* clean D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	0b5b      	lsrs	r3, r3, #13
 8004000:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004004:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	08db      	lsrs	r3, r3, #3
 800400a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800400e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8004018:	4013      	ands	r3, r2
                      ((ways << SCB_DCCSW_WAY_Pos) & SCB_DCCSW_WAY_Msk)  );
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	0792      	lsls	r2, r2, #30
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
 800401e:	490d      	ldr	r1, [pc, #52]	; (8004054 <SCB_CleanDCache+0x74>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 326c 	str.w	r3, [r1, #620]	; 0x26c
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	1e5a      	subs	r2, r3, #1
 800402a:	60ba      	str	r2, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1ef      	bne.n	8004010 <SCB_CleanDCache+0x30>
    } while(sets-- != 0U);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	1e5a      	subs	r2, r3, #1
 8004034:	60fa      	str	r2, [r7, #12]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1e5      	bne.n	8004006 <SCB_CleanDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800403a:	f3bf 8f4f 	dsb	sy
}
 800403e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004040:	f3bf 8f6f 	isb	sy
}
 8004044:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8004046:	bf00      	nop
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	e000ed00 	.word	0xe000ed00

08004058 <LCD_Init>:

/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
void LCD_Init(void){
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0

	/* check if FB has a pixel format coherent with PF_565 define */
#ifdef PF_565
	if (hltdc.LayerCfg[0].PixelFormat != LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB565, check MX_LTDC_Init() or undefine PF_565");
 800405c:	4b0f      	ldr	r3, [pc, #60]	; (800409c <LCD_Init+0x44>)
 800405e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004060:	2b02      	cmp	r3, #2
 8004062:	d002      	beq.n	800406a <LCD_Init+0x12>
 8004064:	480e      	ldr	r0, [pc, #56]	; (80040a0 <LCD_Init+0x48>)
 8004066:	f7fe fbad 	bl	80027c4 <Error>
#else
	if (hltdc.LayerCfg[0].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB888, check MX_LTDC_Init() or define PF_565");
#endif

#ifndef FB_IN_SDRAM
	HAL_LTDC_SetAddress(&hltdc, frameBuf0, 0);
 800406a:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <LCD_Init+0x4c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2200      	movs	r2, #0
 8004070:	4619      	mov	r1, r3
 8004072:	480a      	ldr	r0, [pc, #40]	; (800409c <LCD_Init+0x44>)
 8004074:	f006 fa9a 	bl	800a5ac <HAL_LTDC_SetAddress>
#endif

	LCD_DisplayOn();
 8004078:	f000 f81a 	bl	80040b0 <LCD_DisplayOn>

	LCD_SetFont(&LCD_DEFAULT_FONT);
 800407c:	480a      	ldr	r0, [pc, #40]	; (80040a8 <LCD_Init+0x50>)
 800407e:	f000 f87d 	bl	800417c <LCD_SetFont>

	LCD_SetBackColor(LCD_COLOR_WHITE);
 8004082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004086:	f000 f861 	bl	800414c <LCD_SetBackColor>
	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 800408a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800408e:	f000 f82d 	bl	80040ec <LCD_SetStrokeColor>
	LCD_SetFillColor(LCD_COLOR_RED);
 8004092:	4806      	ldr	r0, [pc, #24]	; (80040ac <LCD_Init+0x54>)
 8004094:	f000 f842 	bl	800411c <LCD_SetFillColor>


}
 8004098:	bf00      	nop
 800409a:	bd80      	pop	{r7, pc}
 800409c:	20001a60 	.word	0x20001a60
 80040a0:	0801ef18 	.word	0x0801ef18
 80040a4:	20000014 	.word	0x20000014
 80040a8:	2000001c 	.word	0x2000001c
 80040ac:	ffff0000 	.word	0xffff0000

080040b0 <LCD_DisplayOn>:
/**
 * @brief  Enables the display.
 * @retval None
 */
void LCD_DisplayOn(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
	__HAL_LTDC_ENABLE(&hltdc);
 80040b4:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <LCD_DisplayOn+0x30>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <LCD_DisplayOn+0x30>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80040c4:	2201      	movs	r2, #1
 80040c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040ca:	4806      	ldr	r0, [pc, #24]	; (80040e4 <LCD_DisplayOn+0x34>)
 80040cc:	f003 fdae 	bl	8007c2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80040d0:	2201      	movs	r2, #1
 80040d2:	2108      	movs	r1, #8
 80040d4:	4804      	ldr	r0, [pc, #16]	; (80040e8 <LCD_DisplayOn+0x38>)
 80040d6:	f003 fda9 	bl	8007c2c <HAL_GPIO_WritePin>
}
 80040da:	bf00      	nop
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20001a60 	.word	0x20001a60
 80040e4:	40022000 	.word	0x40022000
 80040e8:	40022800 	.word	0x40022800

080040ec <LCD_SetStrokeColor>:
/**
 * @brief  Sets the LCD stroke (and text) color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetStrokeColor(uint32_t Color8888)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	StrokeColor = Color8888;
 80040f4:	4a07      	ldr	r2, [pc, #28]	; (8004114 <LCD_SetStrokeColor+0x28>)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	StrokeColor565 = ARGB888ToRGB565(StrokeColor);
 80040fa:	4b06      	ldr	r3, [pc, #24]	; (8004114 <LCD_SetStrokeColor+0x28>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fb3e 	bl	8004780 <ARGB888ToRGB565>
 8004104:	4603      	mov	r3, r0
 8004106:	461a      	mov	r2, r3
 8004108:	4b03      	ldr	r3, [pc, #12]	; (8004118 <LCD_SetStrokeColor+0x2c>)
 800410a:	601a      	str	r2, [r3, #0]
#endif
}
 800410c:	bf00      	nop
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	20041dd8 	.word	0x20041dd8
 8004118:	20041de4 	.word	0x20041de4

0800411c <LCD_SetFillColor>:
/**
 * @brief  Sets the LCD fill color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetFillColor(uint32_t Color8888)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
	FillColor = Color8888;
 8004124:	4a07      	ldr	r2, [pc, #28]	; (8004144 <LCD_SetFillColor+0x28>)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	FillColor565 = ARGB888ToRGB565(FillColor);
 800412a:	4b06      	ldr	r3, [pc, #24]	; (8004144 <LCD_SetFillColor+0x28>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f000 fb26 	bl	8004780 <ARGB888ToRGB565>
 8004134:	4603      	mov	r3, r0
 8004136:	461a      	mov	r2, r3
 8004138:	4b03      	ldr	r3, [pc, #12]	; (8004148 <LCD_SetFillColor+0x2c>)
 800413a:	601a      	str	r2, [r3, #0]
#endif
}
 800413c:	bf00      	nop
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	20041ddc 	.word	0x20041ddc
 8004148:	20041de8 	.word	0x20041de8

0800414c <LCD_SetBackColor>:
 * @brief  Sets the LCD background color.
 * @param  Color: Layer background color code ARGB(8-8-8-8)
 * @retval None
 */
void LCD_SetBackColor(uint32_t Color)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
	BackColor = Color;
 8004154:	4a07      	ldr	r2, [pc, #28]	; (8004174 <LCD_SetBackColor+0x28>)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	BackColor565 = ARGB888ToRGB565(BackColor);
 800415a:	4b06      	ldr	r3, [pc, #24]	; (8004174 <LCD_SetBackColor+0x28>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fb0e 	bl	8004780 <ARGB888ToRGB565>
 8004164:	4603      	mov	r3, r0
 8004166:	461a      	mov	r2, r3
 8004168:	4b03      	ldr	r3, [pc, #12]	; (8004178 <LCD_SetBackColor+0x2c>)
 800416a:	601a      	str	r2, [r3, #0]
#endif
}
 800416c:	bf00      	nop
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	20041de0 	.word	0x20041de0
 8004178:	20041dec 	.word	0x20041dec

0800417c <LCD_SetFont>:
 * @brief  Sets the LCD text font.
 * @param  fonts: Layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *fonts)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
	pFont = fonts;
 8004184:	4a04      	ldr	r2, [pc, #16]	; (8004198 <LCD_SetFont+0x1c>)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6013      	str	r3, [r2, #0]
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	20041df0 	.word	0x20041df0

0800419c <LCD_ErasePixel>:
 * @param  Xpos: X position
 * @param  Ypos: Y position
 * @retval None
 */
void LCD_ErasePixel(uint16_t Xpos, uint16_t Ypos)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	4603      	mov	r3, r0
 80041a4:	460a      	mov	r2, r1
 80041a6:	80fb      	strh	r3, [r7, #6]
 80041a8:	4613      	mov	r3, r2
 80041aa:	80bb      	strh	r3, [r7, #4]
	__DrawPixel(Xpos, Ypos, BACK_COLOR);
 80041ac:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <LCD_ErasePixel+0x3c>)
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <LCD_ErasePixel+0x40>)
 80041b2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80041b4:	88ba      	ldrh	r2, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	015b      	lsls	r3, r3, #5
 80041be:	461a      	mov	r2, r3
 80041c0:	88fb      	ldrh	r3, [r7, #6]
 80041c2:	4413      	add	r3, r2
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	440b      	add	r3, r1
 80041c8:	b282      	uxth	r2, r0
 80041ca:	801a      	strh	r2, [r3, #0]
	__CleanDCache();
 80041cc:	f7ff ff08 	bl	8003fe0 <SCB_CleanDCache>
}
 80041d0:	bf00      	nop
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20041dec 	.word	0x20041dec
 80041dc:	20001a60 	.word	0x20001a60

080041e0 <LCD_Clear>:
/**
 * @brief  Clears the whole LCD, ie fills with background color
 * @retval None
 */
void LCD_Clear()
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af02      	add	r7, sp, #8
	/* Clear the LCD */
	LL_FillBuffer((uint32_t *)(hltdc.LayerCfg[0].FBStartAdress), LCD_SCREEN_WIDTH, LCD_SCREEN_HEIGHT, 0, BackColor);
 80041e6:	4b08      	ldr	r3, [pc, #32]	; (8004208 <LCD_Clear+0x28>)
 80041e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ea:	4618      	mov	r0, r3
 80041ec:	4b07      	ldr	r3, [pc, #28]	; (800420c <LCD_Clear+0x2c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	2300      	movs	r3, #0
 80041f4:	f44f 7288 	mov.w	r2, #272	; 0x110
 80041f8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80041fc:	f000 fa88 	bl	8004710 <LL_FillBuffer>
}
 8004200:	bf00      	nop
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20001a60 	.word	0x20001a60
 800420c:	20041de0 	.word	0x20041de0

08004210 <LCD_DrawChar>:
 * @param  Ascii: Character ascii code
 *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
 * @retval None
 */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii, const boolean_t isOpaqueBackground)
{
 8004210:	b590      	push	{r4, r7, lr}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	4604      	mov	r4, r0
 8004218:	4608      	mov	r0, r1
 800421a:	4611      	mov	r1, r2
 800421c:	461a      	mov	r2, r3
 800421e:	4623      	mov	r3, r4
 8004220:	80fb      	strh	r3, [r7, #6]
 8004222:	4603      	mov	r3, r0
 8004224:	80bb      	strh	r3, [r7, #4]
 8004226:	460b      	mov	r3, r1
 8004228:	70fb      	strb	r3, [r7, #3]
 800422a:	4613      	mov	r3, r2
 800422c:	70bb      	strb	r3, [r7, #2]
	DrawChar(Xpos, Ypos, &pFont->table[(Ascii-' ') * pFont->Height * ((pFont->Width + 7) / 8)], isOpaqueBackground);
 800422e:	4b0f      	ldr	r3, [pc, #60]	; (800426c <LCD_DrawChar+0x5c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	78fb      	ldrb	r3, [r7, #3]
 8004236:	3b20      	subs	r3, #32
 8004238:	490c      	ldr	r1, [pc, #48]	; (800426c <LCD_DrawChar+0x5c>)
 800423a:	6809      	ldr	r1, [r1, #0]
 800423c:	88c9      	ldrh	r1, [r1, #6]
 800423e:	fb03 f101 	mul.w	r1, r3, r1
 8004242:	4b0a      	ldr	r3, [pc, #40]	; (800426c <LCD_DrawChar+0x5c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	889b      	ldrh	r3, [r3, #4]
 8004248:	3307      	adds	r3, #7
 800424a:	2b00      	cmp	r3, #0
 800424c:	da00      	bge.n	8004250 <LCD_DrawChar+0x40>
 800424e:	3307      	adds	r3, #7
 8004250:	10db      	asrs	r3, r3, #3
 8004252:	fb01 f303 	mul.w	r3, r1, r3
 8004256:	441a      	add	r2, r3
 8004258:	78bb      	ldrb	r3, [r7, #2]
 800425a:	88b9      	ldrh	r1, [r7, #4]
 800425c:	88f8      	ldrh	r0, [r7, #6]
 800425e:	f000 f9af 	bl	80045c0 <DrawChar>

}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	bd90      	pop	{r4, r7, pc}
 800426a:	bf00      	nop
 800426c:	20041df0 	.word	0x20041df0

08004270 <LCD_DrawString>:
 *            @arg  RIGHT_MODE
 *            @arg  LEFT_MODE
 * @retval None
 */
void LCD_DrawString(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Alignment, const boolean_t isOpaqueBackground)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af00      	add	r7, sp, #0
 8004276:	60ba      	str	r2, [r7, #8]
 8004278:	461a      	mov	r2, r3
 800427a:	4603      	mov	r3, r0
 800427c:	81fb      	strh	r3, [r7, #14]
 800427e:	460b      	mov	r3, r1
 8004280:	81bb      	strh	r3, [r7, #12]
 8004282:	4613      	mov	r3, r2
 8004284:	71fb      	strb	r3, [r7, #7]
	uint16_t ref_column = 1, i = 0;
 8004286:	2301      	movs	r3, #1
 8004288:	83fb      	strh	r3, [r7, #30]
 800428a:	2300      	movs	r3, #0
 800428c:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	2300      	movs	r3, #0
 8004294:	613b      	str	r3, [r7, #16]
	uint8_t  *ptr = Text;
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++) size ++ ;
 800429a:	e002      	b.n	80042a2 <LCD_DrawString+0x32>
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	3301      	adds	r3, #1
 80042a0:	61bb      	str	r3, [r7, #24]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	617a      	str	r2, [r7, #20]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f6      	bne.n	800429c <LCD_DrawString+0x2c>

	/* Characters number per line */
	xsize = (LCD_SCREEN_WIDTH / pFont->Width);
 80042ae:	4b3a      	ldr	r3, [pc, #232]	; (8004398 <LCD_DrawString+0x128>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	889b      	ldrh	r3, [r3, #4]
 80042b4:	461a      	mov	r2, r3
 80042b6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80042ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80042be:	613b      	str	r3, [r7, #16]

	switch (Alignment)
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d014      	beq.n	80042f0 <LCD_DrawString+0x80>
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	dc23      	bgt.n	8004312 <LCD_DrawString+0xa2>
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d002      	beq.n	80042d4 <LCD_DrawString+0x64>
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d011      	beq.n	80042f6 <LCD_DrawString+0x86>
 80042d2:	e01e      	b.n	8004312 <LCD_DrawString+0xa2>
	{
	case CENTER_MODE:
	{
		ref_column = Xpos + ((xsize - size)* pFont->Width) / 2;
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	4a2f      	ldr	r2, [pc, #188]	; (8004398 <LCD_DrawString+0x128>)
 80042dc:	6812      	ldr	r2, [r2, #0]
 80042de:	8892      	ldrh	r2, [r2, #4]
 80042e0:	fb02 f303 	mul.w	r3, r2, r3
 80042e4:	085b      	lsrs	r3, r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	89fb      	ldrh	r3, [r7, #14]
 80042ea:	4413      	add	r3, r2
 80042ec:	83fb      	strh	r3, [r7, #30]
		break;
 80042ee:	e013      	b.n	8004318 <LCD_DrawString+0xa8>
	}
	case LEFT_MODE:
	{
		ref_column = Xpos;
 80042f0:	89fb      	ldrh	r3, [r7, #14]
 80042f2:	83fb      	strh	r3, [r7, #30]
		break;
 80042f4:	e010      	b.n	8004318 <LCD_DrawString+0xa8>
	}
	case RIGHT_MODE:
	{
		ref_column = - Xpos + ((xsize - size)*pFont->Width);
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	4b26      	ldr	r3, [pc, #152]	; (8004398 <LCD_DrawString+0x128>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	889b      	ldrh	r3, [r3, #4]
 8004304:	fb12 f303 	smulbb	r3, r2, r3
 8004308:	b29a      	uxth	r2, r3
 800430a:	89fb      	ldrh	r3, [r7, #14]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	83fb      	strh	r3, [r7, #30]
		break;
 8004310:	e002      	b.n	8004318 <LCD_DrawString+0xa8>
	}
	default:
	{
		ref_column = Xpos;
 8004312:	89fb      	ldrh	r3, [r7, #14]
 8004314:	83fb      	strh	r3, [r7, #30]
		break;
 8004316:	bf00      	nop
	}
	}

	/* Check that the Start column is located in the screen */
	if ((ref_column < 1) || (ref_column >= 0x8000))
 8004318:	8bfb      	ldrh	r3, [r7, #30]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <LCD_DrawString+0xb6>
 800431e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004322:	2b00      	cmp	r3, #0
 8004324:	da16      	bge.n	8004354 <LCD_DrawString+0xe4>
	{
		ref_column = 1;
 8004326:	2301      	movs	r3, #1
 8004328:	83fb      	strh	r3, [r7, #30]
	}

	/* Send the string character by character on LCD */
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 800432a:	e013      	b.n	8004354 <LCD_DrawString+0xe4>
	{
		/* Display one character on LCD */
		LCD_DrawChar(ref_column, Ypos, *Text, isOpaqueBackground);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	781a      	ldrb	r2, [r3, #0]
 8004330:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004334:	89b9      	ldrh	r1, [r7, #12]
 8004336:	8bf8      	ldrh	r0, [r7, #30]
 8004338:	f7ff ff6a 	bl	8004210 <LCD_DrawChar>
		/* Decrement the column position by 16 */
		ref_column += pFont->Width;
 800433c:	4b16      	ldr	r3, [pc, #88]	; (8004398 <LCD_DrawString+0x128>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	889a      	ldrh	r2, [r3, #4]
 8004342:	8bfb      	ldrh	r3, [r7, #30]
 8004344:	4413      	add	r3, r2
 8004346:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		Text++;
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	3301      	adds	r3, #1
 800434c:	60bb      	str	r3, [r7, #8]
		i++;
 800434e:	8bbb      	ldrh	r3, [r7, #28]
 8004350:	3301      	adds	r3, #1
 8004352:	83bb      	strh	r3, [r7, #28]
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	bf14      	ite	ne
 800435c:	2301      	movne	r3, #1
 800435e:	2300      	moveq	r3, #0
 8004360:	b2da      	uxtb	r2, r3
 8004362:	8bbb      	ldrh	r3, [r7, #28]
 8004364:	490c      	ldr	r1, [pc, #48]	; (8004398 <LCD_DrawString+0x128>)
 8004366:	6809      	ldr	r1, [r1, #0]
 8004368:	8889      	ldrh	r1, [r1, #4]
 800436a:	fb01 f303 	mul.w	r3, r1, r3
 800436e:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8004372:	b29b      	uxth	r3, r3
 8004374:	4908      	ldr	r1, [pc, #32]	; (8004398 <LCD_DrawString+0x128>)
 8004376:	6809      	ldr	r1, [r1, #0]
 8004378:	8889      	ldrh	r1, [r1, #4]
 800437a:	428b      	cmp	r3, r1
 800437c:	bfac      	ite	ge
 800437e:	2301      	movge	r3, #1
 8004380:	2300      	movlt	r3, #0
 8004382:	b2db      	uxtb	r3, r3
 8004384:	4013      	ands	r3, r2
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1cf      	bne.n	800432c <LCD_DrawString+0xbc>
	}
}
 800438c:	bf00      	nop
 800438e:	bf00      	nop
 8004390:	3720      	adds	r7, #32
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	20041df0 	.word	0x20041df0

0800439c <LCD_DrawLine>:
 * @param  y1: Point 1 Y position
 * @param  x2: Point 2 X position
 * @param  y2: Point 2 Y position
 * @retval None
 */
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2){
 800439c:	b590      	push	{r4, r7, lr}
 800439e:	b085      	sub	sp, #20
 80043a0:	af02      	add	r7, sp, #8
 80043a2:	4604      	mov	r4, r0
 80043a4:	4608      	mov	r0, r1
 80043a6:	4611      	mov	r1, r2
 80043a8:	461a      	mov	r2, r3
 80043aa:	4623      	mov	r3, r4
 80043ac:	80fb      	strh	r3, [r7, #6]
 80043ae:	4603      	mov	r3, r0
 80043b0:	80bb      	strh	r3, [r7, #4]
 80043b2:	460b      	mov	r3, r1
 80043b4:	807b      	strh	r3, [r7, #2]
 80043b6:	4613      	mov	r3, r2
 80043b8:	803b      	strh	r3, [r7, #0]
	DrawLine(x1, y1, x2, y2, STROKE_COLOR);
 80043ba:	4b08      	ldr	r3, [pc, #32]	; (80043dc <LCD_DrawLine+0x40>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	b29b      	uxth	r3, r3
 80043c0:	883c      	ldrh	r4, [r7, #0]
 80043c2:	887a      	ldrh	r2, [r7, #2]
 80043c4:	88b9      	ldrh	r1, [r7, #4]
 80043c6:	88f8      	ldrh	r0, [r7, #6]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	4623      	mov	r3, r4
 80043cc:	f000 f82a 	bl	8004424 <DrawLine>
	__CleanDCache();
 80043d0:	f7ff fe06 	bl	8003fe0 <SCB_CleanDCache>
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd90      	pop	{r4, r7, pc}
 80043dc:	20041de4 	.word	0x20041de4

080043e0 <LCD_EraseLine>:

void LCD_EraseLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2){
 80043e0:	b590      	push	{r4, r7, lr}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	4604      	mov	r4, r0
 80043e8:	4608      	mov	r0, r1
 80043ea:	4611      	mov	r1, r2
 80043ec:	461a      	mov	r2, r3
 80043ee:	4623      	mov	r3, r4
 80043f0:	80fb      	strh	r3, [r7, #6]
 80043f2:	4603      	mov	r3, r0
 80043f4:	80bb      	strh	r3, [r7, #4]
 80043f6:	460b      	mov	r3, r1
 80043f8:	807b      	strh	r3, [r7, #2]
 80043fa:	4613      	mov	r3, r2
 80043fc:	803b      	strh	r3, [r7, #0]
	DrawLine(x1, y1, x2, y2, BACK_COLOR);
 80043fe:	4b08      	ldr	r3, [pc, #32]	; (8004420 <LCD_EraseLine+0x40>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	b29b      	uxth	r3, r3
 8004404:	883c      	ldrh	r4, [r7, #0]
 8004406:	887a      	ldrh	r2, [r7, #2]
 8004408:	88b9      	ldrh	r1, [r7, #4]
 800440a:	88f8      	ldrh	r0, [r7, #6]
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	4623      	mov	r3, r4
 8004410:	f000 f808 	bl	8004424 <DrawLine>
	__CleanDCache();
 8004414:	f7ff fde4 	bl	8003fe0 <SCB_CleanDCache>
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	bd90      	pop	{r4, r7, pc}
 8004420:	20041dec 	.word	0x20041dec

08004424 <DrawLine>:
#ifdef PF_565
static void DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
#else
static void DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint32_t color)
#endif
{
 8004424:	b490      	push	{r4, r7}
 8004426:	b08a      	sub	sp, #40	; 0x28
 8004428:	af00      	add	r7, sp, #0
 800442a:	4604      	mov	r4, r0
 800442c:	4608      	mov	r0, r1
 800442e:	4611      	mov	r1, r2
 8004430:	461a      	mov	r2, r3
 8004432:	4623      	mov	r3, r4
 8004434:	80fb      	strh	r3, [r7, #6]
 8004436:	4603      	mov	r3, r0
 8004438:	80bb      	strh	r3, [r7, #4]
 800443a:	460b      	mov	r3, r1
 800443c:	807b      	strh	r3, [r7, #2]
 800443e:	4613      	mov	r3, r2
 8004440:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8004442:	2300      	movs	r3, #0
 8004444:	823b      	strh	r3, [r7, #16]
 8004446:	2300      	movs	r3, #0
 8004448:	81fb      	strh	r3, [r7, #14]
 800444a:	2300      	movs	r3, #0
 800444c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800444e:	2300      	movs	r3, #0
 8004450:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004452:	2300      	movs	r3, #0
 8004454:	847b      	strh	r3, [r7, #34]	; 0x22
 8004456:	2300      	movs	r3, #0
 8004458:	843b      	strh	r3, [r7, #32]
			yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0,
 800445a:	2300      	movs	r3, #0
 800445c:	83fb      	strh	r3, [r7, #30]
 800445e:	2300      	movs	r3, #0
 8004460:	83bb      	strh	r3, [r7, #28]
 8004462:	2300      	movs	r3, #0
 8004464:	837b      	strh	r3, [r7, #26]
 8004466:	2300      	movs	r3, #0
 8004468:	833b      	strh	r3, [r7, #24]
 800446a:	2300      	movs	r3, #0
 800446c:	82fb      	strh	r3, [r7, #22]
 800446e:	2300      	movs	r3, #0
 8004470:	82bb      	strh	r3, [r7, #20]
			curpixel = 0;
 8004472:	2300      	movs	r3, #0
 8004474:	827b      	strh	r3, [r7, #18]

	deltax = ABS(x2 - x1);        /* The difference between the x's */
 8004476:	887a      	ldrh	r2, [r7, #2]
 8004478:	88fb      	ldrh	r3, [r7, #6]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	bfb8      	it	lt
 8004480:	425b      	neglt	r3, r3
 8004482:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);        /* The difference between the y's */
 8004484:	883a      	ldrh	r2, [r7, #0]
 8004486:	88bb      	ldrh	r3, [r7, #4]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	bfb8      	it	lt
 800448e:	425b      	neglt	r3, r3
 8004490:	81fb      	strh	r3, [r7, #14]
	x = x1;                       /* Start x off at the first pixel */
 8004492:	88fb      	ldrh	r3, [r7, #6]
 8004494:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;                       /* Start y off at the first pixel */
 8004496:	88bb      	ldrh	r3, [r7, #4]
 8004498:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1)                 /* The x-values are increasing */
 800449a:	887a      	ldrh	r2, [r7, #2]
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d304      	bcc.n	80044ac <DrawLine+0x88>
	{
		xinc1 = 1;
 80044a2:	2301      	movs	r3, #1
 80044a4:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 80044a6:	2301      	movs	r3, #1
 80044a8:	843b      	strh	r3, [r7, #32]
 80044aa:	e005      	b.n	80044b8 <DrawLine+0x94>
	}
	else                          /* The x-values are decreasing */
	{
		xinc1 = -1;
 80044ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044b0:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 80044b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044b6:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1)                 /* The y-values are increasing */
 80044b8:	883a      	ldrh	r2, [r7, #0]
 80044ba:	88bb      	ldrh	r3, [r7, #4]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d304      	bcc.n	80044ca <DrawLine+0xa6>
	{
		yinc1 = 1;
 80044c0:	2301      	movs	r3, #1
 80044c2:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 80044c4:	2301      	movs	r3, #1
 80044c6:	83bb      	strh	r3, [r7, #28]
 80044c8:	e005      	b.n	80044d6 <DrawLine+0xb2>
	}
	else                          /* The y-values are decreasing */
	{
		yinc1 = -1;
 80044ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044ce:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 80044d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044d4:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80044d6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80044da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044de:	429a      	cmp	r2, r3
 80044e0:	db11      	blt.n	8004506 <DrawLine+0xe2>
	{
		xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80044e2:	2300      	movs	r3, #0
 80044e4:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;                  /* Don't change the y for every iteration */
 80044e6:	2300      	movs	r3, #0
 80044e8:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 80044ea:	8a3b      	ldrh	r3, [r7, #16]
 80044ec:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 80044ee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	da00      	bge.n	80044f8 <DrawLine+0xd4>
 80044f6:	3301      	adds	r3, #1
 80044f8:	105b      	asrs	r3, r3, #1
 80044fa:	833b      	strh	r3, [r7, #24]
		num_add = deltay;
 80044fc:	89fb      	ldrh	r3, [r7, #14]
 80044fe:	82fb      	strh	r3, [r7, #22]
		num_pixels = deltax;         /* There are more x-values than y-values */
 8004500:	8a3b      	ldrh	r3, [r7, #16]
 8004502:	82bb      	strh	r3, [r7, #20]
 8004504:	e010      	b.n	8004528 <DrawLine+0x104>
	}
	else                          /* There is at least one y-value for every x-value */
	{
		xinc2 = 0;                  /* Don't change the x for every iteration */
 8004506:	2300      	movs	r3, #0
 8004508:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 800450a:	2300      	movs	r3, #0
 800450c:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 800450e:	89fb      	ldrh	r3, [r7, #14]
 8004510:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8004512:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004516:	2b00      	cmp	r3, #0
 8004518:	da00      	bge.n	800451c <DrawLine+0xf8>
 800451a:	3301      	adds	r3, #1
 800451c:	105b      	asrs	r3, r3, #1
 800451e:	833b      	strh	r3, [r7, #24]
		num_add = deltax;
 8004520:	8a3b      	ldrh	r3, [r7, #16]
 8004522:	82fb      	strh	r3, [r7, #22]
		num_pixels = deltay;         /* There are more y-values than x-values */
 8004524:	89fb      	ldrh	r3, [r7, #14]
 8004526:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8004528:	2300      	movs	r3, #0
 800452a:	827b      	strh	r3, [r7, #18]
 800452c:	e03a      	b.n	80045a4 <DrawLine+0x180>
	{
		__DrawPixel(x, y, color);   /* Draw the current pixel */
 800452e:	4b23      	ldr	r3, [pc, #140]	; (80045bc <DrawLine+0x198>)
 8004530:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004532:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8004536:	4613      	mov	r3, r2
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	015b      	lsls	r3, r3, #5
 800453e:	461a      	mov	r2, r3
 8004540:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004544:	4413      	add	r3, r2
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	440b      	add	r3, r1
 800454a:	461a      	mov	r2, r3
 800454c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800454e:	8013      	strh	r3, [r2, #0]
		num += num_add;                            /* Increase the numerator by the top of the fraction */
 8004550:	8b3a      	ldrh	r2, [r7, #24]
 8004552:	8afb      	ldrh	r3, [r7, #22]
 8004554:	4413      	add	r3, r2
 8004556:	b29b      	uxth	r3, r3
 8004558:	833b      	strh	r3, [r7, #24]
		if (num >= den)                           /* Check if numerator >= denominator */
 800455a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800455e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004562:	429a      	cmp	r2, r3
 8004564:	db0e      	blt.n	8004584 <DrawLine+0x160>
		{
			num -= den;                             /* Calculate the new numerator value */
 8004566:	8b3a      	ldrh	r2, [r7, #24]
 8004568:	8b7b      	ldrh	r3, [r7, #26]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	b29b      	uxth	r3, r3
 800456e:	833b      	strh	r3, [r7, #24]
			x += xinc1;                             /* Change the x as appropriate */
 8004570:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004572:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004574:	4413      	add	r3, r2
 8004576:	b29b      	uxth	r3, r3
 8004578:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;                             /* Change the y as appropriate */
 800457a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800457c:	8bfb      	ldrh	r3, [r7, #30]
 800457e:	4413      	add	r3, r2
 8004580:	b29b      	uxth	r3, r3
 8004582:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;                               /* Change the x as appropriate */
 8004584:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004586:	8c3b      	ldrh	r3, [r7, #32]
 8004588:	4413      	add	r3, r2
 800458a:	b29b      	uxth	r3, r3
 800458c:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;                               /* Change the y as appropriate */
 800458e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004590:	8bbb      	ldrh	r3, [r7, #28]
 8004592:	4413      	add	r3, r2
 8004594:	b29b      	uxth	r3, r3
 8004596:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8004598:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800459c:	b29b      	uxth	r3, r3
 800459e:	3301      	adds	r3, #1
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	827b      	strh	r3, [r7, #18]
 80045a4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80045a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	ddbe      	ble.n	800452e <DrawLine+0x10a>
	}
}
 80045b0:	bf00      	nop
 80045b2:	bf00      	nop
 80045b4:	3728      	adds	r7, #40	; 0x28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc90      	pop	{r4, r7}
 80045ba:	4770      	bx	lr
 80045bc:	20001a60 	.word	0x20001a60

080045c0 <DrawChar>:
 * @param  Ypos: Start column address
 * @param  c: Pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c, const boolean_t isOpaqueBackground)
{
 80045c0:	b590      	push	{r4, r7, lr}
 80045c2:	b08b      	sub	sp, #44	; 0x2c
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60ba      	str	r2, [r7, #8]
 80045c8:	461a      	mov	r2, r3
 80045ca:	4603      	mov	r3, r0
 80045cc:	81fb      	strh	r3, [r7, #14]
 80045ce:	460b      	mov	r3, r1
 80045d0:	81bb      	strh	r3, [r7, #12]
 80045d2:	4613      	mov	r3, r2
 80045d4:	71fb      	strb	r3, [r7, #7]
	uint32_t i = 0, j = 0;
 80045d6:	2300      	movs	r3, #0
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
 80045da:	2300      	movs	r3, #0
 80045dc:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t  offset;
	uint8_t  *pchar;
	uint32_t line;

	height = pFont->Height;
 80045de:	4b49      	ldr	r3, [pc, #292]	; (8004704 <DrawChar+0x144>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	88db      	ldrh	r3, [r3, #6]
 80045e4:	837b      	strh	r3, [r7, #26]
	width  = pFont->Width;
 80045e6:	4b47      	ldr	r3, [pc, #284]	; (8004704 <DrawChar+0x144>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	889b      	ldrh	r3, [r3, #4]
 80045ec:	833b      	strh	r3, [r7, #24]

	offset =  8 *((width + 7)/8) -  width ;
 80045ee:	8b3b      	ldrh	r3, [r7, #24]
 80045f0:	3307      	adds	r3, #7
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	da00      	bge.n	80045f8 <DrawChar+0x38>
 80045f6:	3307      	adds	r3, #7
 80045f8:	10db      	asrs	r3, r3, #3
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	8b3b      	ldrh	r3, [r7, #24]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	75fb      	strb	r3, [r7, #23]

	for(i = 0; i < height; i++)
 8004608:	2300      	movs	r3, #0
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
 800460c:	e070      	b.n	80046f0 <DrawChar+0x130>
	{
		pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800460e:	8b3b      	ldrh	r3, [r7, #24]
 8004610:	3307      	adds	r3, #7
 8004612:	2b00      	cmp	r3, #0
 8004614:	da00      	bge.n	8004618 <DrawChar+0x58>
 8004616:	3307      	adds	r3, #7
 8004618:	10db      	asrs	r3, r3, #3
 800461a:	461a      	mov	r2, r3
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	fb02 f303 	mul.w	r3, r2, r3
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	4413      	add	r3, r2
 8004626:	613b      	str	r3, [r7, #16]

		switch(((width + 7)/8))
 8004628:	8b3b      	ldrh	r3, [r7, #24]
 800462a:	3307      	adds	r3, #7
 800462c:	2b00      	cmp	r3, #0
 800462e:	da00      	bge.n	8004632 <DrawChar+0x72>
 8004630:	3307      	adds	r3, #7
 8004632:	10db      	asrs	r3, r3, #3
 8004634:	2b01      	cmp	r3, #1
 8004636:	d002      	beq.n	800463e <DrawChar+0x7e>
 8004638:	2b02      	cmp	r3, #2
 800463a:	d004      	beq.n	8004646 <DrawChar+0x86>
 800463c:	e00c      	b.n	8004658 <DrawChar+0x98>
		{

		case 1:
			line =  pchar[0];
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	61fb      	str	r3, [r7, #28]
			break;
 8004644:	e016      	b.n	8004674 <DrawChar+0xb4>

		case 2:
			line =  (pchar[0]<< 8) | pchar[1];
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	3201      	adds	r2, #1
 8004650:	7812      	ldrb	r2, [r2, #0]
 8004652:	4313      	orrs	r3, r2
 8004654:	61fb      	str	r3, [r7, #28]
			break;
 8004656:	e00d      	b.n	8004674 <DrawChar+0xb4>

		case 3:
		default:
			line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	041a      	lsls	r2, r3, #16
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	3301      	adds	r3, #1
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	021b      	lsls	r3, r3, #8
 8004666:	4313      	orrs	r3, r2
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	3202      	adds	r2, #2
 800466c:	7812      	ldrb	r2, [r2, #0]
 800466e:	4313      	orrs	r3, r2
 8004670:	61fb      	str	r3, [r7, #28]
			break;
 8004672:	bf00      	nop
		}

		for (j = 0; j < width; j++)
 8004674:	2300      	movs	r3, #0
 8004676:	623b      	str	r3, [r7, #32]
 8004678:	e030      	b.n	80046dc <DrawChar+0x11c>
		{
			if(line & (1 << (width- j + offset- 1)))
 800467a:	8b3a      	ldrh	r2, [r7, #24]
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	1ad2      	subs	r2, r2, r3
 8004680:	7dfb      	ldrb	r3, [r7, #23]
 8004682:	4413      	add	r3, r2
 8004684:	3b01      	subs	r3, #1
 8004686:	2201      	movs	r2, #1
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	461a      	mov	r2, r3
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	4013      	ands	r3, r2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d012      	beq.n	80046bc <DrawChar+0xfc>
			{
				__DrawPixel((Xpos + j), Ypos, STROKE_COLOR);
 8004696:	4b1c      	ldr	r3, [pc, #112]	; (8004708 <DrawChar+0x148>)
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	4b1c      	ldr	r3, [pc, #112]	; (800470c <DrawChar+0x14c>)
 800469c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800469e:	89ba      	ldrh	r2, [r7, #12]
 80046a0:	4613      	mov	r3, r2
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	015b      	lsls	r3, r3, #5
 80046a8:	461c      	mov	r4, r3
 80046aa:	89fa      	ldrh	r2, [r7, #14]
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	4413      	add	r3, r2
 80046b0:	4423      	add	r3, r4
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	440b      	add	r3, r1
 80046b6:	b282      	uxth	r2, r0
 80046b8:	801a      	strh	r2, [r3, #0]
 80046ba:	e00c      	b.n	80046d6 <DrawChar+0x116>
			}
			else
			{
				if (isOpaqueBackground == true) LCD_ErasePixel((Xpos + j), Ypos);
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d109      	bne.n	80046d6 <DrawChar+0x116>
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	89fb      	ldrh	r3, [r7, #14]
 80046c8:	4413      	add	r3, r2
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	89ba      	ldrh	r2, [r7, #12]
 80046ce:	4611      	mov	r1, r2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff fd63 	bl	800419c <LCD_ErasePixel>
		for (j = 0; j < width; j++)
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	3301      	adds	r3, #1
 80046da:	623b      	str	r3, [r7, #32]
 80046dc:	8b3b      	ldrh	r3, [r7, #24]
 80046de:	6a3a      	ldr	r2, [r7, #32]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d3ca      	bcc.n	800467a <DrawChar+0xba>
			}
		}
		Ypos++;
 80046e4:	89bb      	ldrh	r3, [r7, #12]
 80046e6:	3301      	adds	r3, #1
 80046e8:	81bb      	strh	r3, [r7, #12]
	for(i = 0; i < height; i++)
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	3301      	adds	r3, #1
 80046ee:	627b      	str	r3, [r7, #36]	; 0x24
 80046f0:	8b7b      	ldrh	r3, [r7, #26]
 80046f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d38a      	bcc.n	800460e <DrawChar+0x4e>
	}

	__CleanDCache();
 80046f8:	f7ff fc72 	bl	8003fe0 <SCB_CleanDCache>
}
 80046fc:	bf00      	nop
 80046fe:	372c      	adds	r7, #44	; 0x2c
 8004700:	46bd      	mov	sp, r7
 8004702:	bd90      	pop	{r4, r7, pc}
 8004704:	20041df0 	.word	0x20041df0
 8004708:	20041de4 	.word	0x20041de4
 800470c:	20001a60 	.word	0x20001a60

08004710 <LL_FillBuffer>:
 * @param  OffLine: Offset
 * @param  withColor: fill color in ARGB888 format (even if FB may use RGB565)
 * @retval None
 */
static void LL_FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t withColor)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af02      	add	r7, sp, #8
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	603b      	str	r3, [r7, #0]
	/* Register to memory mode with ARGB8888 as color Mode */
	hdma2d.Init.Mode         = DMA2D_R2M;
 800471e:	4b16      	ldr	r3, [pc, #88]	; (8004778 <LL_FillBuffer+0x68>)
 8004720:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004724:	605a      	str	r2, [r3, #4]
#ifdef PF_565
	/* RGB565 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_RGB565;
 8004726:	4b14      	ldr	r3, [pc, #80]	; (8004778 <LL_FillBuffer+0x68>)
 8004728:	2202      	movs	r2, #2
 800472a:	609a      	str	r2, [r3, #8]
#else
	/* ARGB8888 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
#endif
	hdma2d.Init.OutputOffset = OffLine;
 800472c:	4a12      	ldr	r2, [pc, #72]	; (8004778 <LL_FillBuffer+0x68>)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	60d3      	str	r3, [r2, #12]

	hdma2d.Instance = DMA2D;
 8004732:	4b11      	ldr	r3, [pc, #68]	; (8004778 <LL_FillBuffer+0x68>)
 8004734:	4a11      	ldr	r2, [pc, #68]	; (800477c <LL_FillBuffer+0x6c>)
 8004736:	601a      	str	r2, [r3, #0]

	/* DMA2D Initialization */
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8004738:	480f      	ldr	r0, [pc, #60]	; (8004778 <LL_FillBuffer+0x68>)
 800473a:	f002 fc0b 	bl	8006f54 <HAL_DMA2D_Init>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d115      	bne.n	8004770 <LL_FillBuffer+0x60>
	{
		if(HAL_DMA2D_ConfigLayer(&hdma2d, 0) == HAL_OK)
 8004744:	2100      	movs	r1, #0
 8004746:	480c      	ldr	r0, [pc, #48]	; (8004778 <LL_FillBuffer+0x68>)
 8004748:	f002 fe72 	bl	8007430 <HAL_DMA2D_ConfigLayer>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10e      	bne.n	8004770 <LL_FillBuffer+0x60>
		{
			if (HAL_DMA2D_Start(&hdma2d, withColor, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	69b9      	ldr	r1, [r7, #24]
 800475c:	4806      	ldr	r0, [pc, #24]	; (8004778 <LL_FillBuffer+0x68>)
 800475e:	f002 fc43 	bl	8006fe8 <HAL_DMA2D_Start>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d103      	bne.n	8004770 <LL_FillBuffer+0x60>
			{
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(&hdma2d, 10); // TODO : adapt to to CMSIS-RTOS
 8004768:	210a      	movs	r1, #10
 800476a:	4803      	ldr	r0, [pc, #12]	; (8004778 <LL_FillBuffer+0x68>)
 800476c:	f002 fc67 	bl	800703e <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 8004770:	bf00      	nop
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	20001978 	.word	0x20001978
 800477c:	4002b000 	.word	0x4002b000

08004780 <ARGB888ToRGB565>:

/**
 * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
 */
static uint16_t ARGB888ToRGB565(uint32_t RGB_Code)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
	uint8_t red   = (RGB_Code & 0x00FF0000) >> 16;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	0c1b      	lsrs	r3, r3, #16
 800478c:	75fb      	strb	r3, [r7, #23]
	uint8_t green = (RGB_Code & 0x0000FF00) >> 8;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	0a1b      	lsrs	r3, r3, #8
 8004792:	75bb      	strb	r3, [r7, #22]
	uint8_t blue  = (RGB_Code & 0x000000FF);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	757b      	strb	r3, [r7, #21]

	uint16_t b = (blue >> 3) & 0x1f; // 5 bits
 8004798:	7d7b      	ldrb	r3, [r7, #21]
 800479a:	08db      	lsrs	r3, r3, #3
 800479c:	b2db      	uxtb	r3, r3
 800479e:	b29b      	uxth	r3, r3
 80047a0:	f003 031f 	and.w	r3, r3, #31
 80047a4:	827b      	strh	r3, [r7, #18]
	uint16_t g = ((green >> 2) & 0x3f) << 5; // 6 bits
 80047a6:	7dbb      	ldrb	r3, [r7, #22]
 80047a8:	089b      	lsrs	r3, r3, #2
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	015b      	lsls	r3, r3, #5
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80047b4:	823b      	strh	r3, [r7, #16]
	uint16_t r = ((red >> 3) & 0x1f) << 11; // 5 bits
 80047b6:	7dfb      	ldrb	r3, [r7, #23]
 80047b8:	08db      	lsrs	r3, r3, #3
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	02db      	lsls	r3, r3, #11
 80047be:	81fb      	strh	r3, [r7, #14]

	return (uint16_t) (r | g | b);
 80047c0:	89fa      	ldrh	r2, [r7, #14]
 80047c2:	8a3b      	ldrh	r3, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	8a7b      	ldrh	r3, [r7, #18]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	b29b      	uxth	r3, r3
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
	...

080047dc <DISCO_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t DISCO_QSPI_EnableMemoryMappedMode(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b090      	sub	sp, #64	; 0x40
 80047e0:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80047e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047e6:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80047e8:	23eb      	movs	r3, #235	; 0xeb
 80047ea:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80047ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 80047f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047f6:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80047f8:	2300      	movs	r3, #0
 80047fa:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80047fc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8004800:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8004802:	230a      	movs	r3, #10
 8004804:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004806:	2300      	movs	r3, #0
 8004808:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800480a:	2300      	movs	r3, #0
 800480c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800480e:	2300      	movs	r3, #0
 8004810:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8004812:	2300      	movs	r3, #0
 8004814:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004816:	2300      	movs	r3, #0
 8004818:	603b      	str	r3, [r7, #0]

  if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800481a:	463a      	mov	r2, r7
 800481c:	f107 0308 	add.w	r3, r7, #8
 8004820:	4619      	mov	r1, r3
 8004822:	4806      	ldr	r0, [pc, #24]	; (800483c <DISCO_QSPI_EnableMemoryMappedMode+0x60>)
 8004824:	f007 fff4 	bl	800c810 <HAL_QSPI_MemoryMapped>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <DISCO_QSPI_EnableMemoryMappedMode+0x56>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <DISCO_QSPI_EnableMemoryMappedMode+0x58>
  }

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3740      	adds	r7, #64	; 0x40
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	20001b08 	.word	0x20001b08

08004840 <DISCO_QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b090      	sub	sp, #64	; 0x40
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800484c:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 800484e:	2366      	movs	r3, #102	; 0x66
 8004850:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004852:	2300      	movs	r3, #0
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004856:	2300      	movs	r3, #0
 8004858:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800485a:	2300      	movs	r3, #0
 800485c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800485e:	2300      	movs	r3, #0
 8004860:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004862:	2300      	movs	r3, #0
 8004864:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004866:	2300      	movs	r3, #0
 8004868:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800486a:	2300      	movs	r3, #0
 800486c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800486e:	f107 0308 	add.w	r3, r7, #8
 8004872:	f241 3288 	movw	r2, #5000	; 0x1388
 8004876:	4619      	mov	r1, r3
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f007 fdbb 	bl	800c3f4 <HAL_QSPI_Command>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <DISCO_QSPI_ResetMemory+0x48>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e019      	b.n	80048bc <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8004888:	2399      	movs	r3, #153	; 0x99
 800488a:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800488c:	f107 0308 	add.w	r3, r7, #8
 8004890:	f241 3288 	movw	r2, #5000	; 0x1388
 8004894:	4619      	mov	r1, r3
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f007 fdac 	bl	800c3f4 <HAL_QSPI_Command>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <DISCO_QSPI_ResetMemory+0x66>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e00a      	b.n	80048bc <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80048a6:	f241 3188 	movw	r1, #5000	; 0x1388
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f8c7 	bl	8004a3e <QSPI_AutoPollingMemReady>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <DISCO_QSPI_ResetMemory+0x7a>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <DISCO_QSPI_ResetMemory+0x7c>
  }

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3740      	adds	r7, #64	; 0x40
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <DISCO_QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b094      	sub	sp, #80	; 0x50
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80048cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048d0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 80048d2:	2385      	movs	r3, #133	; 0x85
 80048d4:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80048d6:	2300      	movs	r3, #0
 80048d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80048da:	2300      	movs	r3, #0
 80048dc:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80048de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048e2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80048e4:	2300      	movs	r3, #0
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 80048e8:	2301      	movs	r3, #1
 80048ea:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80048ec:	2300      	movs	r3, #0
 80048ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80048f0:	2300      	movs	r3, #0
 80048f2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80048f4:	2300      	movs	r3, #0
 80048f6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80048f8:	f107 0310 	add.w	r3, r7, #16
 80048fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004900:	4619      	mov	r1, r3
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f007 fd76 	bl	800c3f4 <HAL_QSPI_Command>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <DISCO_QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e048      	b.n	80049a4 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004912:	f107 030f 	add.w	r3, r7, #15
 8004916:	f241 3288 	movw	r2, #5000	; 0x1388
 800491a:	4619      	mov	r1, r3
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f007 fe5e 	bl	800c5de <HAL_QSPI_Receive>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <DISCO_QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e03b      	b.n	80049a4 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != HAL_OK)
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f83d 	bl	80049ac <QSPI_WriteEnable>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <DISCO_QSPI_DummyCyclesCfg+0x78>
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e033      	b.n	80049a4 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 800493c:	2381      	movs	r3, #129	; 0x81
 800493e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	b25b      	sxtb	r3, r3
 8004944:	f003 030f 	and.w	r3, r3, #15
 8004948:	b25a      	sxtb	r2, r3
 800494a:	23f0      	movs	r3, #240	; 0xf0
 800494c:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004950:	fa93 f3a3 	rbit	r3, r3
 8004954:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004958:	fab3 f383 	clz	r3, r3
 800495c:	b2db      	uxtb	r3, r3
 800495e:	4619      	mov	r1, r3
 8004960:	230a      	movs	r3, #10
 8004962:	408b      	lsls	r3, r1
 8004964:	b25b      	sxtb	r3, r3
 8004966:	4313      	orrs	r3, r2
 8004968:	b25b      	sxtb	r3, r3
 800496a:	b2db      	uxtb	r3, r3
 800496c:	73fb      	strb	r3, [r7, #15]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800496e:	f107 0310 	add.w	r3, r7, #16
 8004972:	f241 3288 	movw	r2, #5000	; 0x1388
 8004976:	4619      	mov	r1, r3
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f007 fd3b 	bl	800c3f4 <HAL_QSPI_Command>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <DISCO_QSPI_DummyCyclesCfg+0xc4>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e00d      	b.n	80049a4 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004988:	f107 030f 	add.w	r3, r7, #15
 800498c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004990:	4619      	mov	r1, r3
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f007 fd8c 	bl	800c4b0 <HAL_QSPI_Transmit>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <DISCO_QSPI_DummyCyclesCfg+0xde>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3750      	adds	r7, #80	; 0x50
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b096      	sub	sp, #88	; 0x58
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80049b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049b8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80049ba:	2306      	movs	r3, #6
 80049bc:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80049be:	2300      	movs	r3, #0
 80049c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 80049c6:	2300      	movs	r3, #0
 80049c8:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80049ca:	2300      	movs	r3, #0
 80049cc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80049ce:	2300      	movs	r3, #0
 80049d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80049d2:	2300      	movs	r3, #0
 80049d4:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80049d6:	2300      	movs	r3, #0
 80049d8:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049da:	f107 0320 	add.w	r3, r7, #32
 80049de:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e2:	4619      	mov	r1, r3
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f007 fd05 	bl	800c3f4 <HAL_QSPI_Command>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <QSPI_WriteEnable+0x48>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e020      	b.n	8004a36 <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = N25Q128A_SR_WREN;
 80049f4:	2302      	movs	r3, #2
 80049f6:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 80049f8:	2302      	movs	r3, #2
 80049fa:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80049fc:	2300      	movs	r3, #0
 80049fe:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8004a00:	2301      	movs	r3, #1
 8004a02:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8004a04:	2310      	movs	r3, #16
 8004a06:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004a08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a0c:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8004a0e:	2305      	movs	r3, #5
 8004a10:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8004a12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a16:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a18:	f107 0208 	add.w	r2, r7, #8
 8004a1c:	f107 0120 	add.w	r1, r7, #32
 8004a20:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f007 fe7c 	bl	800c722 <HAL_QSPI_AutoPolling>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <QSPI_WriteEnable+0x88>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <QSPI_WriteEnable+0x8a>
  }

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3758      	adds	r7, #88	; 0x58
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b096      	sub	sp, #88	; 0x58
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8004a4e:	2305      	movs	r3, #5
 8004a50:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004a52:	2300      	movs	r3, #0
 8004a54:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8004a5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a5e:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004a64:	2300      	movs	r3, #0
 8004a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8004a70:	2300      	movs	r3, #0
 8004a72:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 8004a74:	2301      	movs	r3, #1
 8004a76:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8004a80:	2310      	movs	r3, #16
 8004a82:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004a84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a88:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8004a8a:	f107 0208 	add.w	r2, r7, #8
 8004a8e:	f107 0120 	add.w	r1, r7, #32
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f007 fe44 	bl	800c722 <HAL_QSPI_AutoPolling>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <QSPI_AutoPollingMemReady+0x66>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <QSPI_AutoPollingMemReady+0x68>
  }

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3758      	adds	r7, #88	; 0x58
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <startAudioDMA>:
 * @param AudioFreq I2S_AUDIOFREQ_16K, I2S_AUDIOFREQ_48K, etc (48kHz frequency group)
 *
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
void startAudioDMA(int16_t *buf_output, int16_t *buf_input,
		uint32_t audio_dma_buf_size) {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]

	__HAL_RCC_SAI2_CLK_ENABLE(); // bug fix syd: was not called in stm32f7xx_hal_msp.c (pb with static variable SAI2_client)
 8004abc:	4b27      	ldr	r3, [pc, #156]	; (8004b5c <startAudioDMA+0xac>)
 8004abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac0:	4a26      	ldr	r2, [pc, #152]	; (8004b5c <startAudioDMA+0xac>)
 8004ac2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ac6:	6453      	str	r3, [r2, #68]	; 0x44
 8004ac8:	4b24      	ldr	r3, [pc, #144]	; (8004b5c <startAudioDMA+0xac>)
 8004aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004acc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	697b      	ldr	r3, [r7, #20]

	//  Initialize WM8994 CODEC
	if (wm8994_ReadID(AUDIO_I2C_ADDRESS) != WM8994_ID) Error_Handler();
 8004ad4:	2034      	movs	r0, #52	; 0x34
 8004ad6:	f000 fe5b 	bl	8005790 <wm8994_ReadID>
 8004ada:	4603      	mov	r3, r0
 8004adc:	f648 1294 	movw	r2, #35220	; 0x8994
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d001      	beq.n	8004ae8 <startAudioDMA+0x38>
 8004ae4:	f7fd fed6 	bl	8002894 <Error_Handler>

	/* Reset the Codec Registers */
	wm8994_Reset(AUDIO_I2C_ADDRESS);
 8004ae8:	2034      	movs	r0, #52	; 0x34
 8004aea:	f000 ff99 	bl	8005a20 <wm8994_Reset>

	switch (hsai_BlockB2.SlotInit.SlotActive) {
 8004aee:	4b1c      	ldr	r3, [pc, #112]	; (8004b60 <startAudioDMA+0xb0>)
 8004af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004af2:	2b05      	cmp	r3, #5
 8004af4:	d002      	beq.n	8004afc <startAudioDMA+0x4c>
 8004af6:	2b0a      	cmp	r3, #10
 8004af8:	d009      	beq.n	8004b0e <startAudioDMA+0x5e>
 8004afa:	e011      	b.n	8004b20 <startAudioDMA+0x70>

	// line in (slot 0 L/R, violet jack):
	case 0x5:
		wm8994_Init(INPUT_DEVICE_INPUT_LINE_1 | OUTPUT_DEVICE_HEADPHONE,
 8004afc:	4b19      	ldr	r3, [pc, #100]	; (8004b64 <startAudioDMA+0xb4>)
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	461a      	mov	r2, r3
 8004b02:	214b      	movs	r1, #75	; 0x4b
 8004b04:	f240 3002 	movw	r0, #770	; 0x302
 8004b08:	f000 f8e0 	bl	8004ccc <wm8994_Init>
				DEFAULT_LINEIN_VOLUME, hsai_BlockA2.Init.AudioFrequency);
		break;
 8004b0c:	e00d      	b.n	8004b2a <startAudioDMA+0x7a>

		// microphones (slot 1 L/R):
	case 0xA:
		wm8994_Init(INPUT_DEVICE_DIGITAL_MICROPHONE_2 | OUTPUT_DEVICE_HEADPHONE,
 8004b0e:	4b15      	ldr	r3, [pc, #84]	; (8004b64 <startAudioDMA+0xb4>)
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	461a      	mov	r2, r3
 8004b14:	21c8      	movs	r1, #200	; 0xc8
 8004b16:	f240 2002 	movw	r0, #514	; 0x202
 8004b1a:	f000 f8d7 	bl	8004ccc <wm8994_Init>
				DEFAULT_MICIN_VOLUME, hsai_BlockA2.Init.AudioFrequency);
		break;
 8004b1e:	e004      	b.n	8004b2a <startAudioDMA+0x7a>

	default:
		printf("Unsupported audio input in hsai_BlockB2.SlotInit.SlotActive\n");
 8004b20:	4811      	ldr	r0, [pc, #68]	; (8004b68 <startAudioDMA+0xb8>)
 8004b22:	f019 f8b1 	bl	801dc88 <puts>
		Error_Handler();
 8004b26:	f7fd feb5 	bl	8002894 <Error_Handler>
	}

	// unmute CODEC output
	wm8994_SetMute(AUDIO_MUTE_OFF);
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	f000 ff38 	bl	80059a0 <wm8994_SetMute>

	//  Start DMA transfers

	/* Start Recording */
	HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*) buf_input, audio_dma_buf_size);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	461a      	mov	r2, r3
 8004b36:	68b9      	ldr	r1, [r7, #8]
 8004b38:	4809      	ldr	r0, [pc, #36]	; (8004b60 <startAudioDMA+0xb0>)
 8004b3a:	f00a f9ef 	bl	800ef1c <HAL_SAI_Receive_DMA>
	/* Start Playback */
	HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*) buf_output, audio_dma_buf_size);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	461a      	mov	r2, r3
 8004b44:	68f9      	ldr	r1, [r7, #12]
 8004b46:	4807      	ldr	r0, [pc, #28]	; (8004b64 <startAudioDMA+0xb4>)
 8004b48:	f00a f938 	bl	800edbc <HAL_SAI_Transmit_DMA>

	printf("SAI (audio) DMA started: OK\n");
 8004b4c:	4807      	ldr	r0, [pc, #28]	; (8004b6c <startAudioDMA+0xbc>)
 8004b4e:	f019 f89b 	bl	801dc88 <puts>


}
 8004b52:	bf00      	nop
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	20001bf8 	.word	0x20001bf8
 8004b64:	20001b74 	.word	0x20001b74
 8004b68:	0801ef68 	.word	0x0801ef68
 8004b6c:	0801efa4 	.word	0x0801efa4

08004b70 <HAL_SAI_TxCpltCallback>:

/*------------------------------------------------------------------------------
 SAI DMA Callbacks
 ----------------------------------------------------------------------------*/

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]

	if (hsai == &hsai_BlockA2)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a09      	ldr	r2, [pc, #36]	; (8004bc8 <HAL_SAI_ErrorCallback+0x30>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d103      	bne.n	8004bb0 <HAL_SAI_ErrorCallback+0x18>
		printf("DMA Out error\n");
 8004ba8:	4808      	ldr	r0, [pc, #32]	; (8004bcc <HAL_SAI_ErrorCallback+0x34>)
 8004baa:	f019 f86d 	bl	801dc88 <puts>
	else if (hsai == &hsai_BlockB2)
		printf("DMA In error\n");
}
 8004bae:	e006      	b.n	8004bbe <HAL_SAI_ErrorCallback+0x26>
	else if (hsai == &hsai_BlockB2)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a07      	ldr	r2, [pc, #28]	; (8004bd0 <HAL_SAI_ErrorCallback+0x38>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d102      	bne.n	8004bbe <HAL_SAI_ErrorCallback+0x26>
		printf("DMA In error\n");
 8004bb8:	4806      	ldr	r0, [pc, #24]	; (8004bd4 <HAL_SAI_ErrorCallback+0x3c>)
 8004bba:	f019 f865 	bl	801dc88 <puts>
}
 8004bbe:	bf00      	nop
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20001b74 	.word	0x20001b74
 8004bcc:	0801efc0 	.word	0x0801efc0
 8004bd0:	20001bf8 	.word	0x20001bf8
 8004bd4:	0801efd0 	.word	0x0801efd0

08004bd8 <DISCO_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  * @retval None
  */
void DISCO_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004be4:	4b2a      	ldr	r3, [pc, #168]	; (8004c90 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004be6:	2201      	movs	r2, #1
 8004be8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004bea:	4b29      	ldr	r3, [pc, #164]	; (8004c90 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004bec:	2210      	movs	r2, #16
 8004bee:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004bf0:	4b27      	ldr	r3, [pc, #156]	; (8004c90 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004bf6:	4b26      	ldr	r3, [pc, #152]	; (8004c90 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c00:	4923      	ldr	r1, [pc, #140]	; (8004c90 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c02:	4824      	ldr	r0, [pc, #144]	; (8004c94 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004c04:	f00b fc0b 	bl	801041e <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004c08:	2001      	movs	r0, #1
 8004c0a:	f000 ff8d 	bl	8005b28 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004c0e:	4b20      	ldr	r3, [pc, #128]	; (8004c90 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c10:	2202      	movs	r2, #2
 8004c12:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004c14:	4b1e      	ldr	r3, [pc, #120]	; (8004c90 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c16:	2210      	movs	r2, #16
 8004c18:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004c1a:	4b1d      	ldr	r3, [pc, #116]	; (8004c90 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004c20:	4b1b      	ldr	r3, [pc, #108]	; (8004c90 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c2a:	4919      	ldr	r1, [pc, #100]	; (8004c90 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c2c:	4819      	ldr	r0, [pc, #100]	; (8004c94 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004c2e:	f00b fbf6 	bl	801041e <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004c32:	4b17      	ldr	r3, [pc, #92]	; (8004c90 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c34:	2203      	movs	r2, #3
 8004c36:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004c38:	4b15      	ldr	r3, [pc, #84]	; (8004c90 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c3a:	2210      	movs	r2, #16
 8004c3c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004c3e:	4b14      	ldr	r3, [pc, #80]	; (8004c90 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c40:	2208      	movs	r2, #8
 8004c42:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004c44:	4b12      	ldr	r3, [pc, #72]	; (8004c90 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c4e:	4910      	ldr	r1, [pc, #64]	; (8004c90 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c50:	4810      	ldr	r0, [pc, #64]	; (8004c94 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004c52:	f00b fbe4 	bl	801041e <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004c56:	f44f 7308 	mov.w	r3, #544	; 0x220
 8004c5a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004c5c:	4b0c      	ldr	r3, [pc, #48]	; (8004c90 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c5e:	2204      	movs	r2, #4
 8004c60:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004c62:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c64:	2210      	movs	r2, #16
 8004c66:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004c68:	4b09      	ldr	r3, [pc, #36]	; (8004c90 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4a07      	ldr	r2, [pc, #28]	; (8004c90 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c72:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004c74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c78:	4905      	ldr	r1, [pc, #20]	; (8004c90 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004c7a:	4806      	ldr	r0, [pc, #24]	; (8004c94 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004c7c:	f00b fbcf 	bl	801041e <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	4804      	ldr	r0, [pc, #16]	; (8004c94 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004c84:	f00b fc00 	bl	8010488 <HAL_SDRAM_ProgramRefreshRate>
}
 8004c88:	bf00      	nop
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	20041df4 	.word	0x20041df4
 8004c94:	20002144 	.word	0x20002144

08004c98 <TS_Init>:
 * @brief  Initializes and configures the touch screen functionalities and
 *         configures all necessary hardware resources (GPIOs, I2C, clocks..).
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
void TS_Init()
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
	/* Wait at least 200ms after power up before accessing registers
	 * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
	HAL_Delay(200);
 8004c9c:	20c8      	movs	r0, #200	; 0xc8
 8004c9e:	f000 ff43 	bl	8005b28 <HAL_Delay>

	TS_DisableIT();
 8004ca2:	f000 f802 	bl	8004caa <TS_DisableIT>

}
 8004ca6:	bf00      	nop
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <TS_DisableIT>:
  * @brief  Configure the FT5336 device to stop generating IT on the given INT pin
  *         connected to MCU as EXTI.
  * @retval None
  */
void TS_DisableIT()
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b082      	sub	sp, #8
 8004cae:	af00      	add	r7, sp, #0
  uint8_t regValue = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	71fb      	strb	r3, [r7, #7]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	71fb      	strb	r3, [r7, #7]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_I2C_Write(FT5336_GMODE_REG, regValue);
 8004cb8:	79fb      	ldrb	r3, [r7, #7]
 8004cba:	4619      	mov	r1, r3
 8004cbc:	20a4      	movs	r0, #164	; 0xa4
 8004cbe:	f7ff f975 	bl	8003fac <TS_I2C_Write>
}
 8004cc2:	bf00      	nop
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	603a      	str	r2, [r7, #0]
 8004cd6:	80fb      	strh	r3, [r7, #6]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	617b      	str	r3, [r7, #20]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8004ce0:	88fb      	ldrh	r3, [r7, #6]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	823b      	strh	r3, [r7, #16]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8004ce6:	88fb      	ldrh	r3, [r7, #6]
 8004ce8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004cec:	81fb      	strh	r3, [r7, #14]
  uint16_t power_mgnt_reg_1 = 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	827b      	strh	r3, [r7, #18]

  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(0x102, 0x0003);
 8004cf2:	2103      	movs	r1, #3
 8004cf4:	f44f 7081 	mov.w	r0, #258	; 0x102
 8004cf8:	f000 feac 	bl	8005a54 <CODEC_IO_Write>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	461a      	mov	r2, r3
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	4413      	add	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(0x817, 0x0000);
 8004d06:	2100      	movs	r1, #0
 8004d08:	f640 0017 	movw	r0, #2071	; 0x817
 8004d0c:	f000 fea2 	bl	8005a54 <CODEC_IO_Write>
 8004d10:	4603      	mov	r3, r0
 8004d12:	461a      	mov	r2, r3
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	4413      	add	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(0x102, 0x0000);
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	f44f 7081 	mov.w	r0, #258	; 0x102
 8004d20:	f000 fe98 	bl	8005a54 <CODEC_IO_Write>
 8004d24:	4603      	mov	r3, r0
 8004d26:	461a      	mov	r2, r3
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(0x39, 0x006C);
 8004d2e:	216c      	movs	r1, #108	; 0x6c
 8004d30:	2039      	movs	r0, #57	; 0x39
 8004d32:	f000 fe8f 	bl	8005a54 <CODEC_IO_Write>
 8004d36:	4603      	mov	r3, r0
 8004d38:	461a      	mov	r2, r3
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8004d40:	89fb      	ldrh	r3, [r7, #14]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d009      	beq.n	8004d5a <wm8994_Init+0x8e>
  {
    counter += CODEC_IO_Write(0x01, 0x0013);
 8004d46:	2113      	movs	r1, #19
 8004d48:	2001      	movs	r0, #1
 8004d4a:	f000 fe83 	bl	8005a54 <CODEC_IO_Write>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	461a      	mov	r2, r3
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	4413      	add	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	e008      	b.n	8004d6c <wm8994_Init+0xa0>
  }
  else
  {
    counter += CODEC_IO_Write(0x01, 0x0003);
 8004d5a:	2103      	movs	r1, #3
 8004d5c:	2001      	movs	r0, #1
 8004d5e:	f000 fe79 	bl	8005a54 <CODEC_IO_Write>
 8004d62:	4603      	mov	r3, r0
 8004d64:	461a      	mov	r2, r3
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	4413      	add	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]
  }

  /* Add Delay */
  HAL_Delay(50);
 8004d6c:	2032      	movs	r0, #50	; 0x32
 8004d6e:	f000 fedb 	bl	8005b28 <HAL_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8004d72:	8a3b      	ldrh	r3, [r7, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 8111 	beq.w	8004f9c <wm8994_Init+0x2d0>
  {
    outputEnabled = 1;
 8004d7a:	4bb8      	ldr	r3, [pc, #736]	; (800505c <wm8994_Init+0x390>)
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8004d80:	8a3b      	ldrh	r3, [r7, #16]
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d06d      	beq.n	8004e62 <wm8994_Init+0x196>
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	f300 80d5 	bgt.w	8004f36 <wm8994_Init+0x26a>
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d002      	beq.n	8004d96 <wm8994_Init+0xca>
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d033      	beq.n	8004dfc <wm8994_Init+0x130>
 8004d94:	e0cf      	b.n	8004f36 <wm8994_Init+0x26a>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(0x05, 0x0C0C);
 8004d96:	f640 410c 	movw	r1, #3084	; 0xc0c
 8004d9a:	2005      	movs	r0, #5
 8004d9c:	f000 fe5a 	bl	8005a54 <CODEC_IO_Write>
 8004da0:	4603      	mov	r3, r0
 8004da2:	461a      	mov	r2, r3
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	4413      	add	r3, r2
 8004da8:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(0x601, 0x0000);
 8004daa:	2100      	movs	r1, #0
 8004dac:	f240 6001 	movw	r0, #1537	; 0x601
 8004db0:	f000 fe50 	bl	8005a54 <CODEC_IO_Write>
 8004db4:	4603      	mov	r3, r0
 8004db6:	461a      	mov	r2, r3
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	4413      	add	r3, r2
 8004dbc:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(0x602, 0x0000);
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	f240 6002 	movw	r0, #1538	; 0x602
 8004dc4:	f000 fe46 	bl	8005a54 <CODEC_IO_Write>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	461a      	mov	r2, r3
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	4413      	add	r3, r2
 8004dd0:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(0x604, 0x0002);
 8004dd2:	2102      	movs	r1, #2
 8004dd4:	f240 6004 	movw	r0, #1540	; 0x604
 8004dd8:	f000 fe3c 	bl	8005a54 <CODEC_IO_Write>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	461a      	mov	r2, r3
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	4413      	add	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(0x605, 0x0002);
 8004de6:	2102      	movs	r1, #2
 8004de8:	f240 6005 	movw	r0, #1541	; 0x605
 8004dec:	f000 fe32 	bl	8005a54 <CODEC_IO_Write>
 8004df0:	4603      	mov	r3, r0
 8004df2:	461a      	mov	r2, r3
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	4413      	add	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]
      break;
 8004dfa:	e0d2      	b.n	8004fa2 <wm8994_Init+0x2d6>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(0x05, 0x0303);
 8004dfc:	f240 3103 	movw	r1, #771	; 0x303
 8004e00:	2005      	movs	r0, #5
 8004e02:	f000 fe27 	bl	8005a54 <CODEC_IO_Write>
 8004e06:	4603      	mov	r3, r0
 8004e08:	461a      	mov	r2, r3
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(0x601, 0x0001);
 8004e10:	2101      	movs	r1, #1
 8004e12:	f240 6001 	movw	r0, #1537	; 0x601
 8004e16:	f000 fe1d 	bl	8005a54 <CODEC_IO_Write>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	4413      	add	r3, r2
 8004e22:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(0x602, 0x0001);
 8004e24:	2101      	movs	r1, #1
 8004e26:	f240 6002 	movw	r0, #1538	; 0x602
 8004e2a:	f000 fe13 	bl	8005a54 <CODEC_IO_Write>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	461a      	mov	r2, r3
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	4413      	add	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(0x604, 0x0000);
 8004e38:	2100      	movs	r1, #0
 8004e3a:	f240 6004 	movw	r0, #1540	; 0x604
 8004e3e:	f000 fe09 	bl	8005a54 <CODEC_IO_Write>
 8004e42:	4603      	mov	r3, r0
 8004e44:	461a      	mov	r2, r3
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	4413      	add	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(0x605, 0x0000);
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	f240 6005 	movw	r0, #1541	; 0x605
 8004e52:	f000 fdff 	bl	8005a54 <CODEC_IO_Write>
 8004e56:	4603      	mov	r3, r0
 8004e58:	461a      	mov	r2, r3
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]
      break;
 8004e60:	e09f      	b.n	8004fa2 <wm8994_Init+0x2d6>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004e62:	89fb      	ldrh	r3, [r7, #14]
 8004e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e68:	d132      	bne.n	8004ed0 <wm8994_Init+0x204>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(0x05, 0x0303 | 0x0C0C);
 8004e6a:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004e6e:	2005      	movs	r0, #5
 8004e70:	f000 fdf0 	bl	8005a54 <CODEC_IO_Write>
 8004e74:	4603      	mov	r3, r0
 8004e76:	461a      	mov	r2, r3
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(0x601, 0x0003);
 8004e7e:	2103      	movs	r1, #3
 8004e80:	f240 6001 	movw	r0, #1537	; 0x601
 8004e84:	f000 fde6 	bl	8005a54 <CODEC_IO_Write>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	4413      	add	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(0x602, 0x0003);
 8004e92:	2103      	movs	r1, #3
 8004e94:	f240 6002 	movw	r0, #1538	; 0x602
 8004e98:	f000 fddc 	bl	8005a54 <CODEC_IO_Write>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(0x604, 0x0003);
 8004ea6:	2103      	movs	r1, #3
 8004ea8:	f240 6004 	movw	r0, #1540	; 0x604
 8004eac:	f000 fdd2 	bl	8005a54 <CODEC_IO_Write>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	617b      	str	r3, [r7, #20]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(0x605, 0x0003);
 8004eba:	2103      	movs	r1, #3
 8004ebc:	f240 6005 	movw	r0, #1541	; 0x605
 8004ec0:	f000 fdc8 	bl	8005a54 <CODEC_IO_Write>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	4413      	add	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]
        counter += CODEC_IO_Write(0x604, 0x0002);

        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(0x605, 0x0002);
      }
      break;
 8004ece:	e068      	b.n	8004fa2 <wm8994_Init+0x2d6>
        counter += CODEC_IO_Write(0x05, 0x0303 | 0x0C0C);
 8004ed0:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004ed4:	2005      	movs	r0, #5
 8004ed6:	f000 fdbd 	bl	8005a54 <CODEC_IO_Write>
 8004eda:	4603      	mov	r3, r0
 8004edc:	461a      	mov	r2, r3
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]
        counter += CODEC_IO_Write(0x601, 0x0001);
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	f240 6001 	movw	r0, #1537	; 0x601
 8004eea:	f000 fdb3 	bl	8005a54 <CODEC_IO_Write>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]
        counter += CODEC_IO_Write(0x602, 0x0001);
 8004ef8:	2101      	movs	r1, #1
 8004efa:	f240 6002 	movw	r0, #1538	; 0x602
 8004efe:	f000 fda9 	bl	8005a54 <CODEC_IO_Write>
 8004f02:	4603      	mov	r3, r0
 8004f04:	461a      	mov	r2, r3
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	4413      	add	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]
        counter += CODEC_IO_Write(0x604, 0x0002);
 8004f0c:	2102      	movs	r1, #2
 8004f0e:	f240 6004 	movw	r0, #1540	; 0x604
 8004f12:	f000 fd9f 	bl	8005a54 <CODEC_IO_Write>
 8004f16:	4603      	mov	r3, r0
 8004f18:	461a      	mov	r2, r3
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]
        counter += CODEC_IO_Write(0x605, 0x0002);
 8004f20:	2102      	movs	r1, #2
 8004f22:	f240 6005 	movw	r0, #1541	; 0x605
 8004f26:	f000 fd95 	bl	8005a54 <CODEC_IO_Write>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	4413      	add	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]
      break;
 8004f34:	e035      	b.n	8004fa2 <wm8994_Init+0x2d6>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(0x05, 0x0303);
 8004f36:	f240 3103 	movw	r1, #771	; 0x303
 8004f3a:	2005      	movs	r0, #5
 8004f3c:	f000 fd8a 	bl	8005a54 <CODEC_IO_Write>
 8004f40:	4603      	mov	r3, r0
 8004f42:	461a      	mov	r2, r3
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	4413      	add	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(0x601, 0x0001);
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	f240 6001 	movw	r0, #1537	; 0x601
 8004f50:	f000 fd80 	bl	8005a54 <CODEC_IO_Write>
 8004f54:	4603      	mov	r3, r0
 8004f56:	461a      	mov	r2, r3
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(0x602, 0x0001);
 8004f5e:	2101      	movs	r1, #1
 8004f60:	f240 6002 	movw	r0, #1538	; 0x602
 8004f64:	f000 fd76 	bl	8005a54 <CODEC_IO_Write>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	4413      	add	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(0x604, 0x0000);
 8004f72:	2100      	movs	r1, #0
 8004f74:	f240 6004 	movw	r0, #1540	; 0x604
 8004f78:	f000 fd6c 	bl	8005a54 <CODEC_IO_Write>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	461a      	mov	r2, r3
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	4413      	add	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(0x605, 0x0000);
 8004f86:	2100      	movs	r1, #0
 8004f88:	f240 6005 	movw	r0, #1541	; 0x605
 8004f8c:	f000 fd62 	bl	8005a54 <CODEC_IO_Write>
 8004f90:	4603      	mov	r3, r0
 8004f92:	461a      	mov	r2, r3
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	4413      	add	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]
      break;
 8004f9a:	e002      	b.n	8004fa2 <wm8994_Init+0x2d6>
    }
  }
  else
  {
    outputEnabled = 0;
 8004f9c:	4b2f      	ldr	r3, [pc, #188]	; (800505c <wm8994_Init+0x390>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8004fa2:	89fb      	ldrh	r3, [r7, #14]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 8151 	beq.w	800524c <wm8994_Init+0x580>
  {
    inputEnabled = 1;
 8004faa:	4b2d      	ldr	r3, [pc, #180]	; (8005060 <wm8994_Init+0x394>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8004fb0:	89fb      	ldrh	r3, [r7, #14]
 8004fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fb6:	f000 80ea 	beq.w	800518e <wm8994_Init+0x4c2>
 8004fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fbe:	f300 8141 	bgt.w	8005244 <wm8994_Init+0x578>
 8004fc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fc6:	d04d      	beq.n	8005064 <wm8994_Init+0x398>
 8004fc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fcc:	f300 813a 	bgt.w	8005244 <wm8994_Init+0x578>
 8004fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fd4:	f000 809e 	beq.w	8005114 <wm8994_Init+0x448>
 8004fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fdc:	f040 8132 	bne.w	8005244 <wm8994_Init+0x578>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(0x04, 0x0C30);
 8004fe0:	f44f 6143 	mov.w	r1, #3120	; 0xc30
 8004fe4:	2004      	movs	r0, #4
 8004fe6:	f000 fd35 	bl	8005a54 <CODEC_IO_Write>
 8004fea:	4603      	mov	r3, r0
 8004fec:	461a      	mov	r2, r3
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(0x450, 0x00DB);
 8004ff4:	21db      	movs	r1, #219	; 0xdb
 8004ff6:	f44f 608a 	mov.w	r0, #1104	; 0x450
 8004ffa:	f000 fd2b 	bl	8005a54 <CODEC_IO_Write>
 8004ffe:	4603      	mov	r3, r0
 8005000:	461a      	mov	r2, r3
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	4413      	add	r3, r2
 8005006:	617b      	str	r3, [r7, #20]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(0x02, 0x6000);
 8005008:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800500c:	2002      	movs	r0, #2
 800500e:	f000 fd21 	bl	8005a54 <CODEC_IO_Write>
 8005012:	4603      	mov	r3, r0
 8005014:	461a      	mov	r2, r3
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	4413      	add	r3, r2
 800501a:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(0x608, 0x0002);
 800501c:	2102      	movs	r1, #2
 800501e:	f44f 60c1 	mov.w	r0, #1544	; 0x608
 8005022:	f000 fd17 	bl	8005a54 <CODEC_IO_Write>
 8005026:	4603      	mov	r3, r0
 8005028:	461a      	mov	r2, r3
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	4413      	add	r3, r2
 800502e:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(0x609, 0x0002);
 8005030:	2102      	movs	r1, #2
 8005032:	f240 6009 	movw	r0, #1545	; 0x609
 8005036:	f000 fd0d 	bl	8005a54 <CODEC_IO_Write>
 800503a:	4603      	mov	r3, r0
 800503c:	461a      	mov	r2, r3
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	4413      	add	r3, r2
 8005042:	617b      	str	r3, [r7, #20]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(0x700, 0x000E);
 8005044:	210e      	movs	r1, #14
 8005046:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 800504a:	f000 fd03 	bl	8005a54 <CODEC_IO_Write>
 800504e:	4603      	mov	r3, r0
 8005050:	461a      	mov	r2, r3
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	4413      	add	r3, r2
 8005056:	617b      	str	r3, [r7, #20]
      break;
 8005058:	e0fb      	b.n	8005252 <wm8994_Init+0x586>
 800505a:	bf00      	nop
 800505c:	20041e04 	.word	0x20041e04
 8005060:	20041e08 	.word	0x20041e08

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(0x28, 0x0011);
 8005064:	2111      	movs	r1, #17
 8005066:	2028      	movs	r0, #40	; 0x28
 8005068:	f000 fcf4 	bl	8005a54 <CODEC_IO_Write>
 800506c:	4603      	mov	r3, r0
 800506e:	461a      	mov	r2, r3
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	4413      	add	r3, r2
 8005074:	617b      	str	r3, [r7, #20]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      // syd : counter += CODEC_IO_Write(0x29, 0x0035);
      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(0x29, 0x0020);
 8005076:	2120      	movs	r1, #32
 8005078:	2029      	movs	r0, #41	; 0x29
 800507a:	f000 fceb 	bl	8005a54 <CODEC_IO_Write>
 800507e:	4603      	mov	r3, r0
 8005080:	461a      	mov	r2, r3
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	4413      	add	r3, r2
 8005086:	617b      	str	r3, [r7, #20]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //syd : counter += CODEC_IO_Write(0x2A, 0x0035);
      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(0x2A, 0x0020);
 8005088:	2120      	movs	r1, #32
 800508a:	202a      	movs	r0, #42	; 0x2a
 800508c:	f000 fce2 	bl	8005a54 <CODEC_IO_Write>
 8005090:	4603      	mov	r3, r0
 8005092:	461a      	mov	r2, r3
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	4413      	add	r3, r2
 8005098:	617b      	str	r3, [r7, #20]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(0x04, 0x0303);
 800509a:	f240 3103 	movw	r1, #771	; 0x303
 800509e:	2004      	movs	r0, #4
 80050a0:	f000 fcd8 	bl	8005a54 <CODEC_IO_Write>
 80050a4:	4603      	mov	r3, r0
 80050a6:	461a      	mov	r2, r3
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	4413      	add	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(0x440, 0x00DB);
 80050ae:	21db      	movs	r1, #219	; 0xdb
 80050b0:	f44f 6088 	mov.w	r0, #1088	; 0x440
 80050b4:	f000 fcce 	bl	8005a54 <CODEC_IO_Write>
 80050b8:	4603      	mov	r3, r0
 80050ba:	461a      	mov	r2, r3
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	4413      	add	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(0x02, 0x6350);
 80050c2:	f246 3150 	movw	r1, #25424	; 0x6350
 80050c6:	2002      	movs	r0, #2
 80050c8:	f000 fcc4 	bl	8005a54 <CODEC_IO_Write>
 80050cc:	4603      	mov	r3, r0
 80050ce:	461a      	mov	r2, r3
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	4413      	add	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(0x606, 0x0002);
 80050d6:	2102      	movs	r1, #2
 80050d8:	f240 6006 	movw	r0, #1542	; 0x606
 80050dc:	f000 fcba 	bl	8005a54 <CODEC_IO_Write>
 80050e0:	4603      	mov	r3, r0
 80050e2:	461a      	mov	r2, r3
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	4413      	add	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(0x607, 0x0002);
 80050ea:	2102      	movs	r1, #2
 80050ec:	f240 6007 	movw	r0, #1543	; 0x607
 80050f0:	f000 fcb0 	bl	8005a54 <CODEC_IO_Write>
 80050f4:	4603      	mov	r3, r0
 80050f6:	461a      	mov	r2, r3
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	4413      	add	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(0x700, 0x000D);
 80050fe:	210d      	movs	r1, #13
 8005100:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8005104:	f000 fca6 	bl	8005a54 <CODEC_IO_Write>
 8005108:	4603      	mov	r3, r0
 800510a:	461a      	mov	r2, r3
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	4413      	add	r3, r2
 8005110:	617b      	str	r3, [r7, #20]
      break;
 8005112:	e09e      	b.n	8005252 <wm8994_Init+0x586>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(0x04, 0x030C);
 8005114:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8005118:	2004      	movs	r0, #4
 800511a:	f000 fc9b 	bl	8005a54 <CODEC_IO_Write>
 800511e:	4603      	mov	r3, r0
 8005120:	461a      	mov	r2, r3
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	4413      	add	r3, r2
 8005126:	617b      	str	r3, [r7, #20]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(0x440, 0x00DB);
 8005128:	21db      	movs	r1, #219	; 0xdb
 800512a:	f44f 6088 	mov.w	r0, #1088	; 0x440
 800512e:	f000 fc91 	bl	8005a54 <CODEC_IO_Write>
 8005132:	4603      	mov	r3, r0
 8005134:	461a      	mov	r2, r3
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	4413      	add	r3, r2
 800513a:	617b      	str	r3, [r7, #20]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(0x02, 0x6350);
 800513c:	f246 3150 	movw	r1, #25424	; 0x6350
 8005140:	2002      	movs	r0, #2
 8005142:	f000 fc87 	bl	8005a54 <CODEC_IO_Write>
 8005146:	4603      	mov	r3, r0
 8005148:	461a      	mov	r2, r3
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	4413      	add	r3, r2
 800514e:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(0x606, 0x0002);
 8005150:	2102      	movs	r1, #2
 8005152:	f240 6006 	movw	r0, #1542	; 0x606
 8005156:	f000 fc7d 	bl	8005a54 <CODEC_IO_Write>
 800515a:	4603      	mov	r3, r0
 800515c:	461a      	mov	r2, r3
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	4413      	add	r3, r2
 8005162:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(0x607, 0x0002);
 8005164:	2102      	movs	r1, #2
 8005166:	f240 6007 	movw	r0, #1543	; 0x607
 800516a:	f000 fc73 	bl	8005a54 <CODEC_IO_Write>
 800516e:	4603      	mov	r3, r0
 8005170:	461a      	mov	r2, r3
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	4413      	add	r3, r2
 8005176:	617b      	str	r3, [r7, #20]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(0x700, 0x000D);
 8005178:	210d      	movs	r1, #13
 800517a:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 800517e:	f000 fc69 	bl	8005a54 <CODEC_IO_Write>
 8005182:	4603      	mov	r3, r0
 8005184:	461a      	mov	r2, r3
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	4413      	add	r3, r2
 800518a:	617b      	str	r3, [r7, #20]
      break;
 800518c:	e061      	b.n	8005252 <wm8994_Init+0x586>
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(0x04, 0x0F3C);
 800518e:	f640 713c 	movw	r1, #3900	; 0xf3c
 8005192:	2004      	movs	r0, #4
 8005194:	f000 fc5e 	bl	8005a54 <CODEC_IO_Write>
 8005198:	4603      	mov	r3, r0
 800519a:	461a      	mov	r2, r3
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	4413      	add	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(0x450, 0x00DB);
 80051a2:	21db      	movs	r1, #219	; 0xdb
 80051a4:	f44f 608a 	mov.w	r0, #1104	; 0x450
 80051a8:	f000 fc54 	bl	8005a54 <CODEC_IO_Write>
 80051ac:	4603      	mov	r3, r0
 80051ae:	461a      	mov	r2, r3
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	4413      	add	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(0x440, 0x00DB);
 80051b6:	21db      	movs	r1, #219	; 0xdb
 80051b8:	f44f 6088 	mov.w	r0, #1088	; 0x440
 80051bc:	f000 fc4a 	bl	8005a54 <CODEC_IO_Write>
 80051c0:	4603      	mov	r3, r0
 80051c2:	461a      	mov	r2, r3
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	4413      	add	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(0x02, 0x63A0);
 80051ca:	f246 31a0 	movw	r1, #25504	; 0x63a0
 80051ce:	2002      	movs	r0, #2
 80051d0:	f000 fc40 	bl	8005a54 <CODEC_IO_Write>
 80051d4:	4603      	mov	r3, r0
 80051d6:	461a      	mov	r2, r3
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	4413      	add	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(0x606, 0x0002);
 80051de:	2102      	movs	r1, #2
 80051e0:	f240 6006 	movw	r0, #1542	; 0x606
 80051e4:	f000 fc36 	bl	8005a54 <CODEC_IO_Write>
 80051e8:	4603      	mov	r3, r0
 80051ea:	461a      	mov	r2, r3
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	4413      	add	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(0x607, 0x0002);
 80051f2:	2102      	movs	r1, #2
 80051f4:	f240 6007 	movw	r0, #1543	; 0x607
 80051f8:	f000 fc2c 	bl	8005a54 <CODEC_IO_Write>
 80051fc:	4603      	mov	r3, r0
 80051fe:	461a      	mov	r2, r3
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	4413      	add	r3, r2
 8005204:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(0x608, 0x0002);
 8005206:	2102      	movs	r1, #2
 8005208:	f44f 60c1 	mov.w	r0, #1544	; 0x608
 800520c:	f000 fc22 	bl	8005a54 <CODEC_IO_Write>
 8005210:	4603      	mov	r3, r0
 8005212:	461a      	mov	r2, r3
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	4413      	add	r3, r2
 8005218:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(0x609, 0x0002);
 800521a:	2102      	movs	r1, #2
 800521c:	f240 6009 	movw	r0, #1545	; 0x609
 8005220:	f000 fc18 	bl	8005a54 <CODEC_IO_Write>
 8005224:	4603      	mov	r3, r0
 8005226:	461a      	mov	r2, r3
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	4413      	add	r3, r2
 800522c:	617b      	str	r3, [r7, #20]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(0x700, 0x000D);
 800522e:	210d      	movs	r1, #13
 8005230:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8005234:	f000 fc0e 	bl	8005a54 <CODEC_IO_Write>
 8005238:	4603      	mov	r3, r0
 800523a:	461a      	mov	r2, r3
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	4413      	add	r3, r2
 8005240:	617b      	str	r3, [r7, #20]
      break;
 8005242:	e006      	b.n	8005252 <wm8994_Init+0x586>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	3301      	adds	r3, #1
 8005248:	617b      	str	r3, [r7, #20]
      break;
 800524a:	e002      	b.n	8005252 <wm8994_Init+0x586>
    }
  }
  else
  {
    inputEnabled = 0;
 800524c:	4bb4      	ldr	r3, [pc, #720]	; (8005520 <wm8994_Init+0x854>)
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]
  }

  /*  Clock Configurations */
  switch (AudioFreq)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	4ab3      	ldr	r2, [pc, #716]	; (8005524 <wm8994_Init+0x858>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d069      	beq.n	800532e <wm8994_Init+0x662>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	4ab1      	ldr	r2, [pc, #708]	; (8005524 <wm8994_Init+0x858>)
 800525e:	4293      	cmp	r3, r2
 8005260:	f200 8091 	bhi.w	8005386 <wm8994_Init+0x6ba>
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800526a:	4293      	cmp	r3, r2
 800526c:	d054      	beq.n	8005318 <wm8994_Init+0x64c>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8005274:	4293      	cmp	r3, r2
 8005276:	f200 8086 	bhi.w	8005386 <wm8994_Init+0x6ba>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005280:	4293      	cmp	r3, r2
 8005282:	d075      	beq.n	8005370 <wm8994_Init+0x6a4>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	f64a 4244 	movw	r2, #44100	; 0xac44
 800528a:	4293      	cmp	r3, r2
 800528c:	d87b      	bhi.n	8005386 <wm8994_Init+0x6ba>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8005294:	d035      	beq.n	8005302 <wm8994_Init+0x636>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800529c:	d873      	bhi.n	8005386 <wm8994_Init+0x6ba>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	f245 6222 	movw	r2, #22050	; 0x5622
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d058      	beq.n	800535a <wm8994_Init+0x68e>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	f245 6222 	movw	r2, #22050	; 0x5622
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d869      	bhi.n	8005386 <wm8994_Init+0x6ba>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80052b8:	d018      	beq.n	80052ec <wm8994_Init+0x620>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80052c0:	d861      	bhi.n	8005386 <wm8994_Init+0x6ba>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80052c8:	d005      	beq.n	80052d6 <wm8994_Init+0x60a>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	f642 3211 	movw	r2, #11025	; 0x2b11
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d037      	beq.n	8005344 <wm8994_Init+0x678>
 80052d4:	e057      	b.n	8005386 <wm8994_Init+0x6ba>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0003);
 80052d6:	2103      	movs	r1, #3
 80052d8:	f44f 7004 	mov.w	r0, #528	; 0x210
 80052dc:	f000 fbba 	bl	8005a54 <CODEC_IO_Write>
 80052e0:	4603      	mov	r3, r0
 80052e2:	461a      	mov	r2, r3
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	4413      	add	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]
    break;
 80052ea:	e057      	b.n	800539c <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0033);
 80052ec:	2133      	movs	r1, #51	; 0x33
 80052ee:	f44f 7004 	mov.w	r0, #528	; 0x210
 80052f2:	f000 fbaf 	bl	8005a54 <CODEC_IO_Write>
 80052f6:	4603      	mov	r3, r0
 80052f8:	461a      	mov	r2, r3
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	4413      	add	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]
    break;
 8005300:	e04c      	b.n	800539c <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0063);
 8005302:	2163      	movs	r1, #99	; 0x63
 8005304:	f44f 7004 	mov.w	r0, #528	; 0x210
 8005308:	f000 fba4 	bl	8005a54 <CODEC_IO_Write>
 800530c:	4603      	mov	r3, r0
 800530e:	461a      	mov	r2, r3
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	4413      	add	r3, r2
 8005314:	617b      	str	r3, [r7, #20]
    break;
 8005316:	e041      	b.n	800539c <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0083);
 8005318:	2183      	movs	r1, #131	; 0x83
 800531a:	f44f 7004 	mov.w	r0, #528	; 0x210
 800531e:	f000 fb99 	bl	8005a54 <CODEC_IO_Write>
 8005322:	4603      	mov	r3, r0
 8005324:	461a      	mov	r2, r3
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	4413      	add	r3, r2
 800532a:	617b      	str	r3, [r7, #20]
    break;
 800532c:	e036      	b.n	800539c <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x00A3);
 800532e:	21a3      	movs	r1, #163	; 0xa3
 8005330:	f44f 7004 	mov.w	r0, #528	; 0x210
 8005334:	f000 fb8e 	bl	8005a54 <CODEC_IO_Write>
 8005338:	4603      	mov	r3, r0
 800533a:	461a      	mov	r2, r3
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	4413      	add	r3, r2
 8005340:	617b      	str	r3, [r7, #20]
    break;
 8005342:	e02b      	b.n	800539c <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0013);
 8005344:	2113      	movs	r1, #19
 8005346:	f44f 7004 	mov.w	r0, #528	; 0x210
 800534a:	f000 fb83 	bl	8005a54 <CODEC_IO_Write>
 800534e:	4603      	mov	r3, r0
 8005350:	461a      	mov	r2, r3
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	4413      	add	r3, r2
 8005356:	617b      	str	r3, [r7, #20]
    break;
 8005358:	e020      	b.n	800539c <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0043);
 800535a:	2143      	movs	r1, #67	; 0x43
 800535c:	f44f 7004 	mov.w	r0, #528	; 0x210
 8005360:	f000 fb78 	bl	8005a54 <CODEC_IO_Write>
 8005364:	4603      	mov	r3, r0
 8005366:	461a      	mov	r2, r3
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	4413      	add	r3, r2
 800536c:	617b      	str	r3, [r7, #20]
    break;
 800536e:	e015      	b.n	800539c <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0073);
 8005370:	2173      	movs	r1, #115	; 0x73
 8005372:	f44f 7004 	mov.w	r0, #528	; 0x210
 8005376:	f000 fb6d 	bl	8005a54 <CODEC_IO_Write>
 800537a:	4603      	mov	r3, r0
 800537c:	461a      	mov	r2, r3
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	4413      	add	r3, r2
 8005382:	617b      	str	r3, [r7, #20]
    break;
 8005384:	e00a      	b.n	800539c <wm8994_Init+0x6d0>

  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0083);
 8005386:	2183      	movs	r1, #131	; 0x83
 8005388:	f44f 7004 	mov.w	r0, #528	; 0x210
 800538c:	f000 fb62 	bl	8005a54 <CODEC_IO_Write>
 8005390:	4603      	mov	r3, r0
 8005392:	461a      	mov	r2, r3
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	4413      	add	r3, r2
 8005398:	617b      	str	r3, [r7, #20]
    break;
 800539a:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800539c:	89fb      	ldrh	r3, [r7, #14]
 800539e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053a2:	d10b      	bne.n	80053bc <wm8994_Init+0x6f0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(0x300, 0x4018);
 80053a4:	f244 0118 	movw	r1, #16408	; 0x4018
 80053a8:	f44f 7040 	mov.w	r0, #768	; 0x300
 80053ac:	f000 fb52 	bl	8005a54 <CODEC_IO_Write>
 80053b0:	4603      	mov	r3, r0
 80053b2:	461a      	mov	r2, r3
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	4413      	add	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	e00a      	b.n	80053d2 <wm8994_Init+0x706>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(0x300, 0x4010);
 80053bc:	f244 0110 	movw	r1, #16400	; 0x4010
 80053c0:	f44f 7040 	mov.w	r0, #768	; 0x300
 80053c4:	f000 fb46 	bl	8005a54 <CODEC_IO_Write>
 80053c8:	4603      	mov	r3, r0
 80053ca:	461a      	mov	r2, r3
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	4413      	add	r3, r2
 80053d0:	617b      	str	r3, [r7, #20]
  }

  /* slave mode */
  counter += CODEC_IO_Write(0x302, 0x0000);
 80053d2:	2100      	movs	r1, #0
 80053d4:	f240 3002 	movw	r0, #770	; 0x302
 80053d8:	f000 fb3c 	bl	8005a54 <CODEC_IO_Write>
 80053dc:	4603      	mov	r3, r0
 80053de:	461a      	mov	r2, r3
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	4413      	add	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]

  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(0x208, 0x000A);
 80053e6:	210a      	movs	r1, #10
 80053e8:	f44f 7002 	mov.w	r0, #520	; 0x208
 80053ec:	f000 fb32 	bl	8005a54 <CODEC_IO_Write>
 80053f0:	4603      	mov	r3, r0
 80053f2:	461a      	mov	r2, r3
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	4413      	add	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]

  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(0x200, 0x0001);
 80053fa:	2101      	movs	r1, #1
 80053fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005400:	f000 fb28 	bl	8005a54 <CODEC_IO_Write>
 8005404:	4603      	mov	r3, r0
 8005406:	461a      	mov	r2, r3
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	4413      	add	r3, r2
 800540c:	617b      	str	r3, [r7, #20]

  if (output_device > 0)  /* Audio output selected */
 800540e:	8a3b      	ldrh	r3, [r7, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 812c 	beq.w	800566e <wm8994_Init+0x9a2>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8005416:	8a3b      	ldrh	r3, [r7, #16]
 8005418:	2b02      	cmp	r3, #2
 800541a:	d142      	bne.n	80054a2 <wm8994_Init+0x7d6>
    {
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(0x2D, 0x0100);
 800541c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005420:	202d      	movs	r0, #45	; 0x2d
 8005422:	f000 fb17 	bl	8005a54 <CODEC_IO_Write>
 8005426:	4603      	mov	r3, r0
 8005428:	461a      	mov	r2, r3
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	4413      	add	r3, r2
 800542e:	617b      	str	r3, [r7, #20]

      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(0x2E, 0x0100);
 8005430:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005434:	202e      	movs	r0, #46	; 0x2e
 8005436:	f000 fb0d 	bl	8005a54 <CODEC_IO_Write>
 800543a:	4603      	mov	r3, r0
 800543c:	461a      	mov	r2, r3
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	4413      	add	r3, r2
 8005442:	617b      	str	r3, [r7, #20]

      /* Startup sequence for Headphone */
      if(ColdStartup)
 8005444:	4b38      	ldr	r3, [pc, #224]	; (8005528 <wm8994_Init+0x85c>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d012      	beq.n	8005472 <wm8994_Init+0x7a6>
      {
        counter += CODEC_IO_Write(0x110,0x8100);
 800544c:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8005450:	f44f 7088 	mov.w	r0, #272	; 0x110
 8005454:	f000 fafe 	bl	8005a54 <CODEC_IO_Write>
 8005458:	4603      	mov	r3, r0
 800545a:	461a      	mov	r2, r3
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	4413      	add	r3, r2
 8005460:	617b      	str	r3, [r7, #20]

        ColdStartup=0;
 8005462:	4b31      	ldr	r3, [pc, #196]	; (8005528 <wm8994_Init+0x85c>)
 8005464:	2200      	movs	r2, #0
 8005466:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        HAL_Delay(300);
 8005468:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800546c:	f000 fb5c 	bl	8005b28 <HAL_Delay>
 8005470:	e00d      	b.n	800548e <wm8994_Init+0x7c2>
      }
      else /* Headphone Warm Start-Up */
      {
        counter += CODEC_IO_Write(0x110,0x8108);
 8005472:	f248 1108 	movw	r1, #33032	; 0x8108
 8005476:	f44f 7088 	mov.w	r0, #272	; 0x110
 800547a:	f000 faeb 	bl	8005a54 <CODEC_IO_Write>
 800547e:	4603      	mov	r3, r0
 8005480:	461a      	mov	r2, r3
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	4413      	add	r3, r2
 8005486:	617b      	str	r3, [r7, #20]
        /* Add Delay */
        HAL_Delay(50);
 8005488:	2032      	movs	r0, #50	; 0x32
 800548a:	f000 fb4d 	bl	8005b28 <HAL_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(0x420, 0x0000);
 800548e:	2100      	movs	r1, #0
 8005490:	f44f 6084 	mov.w	r0, #1056	; 0x420
 8005494:	f000 fade 	bl	8005a54 <CODEC_IO_Write>
 8005498:	4603      	mov	r3, r0
 800549a:	461a      	mov	r2, r3
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	4413      	add	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(0x03, 0x0300);
 80054a2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80054a6:	2003      	movs	r0, #3
 80054a8:	f000 fad4 	bl	8005a54 <CODEC_IO_Write>
 80054ac:	4603      	mov	r3, r0
 80054ae:	461a      	mov	r2, r3
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	4413      	add	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(0x22, 0x0000);
 80054b6:	2100      	movs	r1, #0
 80054b8:	2022      	movs	r0, #34	; 0x22
 80054ba:	f000 facb 	bl	8005a54 <CODEC_IO_Write>
 80054be:	4603      	mov	r3, r0
 80054c0:	461a      	mov	r2, r3
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	4413      	add	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(0x23, 0x0000);
 80054c8:	2100      	movs	r1, #0
 80054ca:	2023      	movs	r0, #35	; 0x23
 80054cc:	f000 fac2 	bl	8005a54 <CODEC_IO_Write>
 80054d0:	4603      	mov	r3, r0
 80054d2:	461a      	mov	r2, r3
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	4413      	add	r3, r2
 80054d8:	617b      	str	r3, [r7, #20]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(0x36, 0x0300);
 80054da:	f44f 7140 	mov.w	r1, #768	; 0x300
 80054de:	2036      	movs	r0, #54	; 0x36
 80054e0:	f000 fab8 	bl	8005a54 <CODEC_IO_Write>
 80054e4:	4603      	mov	r3, r0
 80054e6:	461a      	mov	r2, r3
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	4413      	add	r3, r2
 80054ec:	617b      	str	r3, [r7, #20]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(0x01, 0x3003);
 80054ee:	f243 0103 	movw	r1, #12291	; 0x3003
 80054f2:	2001      	movs	r0, #1
 80054f4:	f000 faae 	bl	8005a54 <CODEC_IO_Write>
 80054f8:	4603      	mov	r3, r0
 80054fa:	461a      	mov	r2, r3
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	4413      	add	r3, r2
 8005500:	617b      	str	r3, [r7, #20]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005502:	89fb      	ldrh	r3, [r7, #14]
 8005504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005508:	d110      	bne.n	800552c <wm8994_Init+0x860>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(0x51, 0x0205);
 800550a:	f240 2105 	movw	r1, #517	; 0x205
 800550e:	2051      	movs	r0, #81	; 0x51
 8005510:	f000 faa0 	bl	8005a54 <CODEC_IO_Write>
 8005514:	4603      	mov	r3, r0
 8005516:	461a      	mov	r2, r3
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	4413      	add	r3, r2
 800551c:	617b      	str	r3, [r7, #20]
 800551e:	e00e      	b.n	800553e <wm8994_Init+0x872>
 8005520:	20041e08 	.word	0x20041e08
 8005524:	00017700 	.word	0x00017700
 8005528:	20000018 	.word	0x20000018
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(0x51, 0x0005);
 800552c:	2105      	movs	r1, #5
 800552e:	2051      	movs	r0, #81	; 0x51
 8005530:	f000 fa90 	bl	8005a54 <CODEC_IO_Write>
 8005534:	4603      	mov	r3, r0
 8005536:	461a      	mov	r2, r3
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	4413      	add	r3, r2
 800553c:	617b      	str	r3, [r7, #20]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 800553e:	8a7b      	ldrh	r3, [r7, #18]
 8005540:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8005544:	f043 0303 	orr.w	r3, r3, #3
 8005548:	827b      	strh	r3, [r7, #18]
    counter += CODEC_IO_Write(0x01, power_mgnt_reg_1);
 800554a:	8a7b      	ldrh	r3, [r7, #18]
 800554c:	4619      	mov	r1, r3
 800554e:	2001      	movs	r0, #1
 8005550:	f000 fa80 	bl	8005a54 <CODEC_IO_Write>
 8005554:	4603      	mov	r3, r0
 8005556:	461a      	mov	r2, r3
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	4413      	add	r3, r2
 800555c:	617b      	str	r3, [r7, #20]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(0x60, 0x0022);
 800555e:	2122      	movs	r1, #34	; 0x22
 8005560:	2060      	movs	r0, #96	; 0x60
 8005562:	f000 fa77 	bl	8005a54 <CODEC_IO_Write>
 8005566:	4603      	mov	r3, r0
 8005568:	461a      	mov	r2, r3
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	4413      	add	r3, r2
 800556e:	617b      	str	r3, [r7, #20]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(0x4C, 0x9F25);
 8005570:	f649 7125 	movw	r1, #40741	; 0x9f25
 8005574:	204c      	movs	r0, #76	; 0x4c
 8005576:	f000 fa6d 	bl	8005a54 <CODEC_IO_Write>
 800557a:	4603      	mov	r3, r0
 800557c:	461a      	mov	r2, r3
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	4413      	add	r3, r2
 8005582:	617b      	str	r3, [r7, #20]

    /* Add Delay */
    HAL_Delay(15);
 8005584:	200f      	movs	r0, #15
 8005586:	f000 facf 	bl	8005b28 <HAL_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(0x2D, 0x0001);
 800558a:	2101      	movs	r1, #1
 800558c:	202d      	movs	r0, #45	; 0x2d
 800558e:	f000 fa61 	bl	8005a54 <CODEC_IO_Write>
 8005592:	4603      	mov	r3, r0
 8005594:	461a      	mov	r2, r3
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	4413      	add	r3, r2
 800559a:	617b      	str	r3, [r7, #20]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(0x2E, 0x0001);
 800559c:	2101      	movs	r1, #1
 800559e:	202e      	movs	r0, #46	; 0x2e
 80055a0:	f000 fa58 	bl	8005a54 <CODEC_IO_Write>
 80055a4:	4603      	mov	r3, r0
 80055a6:	461a      	mov	r2, r3
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	4413      	add	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(0x03, 0x0030 | 0x0300);
 80055ae:	f44f 714c 	mov.w	r1, #816	; 0x330
 80055b2:	2003      	movs	r0, #3
 80055b4:	f000 fa4e 	bl	8005a54 <CODEC_IO_Write>
 80055b8:	4603      	mov	r3, r0
 80055ba:	461a      	mov	r2, r3
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	4413      	add	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(0x54, 0x0033);
 80055c2:	2133      	movs	r1, #51	; 0x33
 80055c4:	2054      	movs	r0, #84	; 0x54
 80055c6:	f000 fa45 	bl	8005a54 <CODEC_IO_Write>
 80055ca:	4603      	mov	r3, r0
 80055cc:	461a      	mov	r2, r3
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	4413      	add	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]

    /* Add Delay */
    HAL_Delay(257);
 80055d4:	f240 1001 	movw	r0, #257	; 0x101
 80055d8:	f000 faa6 	bl	8005b28 <HAL_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(0x60, 0x00EE);
 80055dc:	21ee      	movs	r1, #238	; 0xee
 80055de:	2060      	movs	r0, #96	; 0x60
 80055e0:	f000 fa38 	bl	8005a54 <CODEC_IO_Write>
 80055e4:	4603      	mov	r3, r0
 80055e6:	461a      	mov	r2, r3
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	4413      	add	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(0x610, 0x00C0);
 80055ee:	21c0      	movs	r1, #192	; 0xc0
 80055f0:	f44f 60c2 	mov.w	r0, #1552	; 0x610
 80055f4:	f000 fa2e 	bl	8005a54 <CODEC_IO_Write>
 80055f8:	4603      	mov	r3, r0
 80055fa:	461a      	mov	r2, r3
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	4413      	add	r3, r2
 8005600:	617b      	str	r3, [r7, #20]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(0x611, 0x00C0);
 8005602:	21c0      	movs	r1, #192	; 0xc0
 8005604:	f240 6011 	movw	r0, #1553	; 0x611
 8005608:	f000 fa24 	bl	8005a54 <CODEC_IO_Write>
 800560c:	4603      	mov	r3, r0
 800560e:	461a      	mov	r2, r3
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	4413      	add	r3, r2
 8005614:	617b      	str	r3, [r7, #20]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(0x420, 0x0010);
 8005616:	2110      	movs	r1, #16
 8005618:	f44f 6084 	mov.w	r0, #1056	; 0x420
 800561c:	f000 fa1a 	bl	8005a54 <CODEC_IO_Write>
 8005620:	4603      	mov	r3, r0
 8005622:	461a      	mov	r2, r3
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	4413      	add	r3, r2
 8005628:	617b      	str	r3, [r7, #20]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(0x612, 0x00C0);
 800562a:	21c0      	movs	r1, #192	; 0xc0
 800562c:	f240 6012 	movw	r0, #1554	; 0x612
 8005630:	f000 fa10 	bl	8005a54 <CODEC_IO_Write>
 8005634:	4603      	mov	r3, r0
 8005636:	461a      	mov	r2, r3
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	4413      	add	r3, r2
 800563c:	617b      	str	r3, [r7, #20]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(0x613, 0x00C0);
 800563e:	21c0      	movs	r1, #192	; 0xc0
 8005640:	f240 6013 	movw	r0, #1555	; 0x613
 8005644:	f000 fa06 	bl	8005a54 <CODEC_IO_Write>
 8005648:	4603      	mov	r3, r0
 800564a:	461a      	mov	r2, r3
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	4413      	add	r3, r2
 8005650:	617b      	str	r3, [r7, #20]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(0x422, 0x0010);
 8005652:	2110      	movs	r1, #16
 8005654:	f240 4022 	movw	r0, #1058	; 0x422
 8005658:	f000 f9fc 	bl	8005a54 <CODEC_IO_Write>
 800565c:	4603      	mov	r3, r0
 800565e:	461a      	mov	r2, r3
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	4413      	add	r3, r2
 8005664:	617b      	str	r3, [r7, #20]

    /* Volume Control */
    wm8994_SetVolume(Volume);
 8005666:	797b      	ldrb	r3, [r7, #5]
 8005668:	4618      	mov	r0, r3
 800566a:	f000 f899 	bl	80057a0 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 800566e:	89fb      	ldrh	r3, [r7, #14]
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 8088 	beq.w	8005786 <wm8994_Init+0xaba>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8005676:	89fb      	ldrh	r3, [r7, #14]
 8005678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800567c:	d003      	beq.n	8005686 <wm8994_Init+0x9ba>
 800567e:	89fb      	ldrh	r3, [r7, #14]
 8005680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005684:	d123      	bne.n	80056ce <wm8994_Init+0xa02>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8005686:	8a7b      	ldrh	r3, [r7, #18]
 8005688:	f043 0313 	orr.w	r3, r3, #19
 800568c:	827b      	strh	r3, [r7, #18]
      counter += CODEC_IO_Write(0x01, power_mgnt_reg_1);
 800568e:	8a7b      	ldrh	r3, [r7, #18]
 8005690:	4619      	mov	r1, r3
 8005692:	2001      	movs	r0, #1
 8005694:	f000 f9de 	bl	8005a54 <CODEC_IO_Write>
 8005698:	4603      	mov	r3, r0
 800569a:	461a      	mov	r2, r3
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	4413      	add	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(0x620, 0x0002);
 80056a2:	2102      	movs	r1, #2
 80056a4:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 80056a8:	f000 f9d4 	bl	8005a54 <CODEC_IO_Write>
 80056ac:	4603      	mov	r3, r0
 80056ae:	461a      	mov	r2, r3
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	4413      	add	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(0x411, 0x3800);
 80056b6:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80056ba:	f240 4011 	movw	r0, #1041	; 0x411
 80056be:	f000 f9c9 	bl	8005a54 <CODEC_IO_Write>
 80056c2:	4603      	mov	r3, r0
 80056c4:	461a      	mov	r2, r3
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	4413      	add	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	e057      	b.n	800577e <wm8994_Init+0xab2>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80056ce:	89fb      	ldrh	r3, [r7, #14]
 80056d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056d4:	d12e      	bne.n	8005734 <wm8994_Init+0xa68>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80056d6:	8a7b      	ldrh	r3, [r7, #18]
 80056d8:	f043 0313 	orr.w	r3, r3, #19
 80056dc:	827b      	strh	r3, [r7, #18]
      counter += CODEC_IO_Write(0x01, power_mgnt_reg_1);
 80056de:	8a7b      	ldrh	r3, [r7, #18]
 80056e0:	4619      	mov	r1, r3
 80056e2:	2001      	movs	r0, #1
 80056e4:	f000 f9b6 	bl	8005a54 <CODEC_IO_Write>
 80056e8:	4603      	mov	r3, r0
 80056ea:	461a      	mov	r2, r3
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	4413      	add	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(0x620, 0x0002);
 80056f2:	2102      	movs	r1, #2
 80056f4:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 80056f8:	f000 f9ac 	bl	8005a54 <CODEC_IO_Write>
 80056fc:	4603      	mov	r3, r0
 80056fe:	461a      	mov	r2, r3
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	4413      	add	r3, r2
 8005704:	617b      	str	r3, [r7, #20]

      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(0x410, 0x1800);
 8005706:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800570a:	f44f 6082 	mov.w	r0, #1040	; 0x410
 800570e:	f000 f9a1 	bl	8005a54 <CODEC_IO_Write>
 8005712:	4603      	mov	r3, r0
 8005714:	461a      	mov	r2, r3
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	4413      	add	r3, r2
 800571a:	617b      	str	r3, [r7, #20]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(0x411, 0x1800);
 800571c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005720:	f240 4011 	movw	r0, #1041	; 0x411
 8005724:	f000 f996 	bl	8005a54 <CODEC_IO_Write>
 8005728:	4603      	mov	r3, r0
 800572a:	461a      	mov	r2, r3
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	4413      	add	r3, r2
 8005730:	617b      	str	r3, [r7, #20]
 8005732:	e024      	b.n	800577e <wm8994_Init+0xab2>
    }
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8005734:	89fb      	ldrh	r3, [r7, #14]
 8005736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800573a:	d003      	beq.n	8005744 <wm8994_Init+0xa78>
 800573c:	89fb      	ldrh	r3, [r7, #14]
 800573e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005742:	d11c      	bne.n	800577e <wm8994_Init+0xab2>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(0x18, 0x000B);
 8005744:	210b      	movs	r1, #11
 8005746:	2018      	movs	r0, #24
 8005748:	f000 f984 	bl	8005a54 <CODEC_IO_Write>
 800574c:	4603      	mov	r3, r0
 800574e:	461a      	mov	r2, r3
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	4413      	add	r3, r2
 8005754:	617b      	str	r3, [r7, #20]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(0x1A, 0x000B);
 8005756:	210b      	movs	r1, #11
 8005758:	201a      	movs	r0, #26
 800575a:	f000 f97b 	bl	8005a54 <CODEC_IO_Write>
 800575e:	4603      	mov	r3, r0
 8005760:	461a      	mov	r2, r3
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	4413      	add	r3, r2
 8005766:	617b      	str	r3, [r7, #20]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(0x410, 0x1800);
 8005768:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800576c:	f44f 6082 	mov.w	r0, #1040	; 0x410
 8005770:	f000 f970 	bl	8005a54 <CODEC_IO_Write>
 8005774:	4603      	mov	r3, r0
 8005776:	461a      	mov	r2, r3
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	4413      	add	r3, r2
 800577c:	617b      	str	r3, [r7, #20]
    }
    /* Volume Control */
    wm8994_SetVolume(Volume);
 800577e:	797b      	ldrb	r3, [r7, #5]
 8005780:	4618      	mov	r0, r3
 8005782:	f000 f80d 	bl	80057a0 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;
 8005786:	697b      	ldr	r3, [r7, #20]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <wm8994_ReadID>:
/**
  * @brief  Get the WM8994 ID.
  * @retval The WM8994 ID
  */
uint32_t wm8994_ReadID()
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  return ((uint32_t)AUDIO_I2C_Read(WM8994_CHIPID_ADDR));
 8005794:	2000      	movs	r0, #0
 8005796:	f7fe fbdf 	bl	8003f58 <AUDIO_I2C_Read>
 800579a:	4603      	mov	r3, r0
}
 800579c:	4618      	mov	r0, r3
 800579e:	bd80      	pop	{r7, pc}

080057a0 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint8_t Volume)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	4603      	mov	r3, r0
 80057a8:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 80057aa:	2300      	movs	r3, #0
 80057ac:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80057ae:	79fb      	ldrb	r3, [r7, #7]
 80057b0:	2b64      	cmp	r3, #100	; 0x64
 80057b2:	d80b      	bhi.n	80057cc <wm8994_SetVolume+0x2c>
 80057b4:	79fa      	ldrb	r2, [r7, #7]
 80057b6:	4613      	mov	r3, r2
 80057b8:	019b      	lsls	r3, r3, #6
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	4a75      	ldr	r2, [pc, #468]	; (8005994 <wm8994_SetVolume+0x1f4>)
 80057be:	fb82 1203 	smull	r1, r2, r2, r3
 80057c2:	1152      	asrs	r2, r2, #5
 80057c4:	17db      	asrs	r3, r3, #31
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	e000      	b.n	80057ce <wm8994_SetVolume+0x2e>
 80057cc:	233f      	movs	r3, #63	; 0x3f
 80057ce:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 80057d0:	4b71      	ldr	r3, [pc, #452]	; (8005998 <wm8994_SetVolume+0x1f8>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 8081 	beq.w	80058dc <wm8994_SetVolume+0x13c>
  {
    if(convertedvol > 0x3E)
 80057da:	7afb      	ldrb	r3, [r7, #11]
 80057dc:	2b3e      	cmp	r3, #62	; 0x3e
 80057de:	d92f      	bls.n	8005840 <wm8994_SetVolume+0xa0>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(AUDIO_MUTE_OFF);
 80057e0:	2000      	movs	r0, #0
 80057e2:	f000 f8dd 	bl	80059a0 <wm8994_SetMute>
 80057e6:	4602      	mov	r2, r0
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(0x1C, 0x3F | 0x140);
 80057ee:	f240 117f 	movw	r1, #383	; 0x17f
 80057f2:	201c      	movs	r0, #28
 80057f4:	f000 f92e 	bl	8005a54 <CODEC_IO_Write>
 80057f8:	4603      	mov	r3, r0
 80057fa:	461a      	mov	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(0x1D, 0x3F | 0x140);
 8005802:	f240 117f 	movw	r1, #383	; 0x17f
 8005806:	201d      	movs	r0, #29
 8005808:	f000 f924 	bl	8005a54 <CODEC_IO_Write>
 800580c:	4603      	mov	r3, r0
 800580e:	461a      	mov	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(0x26, 0x3F | 0x140);
 8005816:	f240 117f 	movw	r1, #383	; 0x17f
 800581a:	2026      	movs	r0, #38	; 0x26
 800581c:	f000 f91a 	bl	8005a54 <CODEC_IO_Write>
 8005820:	4603      	mov	r3, r0
 8005822:	461a      	mov	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(0x27, 0x3F | 0x140);
 800582a:	f240 117f 	movw	r1, #383	; 0x17f
 800582e:	2027      	movs	r0, #39	; 0x27
 8005830:	f000 f910 	bl	8005a54 <CODEC_IO_Write>
 8005834:	4603      	mov	r3, r0
 8005836:	461a      	mov	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4413      	add	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	e04d      	b.n	80058dc <wm8994_SetVolume+0x13c>
    }
    else if (Volume == 0)
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d107      	bne.n	8005856 <wm8994_SetVolume+0xb6>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(AUDIO_MUTE_ON);
 8005846:	2001      	movs	r0, #1
 8005848:	f000 f8aa 	bl	80059a0 <wm8994_SetMute>
 800584c:	4602      	mov	r2, r0
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4413      	add	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	e042      	b.n	80058dc <wm8994_SetVolume+0x13c>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(AUDIO_MUTE_OFF);
 8005856:	2000      	movs	r0, #0
 8005858:	f000 f8a2 	bl	80059a0 <wm8994_SetMute>
 800585c:	4602      	mov	r2, r0
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	4413      	add	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(0x1C, convertedvol | 0x140);
 8005864:	7afb      	ldrb	r3, [r7, #11]
 8005866:	b21b      	sxth	r3, r3
 8005868:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800586c:	b21b      	sxth	r3, r3
 800586e:	b29b      	uxth	r3, r3
 8005870:	4619      	mov	r1, r3
 8005872:	201c      	movs	r0, #28
 8005874:	f000 f8ee 	bl	8005a54 <CODEC_IO_Write>
 8005878:	4603      	mov	r3, r0
 800587a:	461a      	mov	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(0x1D, convertedvol | 0x140);
 8005882:	7afb      	ldrb	r3, [r7, #11]
 8005884:	b21b      	sxth	r3, r3
 8005886:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800588a:	b21b      	sxth	r3, r3
 800588c:	b29b      	uxth	r3, r3
 800588e:	4619      	mov	r1, r3
 8005890:	201d      	movs	r0, #29
 8005892:	f000 f8df 	bl	8005a54 <CODEC_IO_Write>
 8005896:	4603      	mov	r3, r0
 8005898:	461a      	mov	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	4413      	add	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(0x26, convertedvol | 0x140);
 80058a0:	7afb      	ldrb	r3, [r7, #11]
 80058a2:	b21b      	sxth	r3, r3
 80058a4:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80058a8:	b21b      	sxth	r3, r3
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	4619      	mov	r1, r3
 80058ae:	2026      	movs	r0, #38	; 0x26
 80058b0:	f000 f8d0 	bl	8005a54 <CODEC_IO_Write>
 80058b4:	4603      	mov	r3, r0
 80058b6:	461a      	mov	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4413      	add	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(0x27, convertedvol | 0x140);
 80058be:	7afb      	ldrb	r3, [r7, #11]
 80058c0:	b21b      	sxth	r3, r3
 80058c2:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80058c6:	b21b      	sxth	r3, r3
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	4619      	mov	r1, r3
 80058cc:	2027      	movs	r0, #39	; 0x27
 80058ce:	f000 f8c1 	bl	8005a54 <CODEC_IO_Write>
 80058d2:	4603      	mov	r3, r0
 80058d4:	461a      	mov	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4413      	add	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 80058dc:	4b2f      	ldr	r3, [pc, #188]	; (800599c <wm8994_SetVolume+0x1fc>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d051      	beq.n	8005988 <wm8994_SetVolume+0x1e8>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80058e4:	79fb      	ldrb	r3, [r7, #7]
 80058e6:	2b63      	cmp	r3, #99	; 0x63
 80058e8:	d80c      	bhi.n	8005904 <wm8994_SetVolume+0x164>
 80058ea:	79fa      	ldrb	r2, [r7, #7]
 80058ec:	4613      	mov	r3, r2
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	1a9b      	subs	r3, r3, r2
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	4a27      	ldr	r2, [pc, #156]	; (8005994 <wm8994_SetVolume+0x1f4>)
 80058f6:	fb82 1203 	smull	r1, r2, r2, r3
 80058fa:	1152      	asrs	r2, r2, #5
 80058fc:	17db      	asrs	r3, r3, #31
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	b2db      	uxtb	r3, r3
 8005902:	e000      	b.n	8005906 <wm8994_SetVolume+0x166>
 8005904:	23ef      	movs	r3, #239	; 0xef
 8005906:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(0x400, convertedvol | 0x100);
 8005908:	7afb      	ldrb	r3, [r7, #11]
 800590a:	b21b      	sxth	r3, r3
 800590c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005910:	b21b      	sxth	r3, r3
 8005912:	b29b      	uxth	r3, r3
 8005914:	4619      	mov	r1, r3
 8005916:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800591a:	f000 f89b 	bl	8005a54 <CODEC_IO_Write>
 800591e:	4603      	mov	r3, r0
 8005920:	461a      	mov	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4413      	add	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(0x401, convertedvol | 0x100);
 8005928:	7afb      	ldrb	r3, [r7, #11]
 800592a:	b21b      	sxth	r3, r3
 800592c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005930:	b21b      	sxth	r3, r3
 8005932:	b29b      	uxth	r3, r3
 8005934:	4619      	mov	r1, r3
 8005936:	f240 4001 	movw	r0, #1025	; 0x401
 800593a:	f000 f88b 	bl	8005a54 <CODEC_IO_Write>
 800593e:	4603      	mov	r3, r0
 8005940:	461a      	mov	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4413      	add	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(0x404, convertedvol | 0x100);
 8005948:	7afb      	ldrb	r3, [r7, #11]
 800594a:	b21b      	sxth	r3, r3
 800594c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005950:	b21b      	sxth	r3, r3
 8005952:	b29b      	uxth	r3, r3
 8005954:	4619      	mov	r1, r3
 8005956:	f240 4004 	movw	r0, #1028	; 0x404
 800595a:	f000 f87b 	bl	8005a54 <CODEC_IO_Write>
 800595e:	4603      	mov	r3, r0
 8005960:	461a      	mov	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4413      	add	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(0x405, convertedvol | 0x100);
 8005968:	7afb      	ldrb	r3, [r7, #11]
 800596a:	b21b      	sxth	r3, r3
 800596c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005970:	b21b      	sxth	r3, r3
 8005972:	b29b      	uxth	r3, r3
 8005974:	4619      	mov	r1, r3
 8005976:	f240 4005 	movw	r0, #1029	; 0x405
 800597a:	f000 f86b 	bl	8005a54 <CODEC_IO_Write>
 800597e:	4603      	mov	r3, r0
 8005980:	461a      	mov	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4413      	add	r3, r2
 8005986:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8005988:	68fb      	ldr	r3, [r7, #12]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	51eb851f 	.word	0x51eb851f
 8005998:	20041e04 	.word	0x20041e04
 800599c:	20041e08 	.word	0x20041e08

080059a0 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint32_t Cmd)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;
 80059a8:	2300      	movs	r3, #0
 80059aa:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 80059ac:	4b1b      	ldr	r3, [pc, #108]	; (8005a1c <wm8994_SetMute+0x7c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d02d      	beq.n	8005a10 <wm8994_SetMute+0x70>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d116      	bne.n	80059e8 <wm8994_SetMute+0x48>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(0x420, 0x0200);
 80059ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059be:	f44f 6084 	mov.w	r0, #1056	; 0x420
 80059c2:	f000 f847 	bl	8005a54 <CODEC_IO_Write>
 80059c6:	4603      	mov	r3, r0
 80059c8:	461a      	mov	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	4413      	add	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(0x422, 0x0200);
 80059d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059d4:	f240 4022 	movw	r0, #1058	; 0x422
 80059d8:	f000 f83c 	bl	8005a54 <CODEC_IO_Write>
 80059dc:	4603      	mov	r3, r0
 80059de:	461a      	mov	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	e013      	b.n	8005a10 <wm8994_SetMute+0x70>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(0x420, 0x0010);
 80059e8:	2110      	movs	r1, #16
 80059ea:	f44f 6084 	mov.w	r0, #1056	; 0x420
 80059ee:	f000 f831 	bl	8005a54 <CODEC_IO_Write>
 80059f2:	4603      	mov	r3, r0
 80059f4:	461a      	mov	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4413      	add	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(0x422, 0x0010);
 80059fc:	2110      	movs	r1, #16
 80059fe:	f240 4022 	movw	r0, #1058	; 0x422
 8005a02:	f000 f827 	bl	8005a54 <CODEC_IO_Write>
 8005a06:	4603      	mov	r3, r0
 8005a08:	461a      	mov	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8005a10:	68fb      	ldr	r3, [r7, #12]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	20041e04 	.word	0x20041e04

08005a20 <wm8994_Reset>:
/**
  * @brief Resets wm8994 registers.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset()
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
  uint32_t counter = 0;
 8005a26:	2300      	movs	r3, #0
 8005a28:	607b      	str	r3, [r7, #4]

  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(0x0000, 0x0000);
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	f000 f811 	bl	8005a54 <CODEC_IO_Write>
 8005a32:	4603      	mov	r3, r0
 8005a34:	607b      	str	r3, [r7, #4]
  outputEnabled = 0;
 8005a36:	4b05      	ldr	r3, [pc, #20]	; (8005a4c <wm8994_Reset+0x2c>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8005a3c:	4b04      	ldr	r3, [pc, #16]	; (8005a50 <wm8994_Reset+0x30>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]

  return counter;
 8005a42:	687b      	ldr	r3, [r7, #4]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3708      	adds	r7, #8
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	20041e04 	.word	0x20041e04
 8005a50:	20041e08 	.word	0x20041e08

08005a54 <CODEC_IO_Write>:
  * @brief  Writes/Read a single data to the onboard WM8994 audio Codec
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint16_t Reg, uint16_t Value){
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	460a      	mov	r2, r1
 8005a5e:	80fb      	strh	r3, [r7, #6]
 8005a60:	4613      	mov	r3, r2
 8005a62:	80bb      	strh	r3, [r7, #4]

  AUDIO_I2C_Write(Reg, Value);
 8005a64:	88ba      	ldrh	r2, [r7, #4]
 8005a66:	88fb      	ldrh	r3, [r7, #6]
 8005a68:	4611      	mov	r1, r2
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fe fa4c 	bl	8003f08 <AUDIO_I2C_Write>

#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  return (AUDIO_I2C_Read(Reg) == Value)? 0:1;
#else
  return 0;
 8005a70:	2300      	movs	r3, #0
#endif /* VERIFY_WRITTENDATA */
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
	...

08005a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005ab4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005a80:	480d      	ldr	r0, [pc, #52]	; (8005ab8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005a82:	490e      	ldr	r1, [pc, #56]	; (8005abc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005a84:	4a0e      	ldr	r2, [pc, #56]	; (8005ac0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a88:	e002      	b.n	8005a90 <LoopCopyDataInit>

08005a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a8e:	3304      	adds	r3, #4

08005a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a94:	d3f9      	bcc.n	8005a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a96:	4a0b      	ldr	r2, [pc, #44]	; (8005ac4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005a98:	4c0b      	ldr	r4, [pc, #44]	; (8005ac8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a9c:	e001      	b.n	8005aa2 <LoopFillZerobss>

08005a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005aa0:	3204      	adds	r2, #4

08005aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005aa4:	d3fb      	bcc.n	8005a9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005aa6:	f7fe f951 	bl	8003d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005aaa:	f017 ff27 	bl	801d8fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005aae:	f7fb fbeb 	bl	8001288 <main>
  bx  lr    
 8005ab2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005ab4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005abc:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 8005ac0:	08020c10 	.word	0x08020c10
  ldr r2, =_sbss
 8005ac4:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8005ac8:	2004c058 	.word	0x2004c058

08005acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005acc:	e7fe      	b.n	8005acc <ADC_IRQHandler>

08005ace <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ad2:	2003      	movs	r0, #3
 8005ad4:	f000 fbb1 	bl	800623a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ad8:	2000      	movs	r0, #0
 8005ada:	f7fd ff97 	bl	8003a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ade:	f7fc fee1 	bl	80028a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005aec:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <HAL_IncTick+0x20>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	461a      	mov	r2, r3
 8005af2:	4b06      	ldr	r3, [pc, #24]	; (8005b0c <HAL_IncTick+0x24>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4413      	add	r3, r2
 8005af8:	4a04      	ldr	r2, [pc, #16]	; (8005b0c <HAL_IncTick+0x24>)
 8005afa:	6013      	str	r3, [r2, #0]
}
 8005afc:	bf00      	nop
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	20000028 	.word	0x20000028
 8005b0c:	20041e0c 	.word	0x20041e0c

08005b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0
  return uwTick;
 8005b14:	4b03      	ldr	r3, [pc, #12]	; (8005b24 <HAL_GetTick+0x14>)
 8005b16:	681b      	ldr	r3, [r3, #0]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	20041e0c 	.word	0x20041e0c

08005b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b30:	f7ff ffee 	bl	8005b10 <HAL_GetTick>
 8005b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b40:	d005      	beq.n	8005b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b42:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <HAL_Delay+0x44>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	461a      	mov	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005b4e:	bf00      	nop
 8005b50:	f7ff ffde 	bl	8005b10 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d8f7      	bhi.n	8005b50 <HAL_Delay+0x28>
  {
  }
}
 8005b60:	bf00      	nop
 8005b62:	bf00      	nop
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000028 	.word	0x20000028

08005b70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e031      	b.n	8005bea <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d109      	bne.n	8005ba2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fc feb0 	bl	80028f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	f003 0310 	and.w	r3, r3, #16
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d116      	bne.n	8005bdc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bb2:	4b10      	ldr	r3, [pc, #64]	; (8005bf4 <HAL_ADC_Init+0x84>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	f043 0202 	orr.w	r2, r3, #2
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f970 	bl	8005ea4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	f023 0303 	bic.w	r3, r3, #3
 8005bd2:	f043 0201 	orr.w	r2, r3, #1
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	641a      	str	r2, [r3, #64]	; 0x40
 8005bda:	e001      	b.n	8005be0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	ffffeefd 	.word	0xffffeefd

08005bf8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005c02:	2300      	movs	r3, #0
 8005c04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d101      	bne.n	8005c14 <HAL_ADC_ConfigChannel+0x1c>
 8005c10:	2302      	movs	r3, #2
 8005c12:	e136      	b.n	8005e82 <HAL_ADC_ConfigChannel+0x28a>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b09      	cmp	r3, #9
 8005c22:	d93a      	bls.n	8005c9a <HAL_ADC_ConfigChannel+0xa2>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c2c:	d035      	beq.n	8005c9a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68d9      	ldr	r1, [r3, #12]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	4413      	add	r3, r2
 8005c42:	3b1e      	subs	r3, #30
 8005c44:	2207      	movs	r2, #7
 8005c46:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4a:	43da      	mvns	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	400a      	ands	r2, r1
 8005c52:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a8d      	ldr	r2, [pc, #564]	; (8005e90 <HAL_ADC_ConfigChannel+0x298>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d10a      	bne.n	8005c74 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68d9      	ldr	r1, [r3, #12]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	061a      	lsls	r2, r3, #24
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c72:	e035      	b.n	8005ce0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68d9      	ldr	r1, [r3, #12]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	689a      	ldr	r2, [r3, #8]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	4618      	mov	r0, r3
 8005c86:	4603      	mov	r3, r0
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	4403      	add	r3, r0
 8005c8c:	3b1e      	subs	r3, #30
 8005c8e:	409a      	lsls	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c98:	e022      	b.n	8005ce0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6919      	ldr	r1, [r3, #16]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	4613      	mov	r3, r2
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	4413      	add	r3, r2
 8005cae:	2207      	movs	r2, #7
 8005cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb4:	43da      	mvns	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	400a      	ands	r2, r1
 8005cbc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6919      	ldr	r1, [r3, #16]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	689a      	ldr	r2, [r3, #8]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	4618      	mov	r0, r3
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	4403      	add	r3, r0
 8005cd6:	409a      	lsls	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b06      	cmp	r3, #6
 8005ce6:	d824      	bhi.n	8005d32 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	3b05      	subs	r3, #5
 8005cfa:	221f      	movs	r2, #31
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	43da      	mvns	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	400a      	ands	r2, r1
 8005d08:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	4618      	mov	r0, r3
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	3b05      	subs	r3, #5
 8005d24:	fa00 f203 	lsl.w	r2, r0, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	635a      	str	r2, [r3, #52]	; 0x34
 8005d30:	e04c      	b.n	8005dcc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	2b0c      	cmp	r3, #12
 8005d38:	d824      	bhi.n	8005d84 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	4613      	mov	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	3b23      	subs	r3, #35	; 0x23
 8005d4c:	221f      	movs	r2, #31
 8005d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d52:	43da      	mvns	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	400a      	ands	r2, r1
 8005d5a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	4618      	mov	r0, r3
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	3b23      	subs	r3, #35	; 0x23
 8005d76:	fa00 f203 	lsl.w	r2, r0, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	631a      	str	r2, [r3, #48]	; 0x30
 8005d82:	e023      	b.n	8005dcc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	3b41      	subs	r3, #65	; 0x41
 8005d96:	221f      	movs	r2, #31
 8005d98:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9c:	43da      	mvns	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	400a      	ands	r2, r1
 8005da4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	4618      	mov	r0, r3
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	4613      	mov	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	3b41      	subs	r3, #65	; 0x41
 8005dc0:	fa00 f203 	lsl.w	r2, r0, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a30      	ldr	r2, [pc, #192]	; (8005e94 <HAL_ADC_ConfigChannel+0x29c>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d10a      	bne.n	8005dec <HAL_ADC_ConfigChannel+0x1f4>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dde:	d105      	bne.n	8005dec <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005de0:	4b2d      	ldr	r3, [pc, #180]	; (8005e98 <HAL_ADC_ConfigChannel+0x2a0>)
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	4a2c      	ldr	r2, [pc, #176]	; (8005e98 <HAL_ADC_ConfigChannel+0x2a0>)
 8005de6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005dea:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a28      	ldr	r2, [pc, #160]	; (8005e94 <HAL_ADC_ConfigChannel+0x29c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d10f      	bne.n	8005e16 <HAL_ADC_ConfigChannel+0x21e>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b12      	cmp	r3, #18
 8005dfc:	d10b      	bne.n	8005e16 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005dfe:	4b26      	ldr	r3, [pc, #152]	; (8005e98 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	4a25      	ldr	r2, [pc, #148]	; (8005e98 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005e08:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005e0a:	4b23      	ldr	r3, [pc, #140]	; (8005e98 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	4a22      	ldr	r2, [pc, #136]	; (8005e98 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e14:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a1e      	ldr	r2, [pc, #120]	; (8005e94 <HAL_ADC_ConfigChannel+0x29c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d12b      	bne.n	8005e78 <HAL_ADC_ConfigChannel+0x280>
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a1a      	ldr	r2, [pc, #104]	; (8005e90 <HAL_ADC_ConfigChannel+0x298>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d003      	beq.n	8005e32 <HAL_ADC_ConfigChannel+0x23a>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2b11      	cmp	r3, #17
 8005e30:	d122      	bne.n	8005e78 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005e32:	4b19      	ldr	r3, [pc, #100]	; (8005e98 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	4a18      	ldr	r2, [pc, #96]	; (8005e98 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e38:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005e3c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005e3e:	4b16      	ldr	r3, [pc, #88]	; (8005e98 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	4a15      	ldr	r2, [pc, #84]	; (8005e98 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e48:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a10      	ldr	r2, [pc, #64]	; (8005e90 <HAL_ADC_ConfigChannel+0x298>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d111      	bne.n	8005e78 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005e54:	4b11      	ldr	r3, [pc, #68]	; (8005e9c <HAL_ADC_ConfigChannel+0x2a4>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a11      	ldr	r2, [pc, #68]	; (8005ea0 <HAL_ADC_ConfigChannel+0x2a8>)
 8005e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5e:	0c9a      	lsrs	r2, r3, #18
 8005e60:	4613      	mov	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005e6a:	e002      	b.n	8005e72 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1f9      	bne.n	8005e6c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	10000012 	.word	0x10000012
 8005e94:	40012000 	.word	0x40012000
 8005e98:	40012300 	.word	0x40012300
 8005e9c:	20000010 	.word	0x20000010
 8005ea0:	431bde83 	.word	0x431bde83

08005ea4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005eac:	4b78      	ldr	r3, [pc, #480]	; (8006090 <ADC_Init+0x1ec>)
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	4a77      	ldr	r2, [pc, #476]	; (8006090 <ADC_Init+0x1ec>)
 8005eb2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005eb6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005eb8:	4b75      	ldr	r3, [pc, #468]	; (8006090 <ADC_Init+0x1ec>)
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	4973      	ldr	r1, [pc, #460]	; (8006090 <ADC_Init+0x1ec>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ed4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6859      	ldr	r1, [r3, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	021a      	lsls	r2, r3, #8
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005ef8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6859      	ldr	r1, [r3, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6899      	ldr	r1, [r3, #8]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f32:	4a58      	ldr	r2, [pc, #352]	; (8006094 <ADC_Init+0x1f0>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d022      	beq.n	8005f7e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6899      	ldr	r1, [r3, #8]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	430a      	orrs	r2, r1
 8005f58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005f68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6899      	ldr	r1, [r3, #8]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	609a      	str	r2, [r3, #8]
 8005f7c:	e00f      	b.n	8005f9e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005f9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 0202 	bic.w	r2, r2, #2
 8005fac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	6899      	ldr	r1, [r3, #8]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	005a      	lsls	r2, r3, #1
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d01b      	beq.n	8006004 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005fea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6859      	ldr	r1, [r3, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	035a      	lsls	r2, r3, #13
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	605a      	str	r2, [r3, #4]
 8006002:	e007      	b.n	8006014 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006012:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006022:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	3b01      	subs	r3, #1
 8006030:	051a      	lsls	r2, r3, #20
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006048:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6899      	ldr	r1, [r3, #8]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006056:	025a      	lsls	r2, r3, #9
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	430a      	orrs	r2, r1
 800605e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689a      	ldr	r2, [r3, #8]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800606e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6899      	ldr	r1, [r3, #8]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	029a      	lsls	r2, r3, #10
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	609a      	str	r2, [r3, #8]
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	40012300 	.word	0x40012300
 8006094:	0f000001 	.word	0x0f000001

08006098 <__NVIC_SetPriorityGrouping>:
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f003 0307 	and.w	r3, r3, #7
 80060a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060a8:	4b0b      	ldr	r3, [pc, #44]	; (80060d8 <__NVIC_SetPriorityGrouping+0x40>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80060b4:	4013      	ands	r3, r2
 80060b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80060c0:	4b06      	ldr	r3, [pc, #24]	; (80060dc <__NVIC_SetPriorityGrouping+0x44>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060c6:	4a04      	ldr	r2, [pc, #16]	; (80060d8 <__NVIC_SetPriorityGrouping+0x40>)
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	60d3      	str	r3, [r2, #12]
}
 80060cc:	bf00      	nop
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	e000ed00 	.word	0xe000ed00
 80060dc:	05fa0000 	.word	0x05fa0000

080060e0 <__NVIC_GetPriorityGrouping>:
{
 80060e0:	b480      	push	{r7}
 80060e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060e4:	4b04      	ldr	r3, [pc, #16]	; (80060f8 <__NVIC_GetPriorityGrouping+0x18>)
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	0a1b      	lsrs	r3, r3, #8
 80060ea:	f003 0307 	and.w	r3, r3, #7
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	e000ed00 	.word	0xe000ed00

080060fc <__NVIC_EnableIRQ>:
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	4603      	mov	r3, r0
 8006104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800610a:	2b00      	cmp	r3, #0
 800610c:	db0b      	blt.n	8006126 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800610e:	79fb      	ldrb	r3, [r7, #7]
 8006110:	f003 021f 	and.w	r2, r3, #31
 8006114:	4907      	ldr	r1, [pc, #28]	; (8006134 <__NVIC_EnableIRQ+0x38>)
 8006116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800611a:	095b      	lsrs	r3, r3, #5
 800611c:	2001      	movs	r0, #1
 800611e:	fa00 f202 	lsl.w	r2, r0, r2
 8006122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	e000e100 	.word	0xe000e100

08006138 <__NVIC_DisableIRQ>:
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	4603      	mov	r3, r0
 8006140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006146:	2b00      	cmp	r3, #0
 8006148:	db12      	blt.n	8006170 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800614a:	79fb      	ldrb	r3, [r7, #7]
 800614c:	f003 021f 	and.w	r2, r3, #31
 8006150:	490a      	ldr	r1, [pc, #40]	; (800617c <__NVIC_DisableIRQ+0x44>)
 8006152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006156:	095b      	lsrs	r3, r3, #5
 8006158:	2001      	movs	r0, #1
 800615a:	fa00 f202 	lsl.w	r2, r0, r2
 800615e:	3320      	adds	r3, #32
 8006160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006164:	f3bf 8f4f 	dsb	sy
}
 8006168:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800616a:	f3bf 8f6f 	isb	sy
}
 800616e:	bf00      	nop
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	e000e100 	.word	0xe000e100

08006180 <__NVIC_SetPriority>:
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	4603      	mov	r3, r0
 8006188:	6039      	str	r1, [r7, #0]
 800618a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800618c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006190:	2b00      	cmp	r3, #0
 8006192:	db0a      	blt.n	80061aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	b2da      	uxtb	r2, r3
 8006198:	490c      	ldr	r1, [pc, #48]	; (80061cc <__NVIC_SetPriority+0x4c>)
 800619a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800619e:	0112      	lsls	r2, r2, #4
 80061a0:	b2d2      	uxtb	r2, r2
 80061a2:	440b      	add	r3, r1
 80061a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80061a8:	e00a      	b.n	80061c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	4908      	ldr	r1, [pc, #32]	; (80061d0 <__NVIC_SetPriority+0x50>)
 80061b0:	79fb      	ldrb	r3, [r7, #7]
 80061b2:	f003 030f 	and.w	r3, r3, #15
 80061b6:	3b04      	subs	r3, #4
 80061b8:	0112      	lsls	r2, r2, #4
 80061ba:	b2d2      	uxtb	r2, r2
 80061bc:	440b      	add	r3, r1
 80061be:	761a      	strb	r2, [r3, #24]
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	e000e100 	.word	0xe000e100
 80061d0:	e000ed00 	.word	0xe000ed00

080061d4 <NVIC_EncodePriority>:
{
 80061d4:	b480      	push	{r7}
 80061d6:	b089      	sub	sp, #36	; 0x24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f003 0307 	and.w	r3, r3, #7
 80061e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	f1c3 0307 	rsb	r3, r3, #7
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	bf28      	it	cs
 80061f2:	2304      	movcs	r3, #4
 80061f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	3304      	adds	r3, #4
 80061fa:	2b06      	cmp	r3, #6
 80061fc:	d902      	bls.n	8006204 <NVIC_EncodePriority+0x30>
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	3b03      	subs	r3, #3
 8006202:	e000      	b.n	8006206 <NVIC_EncodePriority+0x32>
 8006204:	2300      	movs	r3, #0
 8006206:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006208:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	fa02 f303 	lsl.w	r3, r2, r3
 8006212:	43da      	mvns	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	401a      	ands	r2, r3
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800621c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	fa01 f303 	lsl.w	r3, r1, r3
 8006226:	43d9      	mvns	r1, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800622c:	4313      	orrs	r3, r2
}
 800622e:	4618      	mov	r0, r3
 8006230:	3724      	adds	r7, #36	; 0x24
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b082      	sub	sp, #8
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7ff ff28 	bl	8006098 <__NVIC_SetPriorityGrouping>
}
 8006248:	bf00      	nop
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	4603      	mov	r3, r0
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800625e:	2300      	movs	r3, #0
 8006260:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006262:	f7ff ff3d 	bl	80060e0 <__NVIC_GetPriorityGrouping>
 8006266:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	68b9      	ldr	r1, [r7, #8]
 800626c:	6978      	ldr	r0, [r7, #20]
 800626e:	f7ff ffb1 	bl	80061d4 <NVIC_EncodePriority>
 8006272:	4602      	mov	r2, r0
 8006274:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006278:	4611      	mov	r1, r2
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff ff80 	bl	8006180 <__NVIC_SetPriority>
}
 8006280:	bf00      	nop
 8006282:	3718      	adds	r7, #24
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	4603      	mov	r3, r0
 8006290:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006296:	4618      	mov	r0, r3
 8006298:	f7ff ff30 	bl	80060fc <__NVIC_EnableIRQ>
}
 800629c:	bf00      	nop
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	4603      	mov	r3, r0
 80062ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80062ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7ff ff40 	bl	8006138 <__NVIC_DisableIRQ>
}
 80062b8:	bf00      	nop
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e054      	b.n	800637c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	7f5b      	ldrb	r3, [r3, #29]
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d105      	bne.n	80062e8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fc fb60 	bl	80029a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	791b      	ldrb	r3, [r3, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10c      	bne.n	8006310 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a22      	ldr	r2, [pc, #136]	; (8006384 <HAL_CRC_Init+0xc4>)
 80062fc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 0218 	bic.w	r2, r2, #24
 800630c:	609a      	str	r2, [r3, #8]
 800630e:	e00c      	b.n	800632a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6899      	ldr	r1, [r3, #8]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	461a      	mov	r2, r3
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f834 	bl	8006388 <HAL_CRCEx_Polynomial_Set>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e028      	b.n	800637c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	795b      	ldrb	r3, [r3, #5]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d105      	bne.n	800633e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800633a:	611a      	str	r2, [r3, #16]
 800633c:	e004      	b.n	8006348 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6912      	ldr	r2, [r2, #16]
 8006346:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	695a      	ldr	r2, [r3, #20]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699a      	ldr	r2, [r3, #24]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	04c11db7 	.word	0x04c11db7

08006388 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006394:	2300      	movs	r3, #0
 8006396:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006398:	231f      	movs	r3, #31
 800639a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800639c:	bf00      	nop
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	1e5a      	subs	r2, r3, #1
 80063a2:	613a      	str	r2, [r7, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d009      	beq.n	80063bc <HAL_CRCEx_Polynomial_Set+0x34>
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f003 031f 	and.w	r3, r3, #31
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	fa22 f303 	lsr.w	r3, r2, r3
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d0f0      	beq.n	800639e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b18      	cmp	r3, #24
 80063c0:	d846      	bhi.n	8006450 <HAL_CRCEx_Polynomial_Set+0xc8>
 80063c2:	a201      	add	r2, pc, #4	; (adr r2, 80063c8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80063c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c8:	08006457 	.word	0x08006457
 80063cc:	08006451 	.word	0x08006451
 80063d0:	08006451 	.word	0x08006451
 80063d4:	08006451 	.word	0x08006451
 80063d8:	08006451 	.word	0x08006451
 80063dc:	08006451 	.word	0x08006451
 80063e0:	08006451 	.word	0x08006451
 80063e4:	08006451 	.word	0x08006451
 80063e8:	08006445 	.word	0x08006445
 80063ec:	08006451 	.word	0x08006451
 80063f0:	08006451 	.word	0x08006451
 80063f4:	08006451 	.word	0x08006451
 80063f8:	08006451 	.word	0x08006451
 80063fc:	08006451 	.word	0x08006451
 8006400:	08006451 	.word	0x08006451
 8006404:	08006451 	.word	0x08006451
 8006408:	08006439 	.word	0x08006439
 800640c:	08006451 	.word	0x08006451
 8006410:	08006451 	.word	0x08006451
 8006414:	08006451 	.word	0x08006451
 8006418:	08006451 	.word	0x08006451
 800641c:	08006451 	.word	0x08006451
 8006420:	08006451 	.word	0x08006451
 8006424:	08006451 	.word	0x08006451
 8006428:	0800642d 	.word	0x0800642d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	2b06      	cmp	r3, #6
 8006430:	d913      	bls.n	800645a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006436:	e010      	b.n	800645a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	2b07      	cmp	r3, #7
 800643c:	d90f      	bls.n	800645e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006442:	e00c      	b.n	800645e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	2b0f      	cmp	r3, #15
 8006448:	d90b      	bls.n	8006462 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800644e:	e008      	b.n	8006462 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	75fb      	strb	r3, [r7, #23]
      break;
 8006454:	e006      	b.n	8006464 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006456:	bf00      	nop
 8006458:	e004      	b.n	8006464 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800645a:	bf00      	nop
 800645c:	e002      	b.n	8006464 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800645e:	bf00      	nop
 8006460:	e000      	b.n	8006464 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006462:	bf00      	nop
  }
  if (status == HAL_OK)
 8006464:	7dfb      	ldrb	r3, [r7, #23]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10d      	bne.n	8006486 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f023 0118 	bic.w	r1, r3, #24
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	430a      	orrs	r2, r1
 8006484:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006486:	7dfb      	ldrb	r3, [r7, #23]
}
 8006488:	4618      	mov	r0, r3
 800648a:	371c      	adds	r7, #28
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e069      	b.n	800657a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d102      	bne.n	80064b8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fc fa98 	bl	80029e8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6819      	ldr	r1, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	4b2a      	ldr	r3, [pc, #168]	; (8006584 <HAL_DCMI_Init+0xf0>)
 80064da:	400b      	ands	r3, r1
 80064dc:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6819      	ldr	r1, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80064f2:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80064fe:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800650a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006510:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006516:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006522:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	2b10      	cmp	r3, #16
 8006532:	d112      	bne.n	800655a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	7f1b      	ldrb	r3, [r3, #28]
 8006538:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	7f5b      	ldrb	r3, [r3, #29]
 800653e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006540:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	7f9b      	ldrb	r3, [r3, #30]
 8006546:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006548:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	7fdb      	ldrb	r3, [r3, #31]
 8006550:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006556:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006558:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68da      	ldr	r2, [r3, #12]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f042 021e 	orr.w	r2, r2, #30
 8006568:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	ffe0f007 	.word	0xffe0f007

08006588 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f003 0304 	and.w	r3, r3, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d016      	beq.n	80065d0 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2204      	movs	r2, #4
 80065a8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ae:	f043 0202 	orr.w	r2, r3, #2
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2204      	movs	r2, #4
 80065ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065c2:	4a35      	ldr	r2, [pc, #212]	; (8006698 <HAL_DCMI_IRQHandler+0x110>)
 80065c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 fa2a 	bl	8006a24 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d01e      	beq.n	8006618 <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2202      	movs	r2, #2
 80065e0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e6:	f043 0201 	orr.w	r2, r3, #1
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2204      	movs	r2, #4
 80065f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065fa:	4a27      	ldr	r2, [pc, #156]	; (8006698 <HAL_DCMI_IRQHandler+0x110>)
 80065fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fa0e 	bl	8006a24 <HAL_DMA_Abort_IT>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d004      	beq.n	8006618 <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006612:	4618      	mov	r0, r3
 8006614:	f000 f86a 	bl	80066ec <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f003 0310 	and.w	r3, r3, #16
 800661e:	2b00      	cmp	r3, #0
 8006620:	d006      	beq.n	8006630 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2210      	movs	r2, #16
 8006628:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f840 	bl	80066b0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f003 0308 	and.w	r3, r3, #8
 8006636:	2b00      	cmp	r3, #0
 8006638:	d006      	beq.n	8006648 <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2208      	movs	r2, #8
 8006640:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f83e 	bl	80066c4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	d01d      	beq.n	800668e <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b02      	cmp	r3, #2
 800665e:	d107      	bne.n	8006670 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68da      	ldr	r2, [r3, #12]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 021e 	bic.w	r2, r2, #30
 800666e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68da      	ldr	r2, [r3, #12]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 0201 	bic.w	r2, r2, #1
 800667e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2201      	movs	r2, #1
 8006686:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f825 	bl	80066d8 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800668e:	bf00      	nop
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	080066ed 	.word	0x080066ed

0800669c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f8:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006700:	2b02      	cmp	r3, #2
 8006702:	d009      	beq.n	8006718 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006710:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f7ff ffbf 	bl	800669c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 800671e:	bf00      	nop
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
	...

08006728 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006734:	f7ff f9ec 	bl	8005b10 <HAL_GetTick>
 8006738:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e099      	b.n	8006878 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0201 	bic.w	r2, r2, #1
 8006762:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006764:	e00f      	b.n	8006786 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006766:	f7ff f9d3 	bl	8005b10 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2b05      	cmp	r3, #5
 8006772:	d908      	bls.n	8006786 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2220      	movs	r2, #32
 8006778:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2203      	movs	r2, #3
 800677e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e078      	b.n	8006878 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1e8      	bne.n	8006766 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	4b38      	ldr	r3, [pc, #224]	; (8006880 <HAL_DMA_Init+0x158>)
 80067a0:	4013      	ands	r3, r2
 80067a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a1b      	ldr	r3, [r3, #32]
 80067d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	2b04      	cmp	r3, #4
 80067de:	d107      	bne.n	80067f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e8:	4313      	orrs	r3, r2
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f023 0307 	bic.w	r3, r3, #7
 8006806:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	4313      	orrs	r3, r2
 8006810:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006816:	2b04      	cmp	r3, #4
 8006818:	d117      	bne.n	800684a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	4313      	orrs	r3, r2
 8006822:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00e      	beq.n	800684a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fb15 	bl	8006e5c <DMA_CheckFifoParam>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d008      	beq.n	800684a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2240      	movs	r2, #64	; 0x40
 800683c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006846:	2301      	movs	r3, #1
 8006848:	e016      	b.n	8006878 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 facc 	bl	8006df0 <DMA_CalcBaseAndBitshift>
 8006858:	4603      	mov	r3, r0
 800685a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006860:	223f      	movs	r2, #63	; 0x3f
 8006862:	409a      	lsls	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3718      	adds	r7, #24
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	f010803f 	.word	0xf010803f

08006884 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800689a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d101      	bne.n	80068aa <HAL_DMA_Start_IT+0x26>
 80068a6:	2302      	movs	r3, #2
 80068a8:	e048      	b.n	800693c <HAL_DMA_Start_IT+0xb8>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d137      	bne.n	800692e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2202      	movs	r2, #2
 80068c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	68b9      	ldr	r1, [r7, #8]
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 fa5e 	bl	8006d94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068dc:	223f      	movs	r2, #63	; 0x3f
 80068de:	409a      	lsls	r2, r3
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f042 0216 	orr.w	r2, r2, #22
 80068f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	695a      	ldr	r2, [r3, #20]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006902:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006908:	2b00      	cmp	r3, #0
 800690a:	d007      	beq.n	800691c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f042 0208 	orr.w	r2, r2, #8
 800691a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f042 0201 	orr.w	r2, r2, #1
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	e005      	b.n	800693a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006936:	2302      	movs	r3, #2
 8006938:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800693a:	7dfb      	ldrb	r3, [r7, #23]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3718      	adds	r7, #24
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006950:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006952:	f7ff f8dd 	bl	8005b10 <HAL_GetTick>
 8006956:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d008      	beq.n	8006976 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2280      	movs	r2, #128	; 0x80
 8006968:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e052      	b.n	8006a1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0216 	bic.w	r2, r2, #22
 8006984:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	695a      	ldr	r2, [r3, #20]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006994:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	d103      	bne.n	80069a6 <HAL_DMA_Abort+0x62>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d007      	beq.n	80069b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0208 	bic.w	r2, r2, #8
 80069b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 0201 	bic.w	r2, r2, #1
 80069c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80069c6:	e013      	b.n	80069f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80069c8:	f7ff f8a2 	bl	8005b10 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b05      	cmp	r3, #5
 80069d4:	d90c      	bls.n	80069f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2220      	movs	r2, #32
 80069da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2203      	movs	r2, #3
 80069e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e015      	b.n	8006a1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1e4      	bne.n	80069c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a02:	223f      	movs	r2, #63	; 0x3f
 8006a04:	409a      	lsls	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d004      	beq.n	8006a42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2280      	movs	r2, #128	; 0x80
 8006a3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e00c      	b.n	8006a5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2205      	movs	r2, #5
 8006a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 0201 	bic.w	r2, r2, #1
 8006a58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006a70:	2300      	movs	r3, #0
 8006a72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006a74:	4b8e      	ldr	r3, [pc, #568]	; (8006cb0 <HAL_DMA_IRQHandler+0x248>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a8e      	ldr	r2, [pc, #568]	; (8006cb4 <HAL_DMA_IRQHandler+0x24c>)
 8006a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7e:	0a9b      	lsrs	r3, r3, #10
 8006a80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a92:	2208      	movs	r2, #8
 8006a94:	409a      	lsls	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	4013      	ands	r3, r2
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d01a      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0304 	and.w	r3, r3, #4
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d013      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0204 	bic.w	r2, r2, #4
 8006aba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ac0:	2208      	movs	r2, #8
 8006ac2:	409a      	lsls	r2, r3
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006acc:	f043 0201 	orr.w	r2, r3, #1
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad8:	2201      	movs	r2, #1
 8006ada:	409a      	lsls	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4013      	ands	r3, r2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d012      	beq.n	8006b0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00b      	beq.n	8006b0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af6:	2201      	movs	r2, #1
 8006af8:	409a      	lsls	r2, r3
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b02:	f043 0202 	orr.w	r2, r3, #2
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b0e:	2204      	movs	r2, #4
 8006b10:	409a      	lsls	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4013      	ands	r3, r2
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d012      	beq.n	8006b40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00b      	beq.n	8006b40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b2c:	2204      	movs	r2, #4
 8006b2e:	409a      	lsls	r2, r3
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b38:	f043 0204 	orr.w	r2, r3, #4
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b44:	2210      	movs	r2, #16
 8006b46:	409a      	lsls	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d043      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0308 	and.w	r3, r3, #8
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d03c      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b62:	2210      	movs	r2, #16
 8006b64:	409a      	lsls	r2, r3
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d018      	beq.n	8006baa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d108      	bne.n	8006b98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d024      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	4798      	blx	r3
 8006b96:	e01f      	b.n	8006bd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01b      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	4798      	blx	r3
 8006ba8:	e016      	b.n	8006bd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d107      	bne.n	8006bc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 0208 	bic.w	r2, r2, #8
 8006bc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d003      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bdc:	2220      	movs	r2, #32
 8006bde:	409a      	lsls	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4013      	ands	r3, r2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 808f 	beq.w	8006d08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0310 	and.w	r3, r3, #16
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f000 8087 	beq.w	8006d08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bfe:	2220      	movs	r2, #32
 8006c00:	409a      	lsls	r2, r3
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b05      	cmp	r3, #5
 8006c10:	d136      	bne.n	8006c80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 0216 	bic.w	r2, r2, #22
 8006c20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	695a      	ldr	r2, [r3, #20]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d103      	bne.n	8006c42 <HAL_DMA_IRQHandler+0x1da>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d007      	beq.n	8006c52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0208 	bic.w	r2, r2, #8
 8006c50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c56:	223f      	movs	r2, #63	; 0x3f
 8006c58:	409a      	lsls	r2, r3
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d07e      	beq.n	8006d74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	4798      	blx	r3
        }
        return;
 8006c7e:	e079      	b.n	8006d74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d01d      	beq.n	8006cca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10d      	bne.n	8006cb8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d031      	beq.n	8006d08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	4798      	blx	r3
 8006cac:	e02c      	b.n	8006d08 <HAL_DMA_IRQHandler+0x2a0>
 8006cae:	bf00      	nop
 8006cb0:	20000010 	.word	0x20000010
 8006cb4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d023      	beq.n	8006d08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	4798      	blx	r3
 8006cc8:	e01e      	b.n	8006d08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10f      	bne.n	8006cf8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f022 0210 	bic.w	r2, r2, #16
 8006ce6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d003      	beq.n	8006d08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d032      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d022      	beq.n	8006d62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2205      	movs	r2, #5
 8006d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 0201 	bic.w	r2, r2, #1
 8006d32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	3301      	adds	r3, #1
 8006d38:	60bb      	str	r3, [r7, #8]
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d307      	bcc.n	8006d50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1f2      	bne.n	8006d34 <HAL_DMA_IRQHandler+0x2cc>
 8006d4e:	e000      	b.n	8006d52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006d50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d005      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	4798      	blx	r3
 8006d72:	e000      	b.n	8006d76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006d74:	bf00      	nop
    }
  }
}
 8006d76:	3718      	adds	r7, #24
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
 8006da0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006db0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	2b40      	cmp	r3, #64	; 0x40
 8006dc0:	d108      	bne.n	8006dd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006dd2:	e007      	b.n	8006de4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	60da      	str	r2, [r3, #12]
}
 8006de4:	bf00      	nop
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	3b10      	subs	r3, #16
 8006e00:	4a13      	ldr	r2, [pc, #76]	; (8006e50 <DMA_CalcBaseAndBitshift+0x60>)
 8006e02:	fba2 2303 	umull	r2, r3, r2, r3
 8006e06:	091b      	lsrs	r3, r3, #4
 8006e08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006e0a:	4a12      	ldr	r2, [pc, #72]	; (8006e54 <DMA_CalcBaseAndBitshift+0x64>)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4413      	add	r3, r2
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d908      	bls.n	8006e30 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	461a      	mov	r2, r3
 8006e24:	4b0c      	ldr	r3, [pc, #48]	; (8006e58 <DMA_CalcBaseAndBitshift+0x68>)
 8006e26:	4013      	ands	r3, r2
 8006e28:	1d1a      	adds	r2, r3, #4
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	659a      	str	r2, [r3, #88]	; 0x58
 8006e2e:	e006      	b.n	8006e3e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	461a      	mov	r2, r3
 8006e36:	4b08      	ldr	r3, [pc, #32]	; (8006e58 <DMA_CalcBaseAndBitshift+0x68>)
 8006e38:	4013      	ands	r3, r2
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	aaaaaaab 	.word	0xaaaaaaab
 8006e54:	08020b4c 	.word	0x08020b4c
 8006e58:	fffffc00 	.word	0xfffffc00

08006e5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d11f      	bne.n	8006eb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2b03      	cmp	r3, #3
 8006e7a:	d856      	bhi.n	8006f2a <DMA_CheckFifoParam+0xce>
 8006e7c:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <DMA_CheckFifoParam+0x28>)
 8006e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e82:	bf00      	nop
 8006e84:	08006e95 	.word	0x08006e95
 8006e88:	08006ea7 	.word	0x08006ea7
 8006e8c:	08006e95 	.word	0x08006e95
 8006e90:	08006f2b 	.word	0x08006f2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d046      	beq.n	8006f2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ea4:	e043      	b.n	8006f2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eaa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006eae:	d140      	bne.n	8006f32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006eb4:	e03d      	b.n	8006f32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ebe:	d121      	bne.n	8006f04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d837      	bhi.n	8006f36 <DMA_CheckFifoParam+0xda>
 8006ec6:	a201      	add	r2, pc, #4	; (adr r2, 8006ecc <DMA_CheckFifoParam+0x70>)
 8006ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ecc:	08006edd 	.word	0x08006edd
 8006ed0:	08006ee3 	.word	0x08006ee3
 8006ed4:	08006edd 	.word	0x08006edd
 8006ed8:	08006ef5 	.word	0x08006ef5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	73fb      	strb	r3, [r7, #15]
      break;
 8006ee0:	e030      	b.n	8006f44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d025      	beq.n	8006f3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ef2:	e022      	b.n	8006f3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006efc:	d11f      	bne.n	8006f3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006f02:	e01c      	b.n	8006f3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d903      	bls.n	8006f12 <DMA_CheckFifoParam+0xb6>
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2b03      	cmp	r3, #3
 8006f0e:	d003      	beq.n	8006f18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006f10:	e018      	b.n	8006f44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	73fb      	strb	r3, [r7, #15]
      break;
 8006f16:	e015      	b.n	8006f44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00e      	beq.n	8006f42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	73fb      	strb	r3, [r7, #15]
      break;
 8006f28:	e00b      	b.n	8006f42 <DMA_CheckFifoParam+0xe6>
      break;
 8006f2a:	bf00      	nop
 8006f2c:	e00a      	b.n	8006f44 <DMA_CheckFifoParam+0xe8>
      break;
 8006f2e:	bf00      	nop
 8006f30:	e008      	b.n	8006f44 <DMA_CheckFifoParam+0xe8>
      break;
 8006f32:	bf00      	nop
 8006f34:	e006      	b.n	8006f44 <DMA_CheckFifoParam+0xe8>
      break;
 8006f36:	bf00      	nop
 8006f38:	e004      	b.n	8006f44 <DMA_CheckFifoParam+0xe8>
      break;
 8006f3a:	bf00      	nop
 8006f3c:	e002      	b.n	8006f44 <DMA_CheckFifoParam+0xe8>
      break;   
 8006f3e:	bf00      	nop
 8006f40:	e000      	b.n	8006f44 <DMA_CheckFifoParam+0xe8>
      break;
 8006f42:	bf00      	nop
    }
  } 
  
  return status; 
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop

08006f54 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e039      	b.n	8006fda <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d106      	bne.n	8006f80 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7fb fe2e 	bl	8002bdc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2202      	movs	r2, #2
 8006f84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa4:	f023 0107 	bic.w	r1, r3, #7
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fba:	4b0a      	ldr	r3, [pc, #40]	; (8006fe4 <HAL_DMA2D_Init+0x90>)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	68d1      	ldr	r1, [r2, #12]
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	6812      	ldr	r2, [r2, #0]
 8006fc6:	430b      	orrs	r3, r1
 8006fc8:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	ffffc000 	.word	0xffffc000

08006fe8 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af02      	add	r7, sp, #8
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d101      	bne.n	8007004 <HAL_DMA2D_Start+0x1c>
 8007000:	2302      	movs	r3, #2
 8007002:	e018      	b.n	8007036 <HAL_DMA2D_Start+0x4e>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2202      	movs	r2, #2
 8007010:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	68b9      	ldr	r1, [r7, #8]
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f000 fa98 	bl	8007554 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f042 0201 	orr.w	r2, r2, #1
 8007032:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b086      	sub	sp, #24
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007048:	2300      	movs	r3, #0
 800704a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d056      	beq.n	8007108 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800705a:	f7fe fd59 	bl	8005b10 <HAL_GetTick>
 800705e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007060:	e04b      	b.n	80070fa <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007070:	2b00      	cmp	r3, #0
 8007072:	d023      	beq.n	80070bc <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b00      	cmp	r3, #0
 800707c:	d005      	beq.n	800708a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007082:	f043 0202 	orr.w	r2, r3, #2
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f003 0301 	and.w	r3, r3, #1
 8007090:	2b00      	cmp	r3, #0
 8007092:	d005      	beq.n	80070a0 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007098:	f043 0201 	orr.w	r2, r3, #1
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2221      	movs	r2, #33	; 0x21
 80070a6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2204      	movs	r2, #4
 80070ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e0a5      	b.n	8007208 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070c2:	d01a      	beq.n	80070fa <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80070c4:	f7fe fd24 	bl	8005b10 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d302      	bcc.n	80070da <HAL_DMA2D_PollForTransfer+0x9c>
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10f      	bne.n	80070fa <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070de:	f043 0220 	orr.w	r2, r3, #32
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2203      	movs	r2, #3
 80070ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e086      	b.n	8007208 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f003 0302 	and.w	r3, r3, #2
 8007104:	2b00      	cmp	r3, #0
 8007106:	d0ac      	beq.n	8007062 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	f003 0320 	and.w	r3, r3, #32
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	4313      	orrs	r3, r2
 8007122:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d061      	beq.n	80071ee <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800712a:	f7fe fcf1 	bl	8005b10 <HAL_GetTick>
 800712e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007130:	e056      	b.n	80071e0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8007140:	2b00      	cmp	r3, #0
 8007142:	d02e      	beq.n	80071a2 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f003 0308 	and.w	r3, r3, #8
 800714a:	2b00      	cmp	r3, #0
 800714c:	d005      	beq.n	800715a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007152:	f043 0204 	orr.w	r2, r3, #4
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f003 0320 	and.w	r3, r3, #32
 8007160:	2b00      	cmp	r3, #0
 8007162:	d005      	beq.n	8007170 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007168:	f043 0202 	orr.w	r2, r3, #2
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d005      	beq.n	8007186 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800717e:	f043 0201 	orr.w	r2, r3, #1
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2229      	movs	r2, #41	; 0x29
 800718c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2204      	movs	r2, #4
 8007192:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e032      	b.n	8007208 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071a8:	d01a      	beq.n	80071e0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80071aa:	f7fe fcb1 	bl	8005b10 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d302      	bcc.n	80071c0 <HAL_DMA2D_PollForTransfer+0x182>
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10f      	bne.n	80071e0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c4:	f043 0220 	orr.w	r2, r3, #32
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2203      	movs	r2, #3
 80071d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e013      	b.n	8007208 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f003 0310 	and.w	r3, r3, #16
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d0a1      	beq.n	8007132 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2212      	movs	r2, #18
 80071f4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3718      	adds	r7, #24
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d026      	beq.n	8007280 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007238:	2b00      	cmp	r3, #0
 800723a:	d021      	beq.n	8007280 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800724a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007250:	f043 0201 	orr.w	r2, r3, #1
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2201      	movs	r2, #1
 800725e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2204      	movs	r2, #4
 8007264:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	695b      	ldr	r3, [r3, #20]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f003 0320 	and.w	r3, r3, #32
 8007286:	2b00      	cmp	r3, #0
 8007288:	d026      	beq.n	80072d8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d021      	beq.n	80072d8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072a2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2220      	movs	r2, #32
 80072aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b0:	f043 0202 	orr.w	r2, r3, #2
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2204      	movs	r2, #4
 80072bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d003      	beq.n	80072d8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f003 0308 	and.w	r3, r3, #8
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d026      	beq.n	8007330 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d021      	beq.n	8007330 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072fa:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2208      	movs	r2, #8
 8007302:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007308:	f043 0204 	orr.w	r2, r3, #4
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2204      	movs	r2, #4
 8007314:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	695b      	ldr	r3, [r3, #20]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d003      	beq.n	8007330 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f003 0304 	and.w	r3, r3, #4
 8007336:	2b00      	cmp	r3, #0
 8007338:	d013      	beq.n	8007362 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00e      	beq.n	8007362 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007352:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2204      	movs	r2, #4
 800735a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f853 	bl	8007408 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f003 0302 	and.w	r3, r3, #2
 8007368:	2b00      	cmp	r3, #0
 800736a:	d024      	beq.n	80073b6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007372:	2b00      	cmp	r3, #0
 8007374:	d01f      	beq.n	80073b6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007384:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2202      	movs	r2, #2
 800738c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2201      	movs	r2, #1
 800739a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d003      	beq.n	80073b6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f003 0310 	and.w	r3, r3, #16
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d01f      	beq.n	8007400 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d01a      	beq.n	8007400 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073d8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2210      	movs	r2, #16
 80073e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f80e 	bl	800741c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007400:	bf00      	nop
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007430:	b480      	push	{r7}
 8007432:	b087      	sub	sp, #28
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007448:	2b01      	cmp	r3, #1
 800744a:	d101      	bne.n	8007450 <HAL_DMA2D_ConfigLayer+0x20>
 800744c:	2302      	movs	r3, #2
 800744e:	e079      	b.n	8007544 <HAL_DMA2D_ConfigLayer+0x114>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2202      	movs	r2, #2
 800745c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	011b      	lsls	r3, r3, #4
 8007464:	3318      	adds	r3, #24
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	4413      	add	r3, r2
 800746a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	041b      	lsls	r3, r3, #16
 8007476:	4313      	orrs	r3, r2
 8007478:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800747a:	4b35      	ldr	r3, [pc, #212]	; (8007550 <HAL_DMA2D_ConfigLayer+0x120>)
 800747c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	2b0a      	cmp	r3, #10
 8007484:	d003      	beq.n	800748e <HAL_DMA2D_ConfigLayer+0x5e>
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2b09      	cmp	r3, #9
 800748c:	d107      	bne.n	800749e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	4313      	orrs	r3, r2
 800749a:	617b      	str	r3, [r7, #20]
 800749c:	e005      	b.n	80074aa <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	061b      	lsls	r3, r3, #24
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d120      	bne.n	80074f2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	43db      	mvns	r3, r3
 80074ba:	ea02 0103 	and.w	r1, r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	430a      	orrs	r2, r1
 80074c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	6812      	ldr	r2, [r2, #0]
 80074d0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	2b0a      	cmp	r3, #10
 80074d8:	d003      	beq.n	80074e2 <HAL_DMA2D_ConfigLayer+0xb2>
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	2b09      	cmp	r3, #9
 80074e0:	d127      	bne.n	8007532 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	68da      	ldr	r2, [r3, #12]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80074ee:	629a      	str	r2, [r3, #40]	; 0x28
 80074f0:	e01f      	b.n	8007532 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	69da      	ldr	r2, [r3, #28]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	43db      	mvns	r3, r3
 80074fc:	ea02 0103 	and.w	r1, r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	430a      	orrs	r2, r1
 8007508:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	6812      	ldr	r2, [r2, #0]
 8007512:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	2b0a      	cmp	r3, #10
 800751a:	d003      	beq.n	8007524 <HAL_DMA2D_ConfigLayer+0xf4>
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	2b09      	cmp	r3, #9
 8007522:	d106      	bne.n	8007532 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	68da      	ldr	r2, [r3, #12]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007530:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	371c      	adds	r7, #28
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	ff03000f 	.word	0xff03000f

08007554 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007554:	b480      	push	{r7}
 8007556:	b08b      	sub	sp, #44	; 0x2c
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
 8007560:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007568:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	041a      	lsls	r2, r3, #16
 8007570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007572:	431a      	orrs	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	430a      	orrs	r2, r1
 800757a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800758c:	d174      	bne.n	8007678 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007594:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800759c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80075a4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d108      	bne.n	80075c6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	431a      	orrs	r2, r3
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	4313      	orrs	r3, r2
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	627b      	str	r3, [r7, #36]	; 0x24
 80075c4:	e053      	b.n	800766e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d106      	bne.n	80075dc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80075ce:	69ba      	ldr	r2, [r7, #24]
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24
 80075da:	e048      	b.n	800766e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d111      	bne.n	8007608 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	0cdb      	lsrs	r3, r3, #19
 80075e8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	0a9b      	lsrs	r3, r3, #10
 80075ee:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	08db      	lsrs	r3, r3, #3
 80075f4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	02db      	lsls	r3, r3, #11
 80075fe:	4313      	orrs	r3, r2
 8007600:	697a      	ldr	r2, [r7, #20]
 8007602:	4313      	orrs	r3, r2
 8007604:	627b      	str	r3, [r7, #36]	; 0x24
 8007606:	e032      	b.n	800766e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	2b03      	cmp	r3, #3
 800760e:	d117      	bne.n	8007640 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	0fdb      	lsrs	r3, r3, #31
 8007614:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	0cdb      	lsrs	r3, r3, #19
 800761a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	0adb      	lsrs	r3, r3, #11
 8007620:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	08db      	lsrs	r3, r3, #3
 8007626:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	015a      	lsls	r2, r3, #5
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	029b      	lsls	r3, r3, #10
 8007630:	431a      	orrs	r2, r3
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	03db      	lsls	r3, r3, #15
 8007636:	4313      	orrs	r3, r2
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	4313      	orrs	r3, r2
 800763c:	627b      	str	r3, [r7, #36]	; 0x24
 800763e:	e016      	b.n	800766e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	0f1b      	lsrs	r3, r3, #28
 8007644:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	0d1b      	lsrs	r3, r3, #20
 800764a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	0b1b      	lsrs	r3, r3, #12
 8007650:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	091b      	lsrs	r3, r3, #4
 8007656:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	011a      	lsls	r2, r3, #4
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	021b      	lsls	r3, r3, #8
 8007660:	431a      	orrs	r2, r3
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	031b      	lsls	r3, r3, #12
 8007666:	4313      	orrs	r3, r2
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	4313      	orrs	r3, r2
 800766c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007674:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007676:	e003      	b.n	8007680 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	60da      	str	r2, [r3, #12]
}
 8007680:	bf00      	nop
 8007682:	372c      	adds	r7, #44	; 0x2c
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800768c:	b480      	push	{r7}
 800768e:	b089      	sub	sp, #36	; 0x24
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007696:	2300      	movs	r3, #0
 8007698:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800769a:	2300      	movs	r3, #0
 800769c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800769e:	2300      	movs	r3, #0
 80076a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80076a2:	2300      	movs	r3, #0
 80076a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80076a6:	2300      	movs	r3, #0
 80076a8:	61fb      	str	r3, [r7, #28]
 80076aa:	e175      	b.n	8007998 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80076ac:	2201      	movs	r2, #1
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	fa02 f303 	lsl.w	r3, r2, r3
 80076b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	4013      	ands	r3, r2
 80076be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	f040 8164 	bne.w	8007992 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f003 0303 	and.w	r3, r3, #3
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d005      	beq.n	80076e2 <HAL_GPIO_Init+0x56>
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d130      	bne.n	8007744 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	005b      	lsls	r3, r3, #1
 80076ec:	2203      	movs	r2, #3
 80076ee:	fa02 f303 	lsl.w	r3, r2, r3
 80076f2:	43db      	mvns	r3, r3
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	4013      	ands	r3, r2
 80076f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	68da      	ldr	r2, [r3, #12]
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	005b      	lsls	r3, r3, #1
 8007702:	fa02 f303 	lsl.w	r3, r2, r3
 8007706:	69ba      	ldr	r2, [r7, #24]
 8007708:	4313      	orrs	r3, r2
 800770a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	69ba      	ldr	r2, [r7, #24]
 8007710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007718:	2201      	movs	r2, #1
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	fa02 f303 	lsl.w	r3, r2, r3
 8007720:	43db      	mvns	r3, r3
 8007722:	69ba      	ldr	r2, [r7, #24]
 8007724:	4013      	ands	r3, r2
 8007726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	091b      	lsrs	r3, r3, #4
 800772e:	f003 0201 	and.w	r2, r3, #1
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	fa02 f303 	lsl.w	r3, r2, r3
 8007738:	69ba      	ldr	r2, [r7, #24]
 800773a:	4313      	orrs	r3, r2
 800773c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f003 0303 	and.w	r3, r3, #3
 800774c:	2b03      	cmp	r3, #3
 800774e:	d017      	beq.n	8007780 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	005b      	lsls	r3, r3, #1
 800775a:	2203      	movs	r2, #3
 800775c:	fa02 f303 	lsl.w	r3, r2, r3
 8007760:	43db      	mvns	r3, r3
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	4013      	ands	r3, r2
 8007766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	689a      	ldr	r2, [r3, #8]
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	005b      	lsls	r3, r3, #1
 8007770:	fa02 f303 	lsl.w	r3, r2, r3
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	4313      	orrs	r3, r2
 8007778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	69ba      	ldr	r2, [r7, #24]
 800777e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f003 0303 	and.w	r3, r3, #3
 8007788:	2b02      	cmp	r3, #2
 800778a:	d123      	bne.n	80077d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	08da      	lsrs	r2, r3, #3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	3208      	adds	r2, #8
 8007794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	f003 0307 	and.w	r3, r3, #7
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	220f      	movs	r2, #15
 80077a4:	fa02 f303 	lsl.w	r3, r2, r3
 80077a8:	43db      	mvns	r3, r3
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	4013      	ands	r3, r2
 80077ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	691a      	ldr	r2, [r3, #16]
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	f003 0307 	and.w	r3, r3, #7
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	fa02 f303 	lsl.w	r3, r2, r3
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	08da      	lsrs	r2, r3, #3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	3208      	adds	r2, #8
 80077ce:	69b9      	ldr	r1, [r7, #24]
 80077d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	005b      	lsls	r3, r3, #1
 80077de:	2203      	movs	r2, #3
 80077e0:	fa02 f303 	lsl.w	r3, r2, r3
 80077e4:	43db      	mvns	r3, r3
 80077e6:	69ba      	ldr	r2, [r7, #24]
 80077e8:	4013      	ands	r3, r2
 80077ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f003 0203 	and.w	r2, r3, #3
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	005b      	lsls	r3, r3, #1
 80077f8:	fa02 f303 	lsl.w	r3, r2, r3
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	4313      	orrs	r3, r2
 8007800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 80be 	beq.w	8007992 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007816:	4b66      	ldr	r3, [pc, #408]	; (80079b0 <HAL_GPIO_Init+0x324>)
 8007818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800781a:	4a65      	ldr	r2, [pc, #404]	; (80079b0 <HAL_GPIO_Init+0x324>)
 800781c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007820:	6453      	str	r3, [r2, #68]	; 0x44
 8007822:	4b63      	ldr	r3, [pc, #396]	; (80079b0 <HAL_GPIO_Init+0x324>)
 8007824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800782e:	4a61      	ldr	r2, [pc, #388]	; (80079b4 <HAL_GPIO_Init+0x328>)
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	089b      	lsrs	r3, r3, #2
 8007834:	3302      	adds	r3, #2
 8007836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800783a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	f003 0303 	and.w	r3, r3, #3
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	220f      	movs	r2, #15
 8007846:	fa02 f303 	lsl.w	r3, r2, r3
 800784a:	43db      	mvns	r3, r3
 800784c:	69ba      	ldr	r2, [r7, #24]
 800784e:	4013      	ands	r3, r2
 8007850:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a58      	ldr	r2, [pc, #352]	; (80079b8 <HAL_GPIO_Init+0x32c>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d037      	beq.n	80078ca <HAL_GPIO_Init+0x23e>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a57      	ldr	r2, [pc, #348]	; (80079bc <HAL_GPIO_Init+0x330>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d031      	beq.n	80078c6 <HAL_GPIO_Init+0x23a>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a56      	ldr	r2, [pc, #344]	; (80079c0 <HAL_GPIO_Init+0x334>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d02b      	beq.n	80078c2 <HAL_GPIO_Init+0x236>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a55      	ldr	r2, [pc, #340]	; (80079c4 <HAL_GPIO_Init+0x338>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d025      	beq.n	80078be <HAL_GPIO_Init+0x232>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a54      	ldr	r2, [pc, #336]	; (80079c8 <HAL_GPIO_Init+0x33c>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d01f      	beq.n	80078ba <HAL_GPIO_Init+0x22e>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a53      	ldr	r2, [pc, #332]	; (80079cc <HAL_GPIO_Init+0x340>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d019      	beq.n	80078b6 <HAL_GPIO_Init+0x22a>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a52      	ldr	r2, [pc, #328]	; (80079d0 <HAL_GPIO_Init+0x344>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d013      	beq.n	80078b2 <HAL_GPIO_Init+0x226>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a51      	ldr	r2, [pc, #324]	; (80079d4 <HAL_GPIO_Init+0x348>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d00d      	beq.n	80078ae <HAL_GPIO_Init+0x222>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a50      	ldr	r2, [pc, #320]	; (80079d8 <HAL_GPIO_Init+0x34c>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d007      	beq.n	80078aa <HAL_GPIO_Init+0x21e>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a4f      	ldr	r2, [pc, #316]	; (80079dc <HAL_GPIO_Init+0x350>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d101      	bne.n	80078a6 <HAL_GPIO_Init+0x21a>
 80078a2:	2309      	movs	r3, #9
 80078a4:	e012      	b.n	80078cc <HAL_GPIO_Init+0x240>
 80078a6:	230a      	movs	r3, #10
 80078a8:	e010      	b.n	80078cc <HAL_GPIO_Init+0x240>
 80078aa:	2308      	movs	r3, #8
 80078ac:	e00e      	b.n	80078cc <HAL_GPIO_Init+0x240>
 80078ae:	2307      	movs	r3, #7
 80078b0:	e00c      	b.n	80078cc <HAL_GPIO_Init+0x240>
 80078b2:	2306      	movs	r3, #6
 80078b4:	e00a      	b.n	80078cc <HAL_GPIO_Init+0x240>
 80078b6:	2305      	movs	r3, #5
 80078b8:	e008      	b.n	80078cc <HAL_GPIO_Init+0x240>
 80078ba:	2304      	movs	r3, #4
 80078bc:	e006      	b.n	80078cc <HAL_GPIO_Init+0x240>
 80078be:	2303      	movs	r3, #3
 80078c0:	e004      	b.n	80078cc <HAL_GPIO_Init+0x240>
 80078c2:	2302      	movs	r3, #2
 80078c4:	e002      	b.n	80078cc <HAL_GPIO_Init+0x240>
 80078c6:	2301      	movs	r3, #1
 80078c8:	e000      	b.n	80078cc <HAL_GPIO_Init+0x240>
 80078ca:	2300      	movs	r3, #0
 80078cc:	69fa      	ldr	r2, [r7, #28]
 80078ce:	f002 0203 	and.w	r2, r2, #3
 80078d2:	0092      	lsls	r2, r2, #2
 80078d4:	4093      	lsls	r3, r2
 80078d6:	69ba      	ldr	r2, [r7, #24]
 80078d8:	4313      	orrs	r3, r2
 80078da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80078dc:	4935      	ldr	r1, [pc, #212]	; (80079b4 <HAL_GPIO_Init+0x328>)
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	089b      	lsrs	r3, r3, #2
 80078e2:	3302      	adds	r3, #2
 80078e4:	69ba      	ldr	r2, [r7, #24]
 80078e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80078ea:	4b3d      	ldr	r3, [pc, #244]	; (80079e0 <HAL_GPIO_Init+0x354>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	43db      	mvns	r3, r3
 80078f4:	69ba      	ldr	r2, [r7, #24]
 80078f6:	4013      	ands	r3, r2
 80078f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d003      	beq.n	800790e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007906:	69ba      	ldr	r2, [r7, #24]
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	4313      	orrs	r3, r2
 800790c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800790e:	4a34      	ldr	r2, [pc, #208]	; (80079e0 <HAL_GPIO_Init+0x354>)
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007914:	4b32      	ldr	r3, [pc, #200]	; (80079e0 <HAL_GPIO_Init+0x354>)
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	43db      	mvns	r3, r3
 800791e:	69ba      	ldr	r2, [r7, #24]
 8007920:	4013      	ands	r3, r2
 8007922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800792c:	2b00      	cmp	r3, #0
 800792e:	d003      	beq.n	8007938 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007930:	69ba      	ldr	r2, [r7, #24]
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	4313      	orrs	r3, r2
 8007936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007938:	4a29      	ldr	r2, [pc, #164]	; (80079e0 <HAL_GPIO_Init+0x354>)
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800793e:	4b28      	ldr	r3, [pc, #160]	; (80079e0 <HAL_GPIO_Init+0x354>)
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	43db      	mvns	r3, r3
 8007948:	69ba      	ldr	r2, [r7, #24]
 800794a:	4013      	ands	r3, r2
 800794c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d003      	beq.n	8007962 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800795a:	69ba      	ldr	r2, [r7, #24]
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	4313      	orrs	r3, r2
 8007960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007962:	4a1f      	ldr	r2, [pc, #124]	; (80079e0 <HAL_GPIO_Init+0x354>)
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007968:	4b1d      	ldr	r3, [pc, #116]	; (80079e0 <HAL_GPIO_Init+0x354>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	43db      	mvns	r3, r3
 8007972:	69ba      	ldr	r2, [r7, #24]
 8007974:	4013      	ands	r3, r2
 8007976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d003      	beq.n	800798c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	4313      	orrs	r3, r2
 800798a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800798c:	4a14      	ldr	r2, [pc, #80]	; (80079e0 <HAL_GPIO_Init+0x354>)
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	3301      	adds	r3, #1
 8007996:	61fb      	str	r3, [r7, #28]
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	2b0f      	cmp	r3, #15
 800799c:	f67f ae86 	bls.w	80076ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80079a0:	bf00      	nop
 80079a2:	bf00      	nop
 80079a4:	3724      	adds	r7, #36	; 0x24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	40023800 	.word	0x40023800
 80079b4:	40013800 	.word	0x40013800
 80079b8:	40020000 	.word	0x40020000
 80079bc:	40020400 	.word	0x40020400
 80079c0:	40020800 	.word	0x40020800
 80079c4:	40020c00 	.word	0x40020c00
 80079c8:	40021000 	.word	0x40021000
 80079cc:	40021400 	.word	0x40021400
 80079d0:	40021800 	.word	0x40021800
 80079d4:	40021c00 	.word	0x40021c00
 80079d8:	40022000 	.word	0x40022000
 80079dc:	40022400 	.word	0x40022400
 80079e0:	40013c00 	.word	0x40013c00

080079e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b087      	sub	sp, #28
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80079ee:	2300      	movs	r3, #0
 80079f0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80079f2:	2300      	movs	r3, #0
 80079f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80079f6:	2300      	movs	r3, #0
 80079f8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80079fa:	2300      	movs	r3, #0
 80079fc:	617b      	str	r3, [r7, #20]
 80079fe:	e0d9      	b.n	8007bb4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007a00:	2201      	movs	r2, #1
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	fa02 f303 	lsl.w	r3, r2, r3
 8007a08:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007a0a:	683a      	ldr	r2, [r7, #0]
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	4013      	ands	r3, r2
 8007a10:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	f040 80c9 	bne.w	8007bae <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007a1c:	4a6b      	ldr	r2, [pc, #428]	; (8007bcc <HAL_GPIO_DeInit+0x1e8>)
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	089b      	lsrs	r3, r3, #2
 8007a22:	3302      	adds	r3, #2
 8007a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a28:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f003 0303 	and.w	r3, r3, #3
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	220f      	movs	r2, #15
 8007a34:	fa02 f303 	lsl.w	r3, r2, r3
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a63      	ldr	r2, [pc, #396]	; (8007bd0 <HAL_GPIO_DeInit+0x1ec>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d037      	beq.n	8007ab6 <HAL_GPIO_DeInit+0xd2>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a62      	ldr	r2, [pc, #392]	; (8007bd4 <HAL_GPIO_DeInit+0x1f0>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d031      	beq.n	8007ab2 <HAL_GPIO_DeInit+0xce>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a61      	ldr	r2, [pc, #388]	; (8007bd8 <HAL_GPIO_DeInit+0x1f4>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d02b      	beq.n	8007aae <HAL_GPIO_DeInit+0xca>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a60      	ldr	r2, [pc, #384]	; (8007bdc <HAL_GPIO_DeInit+0x1f8>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d025      	beq.n	8007aaa <HAL_GPIO_DeInit+0xc6>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a5f      	ldr	r2, [pc, #380]	; (8007be0 <HAL_GPIO_DeInit+0x1fc>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d01f      	beq.n	8007aa6 <HAL_GPIO_DeInit+0xc2>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a5e      	ldr	r2, [pc, #376]	; (8007be4 <HAL_GPIO_DeInit+0x200>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d019      	beq.n	8007aa2 <HAL_GPIO_DeInit+0xbe>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a5d      	ldr	r2, [pc, #372]	; (8007be8 <HAL_GPIO_DeInit+0x204>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d013      	beq.n	8007a9e <HAL_GPIO_DeInit+0xba>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a5c      	ldr	r2, [pc, #368]	; (8007bec <HAL_GPIO_DeInit+0x208>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d00d      	beq.n	8007a9a <HAL_GPIO_DeInit+0xb6>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a5b      	ldr	r2, [pc, #364]	; (8007bf0 <HAL_GPIO_DeInit+0x20c>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d007      	beq.n	8007a96 <HAL_GPIO_DeInit+0xb2>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a5a      	ldr	r2, [pc, #360]	; (8007bf4 <HAL_GPIO_DeInit+0x210>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d101      	bne.n	8007a92 <HAL_GPIO_DeInit+0xae>
 8007a8e:	2309      	movs	r3, #9
 8007a90:	e012      	b.n	8007ab8 <HAL_GPIO_DeInit+0xd4>
 8007a92:	230a      	movs	r3, #10
 8007a94:	e010      	b.n	8007ab8 <HAL_GPIO_DeInit+0xd4>
 8007a96:	2308      	movs	r3, #8
 8007a98:	e00e      	b.n	8007ab8 <HAL_GPIO_DeInit+0xd4>
 8007a9a:	2307      	movs	r3, #7
 8007a9c:	e00c      	b.n	8007ab8 <HAL_GPIO_DeInit+0xd4>
 8007a9e:	2306      	movs	r3, #6
 8007aa0:	e00a      	b.n	8007ab8 <HAL_GPIO_DeInit+0xd4>
 8007aa2:	2305      	movs	r3, #5
 8007aa4:	e008      	b.n	8007ab8 <HAL_GPIO_DeInit+0xd4>
 8007aa6:	2304      	movs	r3, #4
 8007aa8:	e006      	b.n	8007ab8 <HAL_GPIO_DeInit+0xd4>
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e004      	b.n	8007ab8 <HAL_GPIO_DeInit+0xd4>
 8007aae:	2302      	movs	r3, #2
 8007ab0:	e002      	b.n	8007ab8 <HAL_GPIO_DeInit+0xd4>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e000      	b.n	8007ab8 <HAL_GPIO_DeInit+0xd4>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	f002 0203 	and.w	r2, r2, #3
 8007abe:	0092      	lsls	r2, r2, #2
 8007ac0:	4093      	lsls	r3, r2
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d132      	bne.n	8007b2e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007ac8:	4b4b      	ldr	r3, [pc, #300]	; (8007bf8 <HAL_GPIO_DeInit+0x214>)
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	43db      	mvns	r3, r3
 8007ad0:	4949      	ldr	r1, [pc, #292]	; (8007bf8 <HAL_GPIO_DeInit+0x214>)
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007ad6:	4b48      	ldr	r3, [pc, #288]	; (8007bf8 <HAL_GPIO_DeInit+0x214>)
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	43db      	mvns	r3, r3
 8007ade:	4946      	ldr	r1, [pc, #280]	; (8007bf8 <HAL_GPIO_DeInit+0x214>)
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007ae4:	4b44      	ldr	r3, [pc, #272]	; (8007bf8 <HAL_GPIO_DeInit+0x214>)
 8007ae6:	68da      	ldr	r2, [r3, #12]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	43db      	mvns	r3, r3
 8007aec:	4942      	ldr	r1, [pc, #264]	; (8007bf8 <HAL_GPIO_DeInit+0x214>)
 8007aee:	4013      	ands	r3, r2
 8007af0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007af2:	4b41      	ldr	r3, [pc, #260]	; (8007bf8 <HAL_GPIO_DeInit+0x214>)
 8007af4:	689a      	ldr	r2, [r3, #8]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	43db      	mvns	r3, r3
 8007afa:	493f      	ldr	r1, [pc, #252]	; (8007bf8 <HAL_GPIO_DeInit+0x214>)
 8007afc:	4013      	ands	r3, r2
 8007afe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	f003 0303 	and.w	r3, r3, #3
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	220f      	movs	r2, #15
 8007b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007b10:	4a2e      	ldr	r2, [pc, #184]	; (8007bcc <HAL_GPIO_DeInit+0x1e8>)
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	089b      	lsrs	r3, r3, #2
 8007b16:	3302      	adds	r3, #2
 8007b18:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	43da      	mvns	r2, r3
 8007b20:	482a      	ldr	r0, [pc, #168]	; (8007bcc <HAL_GPIO_DeInit+0x1e8>)
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	089b      	lsrs	r3, r3, #2
 8007b26:	400a      	ands	r2, r1
 8007b28:	3302      	adds	r3, #2
 8007b2a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	005b      	lsls	r3, r3, #1
 8007b36:	2103      	movs	r1, #3
 8007b38:	fa01 f303 	lsl.w	r3, r1, r3
 8007b3c:	43db      	mvns	r3, r3
 8007b3e:	401a      	ands	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	08da      	lsrs	r2, r3, #3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	3208      	adds	r2, #8
 8007b4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	220f      	movs	r2, #15
 8007b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5e:	43db      	mvns	r3, r3
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	08d2      	lsrs	r2, r2, #3
 8007b64:	4019      	ands	r1, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	3208      	adds	r2, #8
 8007b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	2103      	movs	r1, #3
 8007b78:	fa01 f303 	lsl.w	r3, r1, r3
 8007b7c:	43db      	mvns	r3, r3
 8007b7e:	401a      	ands	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	2101      	movs	r1, #1
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b90:	43db      	mvns	r3, r3
 8007b92:	401a      	ands	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689a      	ldr	r2, [r3, #8]
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	2103      	movs	r1, #3
 8007ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba6:	43db      	mvns	r3, r3
 8007ba8:	401a      	ands	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	2b0f      	cmp	r3, #15
 8007bb8:	f67f af22 	bls.w	8007a00 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007bbc:	bf00      	nop
 8007bbe:	bf00      	nop
 8007bc0:	371c      	adds	r7, #28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	40013800 	.word	0x40013800
 8007bd0:	40020000 	.word	0x40020000
 8007bd4:	40020400 	.word	0x40020400
 8007bd8:	40020800 	.word	0x40020800
 8007bdc:	40020c00 	.word	0x40020c00
 8007be0:	40021000 	.word	0x40021000
 8007be4:	40021400 	.word	0x40021400
 8007be8:	40021800 	.word	0x40021800
 8007bec:	40021c00 	.word	0x40021c00
 8007bf0:	40022000 	.word	0x40022000
 8007bf4:	40022400 	.word	0x40022400
 8007bf8:	40013c00 	.word	0x40013c00

08007bfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	460b      	mov	r3, r1
 8007c06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	691a      	ldr	r2, [r3, #16]
 8007c0c:	887b      	ldrh	r3, [r7, #2]
 8007c0e:	4013      	ands	r3, r2
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007c14:	2301      	movs	r3, #1
 8007c16:	73fb      	strb	r3, [r7, #15]
 8007c18:	e001      	b.n	8007c1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3714      	adds	r7, #20
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	460b      	mov	r3, r1
 8007c36:	807b      	strh	r3, [r7, #2]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007c3c:	787b      	ldrb	r3, [r7, #1]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c42:	887a      	ldrh	r2, [r7, #2]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007c48:	e003      	b.n	8007c52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007c4a:	887b      	ldrh	r3, [r7, #2]
 8007c4c:	041a      	lsls	r2, r3, #16
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	619a      	str	r2, [r3, #24]
}
 8007c52:	bf00      	nop
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b085      	sub	sp, #20
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
 8007c66:	460b      	mov	r3, r1
 8007c68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007c70:	887a      	ldrh	r2, [r7, #2]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	4013      	ands	r3, r2
 8007c76:	041a      	lsls	r2, r3, #16
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	43d9      	mvns	r1, r3
 8007c7c:	887b      	ldrh	r3, [r7, #2]
 8007c7e:	400b      	ands	r3, r1
 8007c80:	431a      	orrs	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	619a      	str	r2, [r3, #24]
}
 8007c86:	bf00      	nop
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
	...

08007c94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007c9e:	4b08      	ldr	r3, [pc, #32]	; (8007cc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007ca0:	695a      	ldr	r2, [r3, #20]
 8007ca2:	88fb      	ldrh	r3, [r7, #6]
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d006      	beq.n	8007cb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007caa:	4a05      	ldr	r2, [pc, #20]	; (8007cc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007cac:	88fb      	ldrh	r3, [r7, #6]
 8007cae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007cb0:	88fb      	ldrh	r3, [r7, #6]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 f806 	bl	8007cc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8007cb8:	bf00      	nop
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	40013c00 	.word	0x40013c00

08007cc4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	4603      	mov	r3, r0
 8007ccc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007cce:	bf00      	nop
 8007cd0:	370c      	adds	r7, #12
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8007cda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cdc:	b08f      	sub	sp, #60	; 0x3c
 8007cde:	af0a      	add	r7, sp, #40	; 0x28
 8007ce0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d101      	bne.n	8007cec <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e054      	b.n	8007d96 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d106      	bne.n	8007d0c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f015 fb50 	bl	801d3ac <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2203      	movs	r2, #3
 8007d10:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d102      	bne.n	8007d26 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f00b f987 	bl	801303e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	603b      	str	r3, [r7, #0]
 8007d36:	687e      	ldr	r6, [r7, #4]
 8007d38:	466d      	mov	r5, sp
 8007d3a:	f106 0410 	add.w	r4, r6, #16
 8007d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007d4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8007d4e:	1d33      	adds	r3, r6, #4
 8007d50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d52:	6838      	ldr	r0, [r7, #0]
 8007d54:	f00b f868 	bl	8012e28 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2101      	movs	r1, #1
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f00b f97e 	bl	8013060 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	603b      	str	r3, [r7, #0]
 8007d6a:	687e      	ldr	r6, [r7, #4]
 8007d6c:	466d      	mov	r5, sp
 8007d6e:	f106 0410 	add.w	r4, r6, #16
 8007d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007d7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007d82:	1d33      	adds	r3, r6, #4
 8007d84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d86:	6838      	ldr	r0, [r7, #0]
 8007d88:	f00c fcba 	bl	8014700 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d9e <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007d9e:	b590      	push	{r4, r7, lr}
 8007da0:	b089      	sub	sp, #36	; 0x24
 8007da2:	af04      	add	r7, sp, #16
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	4608      	mov	r0, r1
 8007da8:	4611      	mov	r1, r2
 8007daa:	461a      	mov	r2, r3
 8007dac:	4603      	mov	r3, r0
 8007dae:	70fb      	strb	r3, [r7, #3]
 8007db0:	460b      	mov	r3, r1
 8007db2:	70bb      	strb	r3, [r7, #2]
 8007db4:	4613      	mov	r3, r2
 8007db6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d101      	bne.n	8007dc6 <HAL_HCD_HC_Init+0x28>
 8007dc2:	2302      	movs	r3, #2
 8007dc4:	e076      	b.n	8007eb4 <HAL_HCD_HC_Init+0x116>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8007dce:	78fb      	ldrb	r3, [r7, #3]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	212c      	movs	r1, #44	; 0x2c
 8007dd4:	fb01 f303 	mul.w	r3, r1, r3
 8007dd8:	4413      	add	r3, r2
 8007dda:	333d      	adds	r3, #61	; 0x3d
 8007ddc:	2200      	movs	r2, #0
 8007dde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8007de0:	78fb      	ldrb	r3, [r7, #3]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	212c      	movs	r1, #44	; 0x2c
 8007de6:	fb01 f303 	mul.w	r3, r1, r3
 8007dea:	4413      	add	r3, r2
 8007dec:	3338      	adds	r3, #56	; 0x38
 8007dee:	787a      	ldrb	r2, [r7, #1]
 8007df0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8007df2:	78fb      	ldrb	r3, [r7, #3]
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	212c      	movs	r1, #44	; 0x2c
 8007df8:	fb01 f303 	mul.w	r3, r1, r3
 8007dfc:	4413      	add	r3, r2
 8007dfe:	3340      	adds	r3, #64	; 0x40
 8007e00:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007e02:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8007e04:	78fb      	ldrb	r3, [r7, #3]
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	212c      	movs	r1, #44	; 0x2c
 8007e0a:	fb01 f303 	mul.w	r3, r1, r3
 8007e0e:	4413      	add	r3, r2
 8007e10:	3339      	adds	r3, #57	; 0x39
 8007e12:	78fa      	ldrb	r2, [r7, #3]
 8007e14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8007e16:	78fb      	ldrb	r3, [r7, #3]
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	212c      	movs	r1, #44	; 0x2c
 8007e1c:	fb01 f303 	mul.w	r3, r1, r3
 8007e20:	4413      	add	r3, r2
 8007e22:	333f      	adds	r3, #63	; 0x3f
 8007e24:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8007e28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8007e2a:	78fb      	ldrb	r3, [r7, #3]
 8007e2c:	78ba      	ldrb	r2, [r7, #2]
 8007e2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007e32:	b2d0      	uxtb	r0, r2
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	212c      	movs	r1, #44	; 0x2c
 8007e38:	fb01 f303 	mul.w	r3, r1, r3
 8007e3c:	4413      	add	r3, r2
 8007e3e:	333a      	adds	r3, #58	; 0x3a
 8007e40:	4602      	mov	r2, r0
 8007e42:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8007e44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	da09      	bge.n	8007e60 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8007e4c:	78fb      	ldrb	r3, [r7, #3]
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	212c      	movs	r1, #44	; 0x2c
 8007e52:	fb01 f303 	mul.w	r3, r1, r3
 8007e56:	4413      	add	r3, r2
 8007e58:	333b      	adds	r3, #59	; 0x3b
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	701a      	strb	r2, [r3, #0]
 8007e5e:	e008      	b.n	8007e72 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8007e60:	78fb      	ldrb	r3, [r7, #3]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	212c      	movs	r1, #44	; 0x2c
 8007e66:	fb01 f303 	mul.w	r3, r1, r3
 8007e6a:	4413      	add	r3, r2
 8007e6c:	333b      	adds	r3, #59	; 0x3b
 8007e6e:	2200      	movs	r2, #0
 8007e70:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8007e72:	78fb      	ldrb	r3, [r7, #3]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	212c      	movs	r1, #44	; 0x2c
 8007e78:	fb01 f303 	mul.w	r3, r1, r3
 8007e7c:	4413      	add	r3, r2
 8007e7e:	333c      	adds	r3, #60	; 0x3c
 8007e80:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007e84:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6818      	ldr	r0, [r3, #0]
 8007e8a:	787c      	ldrb	r4, [r7, #1]
 8007e8c:	78ba      	ldrb	r2, [r7, #2]
 8007e8e:	78f9      	ldrb	r1, [r7, #3]
 8007e90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e92:	9302      	str	r3, [sp, #8]
 8007e94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	4623      	mov	r3, r4
 8007ea2:	f00c fda7 	bl	80149f4 <USB_HC_Init>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd90      	pop	{r4, r7, pc}

08007ebc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d101      	bne.n	8007eda <HAL_HCD_HC_Halt+0x1e>
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	e00f      	b.n	8007efa <HAL_HCD_HC_Halt+0x3e>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	78fa      	ldrb	r2, [r7, #3]
 8007ee8:	4611      	mov	r1, r2
 8007eea:	4618      	mov	r0, r3
 8007eec:	f00c fff7 	bl	8014ede <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8007ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
	...

08007f04 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	4608      	mov	r0, r1
 8007f0e:	4611      	mov	r1, r2
 8007f10:	461a      	mov	r2, r3
 8007f12:	4603      	mov	r3, r0
 8007f14:	70fb      	strb	r3, [r7, #3]
 8007f16:	460b      	mov	r3, r1
 8007f18:	70bb      	strb	r3, [r7, #2]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8007f1e:	78fb      	ldrb	r3, [r7, #3]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	212c      	movs	r1, #44	; 0x2c
 8007f24:	fb01 f303 	mul.w	r3, r1, r3
 8007f28:	4413      	add	r3, r2
 8007f2a:	333b      	adds	r3, #59	; 0x3b
 8007f2c:	78ba      	ldrb	r2, [r7, #2]
 8007f2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8007f30:	78fb      	ldrb	r3, [r7, #3]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	212c      	movs	r1, #44	; 0x2c
 8007f36:	fb01 f303 	mul.w	r3, r1, r3
 8007f3a:	4413      	add	r3, r2
 8007f3c:	333f      	adds	r3, #63	; 0x3f
 8007f3e:	787a      	ldrb	r2, [r7, #1]
 8007f40:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8007f42:	7c3b      	ldrb	r3, [r7, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d112      	bne.n	8007f6e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8007f48:	78fb      	ldrb	r3, [r7, #3]
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	212c      	movs	r1, #44	; 0x2c
 8007f4e:	fb01 f303 	mul.w	r3, r1, r3
 8007f52:	4413      	add	r3, r2
 8007f54:	3342      	adds	r3, #66	; 0x42
 8007f56:	2203      	movs	r2, #3
 8007f58:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8007f5a:	78fb      	ldrb	r3, [r7, #3]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	212c      	movs	r1, #44	; 0x2c
 8007f60:	fb01 f303 	mul.w	r3, r1, r3
 8007f64:	4413      	add	r3, r2
 8007f66:	333d      	adds	r3, #61	; 0x3d
 8007f68:	7f3a      	ldrb	r2, [r7, #28]
 8007f6a:	701a      	strb	r2, [r3, #0]
 8007f6c:	e008      	b.n	8007f80 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007f6e:	78fb      	ldrb	r3, [r7, #3]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	212c      	movs	r1, #44	; 0x2c
 8007f74:	fb01 f303 	mul.w	r3, r1, r3
 8007f78:	4413      	add	r3, r2
 8007f7a:	3342      	adds	r3, #66	; 0x42
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8007f80:	787b      	ldrb	r3, [r7, #1]
 8007f82:	2b03      	cmp	r3, #3
 8007f84:	f200 80c6 	bhi.w	8008114 <HAL_HCD_HC_SubmitRequest+0x210>
 8007f88:	a201      	add	r2, pc, #4	; (adr r2, 8007f90 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8007f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8e:	bf00      	nop
 8007f90:	08007fa1 	.word	0x08007fa1
 8007f94:	08008101 	.word	0x08008101
 8007f98:	08008005 	.word	0x08008005
 8007f9c:	08008083 	.word	0x08008083
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8007fa0:	7c3b      	ldrb	r3, [r7, #16]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	f040 80b8 	bne.w	8008118 <HAL_HCD_HC_SubmitRequest+0x214>
 8007fa8:	78bb      	ldrb	r3, [r7, #2]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f040 80b4 	bne.w	8008118 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8007fb0:	8b3b      	ldrh	r3, [r7, #24]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d108      	bne.n	8007fc8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8007fb6:	78fb      	ldrb	r3, [r7, #3]
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	212c      	movs	r1, #44	; 0x2c
 8007fbc:	fb01 f303 	mul.w	r3, r1, r3
 8007fc0:	4413      	add	r3, r2
 8007fc2:	3355      	adds	r3, #85	; 0x55
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007fc8:	78fb      	ldrb	r3, [r7, #3]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	212c      	movs	r1, #44	; 0x2c
 8007fce:	fb01 f303 	mul.w	r3, r1, r3
 8007fd2:	4413      	add	r3, r2
 8007fd4:	3355      	adds	r3, #85	; 0x55
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d109      	bne.n	8007ff0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007fdc:	78fb      	ldrb	r3, [r7, #3]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	212c      	movs	r1, #44	; 0x2c
 8007fe2:	fb01 f303 	mul.w	r3, r1, r3
 8007fe6:	4413      	add	r3, r2
 8007fe8:	3342      	adds	r3, #66	; 0x42
 8007fea:	2200      	movs	r2, #0
 8007fec:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8007fee:	e093      	b.n	8008118 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007ff0:	78fb      	ldrb	r3, [r7, #3]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	212c      	movs	r1, #44	; 0x2c
 8007ff6:	fb01 f303 	mul.w	r3, r1, r3
 8007ffa:	4413      	add	r3, r2
 8007ffc:	3342      	adds	r3, #66	; 0x42
 8007ffe:	2202      	movs	r2, #2
 8008000:	701a      	strb	r2, [r3, #0]
      break;
 8008002:	e089      	b.n	8008118 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8008004:	78bb      	ldrb	r3, [r7, #2]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d11d      	bne.n	8008046 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800800a:	78fb      	ldrb	r3, [r7, #3]
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	212c      	movs	r1, #44	; 0x2c
 8008010:	fb01 f303 	mul.w	r3, r1, r3
 8008014:	4413      	add	r3, r2
 8008016:	3355      	adds	r3, #85	; 0x55
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d109      	bne.n	8008032 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800801e:	78fb      	ldrb	r3, [r7, #3]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	212c      	movs	r1, #44	; 0x2c
 8008024:	fb01 f303 	mul.w	r3, r1, r3
 8008028:	4413      	add	r3, r2
 800802a:	3342      	adds	r3, #66	; 0x42
 800802c:	2200      	movs	r2, #0
 800802e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8008030:	e073      	b.n	800811a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008032:	78fb      	ldrb	r3, [r7, #3]
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	212c      	movs	r1, #44	; 0x2c
 8008038:	fb01 f303 	mul.w	r3, r1, r3
 800803c:	4413      	add	r3, r2
 800803e:	3342      	adds	r3, #66	; 0x42
 8008040:	2202      	movs	r2, #2
 8008042:	701a      	strb	r2, [r3, #0]
      break;
 8008044:	e069      	b.n	800811a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8008046:	78fb      	ldrb	r3, [r7, #3]
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	212c      	movs	r1, #44	; 0x2c
 800804c:	fb01 f303 	mul.w	r3, r1, r3
 8008050:	4413      	add	r3, r2
 8008052:	3354      	adds	r3, #84	; 0x54
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d109      	bne.n	800806e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800805a:	78fb      	ldrb	r3, [r7, #3]
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	212c      	movs	r1, #44	; 0x2c
 8008060:	fb01 f303 	mul.w	r3, r1, r3
 8008064:	4413      	add	r3, r2
 8008066:	3342      	adds	r3, #66	; 0x42
 8008068:	2200      	movs	r2, #0
 800806a:	701a      	strb	r2, [r3, #0]
      break;
 800806c:	e055      	b.n	800811a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800806e:	78fb      	ldrb	r3, [r7, #3]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	212c      	movs	r1, #44	; 0x2c
 8008074:	fb01 f303 	mul.w	r3, r1, r3
 8008078:	4413      	add	r3, r2
 800807a:	3342      	adds	r3, #66	; 0x42
 800807c:	2202      	movs	r2, #2
 800807e:	701a      	strb	r2, [r3, #0]
      break;
 8008080:	e04b      	b.n	800811a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8008082:	78bb      	ldrb	r3, [r7, #2]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d11d      	bne.n	80080c4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8008088:	78fb      	ldrb	r3, [r7, #3]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	212c      	movs	r1, #44	; 0x2c
 800808e:	fb01 f303 	mul.w	r3, r1, r3
 8008092:	4413      	add	r3, r2
 8008094:	3355      	adds	r3, #85	; 0x55
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d109      	bne.n	80080b0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800809c:	78fb      	ldrb	r3, [r7, #3]
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	212c      	movs	r1, #44	; 0x2c
 80080a2:	fb01 f303 	mul.w	r3, r1, r3
 80080a6:	4413      	add	r3, r2
 80080a8:	3342      	adds	r3, #66	; 0x42
 80080aa:	2200      	movs	r2, #0
 80080ac:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80080ae:	e034      	b.n	800811a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80080b0:	78fb      	ldrb	r3, [r7, #3]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	212c      	movs	r1, #44	; 0x2c
 80080b6:	fb01 f303 	mul.w	r3, r1, r3
 80080ba:	4413      	add	r3, r2
 80080bc:	3342      	adds	r3, #66	; 0x42
 80080be:	2202      	movs	r2, #2
 80080c0:	701a      	strb	r2, [r3, #0]
      break;
 80080c2:	e02a      	b.n	800811a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80080c4:	78fb      	ldrb	r3, [r7, #3]
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	212c      	movs	r1, #44	; 0x2c
 80080ca:	fb01 f303 	mul.w	r3, r1, r3
 80080ce:	4413      	add	r3, r2
 80080d0:	3354      	adds	r3, #84	; 0x54
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d109      	bne.n	80080ec <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80080d8:	78fb      	ldrb	r3, [r7, #3]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	212c      	movs	r1, #44	; 0x2c
 80080de:	fb01 f303 	mul.w	r3, r1, r3
 80080e2:	4413      	add	r3, r2
 80080e4:	3342      	adds	r3, #66	; 0x42
 80080e6:	2200      	movs	r2, #0
 80080e8:	701a      	strb	r2, [r3, #0]
      break;
 80080ea:	e016      	b.n	800811a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80080ec:	78fb      	ldrb	r3, [r7, #3]
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	212c      	movs	r1, #44	; 0x2c
 80080f2:	fb01 f303 	mul.w	r3, r1, r3
 80080f6:	4413      	add	r3, r2
 80080f8:	3342      	adds	r3, #66	; 0x42
 80080fa:	2202      	movs	r2, #2
 80080fc:	701a      	strb	r2, [r3, #0]
      break;
 80080fe:	e00c      	b.n	800811a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008100:	78fb      	ldrb	r3, [r7, #3]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	212c      	movs	r1, #44	; 0x2c
 8008106:	fb01 f303 	mul.w	r3, r1, r3
 800810a:	4413      	add	r3, r2
 800810c:	3342      	adds	r3, #66	; 0x42
 800810e:	2200      	movs	r2, #0
 8008110:	701a      	strb	r2, [r3, #0]
      break;
 8008112:	e002      	b.n	800811a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8008114:	bf00      	nop
 8008116:	e000      	b.n	800811a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8008118:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800811a:	78fb      	ldrb	r3, [r7, #3]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	212c      	movs	r1, #44	; 0x2c
 8008120:	fb01 f303 	mul.w	r3, r1, r3
 8008124:	4413      	add	r3, r2
 8008126:	3344      	adds	r3, #68	; 0x44
 8008128:	697a      	ldr	r2, [r7, #20]
 800812a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800812c:	78fb      	ldrb	r3, [r7, #3]
 800812e:	8b3a      	ldrh	r2, [r7, #24]
 8008130:	6879      	ldr	r1, [r7, #4]
 8008132:	202c      	movs	r0, #44	; 0x2c
 8008134:	fb00 f303 	mul.w	r3, r0, r3
 8008138:	440b      	add	r3, r1
 800813a:	334c      	adds	r3, #76	; 0x4c
 800813c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800813e:	78fb      	ldrb	r3, [r7, #3]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	212c      	movs	r1, #44	; 0x2c
 8008144:	fb01 f303 	mul.w	r3, r1, r3
 8008148:	4413      	add	r3, r2
 800814a:	3360      	adds	r3, #96	; 0x60
 800814c:	2200      	movs	r2, #0
 800814e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8008150:	78fb      	ldrb	r3, [r7, #3]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	212c      	movs	r1, #44	; 0x2c
 8008156:	fb01 f303 	mul.w	r3, r1, r3
 800815a:	4413      	add	r3, r2
 800815c:	3350      	adds	r3, #80	; 0x50
 800815e:	2200      	movs	r2, #0
 8008160:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8008162:	78fb      	ldrb	r3, [r7, #3]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	212c      	movs	r1, #44	; 0x2c
 8008168:	fb01 f303 	mul.w	r3, r1, r3
 800816c:	4413      	add	r3, r2
 800816e:	3339      	adds	r3, #57	; 0x39
 8008170:	78fa      	ldrb	r2, [r7, #3]
 8008172:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8008174:	78fb      	ldrb	r3, [r7, #3]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	212c      	movs	r1, #44	; 0x2c
 800817a:	fb01 f303 	mul.w	r3, r1, r3
 800817e:	4413      	add	r3, r2
 8008180:	3361      	adds	r3, #97	; 0x61
 8008182:	2200      	movs	r2, #0
 8008184:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6818      	ldr	r0, [r3, #0]
 800818a:	78fb      	ldrb	r3, [r7, #3]
 800818c:	222c      	movs	r2, #44	; 0x2c
 800818e:	fb02 f303 	mul.w	r3, r2, r3
 8008192:	3338      	adds	r3, #56	; 0x38
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	18d1      	adds	r1, r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	b2db      	uxtb	r3, r3
 800819e:	461a      	mov	r2, r3
 80081a0:	f00c fd4a 	bl	8014c38 <USB_HC_StartXfer>
 80081a4:	4603      	mov	r3, r0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop

080081b0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f00c f9d6 	bl	8014578 <USB_GetMode>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	f040 80f6 	bne.w	80083c0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4618      	mov	r0, r3
 80081da:	f00c f919 	bl	8014410 <USB_ReadInterrupts>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 80ec 	beq.w	80083be <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f00c f910 	bl	8014410 <USB_ReadInterrupts>
 80081f0:	4603      	mov	r3, r0
 80081f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081fa:	d104      	bne.n	8008206 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008204:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4618      	mov	r0, r3
 800820c:	f00c f900 	bl	8014410 <USB_ReadInterrupts>
 8008210:	4603      	mov	r3, r0
 8008212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800821a:	d104      	bne.n	8008226 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008224:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4618      	mov	r0, r3
 800822c:	f00c f8f0 	bl	8014410 <USB_ReadInterrupts>
 8008230:	4603      	mov	r3, r0
 8008232:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008236:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800823a:	d104      	bne.n	8008246 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008244:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4618      	mov	r0, r3
 800824c:	f00c f8e0 	bl	8014410 <USB_ReadInterrupts>
 8008250:	4603      	mov	r3, r0
 8008252:	f003 0302 	and.w	r3, r3, #2
 8008256:	2b02      	cmp	r3, #2
 8008258:	d103      	bne.n	8008262 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2202      	movs	r2, #2
 8008260:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4618      	mov	r0, r3
 8008268:	f00c f8d2 	bl	8014410 <USB_ReadInterrupts>
 800826c:	4603      	mov	r3, r0
 800826e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008276:	d11c      	bne.n	80082b2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008280:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10f      	bne.n	80082b2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8008292:	2110      	movs	r1, #16
 8008294:	6938      	ldr	r0, [r7, #16]
 8008296:	f00b f88d 	bl	80133b4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800829a:	6938      	ldr	r0, [r7, #16]
 800829c:	f00b f8be 	bl	801341c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2101      	movs	r1, #1
 80082a6:	4618      	mov	r0, r3
 80082a8:	f00c fade 	bl	8014868 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f015 f8ef 	bl	801d490 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f00c f8aa 	bl	8014410 <USB_ReadInterrupts>
 80082bc:	4603      	mov	r3, r0
 80082be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80082c6:	d102      	bne.n	80082ce <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f001 f9ce 	bl	800966a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f00c f89c 	bl	8014410 <USB_ReadInterrupts>
 80082d8:	4603      	mov	r3, r0
 80082da:	f003 0308 	and.w	r3, r3, #8
 80082de:	2b08      	cmp	r3, #8
 80082e0:	d106      	bne.n	80082f0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f015 f8b8 	bl	801d458 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2208      	movs	r2, #8
 80082ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4618      	mov	r0, r3
 80082f6:	f00c f88b 	bl	8014410 <USB_ReadInterrupts>
 80082fa:	4603      	mov	r3, r0
 80082fc:	f003 0310 	and.w	r3, r3, #16
 8008300:	2b10      	cmp	r3, #16
 8008302:	d101      	bne.n	8008308 <HAL_HCD_IRQHandler+0x158>
 8008304:	2301      	movs	r3, #1
 8008306:	e000      	b.n	800830a <HAL_HCD_IRQHandler+0x15a>
 8008308:	2300      	movs	r3, #0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d012      	beq.n	8008334 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	699a      	ldr	r2, [r3, #24]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f022 0210 	bic.w	r2, r2, #16
 800831c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f001 f8d1 	bl	80094c6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	699a      	ldr	r2, [r3, #24]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f042 0210 	orr.w	r2, r2, #16
 8008332:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4618      	mov	r0, r3
 800833a:	f00c f869 	bl	8014410 <USB_ReadInterrupts>
 800833e:	4603      	mov	r3, r0
 8008340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008344:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008348:	d13a      	bne.n	80083c0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4618      	mov	r0, r3
 8008350:	f00c fdb4 	bl	8014ebc <USB_HC_ReadInterrupt>
 8008354:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008356:	2300      	movs	r3, #0
 8008358:	617b      	str	r3, [r7, #20]
 800835a:	e025      	b.n	80083a8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	f003 030f 	and.w	r3, r3, #15
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	fa22 f303 	lsr.w	r3, r2, r3
 8008368:	f003 0301 	and.w	r3, r3, #1
 800836c:	2b00      	cmp	r3, #0
 800836e:	d018      	beq.n	80083a2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	015a      	lsls	r2, r3, #5
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4413      	add	r3, r2
 8008378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008386:	d106      	bne.n	8008396 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	b2db      	uxtb	r3, r3
 800838c:	4619      	mov	r1, r3
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f8ab 	bl	80084ea <HCD_HC_IN_IRQHandler>
 8008394:	e005      	b.n	80083a2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	b2db      	uxtb	r3, r3
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fcc6 	bl	8008d2e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	3301      	adds	r3, #1
 80083a6:	617b      	str	r3, [r7, #20]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	697a      	ldr	r2, [r7, #20]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d3d4      	bcc.n	800835c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80083ba:	615a      	str	r2, [r3, #20]
 80083bc:	e000      	b.n	80083c0 <HAL_HCD_IRQHandler+0x210>
      return;
 80083be:	bf00      	nop
    }
  }
}
 80083c0:	3718      	adds	r7, #24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b082      	sub	sp, #8
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d101      	bne.n	80083dc <HAL_HCD_Start+0x16>
 80083d8:	2302      	movs	r3, #2
 80083da:	e013      	b.n	8008404 <HAL_HCD_Start+0x3e>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2101      	movs	r1, #1
 80083ea:	4618      	mov	r0, r3
 80083ec:	f00c faa0 	bl	8014930 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f00a fe11 	bl	801301c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800841a:	2b01      	cmp	r3, #1
 800841c:	d101      	bne.n	8008422 <HAL_HCD_Stop+0x16>
 800841e:	2302      	movs	r3, #2
 8008420:	e00d      	b.n	800843e <HAL_HCD_Stop+0x32>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4618      	mov	r0, r3
 8008430:	f00c fe8e 	bl	8015150 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b082      	sub	sp, #8
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4618      	mov	r0, r3
 8008454:	f00c fa42 	bl	80148dc <USB_ResetPort>
 8008458:	4603      	mov	r3, r0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008462:	b480      	push	{r7}
 8008464:	b083      	sub	sp, #12
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	460b      	mov	r3, r1
 800846c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800846e:	78fb      	ldrb	r3, [r7, #3]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	212c      	movs	r1, #44	; 0x2c
 8008474:	fb01 f303 	mul.w	r3, r1, r3
 8008478:	4413      	add	r3, r2
 800847a:	3360      	adds	r3, #96	; 0x60
 800847c:	781b      	ldrb	r3, [r3, #0]
}
 800847e:	4618      	mov	r0, r3
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800848a:	b480      	push	{r7}
 800848c:	b083      	sub	sp, #12
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	460b      	mov	r3, r1
 8008494:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8008496:	78fb      	ldrb	r3, [r7, #3]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	212c      	movs	r1, #44	; 0x2c
 800849c:	fb01 f303 	mul.w	r3, r1, r3
 80084a0:	4413      	add	r3, r2
 80084a2:	3350      	adds	r3, #80	; 0x50
 80084a4:	681b      	ldr	r3, [r3, #0]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b082      	sub	sp, #8
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4618      	mov	r0, r3
 80084c0:	f00c fa86 	bl	80149d0 <USB_GetCurrentFrame>
 80084c4:	4603      	mov	r3, r0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b082      	sub	sp, #8
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4618      	mov	r0, r3
 80084dc:	f00c fa61 	bl	80149a2 <USB_GetHostSpeed>
 80084e0:	4603      	mov	r3, r0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b086      	sub	sp, #24
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
 80084f2:	460b      	mov	r3, r1
 80084f4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	b2d2      	uxtb	r2, r2
 800850c:	4611      	mov	r1, r2
 800850e:	4618      	mov	r0, r3
 8008510:	f00b ff91 	bl	8014436 <USB_ReadChInterrupts>
 8008514:	4603      	mov	r3, r0
 8008516:	f003 0304 	and.w	r3, r3, #4
 800851a:	2b04      	cmp	r3, #4
 800851c:	d11a      	bne.n	8008554 <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	015a      	lsls	r2, r3, #5
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	4413      	add	r3, r2
 8008526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800852a:	461a      	mov	r2, r3
 800852c:	2304      	movs	r3, #4
 800852e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	212c      	movs	r1, #44	; 0x2c
 8008536:	fb01 f303 	mul.w	r3, r1, r3
 800853a:	4413      	add	r3, r2
 800853c:	3361      	adds	r3, #97	; 0x61
 800853e:	2207      	movs	r2, #7
 8008540:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	b2d2      	uxtb	r2, r2
 800854a:	4611      	mov	r1, r2
 800854c:	4618      	mov	r0, r3
 800854e:	f00c fcc6 	bl	8014ede <USB_HC_Halt>
 8008552:	e0a2      	b.n	800869a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	b2d2      	uxtb	r2, r2
 800855c:	4611      	mov	r1, r2
 800855e:	4618      	mov	r0, r3
 8008560:	f00b ff69 	bl	8014436 <USB_ReadChInterrupts>
 8008564:	4603      	mov	r3, r0
 8008566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800856a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800856e:	d11b      	bne.n	80085a8 <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	4413      	add	r3, r2
 8008578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800857c:	461a      	mov	r2, r3
 800857e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008582:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	212c      	movs	r1, #44	; 0x2c
 800858a:	fb01 f303 	mul.w	r3, r1, r3
 800858e:	4413      	add	r3, r2
 8008590:	3361      	adds	r3, #97	; 0x61
 8008592:	2208      	movs	r2, #8
 8008594:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	b2d2      	uxtb	r2, r2
 800859e:	4611      	mov	r1, r2
 80085a0:	4618      	mov	r0, r3
 80085a2:	f00c fc9c 	bl	8014ede <USB_HC_Halt>
 80085a6:	e078      	b.n	800869a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	b2d2      	uxtb	r2, r2
 80085b0:	4611      	mov	r1, r2
 80085b2:	4618      	mov	r0, r3
 80085b4:	f00b ff3f 	bl	8014436 <USB_ReadChInterrupts>
 80085b8:	4603      	mov	r3, r0
 80085ba:	f003 0308 	and.w	r3, r3, #8
 80085be:	2b08      	cmp	r3, #8
 80085c0:	d11a      	bne.n	80085f8 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	015a      	lsls	r2, r3, #5
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	4413      	add	r3, r2
 80085ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ce:	461a      	mov	r2, r3
 80085d0:	2308      	movs	r3, #8
 80085d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	212c      	movs	r1, #44	; 0x2c
 80085da:	fb01 f303 	mul.w	r3, r1, r3
 80085de:	4413      	add	r3, r2
 80085e0:	3361      	adds	r3, #97	; 0x61
 80085e2:	2206      	movs	r2, #6
 80085e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	b2d2      	uxtb	r2, r2
 80085ee:	4611      	mov	r1, r2
 80085f0:	4618      	mov	r0, r3
 80085f2:	f00c fc74 	bl	8014ede <USB_HC_Halt>
 80085f6:	e050      	b.n	800869a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	b2d2      	uxtb	r2, r2
 8008600:	4611      	mov	r1, r2
 8008602:	4618      	mov	r0, r3
 8008604:	f00b ff17 	bl	8014436 <USB_ReadChInterrupts>
 8008608:	4603      	mov	r3, r0
 800860a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800860e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008612:	d11b      	bne.n	800864c <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	015a      	lsls	r2, r3, #5
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	4413      	add	r3, r2
 800861c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008620:	461a      	mov	r2, r3
 8008622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008626:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	212c      	movs	r1, #44	; 0x2c
 800862e:	fb01 f303 	mul.w	r3, r1, r3
 8008632:	4413      	add	r3, r2
 8008634:	3361      	adds	r3, #97	; 0x61
 8008636:	2209      	movs	r2, #9
 8008638:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	b2d2      	uxtb	r2, r2
 8008642:	4611      	mov	r1, r2
 8008644:	4618      	mov	r0, r3
 8008646:	f00c fc4a 	bl	8014ede <USB_HC_Halt>
 800864a:	e026      	b.n	800869a <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	b2d2      	uxtb	r2, r2
 8008654:	4611      	mov	r1, r2
 8008656:	4618      	mov	r0, r3
 8008658:	f00b feed 	bl	8014436 <USB_ReadChInterrupts>
 800865c:	4603      	mov	r3, r0
 800865e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008662:	2b80      	cmp	r3, #128	; 0x80
 8008664:	d119      	bne.n	800869a <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	015a      	lsls	r2, r3, #5
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	4413      	add	r3, r2
 800866e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008672:	461a      	mov	r2, r3
 8008674:	2380      	movs	r3, #128	; 0x80
 8008676:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	212c      	movs	r1, #44	; 0x2c
 800867e:	fb01 f303 	mul.w	r3, r1, r3
 8008682:	4413      	add	r3, r2
 8008684:	3361      	adds	r3, #97	; 0x61
 8008686:	2207      	movs	r2, #7
 8008688:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	b2d2      	uxtb	r2, r2
 8008692:	4611      	mov	r1, r2
 8008694:	4618      	mov	r0, r3
 8008696:	f00c fc22 	bl	8014ede <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	b2d2      	uxtb	r2, r2
 80086a2:	4611      	mov	r1, r2
 80086a4:	4618      	mov	r0, r3
 80086a6:	f00b fec6 	bl	8014436 <USB_ReadChInterrupts>
 80086aa:	4603      	mov	r3, r0
 80086ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086b4:	d112      	bne.n	80086dc <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	b2d2      	uxtb	r2, r2
 80086be:	4611      	mov	r1, r2
 80086c0:	4618      	mov	r0, r3
 80086c2:	f00c fc0c 	bl	8014ede <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	015a      	lsls	r2, r3, #5
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	4413      	add	r3, r2
 80086ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086d2:	461a      	mov	r2, r3
 80086d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086d8:	6093      	str	r3, [r2, #8]
 80086da:	e325      	b.n	8008d28 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	b2d2      	uxtb	r2, r2
 80086e4:	4611      	mov	r1, r2
 80086e6:	4618      	mov	r0, r3
 80086e8:	f00b fea5 	bl	8014436 <USB_ReadChInterrupts>
 80086ec:	4603      	mov	r3, r0
 80086ee:	f003 0301 	and.w	r3, r3, #1
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	f040 80e8 	bne.w	80088c8 <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	015a      	lsls	r2, r3, #5
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	4413      	add	r3, r2
 8008700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008704:	461a      	mov	r2, r3
 8008706:	2320      	movs	r3, #32
 8008708:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d019      	beq.n	8008746 <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	212c      	movs	r1, #44	; 0x2c
 8008718:	fb01 f303 	mul.w	r3, r1, r3
 800871c:	4413      	add	r3, r2
 800871e:	3348      	adds	r3, #72	; 0x48
 8008720:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	0159      	lsls	r1, r3, #5
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	440b      	add	r3, r1
 800872a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8008734:	1ad2      	subs	r2, r2, r3
 8008736:	6879      	ldr	r1, [r7, #4]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	202c      	movs	r0, #44	; 0x2c
 800873c:	fb00 f303 	mul.w	r3, r0, r3
 8008740:	440b      	add	r3, r1
 8008742:	3350      	adds	r3, #80	; 0x50
 8008744:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	212c      	movs	r1, #44	; 0x2c
 800874c:	fb01 f303 	mul.w	r3, r1, r3
 8008750:	4413      	add	r3, r2
 8008752:	3361      	adds	r3, #97	; 0x61
 8008754:	2201      	movs	r2, #1
 8008756:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	212c      	movs	r1, #44	; 0x2c
 800875e:	fb01 f303 	mul.w	r3, r1, r3
 8008762:	4413      	add	r3, r2
 8008764:	335c      	adds	r3, #92	; 0x5c
 8008766:	2200      	movs	r2, #0
 8008768:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	015a      	lsls	r2, r3, #5
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	4413      	add	r3, r2
 8008772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008776:	461a      	mov	r2, r3
 8008778:	2301      	movs	r3, #1
 800877a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	212c      	movs	r1, #44	; 0x2c
 8008782:	fb01 f303 	mul.w	r3, r1, r3
 8008786:	4413      	add	r3, r2
 8008788:	333f      	adds	r3, #63	; 0x3f
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d009      	beq.n	80087a4 <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	212c      	movs	r1, #44	; 0x2c
 8008796:	fb01 f303 	mul.w	r3, r1, r3
 800879a:	4413      	add	r3, r2
 800879c:	333f      	adds	r3, #63	; 0x3f
 800879e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d111      	bne.n	80087c8 <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	b2d2      	uxtb	r2, r2
 80087ac:	4611      	mov	r1, r2
 80087ae:	4618      	mov	r0, r3
 80087b0:	f00c fb95 	bl	8014ede <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087c0:	461a      	mov	r2, r3
 80087c2:	2310      	movs	r3, #16
 80087c4:	6093      	str	r3, [r2, #8]
 80087c6:	e03a      	b.n	800883e <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	212c      	movs	r1, #44	; 0x2c
 80087ce:	fb01 f303 	mul.w	r3, r1, r3
 80087d2:	4413      	add	r3, r2
 80087d4:	333f      	adds	r3, #63	; 0x3f
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	2b03      	cmp	r3, #3
 80087da:	d009      	beq.n	80087f0 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	212c      	movs	r1, #44	; 0x2c
 80087e2:	fb01 f303 	mul.w	r3, r1, r3
 80087e6:	4413      	add	r3, r2
 80087e8:	333f      	adds	r3, #63	; 0x3f
 80087ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d126      	bne.n	800883e <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	015a      	lsls	r2, r3, #5
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	0151      	lsls	r1, r2, #5
 8008802:	693a      	ldr	r2, [r7, #16]
 8008804:	440a      	add	r2, r1
 8008806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800880a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800880e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	212c      	movs	r1, #44	; 0x2c
 8008816:	fb01 f303 	mul.w	r3, r1, r3
 800881a:	4413      	add	r3, r2
 800881c:	3360      	adds	r3, #96	; 0x60
 800881e:	2201      	movs	r2, #1
 8008820:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	b2d9      	uxtb	r1, r3
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	202c      	movs	r0, #44	; 0x2c
 800882c:	fb00 f303 	mul.w	r3, r0, r3
 8008830:	4413      	add	r3, r2
 8008832:	3360      	adds	r3, #96	; 0x60
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	461a      	mov	r2, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f014 fe37 	bl	801d4ac <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d12b      	bne.n	800889e <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	212c      	movs	r1, #44	; 0x2c
 800884c:	fb01 f303 	mul.w	r3, r1, r3
 8008850:	4413      	add	r3, r2
 8008852:	3348      	adds	r3, #72	; 0x48
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6879      	ldr	r1, [r7, #4]
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	202c      	movs	r0, #44	; 0x2c
 800885c:	fb00 f202 	mul.w	r2, r0, r2
 8008860:	440a      	add	r2, r1
 8008862:	3240      	adds	r2, #64	; 0x40
 8008864:	8812      	ldrh	r2, [r2, #0]
 8008866:	fbb3 f3f2 	udiv	r3, r3, r2
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	2b00      	cmp	r3, #0
 8008870:	f000 825a 	beq.w	8008d28 <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	212c      	movs	r1, #44	; 0x2c
 800887a:	fb01 f303 	mul.w	r3, r1, r3
 800887e:	4413      	add	r3, r2
 8008880:	3354      	adds	r3, #84	; 0x54
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	f083 0301 	eor.w	r3, r3, #1
 8008888:	b2d8      	uxtb	r0, r3
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	212c      	movs	r1, #44	; 0x2c
 8008890:	fb01 f303 	mul.w	r3, r1, r3
 8008894:	4413      	add	r3, r2
 8008896:	3354      	adds	r3, #84	; 0x54
 8008898:	4602      	mov	r2, r0
 800889a:	701a      	strb	r2, [r3, #0]
 800889c:	e244      	b.n	8008d28 <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	212c      	movs	r1, #44	; 0x2c
 80088a4:	fb01 f303 	mul.w	r3, r1, r3
 80088a8:	4413      	add	r3, r2
 80088aa:	3354      	adds	r3, #84	; 0x54
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	f083 0301 	eor.w	r3, r3, #1
 80088b2:	b2d8      	uxtb	r0, r3
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	212c      	movs	r1, #44	; 0x2c
 80088ba:	fb01 f303 	mul.w	r3, r1, r3
 80088be:	4413      	add	r3, r2
 80088c0:	3354      	adds	r3, #84	; 0x54
 80088c2:	4602      	mov	r2, r0
 80088c4:	701a      	strb	r2, [r3, #0]
 80088c6:	e22f      	b.n	8008d28 <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	b2d2      	uxtb	r2, r2
 80088d0:	4611      	mov	r1, r2
 80088d2:	4618      	mov	r0, r3
 80088d4:	f00b fdaf 	bl	8014436 <USB_ReadChInterrupts>
 80088d8:	4603      	mov	r3, r0
 80088da:	f003 0320 	and.w	r3, r3, #32
 80088de:	2b20      	cmp	r3, #32
 80088e0:	d109      	bne.n	80088f6 <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	015a      	lsls	r2, r3, #5
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ee:	461a      	mov	r2, r3
 80088f0:	2320      	movs	r3, #32
 80088f2:	6093      	str	r3, [r2, #8]
 80088f4:	e218      	b.n	8008d28 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	b2d2      	uxtb	r2, r2
 80088fe:	4611      	mov	r1, r2
 8008900:	4618      	mov	r0, r3
 8008902:	f00b fd98 	bl	8014436 <USB_ReadChInterrupts>
 8008906:	4603      	mov	r3, r0
 8008908:	f003 0302 	and.w	r3, r3, #2
 800890c:	2b02      	cmp	r3, #2
 800890e:	f040 816b 	bne.w	8008be8 <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	015a      	lsls	r2, r3, #5
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	4413      	add	r3, r2
 800891a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800891e:	461a      	mov	r2, r3
 8008920:	2302      	movs	r3, #2
 8008922:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	212c      	movs	r1, #44	; 0x2c
 800892a:	fb01 f303 	mul.w	r3, r1, r3
 800892e:	4413      	add	r3, r2
 8008930:	3361      	adds	r3, #97	; 0x61
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d112      	bne.n	800895e <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	212c      	movs	r1, #44	; 0x2c
 800893e:	fb01 f303 	mul.w	r3, r1, r3
 8008942:	4413      	add	r3, r2
 8008944:	3361      	adds	r3, #97	; 0x61
 8008946:	2202      	movs	r2, #2
 8008948:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	212c      	movs	r1, #44	; 0x2c
 8008950:	fb01 f303 	mul.w	r3, r1, r3
 8008954:	4413      	add	r3, r2
 8008956:	3360      	adds	r3, #96	; 0x60
 8008958:	2201      	movs	r2, #1
 800895a:	701a      	strb	r2, [r3, #0]
 800895c:	e135      	b.n	8008bca <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	212c      	movs	r1, #44	; 0x2c
 8008964:	fb01 f303 	mul.w	r3, r1, r3
 8008968:	4413      	add	r3, r2
 800896a:	3361      	adds	r3, #97	; 0x61
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	2b06      	cmp	r3, #6
 8008970:	d112      	bne.n	8008998 <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	212c      	movs	r1, #44	; 0x2c
 8008978:	fb01 f303 	mul.w	r3, r1, r3
 800897c:	4413      	add	r3, r2
 800897e:	3361      	adds	r3, #97	; 0x61
 8008980:	2202      	movs	r2, #2
 8008982:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	212c      	movs	r1, #44	; 0x2c
 800898a:	fb01 f303 	mul.w	r3, r1, r3
 800898e:	4413      	add	r3, r2
 8008990:	3360      	adds	r3, #96	; 0x60
 8008992:	2205      	movs	r2, #5
 8008994:	701a      	strb	r2, [r3, #0]
 8008996:	e118      	b.n	8008bca <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	212c      	movs	r1, #44	; 0x2c
 800899e:	fb01 f303 	mul.w	r3, r1, r3
 80089a2:	4413      	add	r3, r2
 80089a4:	3361      	adds	r3, #97	; 0x61
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	2b07      	cmp	r3, #7
 80089aa:	d009      	beq.n	80089c0 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	212c      	movs	r1, #44	; 0x2c
 80089b2:	fb01 f303 	mul.w	r3, r1, r3
 80089b6:	4413      	add	r3, r2
 80089b8:	3361      	adds	r3, #97	; 0x61
 80089ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80089bc:	2b09      	cmp	r3, #9
 80089be:	d159      	bne.n	8008a74 <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	212c      	movs	r1, #44	; 0x2c
 80089c6:	fb01 f303 	mul.w	r3, r1, r3
 80089ca:	4413      	add	r3, r2
 80089cc:	3361      	adds	r3, #97	; 0x61
 80089ce:	2202      	movs	r2, #2
 80089d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	212c      	movs	r1, #44	; 0x2c
 80089d8:	fb01 f303 	mul.w	r3, r1, r3
 80089dc:	4413      	add	r3, r2
 80089de:	335c      	adds	r3, #92	; 0x5c
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	1c5a      	adds	r2, r3, #1
 80089e4:	6879      	ldr	r1, [r7, #4]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	202c      	movs	r0, #44	; 0x2c
 80089ea:	fb00 f303 	mul.w	r3, r0, r3
 80089ee:	440b      	add	r3, r1
 80089f0:	335c      	adds	r3, #92	; 0x5c
 80089f2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	212c      	movs	r1, #44	; 0x2c
 80089fa:	fb01 f303 	mul.w	r3, r1, r3
 80089fe:	4413      	add	r3, r2
 8008a00:	335c      	adds	r3, #92	; 0x5c
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d912      	bls.n	8008a2e <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	212c      	movs	r1, #44	; 0x2c
 8008a0e:	fb01 f303 	mul.w	r3, r1, r3
 8008a12:	4413      	add	r3, r2
 8008a14:	335c      	adds	r3, #92	; 0x5c
 8008a16:	2200      	movs	r2, #0
 8008a18:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	212c      	movs	r1, #44	; 0x2c
 8008a20:	fb01 f303 	mul.w	r3, r1, r3
 8008a24:	4413      	add	r3, r2
 8008a26:	3360      	adds	r3, #96	; 0x60
 8008a28:	2204      	movs	r2, #4
 8008a2a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008a2c:	e0cd      	b.n	8008bca <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	212c      	movs	r1, #44	; 0x2c
 8008a34:	fb01 f303 	mul.w	r3, r1, r3
 8008a38:	4413      	add	r3, r2
 8008a3a:	3360      	adds	r3, #96	; 0x60
 8008a3c:	2202      	movs	r2, #2
 8008a3e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	015a      	lsls	r2, r3, #5
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	4413      	add	r3, r2
 8008a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a56:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a5e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	015a      	lsls	r2, r3, #5
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	4413      	add	r3, r2
 8008a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008a72:	e0aa      	b.n	8008bca <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	212c      	movs	r1, #44	; 0x2c
 8008a7a:	fb01 f303 	mul.w	r3, r1, r3
 8008a7e:	4413      	add	r3, r2
 8008a80:	3361      	adds	r3, #97	; 0x61
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	2b05      	cmp	r3, #5
 8008a86:	d109      	bne.n	8008a9c <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	212c      	movs	r1, #44	; 0x2c
 8008a8e:	fb01 f303 	mul.w	r3, r1, r3
 8008a92:	4413      	add	r3, r2
 8008a94:	3361      	adds	r3, #97	; 0x61
 8008a96:	2202      	movs	r2, #2
 8008a98:	701a      	strb	r2, [r3, #0]
 8008a9a:	e096      	b.n	8008bca <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	212c      	movs	r1, #44	; 0x2c
 8008aa2:	fb01 f303 	mul.w	r3, r1, r3
 8008aa6:	4413      	add	r3, r2
 8008aa8:	3361      	adds	r3, #97	; 0x61
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	2b03      	cmp	r3, #3
 8008aae:	d109      	bne.n	8008ac4 <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	212c      	movs	r1, #44	; 0x2c
 8008ab6:	fb01 f303 	mul.w	r3, r1, r3
 8008aba:	4413      	add	r3, r2
 8008abc:	3361      	adds	r3, #97	; 0x61
 8008abe:	2202      	movs	r2, #2
 8008ac0:	701a      	strb	r2, [r3, #0]
 8008ac2:	e082      	b.n	8008bca <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	212c      	movs	r1, #44	; 0x2c
 8008aca:	fb01 f303 	mul.w	r3, r1, r3
 8008ace:	4413      	add	r3, r2
 8008ad0:	3361      	adds	r3, #97	; 0x61
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	2b04      	cmp	r3, #4
 8008ad6:	d13f      	bne.n	8008b58 <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	212c      	movs	r1, #44	; 0x2c
 8008ade:	fb01 f303 	mul.w	r3, r1, r3
 8008ae2:	4413      	add	r3, r2
 8008ae4:	3361      	adds	r3, #97	; 0x61
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	212c      	movs	r1, #44	; 0x2c
 8008af0:	fb01 f303 	mul.w	r3, r1, r3
 8008af4:	4413      	add	r3, r2
 8008af6:	3360      	adds	r3, #96	; 0x60
 8008af8:	2202      	movs	r2, #2
 8008afa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	212c      	movs	r1, #44	; 0x2c
 8008b02:	fb01 f303 	mul.w	r3, r1, r3
 8008b06:	4413      	add	r3, r2
 8008b08:	333f      	adds	r3, #63	; 0x3f
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d009      	beq.n	8008b24 <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	212c      	movs	r1, #44	; 0x2c
 8008b16:	fb01 f303 	mul.w	r3, r1, r3
 8008b1a:	4413      	add	r3, r2
 8008b1c:	333f      	adds	r3, #63	; 0x3f
 8008b1e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d152      	bne.n	8008bca <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	015a      	lsls	r2, r3, #5
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b3a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b42:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	015a      	lsls	r2, r3, #5
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b50:	461a      	mov	r2, r3
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	6013      	str	r3, [r2, #0]
 8008b56:	e038      	b.n	8008bca <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	212c      	movs	r1, #44	; 0x2c
 8008b5e:	fb01 f303 	mul.w	r3, r1, r3
 8008b62:	4413      	add	r3, r2
 8008b64:	3361      	adds	r3, #97	; 0x61
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	2b08      	cmp	r3, #8
 8008b6a:	d123      	bne.n	8008bb4 <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	212c      	movs	r1, #44	; 0x2c
 8008b72:	fb01 f303 	mul.w	r3, r1, r3
 8008b76:	4413      	add	r3, r2
 8008b78:	3361      	adds	r3, #97	; 0x61
 8008b7a:	2202      	movs	r2, #2
 8008b7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	212c      	movs	r1, #44	; 0x2c
 8008b84:	fb01 f303 	mul.w	r3, r1, r3
 8008b88:	4413      	add	r3, r2
 8008b8a:	335c      	adds	r3, #92	; 0x5c
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	1c5a      	adds	r2, r3, #1
 8008b90:	6879      	ldr	r1, [r7, #4]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	202c      	movs	r0, #44	; 0x2c
 8008b96:	fb00 f303 	mul.w	r3, r0, r3
 8008b9a:	440b      	add	r3, r1
 8008b9c:	335c      	adds	r3, #92	; 0x5c
 8008b9e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	212c      	movs	r1, #44	; 0x2c
 8008ba6:	fb01 f303 	mul.w	r3, r1, r3
 8008baa:	4413      	add	r3, r2
 8008bac:	3360      	adds	r3, #96	; 0x60
 8008bae:	2204      	movs	r2, #4
 8008bb0:	701a      	strb	r2, [r3, #0]
 8008bb2:	e00a      	b.n	8008bca <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	212c      	movs	r1, #44	; 0x2c
 8008bba:	fb01 f303 	mul.w	r3, r1, r3
 8008bbe:	4413      	add	r3, r2
 8008bc0:	3361      	adds	r3, #97	; 0x61
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	f000 80ae 	beq.w	8008d26 <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	b2d9      	uxtb	r1, r3
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	202c      	movs	r0, #44	; 0x2c
 8008bd4:	fb00 f303 	mul.w	r3, r0, r3
 8008bd8:	4413      	add	r3, r2
 8008bda:	3360      	adds	r3, #96	; 0x60
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	461a      	mov	r2, r3
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f014 fc63 	bl	801d4ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8008be6:	e09f      	b.n	8008d28 <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	b2d2      	uxtb	r2, r2
 8008bf0:	4611      	mov	r1, r2
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f00b fc1f 	bl	8014436 <USB_ReadChInterrupts>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bfe:	2b40      	cmp	r3, #64	; 0x40
 8008c00:	d123      	bne.n	8008c4a <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	015a      	lsls	r2, r3, #5
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	4413      	add	r3, r2
 8008c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c0e:	461a      	mov	r2, r3
 8008c10:	2340      	movs	r3, #64	; 0x40
 8008c12:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	212c      	movs	r1, #44	; 0x2c
 8008c1a:	fb01 f303 	mul.w	r3, r1, r3
 8008c1e:	4413      	add	r3, r2
 8008c20:	3361      	adds	r3, #97	; 0x61
 8008c22:	2205      	movs	r2, #5
 8008c24:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	212c      	movs	r1, #44	; 0x2c
 8008c2c:	fb01 f303 	mul.w	r3, r1, r3
 8008c30:	4413      	add	r3, r2
 8008c32:	335c      	adds	r3, #92	; 0x5c
 8008c34:	2200      	movs	r2, #0
 8008c36:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68fa      	ldr	r2, [r7, #12]
 8008c3e:	b2d2      	uxtb	r2, r2
 8008c40:	4611      	mov	r1, r2
 8008c42:	4618      	mov	r0, r3
 8008c44:	f00c f94b 	bl	8014ede <USB_HC_Halt>
 8008c48:	e06e      	b.n	8008d28 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	b2d2      	uxtb	r2, r2
 8008c52:	4611      	mov	r1, r2
 8008c54:	4618      	mov	r0, r3
 8008c56:	f00b fbee 	bl	8014436 <USB_ReadChInterrupts>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	f003 0310 	and.w	r3, r3, #16
 8008c60:	2b10      	cmp	r3, #16
 8008c62:	d161      	bne.n	8008d28 <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	212c      	movs	r1, #44	; 0x2c
 8008c6a:	fb01 f303 	mul.w	r3, r1, r3
 8008c6e:	4413      	add	r3, r2
 8008c70:	333f      	adds	r3, #63	; 0x3f
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	2b03      	cmp	r3, #3
 8008c76:	d11a      	bne.n	8008cae <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	212c      	movs	r1, #44	; 0x2c
 8008c7e:	fb01 f303 	mul.w	r3, r1, r3
 8008c82:	4413      	add	r3, r2
 8008c84:	335c      	adds	r3, #92	; 0x5c
 8008c86:	2200      	movs	r2, #0
 8008c88:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	212c      	movs	r1, #44	; 0x2c
 8008c90:	fb01 f303 	mul.w	r3, r1, r3
 8008c94:	4413      	add	r3, r2
 8008c96:	3361      	adds	r3, #97	; 0x61
 8008c98:	2204      	movs	r2, #4
 8008c9a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	b2d2      	uxtb	r2, r2
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f00c f919 	bl	8014ede <USB_HC_Halt>
 8008cac:	e031      	b.n	8008d12 <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	212c      	movs	r1, #44	; 0x2c
 8008cb4:	fb01 f303 	mul.w	r3, r1, r3
 8008cb8:	4413      	add	r3, r2
 8008cba:	333f      	adds	r3, #63	; 0x3f
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d009      	beq.n	8008cd6 <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	212c      	movs	r1, #44	; 0x2c
 8008cc8:	fb01 f303 	mul.w	r3, r1, r3
 8008ccc:	4413      	add	r3, r2
 8008cce:	333f      	adds	r3, #63	; 0x3f
 8008cd0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d11d      	bne.n	8008d12 <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	212c      	movs	r1, #44	; 0x2c
 8008cdc:	fb01 f303 	mul.w	r3, r1, r3
 8008ce0:	4413      	add	r3, r2
 8008ce2:	335c      	adds	r3, #92	; 0x5c
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d110      	bne.n	8008d12 <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	212c      	movs	r1, #44	; 0x2c
 8008cf6:	fb01 f303 	mul.w	r3, r1, r3
 8008cfa:	4413      	add	r3, r2
 8008cfc:	3361      	adds	r3, #97	; 0x61
 8008cfe:	2204      	movs	r2, #4
 8008d00:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	b2d2      	uxtb	r2, r2
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f00c f8e6 	bl	8014ede <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	015a      	lsls	r2, r3, #5
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d1e:	461a      	mov	r2, r3
 8008d20:	2310      	movs	r3, #16
 8008d22:	6093      	str	r3, [r2, #8]
 8008d24:	e000      	b.n	8008d28 <HCD_HC_IN_IRQHandler+0x83e>
        return;
 8008d26:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8008d28:	3718      	adds	r7, #24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b088      	sub	sp, #32
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	460b      	mov	r3, r1
 8008d38:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8008d44:	78fb      	ldrb	r3, [r7, #3]
 8008d46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	697a      	ldr	r2, [r7, #20]
 8008d4e:	b2d2      	uxtb	r2, r2
 8008d50:	4611      	mov	r1, r2
 8008d52:	4618      	mov	r0, r3
 8008d54:	f00b fb6f 	bl	8014436 <USB_ReadChInterrupts>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	f003 0304 	and.w	r3, r3, #4
 8008d5e:	2b04      	cmp	r3, #4
 8008d60:	d11a      	bne.n	8008d98 <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	015a      	lsls	r2, r3, #5
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	4413      	add	r3, r2
 8008d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d6e:	461a      	mov	r2, r3
 8008d70:	2304      	movs	r3, #4
 8008d72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	212c      	movs	r1, #44	; 0x2c
 8008d7a:	fb01 f303 	mul.w	r3, r1, r3
 8008d7e:	4413      	add	r3, r2
 8008d80:	3361      	adds	r3, #97	; 0x61
 8008d82:	2207      	movs	r2, #7
 8008d84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	b2d2      	uxtb	r2, r2
 8008d8e:	4611      	mov	r1, r2
 8008d90:	4618      	mov	r0, r3
 8008d92:	f00c f8a4 	bl	8014ede <USB_HC_Halt>
 8008d96:	e393      	b.n	80094c0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	697a      	ldr	r2, [r7, #20]
 8008d9e:	b2d2      	uxtb	r2, r2
 8008da0:	4611      	mov	r1, r2
 8008da2:	4618      	mov	r0, r3
 8008da4:	f00b fb47 	bl	8014436 <USB_ReadChInterrupts>
 8008da8:	4603      	mov	r3, r0
 8008daa:	f003 0320 	and.w	r3, r3, #32
 8008dae:	2b20      	cmp	r3, #32
 8008db0:	d137      	bne.n	8008e22 <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	015a      	lsls	r2, r3, #5
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	4413      	add	r3, r2
 8008dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	2320      	movs	r3, #32
 8008dc2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	212c      	movs	r1, #44	; 0x2c
 8008dca:	fb01 f303 	mul.w	r3, r1, r3
 8008dce:	4413      	add	r3, r2
 8008dd0:	333d      	adds	r3, #61	; 0x3d
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	f040 8373 	bne.w	80094c0 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	212c      	movs	r1, #44	; 0x2c
 8008de0:	fb01 f303 	mul.w	r3, r1, r3
 8008de4:	4413      	add	r3, r2
 8008de6:	333d      	adds	r3, #61	; 0x3d
 8008de8:	2200      	movs	r2, #0
 8008dea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	212c      	movs	r1, #44	; 0x2c
 8008df2:	fb01 f303 	mul.w	r3, r1, r3
 8008df6:	4413      	add	r3, r2
 8008df8:	3360      	adds	r3, #96	; 0x60
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	212c      	movs	r1, #44	; 0x2c
 8008e04:	fb01 f303 	mul.w	r3, r1, r3
 8008e08:	4413      	add	r3, r2
 8008e0a:	3361      	adds	r3, #97	; 0x61
 8008e0c:	2203      	movs	r2, #3
 8008e0e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	b2d2      	uxtb	r2, r2
 8008e18:	4611      	mov	r1, r2
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f00c f85f 	bl	8014ede <USB_HC_Halt>
 8008e20:	e34e      	b.n	80094c0 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	b2d2      	uxtb	r2, r2
 8008e2a:	4611      	mov	r1, r2
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f00b fb02 	bl	8014436 <USB_ReadChInterrupts>
 8008e32:	4603      	mov	r3, r0
 8008e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e3c:	d112      	bne.n	8008e64 <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	015a      	lsls	r2, r3, #5
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	4413      	add	r3, r2
 8008e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e50:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	b2d2      	uxtb	r2, r2
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f00c f83e 	bl	8014ede <USB_HC_Halt>
 8008e62:	e32d      	b.n	80094c0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	697a      	ldr	r2, [r7, #20]
 8008e6a:	b2d2      	uxtb	r2, r2
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f00b fae1 	bl	8014436 <USB_ReadChInterrupts>
 8008e74:	4603      	mov	r3, r0
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d142      	bne.n	8008f04 <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	212c      	movs	r1, #44	; 0x2c
 8008e84:	fb01 f303 	mul.w	r3, r1, r3
 8008e88:	4413      	add	r3, r2
 8008e8a:	335c      	adds	r3, #92	; 0x5c
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	697a      	ldr	r2, [r7, #20]
 8008e96:	b2d2      	uxtb	r2, r2
 8008e98:	4611      	mov	r1, r2
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f00b facb 	bl	8014436 <USB_ReadChInterrupts>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea6:	2b40      	cmp	r3, #64	; 0x40
 8008ea8:	d111      	bne.n	8008ece <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	212c      	movs	r1, #44	; 0x2c
 8008eb0:	fb01 f303 	mul.w	r3, r1, r3
 8008eb4:	4413      	add	r3, r2
 8008eb6:	333d      	adds	r3, #61	; 0x3d
 8008eb8:	2201      	movs	r2, #1
 8008eba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	015a      	lsls	r2, r3, #5
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ec8:	461a      	mov	r2, r3
 8008eca:	2340      	movs	r3, #64	; 0x40
 8008ecc:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	015a      	lsls	r2, r3, #5
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eda:	461a      	mov	r2, r3
 8008edc:	2301      	movs	r3, #1
 8008ede:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	212c      	movs	r1, #44	; 0x2c
 8008ee6:	fb01 f303 	mul.w	r3, r1, r3
 8008eea:	4413      	add	r3, r2
 8008eec:	3361      	adds	r3, #97	; 0x61
 8008eee:	2201      	movs	r2, #1
 8008ef0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	b2d2      	uxtb	r2, r2
 8008efa:	4611      	mov	r1, r2
 8008efc:	4618      	mov	r0, r3
 8008efe:	f00b ffee 	bl	8014ede <USB_HC_Halt>
 8008f02:	e2dd      	b.n	80094c0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	697a      	ldr	r2, [r7, #20]
 8008f0a:	b2d2      	uxtb	r2, r2
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f00b fa91 	bl	8014436 <USB_ReadChInterrupts>
 8008f14:	4603      	mov	r3, r0
 8008f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f1a:	2b40      	cmp	r3, #64	; 0x40
 8008f1c:	d12c      	bne.n	8008f78 <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	212c      	movs	r1, #44	; 0x2c
 8008f24:	fb01 f303 	mul.w	r3, r1, r3
 8008f28:	4413      	add	r3, r2
 8008f2a:	3361      	adds	r3, #97	; 0x61
 8008f2c:	2205      	movs	r2, #5
 8008f2e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	212c      	movs	r1, #44	; 0x2c
 8008f36:	fb01 f303 	mul.w	r3, r1, r3
 8008f3a:	4413      	add	r3, r2
 8008f3c:	333d      	adds	r3, #61	; 0x3d
 8008f3e:	2201      	movs	r2, #1
 8008f40:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	212c      	movs	r1, #44	; 0x2c
 8008f48:	fb01 f303 	mul.w	r3, r1, r3
 8008f4c:	4413      	add	r3, r2
 8008f4e:	335c      	adds	r3, #92	; 0x5c
 8008f50:	2200      	movs	r2, #0
 8008f52:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	697a      	ldr	r2, [r7, #20]
 8008f5a:	b2d2      	uxtb	r2, r2
 8008f5c:	4611      	mov	r1, r2
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f00b ffbd 	bl	8014ede <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	015a      	lsls	r2, r3, #5
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f70:	461a      	mov	r2, r3
 8008f72:	2340      	movs	r3, #64	; 0x40
 8008f74:	6093      	str	r3, [r2, #8]
 8008f76:	e2a3      	b.n	80094c0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	697a      	ldr	r2, [r7, #20]
 8008f7e:	b2d2      	uxtb	r2, r2
 8008f80:	4611      	mov	r1, r2
 8008f82:	4618      	mov	r0, r3
 8008f84:	f00b fa57 	bl	8014436 <USB_ReadChInterrupts>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	f003 0308 	and.w	r3, r3, #8
 8008f8e:	2b08      	cmp	r3, #8
 8008f90:	d11a      	bne.n	8008fc8 <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	015a      	lsls	r2, r3, #5
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	4413      	add	r3, r2
 8008f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	2308      	movs	r3, #8
 8008fa2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	212c      	movs	r1, #44	; 0x2c
 8008faa:	fb01 f303 	mul.w	r3, r1, r3
 8008fae:	4413      	add	r3, r2
 8008fb0:	3361      	adds	r3, #97	; 0x61
 8008fb2:	2206      	movs	r2, #6
 8008fb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	b2d2      	uxtb	r2, r2
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f00b ff8c 	bl	8014ede <USB_HC_Halt>
 8008fc6:	e27b      	b.n	80094c0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	697a      	ldr	r2, [r7, #20]
 8008fce:	b2d2      	uxtb	r2, r2
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f00b fa2f 	bl	8014436 <USB_ReadChInterrupts>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	f003 0310 	and.w	r3, r3, #16
 8008fde:	2b10      	cmp	r3, #16
 8008fe0:	d140      	bne.n	8009064 <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	212c      	movs	r1, #44	; 0x2c
 8008fe8:	fb01 f303 	mul.w	r3, r1, r3
 8008fec:	4413      	add	r3, r2
 8008fee:	335c      	adds	r3, #92	; 0x5c
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	212c      	movs	r1, #44	; 0x2c
 8008ffa:	fb01 f303 	mul.w	r3, r1, r3
 8008ffe:	4413      	add	r3, r2
 8009000:	3361      	adds	r3, #97	; 0x61
 8009002:	2204      	movs	r2, #4
 8009004:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	212c      	movs	r1, #44	; 0x2c
 800900c:	fb01 f303 	mul.w	r3, r1, r3
 8009010:	4413      	add	r3, r2
 8009012:	333d      	adds	r3, #61	; 0x3d
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d112      	bne.n	8009040 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	212c      	movs	r1, #44	; 0x2c
 8009020:	fb01 f303 	mul.w	r3, r1, r3
 8009024:	4413      	add	r3, r2
 8009026:	333c      	adds	r3, #60	; 0x3c
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d108      	bne.n	8009040 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	212c      	movs	r1, #44	; 0x2c
 8009034:	fb01 f303 	mul.w	r3, r1, r3
 8009038:	4413      	add	r3, r2
 800903a:	333d      	adds	r3, #61	; 0x3d
 800903c:	2201      	movs	r2, #1
 800903e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	697a      	ldr	r2, [r7, #20]
 8009046:	b2d2      	uxtb	r2, r2
 8009048:	4611      	mov	r1, r2
 800904a:	4618      	mov	r0, r3
 800904c:	f00b ff47 	bl	8014ede <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	015a      	lsls	r2, r3, #5
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	4413      	add	r3, r2
 8009058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800905c:	461a      	mov	r2, r3
 800905e:	2310      	movs	r3, #16
 8009060:	6093      	str	r3, [r2, #8]
 8009062:	e22d      	b.n	80094c0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	697a      	ldr	r2, [r7, #20]
 800906a:	b2d2      	uxtb	r2, r2
 800906c:	4611      	mov	r1, r2
 800906e:	4618      	mov	r0, r3
 8009070:	f00b f9e1 	bl	8014436 <USB_ReadChInterrupts>
 8009074:	4603      	mov	r3, r0
 8009076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800907a:	2b80      	cmp	r3, #128	; 0x80
 800907c:	d164      	bne.n	8009148 <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d111      	bne.n	80090aa <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	212c      	movs	r1, #44	; 0x2c
 800908c:	fb01 f303 	mul.w	r3, r1, r3
 8009090:	4413      	add	r3, r2
 8009092:	3361      	adds	r3, #97	; 0x61
 8009094:	2207      	movs	r2, #7
 8009096:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	b2d2      	uxtb	r2, r2
 80090a0:	4611      	mov	r1, r2
 80090a2:	4618      	mov	r0, r3
 80090a4:	f00b ff1b 	bl	8014ede <USB_HC_Halt>
 80090a8:	e044      	b.n	8009134 <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	212c      	movs	r1, #44	; 0x2c
 80090b0:	fb01 f303 	mul.w	r3, r1, r3
 80090b4:	4413      	add	r3, r2
 80090b6:	335c      	adds	r3, #92	; 0x5c
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	1c5a      	adds	r2, r3, #1
 80090bc:	6879      	ldr	r1, [r7, #4]
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	202c      	movs	r0, #44	; 0x2c
 80090c2:	fb00 f303 	mul.w	r3, r0, r3
 80090c6:	440b      	add	r3, r1
 80090c8:	335c      	adds	r3, #92	; 0x5c
 80090ca:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	212c      	movs	r1, #44	; 0x2c
 80090d2:	fb01 f303 	mul.w	r3, r1, r3
 80090d6:	4413      	add	r3, r2
 80090d8:	335c      	adds	r3, #92	; 0x5c
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d920      	bls.n	8009122 <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	212c      	movs	r1, #44	; 0x2c
 80090e6:	fb01 f303 	mul.w	r3, r1, r3
 80090ea:	4413      	add	r3, r2
 80090ec:	335c      	adds	r3, #92	; 0x5c
 80090ee:	2200      	movs	r2, #0
 80090f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	212c      	movs	r1, #44	; 0x2c
 80090f8:	fb01 f303 	mul.w	r3, r1, r3
 80090fc:	4413      	add	r3, r2
 80090fe:	3360      	adds	r3, #96	; 0x60
 8009100:	2204      	movs	r2, #4
 8009102:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	b2d9      	uxtb	r1, r3
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	202c      	movs	r0, #44	; 0x2c
 800910e:	fb00 f303 	mul.w	r3, r0, r3
 8009112:	4413      	add	r3, r2
 8009114:	3360      	adds	r3, #96	; 0x60
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	461a      	mov	r2, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f014 f9c6 	bl	801d4ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8009120:	e008      	b.n	8009134 <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	212c      	movs	r1, #44	; 0x2c
 8009128:	fb01 f303 	mul.w	r3, r1, r3
 800912c:	4413      	add	r3, r2
 800912e:	3360      	adds	r3, #96	; 0x60
 8009130:	2202      	movs	r2, #2
 8009132:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	015a      	lsls	r2, r3, #5
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	4413      	add	r3, r2
 800913c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009140:	461a      	mov	r2, r3
 8009142:	2380      	movs	r3, #128	; 0x80
 8009144:	6093      	str	r3, [r2, #8]
 8009146:	e1bb      	b.n	80094c0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	697a      	ldr	r2, [r7, #20]
 800914e:	b2d2      	uxtb	r2, r2
 8009150:	4611      	mov	r1, r2
 8009152:	4618      	mov	r0, r3
 8009154:	f00b f96f 	bl	8014436 <USB_ReadChInterrupts>
 8009158:	4603      	mov	r3, r0
 800915a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800915e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009162:	d11b      	bne.n	800919c <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	212c      	movs	r1, #44	; 0x2c
 800916a:	fb01 f303 	mul.w	r3, r1, r3
 800916e:	4413      	add	r3, r2
 8009170:	3361      	adds	r3, #97	; 0x61
 8009172:	2209      	movs	r2, #9
 8009174:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	b2d2      	uxtb	r2, r2
 800917e:	4611      	mov	r1, r2
 8009180:	4618      	mov	r0, r3
 8009182:	f00b feac 	bl	8014ede <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	015a      	lsls	r2, r3, #5
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	4413      	add	r3, r2
 800918e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009192:	461a      	mov	r2, r3
 8009194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009198:	6093      	str	r3, [r2, #8]
 800919a:	e191      	b.n	80094c0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	b2d2      	uxtb	r2, r2
 80091a4:	4611      	mov	r1, r2
 80091a6:	4618      	mov	r0, r3
 80091a8:	f00b f945 	bl	8014436 <USB_ReadChInterrupts>
 80091ac:	4603      	mov	r3, r0
 80091ae:	f003 0302 	and.w	r3, r3, #2
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	f040 8184 	bne.w	80094c0 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	015a      	lsls	r2, r3, #5
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	4413      	add	r3, r2
 80091c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091c4:	461a      	mov	r2, r3
 80091c6:	2302      	movs	r3, #2
 80091c8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	212c      	movs	r1, #44	; 0x2c
 80091d0:	fb01 f303 	mul.w	r3, r1, r3
 80091d4:	4413      	add	r3, r2
 80091d6:	3361      	adds	r3, #97	; 0x61
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	f040 8087 	bne.w	80092ee <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	212c      	movs	r1, #44	; 0x2c
 80091e6:	fb01 f303 	mul.w	r3, r1, r3
 80091ea:	4413      	add	r3, r2
 80091ec:	3361      	adds	r3, #97	; 0x61
 80091ee:	2202      	movs	r2, #2
 80091f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	212c      	movs	r1, #44	; 0x2c
 80091f8:	fb01 f303 	mul.w	r3, r1, r3
 80091fc:	4413      	add	r3, r2
 80091fe:	3360      	adds	r3, #96	; 0x60
 8009200:	2201      	movs	r2, #1
 8009202:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	212c      	movs	r1, #44	; 0x2c
 800920a:	fb01 f303 	mul.w	r3, r1, r3
 800920e:	4413      	add	r3, r2
 8009210:	333f      	adds	r3, #63	; 0x3f
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	2b02      	cmp	r3, #2
 8009216:	d00a      	beq.n	800922e <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	212c      	movs	r1, #44	; 0x2c
 800921e:	fb01 f303 	mul.w	r3, r1, r3
 8009222:	4413      	add	r3, r2
 8009224:	333f      	adds	r3, #63	; 0x3f
 8009226:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8009228:	2b03      	cmp	r3, #3
 800922a:	f040 8139 	bne.w	80094a0 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d113      	bne.n	800925e <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	212c      	movs	r1, #44	; 0x2c
 800923c:	fb01 f303 	mul.w	r3, r1, r3
 8009240:	4413      	add	r3, r2
 8009242:	3355      	adds	r3, #85	; 0x55
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	f083 0301 	eor.w	r3, r3, #1
 800924a:	b2d8      	uxtb	r0, r3
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	212c      	movs	r1, #44	; 0x2c
 8009252:	fb01 f303 	mul.w	r3, r1, r3
 8009256:	4413      	add	r3, r2
 8009258:	3355      	adds	r3, #85	; 0x55
 800925a:	4602      	mov	r2, r0
 800925c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	2b01      	cmp	r3, #1
 8009264:	f040 811c 	bne.w	80094a0 <HCD_HC_OUT_IRQHandler+0x772>
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	212c      	movs	r1, #44	; 0x2c
 800926e:	fb01 f303 	mul.w	r3, r1, r3
 8009272:	4413      	add	r3, r2
 8009274:	334c      	adds	r3, #76	; 0x4c
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	f000 8111 	beq.w	80094a0 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	212c      	movs	r1, #44	; 0x2c
 8009284:	fb01 f303 	mul.w	r3, r1, r3
 8009288:	4413      	add	r3, r2
 800928a:	334c      	adds	r3, #76	; 0x4c
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	6879      	ldr	r1, [r7, #4]
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	202c      	movs	r0, #44	; 0x2c
 8009294:	fb00 f202 	mul.w	r2, r0, r2
 8009298:	440a      	add	r2, r1
 800929a:	3240      	adds	r2, #64	; 0x40
 800929c:	8812      	ldrh	r2, [r2, #0]
 800929e:	4413      	add	r3, r2
 80092a0:	3b01      	subs	r3, #1
 80092a2:	6879      	ldr	r1, [r7, #4]
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	202c      	movs	r0, #44	; 0x2c
 80092a8:	fb00 f202 	mul.w	r2, r0, r2
 80092ac:	440a      	add	r2, r1
 80092ae:	3240      	adds	r2, #64	; 0x40
 80092b0:	8812      	ldrh	r2, [r2, #0]
 80092b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80092b6:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f003 0301 	and.w	r3, r3, #1
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f000 80ee 	beq.w	80094a0 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	212c      	movs	r1, #44	; 0x2c
 80092ca:	fb01 f303 	mul.w	r3, r1, r3
 80092ce:	4413      	add	r3, r2
 80092d0:	3355      	adds	r3, #85	; 0x55
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	f083 0301 	eor.w	r3, r3, #1
 80092d8:	b2d8      	uxtb	r0, r3
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	212c      	movs	r1, #44	; 0x2c
 80092e0:	fb01 f303 	mul.w	r3, r1, r3
 80092e4:	4413      	add	r3, r2
 80092e6:	3355      	adds	r3, #85	; 0x55
 80092e8:	4602      	mov	r2, r0
 80092ea:	701a      	strb	r2, [r3, #0]
 80092ec:	e0d8      	b.n	80094a0 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	212c      	movs	r1, #44	; 0x2c
 80092f4:	fb01 f303 	mul.w	r3, r1, r3
 80092f8:	4413      	add	r3, r2
 80092fa:	3361      	adds	r3, #97	; 0x61
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	2b03      	cmp	r3, #3
 8009300:	d109      	bne.n	8009316 <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	212c      	movs	r1, #44	; 0x2c
 8009308:	fb01 f303 	mul.w	r3, r1, r3
 800930c:	4413      	add	r3, r2
 800930e:	3361      	adds	r3, #97	; 0x61
 8009310:	2202      	movs	r2, #2
 8009312:	701a      	strb	r2, [r3, #0]
 8009314:	e0c4      	b.n	80094a0 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	212c      	movs	r1, #44	; 0x2c
 800931c:	fb01 f303 	mul.w	r3, r1, r3
 8009320:	4413      	add	r3, r2
 8009322:	3361      	adds	r3, #97	; 0x61
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	2b04      	cmp	r3, #4
 8009328:	d112      	bne.n	8009350 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	212c      	movs	r1, #44	; 0x2c
 8009330:	fb01 f303 	mul.w	r3, r1, r3
 8009334:	4413      	add	r3, r2
 8009336:	3361      	adds	r3, #97	; 0x61
 8009338:	2202      	movs	r2, #2
 800933a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	212c      	movs	r1, #44	; 0x2c
 8009342:	fb01 f303 	mul.w	r3, r1, r3
 8009346:	4413      	add	r3, r2
 8009348:	3360      	adds	r3, #96	; 0x60
 800934a:	2202      	movs	r2, #2
 800934c:	701a      	strb	r2, [r3, #0]
 800934e:	e0a7      	b.n	80094a0 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	212c      	movs	r1, #44	; 0x2c
 8009356:	fb01 f303 	mul.w	r3, r1, r3
 800935a:	4413      	add	r3, r2
 800935c:	3361      	adds	r3, #97	; 0x61
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	2b05      	cmp	r3, #5
 8009362:	d112      	bne.n	800938a <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	212c      	movs	r1, #44	; 0x2c
 800936a:	fb01 f303 	mul.w	r3, r1, r3
 800936e:	4413      	add	r3, r2
 8009370:	3361      	adds	r3, #97	; 0x61
 8009372:	2202      	movs	r2, #2
 8009374:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	212c      	movs	r1, #44	; 0x2c
 800937c:	fb01 f303 	mul.w	r3, r1, r3
 8009380:	4413      	add	r3, r2
 8009382:	3360      	adds	r3, #96	; 0x60
 8009384:	2202      	movs	r2, #2
 8009386:	701a      	strb	r2, [r3, #0]
 8009388:	e08a      	b.n	80094a0 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	212c      	movs	r1, #44	; 0x2c
 8009390:	fb01 f303 	mul.w	r3, r1, r3
 8009394:	4413      	add	r3, r2
 8009396:	3361      	adds	r3, #97	; 0x61
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	2b06      	cmp	r3, #6
 800939c:	d112      	bne.n	80093c4 <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	212c      	movs	r1, #44	; 0x2c
 80093a4:	fb01 f303 	mul.w	r3, r1, r3
 80093a8:	4413      	add	r3, r2
 80093aa:	3361      	adds	r3, #97	; 0x61
 80093ac:	2202      	movs	r2, #2
 80093ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	212c      	movs	r1, #44	; 0x2c
 80093b6:	fb01 f303 	mul.w	r3, r1, r3
 80093ba:	4413      	add	r3, r2
 80093bc:	3360      	adds	r3, #96	; 0x60
 80093be:	2205      	movs	r2, #5
 80093c0:	701a      	strb	r2, [r3, #0]
 80093c2:	e06d      	b.n	80094a0 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	212c      	movs	r1, #44	; 0x2c
 80093ca:	fb01 f303 	mul.w	r3, r1, r3
 80093ce:	4413      	add	r3, r2
 80093d0:	3361      	adds	r3, #97	; 0x61
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	2b07      	cmp	r3, #7
 80093d6:	d009      	beq.n	80093ec <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	212c      	movs	r1, #44	; 0x2c
 80093de:	fb01 f303 	mul.w	r3, r1, r3
 80093e2:	4413      	add	r3, r2
 80093e4:	3361      	adds	r3, #97	; 0x61
 80093e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80093e8:	2b09      	cmp	r3, #9
 80093ea:	d168      	bne.n	80094be <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	212c      	movs	r1, #44	; 0x2c
 80093f2:	fb01 f303 	mul.w	r3, r1, r3
 80093f6:	4413      	add	r3, r2
 80093f8:	3361      	adds	r3, #97	; 0x61
 80093fa:	2202      	movs	r2, #2
 80093fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	212c      	movs	r1, #44	; 0x2c
 8009404:	fb01 f303 	mul.w	r3, r1, r3
 8009408:	4413      	add	r3, r2
 800940a:	335c      	adds	r3, #92	; 0x5c
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	1c5a      	adds	r2, r3, #1
 8009410:	6879      	ldr	r1, [r7, #4]
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	202c      	movs	r0, #44	; 0x2c
 8009416:	fb00 f303 	mul.w	r3, r0, r3
 800941a:	440b      	add	r3, r1
 800941c:	335c      	adds	r3, #92	; 0x5c
 800941e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	212c      	movs	r1, #44	; 0x2c
 8009426:	fb01 f303 	mul.w	r3, r1, r3
 800942a:	4413      	add	r3, r2
 800942c:	335c      	adds	r3, #92	; 0x5c
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b02      	cmp	r3, #2
 8009432:	d912      	bls.n	800945a <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	212c      	movs	r1, #44	; 0x2c
 800943a:	fb01 f303 	mul.w	r3, r1, r3
 800943e:	4413      	add	r3, r2
 8009440:	335c      	adds	r3, #92	; 0x5c
 8009442:	2200      	movs	r2, #0
 8009444:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	212c      	movs	r1, #44	; 0x2c
 800944c:	fb01 f303 	mul.w	r3, r1, r3
 8009450:	4413      	add	r3, r2
 8009452:	3360      	adds	r3, #96	; 0x60
 8009454:	2204      	movs	r2, #4
 8009456:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009458:	e021      	b.n	800949e <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	212c      	movs	r1, #44	; 0x2c
 8009460:	fb01 f303 	mul.w	r3, r1, r3
 8009464:	4413      	add	r3, r2
 8009466:	3360      	adds	r3, #96	; 0x60
 8009468:	2202      	movs	r2, #2
 800946a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	015a      	lsls	r2, r3, #5
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	4413      	add	r3, r2
 8009474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009482:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800948a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	015a      	lsls	r2, r3, #5
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	4413      	add	r3, r2
 8009494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009498:	461a      	mov	r2, r3
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800949e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	b2d9      	uxtb	r1, r3
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	202c      	movs	r0, #44	; 0x2c
 80094aa:	fb00 f303 	mul.w	r3, r0, r3
 80094ae:	4413      	add	r3, r2
 80094b0:	3360      	adds	r3, #96	; 0x60
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	461a      	mov	r2, r3
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f013 fff8 	bl	801d4ac <HAL_HCD_HC_NotifyURBChange_Callback>
 80094bc:	e000      	b.n	80094c0 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 80094be:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80094c0:	3720      	adds	r7, #32
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b08a      	sub	sp, #40	; 0x28
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	6a1b      	ldr	r3, [r3, #32]
 80094de:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	f003 030f 	and.w	r3, r3, #15
 80094e6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	0c5b      	lsrs	r3, r3, #17
 80094ec:	f003 030f 	and.w	r3, r3, #15
 80094f0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	091b      	lsrs	r3, r3, #4
 80094f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80094fa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d004      	beq.n	800950c <HCD_RXQLVL_IRQHandler+0x46>
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	2b05      	cmp	r3, #5
 8009506:	f000 80a9 	beq.w	800965c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800950a:	e0aa      	b.n	8009662 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	2b00      	cmp	r3, #0
 8009510:	f000 80a6 	beq.w	8009660 <HCD_RXQLVL_IRQHandler+0x19a>
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	212c      	movs	r1, #44	; 0x2c
 800951a:	fb01 f303 	mul.w	r3, r1, r3
 800951e:	4413      	add	r3, r2
 8009520:	3344      	adds	r3, #68	; 0x44
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 809b 	beq.w	8009660 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	212c      	movs	r1, #44	; 0x2c
 8009530:	fb01 f303 	mul.w	r3, r1, r3
 8009534:	4413      	add	r3, r2
 8009536:	3350      	adds	r3, #80	; 0x50
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	441a      	add	r2, r3
 800953e:	6879      	ldr	r1, [r7, #4]
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	202c      	movs	r0, #44	; 0x2c
 8009544:	fb00 f303 	mul.w	r3, r0, r3
 8009548:	440b      	add	r3, r1
 800954a:	334c      	adds	r3, #76	; 0x4c
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	429a      	cmp	r2, r3
 8009550:	d87a      	bhi.n	8009648 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6818      	ldr	r0, [r3, #0]
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	212c      	movs	r1, #44	; 0x2c
 800955c:	fb01 f303 	mul.w	r3, r1, r3
 8009560:	4413      	add	r3, r2
 8009562:	3344      	adds	r3, #68	; 0x44
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	b292      	uxth	r2, r2
 800956a:	4619      	mov	r1, r3
 800956c:	f00a fdbc 	bl	80140e8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	212c      	movs	r1, #44	; 0x2c
 8009576:	fb01 f303 	mul.w	r3, r1, r3
 800957a:	4413      	add	r3, r2
 800957c:	3344      	adds	r3, #68	; 0x44
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	441a      	add	r2, r3
 8009584:	6879      	ldr	r1, [r7, #4]
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	202c      	movs	r0, #44	; 0x2c
 800958a:	fb00 f303 	mul.w	r3, r0, r3
 800958e:	440b      	add	r3, r1
 8009590:	3344      	adds	r3, #68	; 0x44
 8009592:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	212c      	movs	r1, #44	; 0x2c
 800959a:	fb01 f303 	mul.w	r3, r1, r3
 800959e:	4413      	add	r3, r2
 80095a0:	3350      	adds	r3, #80	; 0x50
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	441a      	add	r2, r3
 80095a8:	6879      	ldr	r1, [r7, #4]
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	202c      	movs	r0, #44	; 0x2c
 80095ae:	fb00 f303 	mul.w	r3, r0, r3
 80095b2:	440b      	add	r3, r1
 80095b4:	3350      	adds	r3, #80	; 0x50
 80095b6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	015a      	lsls	r2, r3, #5
 80095bc:	6a3b      	ldr	r3, [r7, #32]
 80095be:	4413      	add	r3, r2
 80095c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095c4:	691b      	ldr	r3, [r3, #16]
 80095c6:	0cdb      	lsrs	r3, r3, #19
 80095c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095cc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	212c      	movs	r1, #44	; 0x2c
 80095d4:	fb01 f303 	mul.w	r3, r1, r3
 80095d8:	4413      	add	r3, r2
 80095da:	3340      	adds	r3, #64	; 0x40
 80095dc:	881b      	ldrh	r3, [r3, #0]
 80095de:	461a      	mov	r2, r3
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d13c      	bne.n	8009660 <HCD_RXQLVL_IRQHandler+0x19a>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d039      	beq.n	8009660 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009602:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800960a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	015a      	lsls	r2, r3, #5
 8009610:	6a3b      	ldr	r3, [r7, #32]
 8009612:	4413      	add	r3, r2
 8009614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009618:	461a      	mov	r2, r3
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	212c      	movs	r1, #44	; 0x2c
 8009624:	fb01 f303 	mul.w	r3, r1, r3
 8009628:	4413      	add	r3, r2
 800962a:	3354      	adds	r3, #84	; 0x54
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	f083 0301 	eor.w	r3, r3, #1
 8009632:	b2d8      	uxtb	r0, r3
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	212c      	movs	r1, #44	; 0x2c
 800963a:	fb01 f303 	mul.w	r3, r1, r3
 800963e:	4413      	add	r3, r2
 8009640:	3354      	adds	r3, #84	; 0x54
 8009642:	4602      	mov	r2, r0
 8009644:	701a      	strb	r2, [r3, #0]
      break;
 8009646:	e00b      	b.n	8009660 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	212c      	movs	r1, #44	; 0x2c
 800964e:	fb01 f303 	mul.w	r3, r1, r3
 8009652:	4413      	add	r3, r2
 8009654:	3360      	adds	r3, #96	; 0x60
 8009656:	2204      	movs	r2, #4
 8009658:	701a      	strb	r2, [r3, #0]
      break;
 800965a:	e001      	b.n	8009660 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800965c:	bf00      	nop
 800965e:	e000      	b.n	8009662 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8009660:	bf00      	nop
  }
}
 8009662:	bf00      	nop
 8009664:	3728      	adds	r7, #40	; 0x28
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}

0800966a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b086      	sub	sp, #24
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009696:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f003 0302 	and.w	r3, r3, #2
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d10b      	bne.n	80096ba <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f003 0301 	and.w	r3, r3, #1
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d102      	bne.n	80096b2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f013 fee1 	bl	801d474 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	f043 0302 	orr.w	r3, r3, #2
 80096b8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f003 0308 	and.w	r3, r3, #8
 80096c0:	2b08      	cmp	r3, #8
 80096c2:	d132      	bne.n	800972a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	f043 0308 	orr.w	r3, r3, #8
 80096ca:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f003 0304 	and.w	r3, r3, #4
 80096d2:	2b04      	cmp	r3, #4
 80096d4:	d126      	bne.n	8009724 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	699b      	ldr	r3, [r3, #24]
 80096da:	2b02      	cmp	r3, #2
 80096dc:	d113      	bne.n	8009706 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80096e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80096e8:	d106      	bne.n	80096f8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2102      	movs	r1, #2
 80096f0:	4618      	mov	r0, r3
 80096f2:	f00b f8b9 	bl	8014868 <USB_InitFSLSPClkSel>
 80096f6:	e011      	b.n	800971c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2101      	movs	r1, #1
 80096fe:	4618      	mov	r0, r3
 8009700:	f00b f8b2 	bl	8014868 <USB_InitFSLSPClkSel>
 8009704:	e00a      	b.n	800971c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	2b01      	cmp	r3, #1
 800970c:	d106      	bne.n	800971c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009714:	461a      	mov	r2, r3
 8009716:	f64e 2360 	movw	r3, #60000	; 0xea60
 800971a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f013 fed7 	bl	801d4d0 <HAL_HCD_PortEnabled_Callback>
 8009722:	e002      	b.n	800972a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f013 fee1 	bl	801d4ec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f003 0320 	and.w	r3, r3, #32
 8009730:	2b20      	cmp	r3, #32
 8009732:	d103      	bne.n	800973c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	f043 0320 	orr.w	r3, r3, #32
 800973a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009742:	461a      	mov	r2, r3
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	6013      	str	r3, [r2, #0]
}
 8009748:	bf00      	nop
 800974a:	3718      	adds	r7, #24
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d101      	bne.n	8009762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	e07f      	b.n	8009862 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009768:	b2db      	uxtb	r3, r3
 800976a:	2b00      	cmp	r3, #0
 800976c:	d106      	bne.n	800977c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f7f9 fa56 	bl	8002c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2224      	movs	r2, #36	; 0x24
 8009780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f022 0201 	bic.w	r2, r2, #1
 8009792:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	685a      	ldr	r2, [r3, #4]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80097a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	689a      	ldr	r2, [r3, #8]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80097b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d107      	bne.n	80097ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	689a      	ldr	r2, [r3, #8]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097c6:	609a      	str	r2, [r3, #8]
 80097c8:	e006      	b.n	80097d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	689a      	ldr	r2, [r3, #8]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80097d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d104      	bne.n	80097ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	6859      	ldr	r1, [r3, #4]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	4b1d      	ldr	r3, [pc, #116]	; (800986c <HAL_I2C_Init+0x11c>)
 80097f6:	430b      	orrs	r3, r1
 80097f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	68da      	ldr	r2, [r3, #12]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009808:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	691a      	ldr	r2, [r3, #16]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	699b      	ldr	r3, [r3, #24]
 800981a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	430a      	orrs	r2, r1
 8009822:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	69d9      	ldr	r1, [r3, #28]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a1a      	ldr	r2, [r3, #32]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	430a      	orrs	r2, r1
 8009832:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f042 0201 	orr.w	r2, r2, #1
 8009842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2220      	movs	r2, #32
 800984e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	02008000 	.word	0x02008000

08009870 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d101      	bne.n	8009882 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e021      	b.n	80098c6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2224      	movs	r2, #36	; 0x24
 8009886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f022 0201 	bic.w	r2, r2, #1
 8009898:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f7f9 fa6c 	bl	8002d78 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3708      	adds	r7, #8
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
	...

080098d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b088      	sub	sp, #32
 80098d4:	af02      	add	r7, sp, #8
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	4608      	mov	r0, r1
 80098da:	4611      	mov	r1, r2
 80098dc:	461a      	mov	r2, r3
 80098de:	4603      	mov	r3, r0
 80098e0:	817b      	strh	r3, [r7, #10]
 80098e2:	460b      	mov	r3, r1
 80098e4:	813b      	strh	r3, [r7, #8]
 80098e6:	4613      	mov	r3, r2
 80098e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	2b20      	cmp	r3, #32
 80098f4:	f040 80f9 	bne.w	8009aea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80098f8:	6a3b      	ldr	r3, [r7, #32]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d002      	beq.n	8009904 <HAL_I2C_Mem_Write+0x34>
 80098fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009900:	2b00      	cmp	r3, #0
 8009902:	d105      	bne.n	8009910 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800990a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800990c:	2301      	movs	r3, #1
 800990e:	e0ed      	b.n	8009aec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009916:	2b01      	cmp	r3, #1
 8009918:	d101      	bne.n	800991e <HAL_I2C_Mem_Write+0x4e>
 800991a:	2302      	movs	r3, #2
 800991c:	e0e6      	b.n	8009aec <HAL_I2C_Mem_Write+0x21c>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009926:	f7fc f8f3 	bl	8005b10 <HAL_GetTick>
 800992a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	9300      	str	r3, [sp, #0]
 8009930:	2319      	movs	r3, #25
 8009932:	2201      	movs	r2, #1
 8009934:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f000 fac3 	bl	8009ec4 <I2C_WaitOnFlagUntilTimeout>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d001      	beq.n	8009948 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e0d1      	b.n	8009aec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2221      	movs	r2, #33	; 0x21
 800994c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2240      	movs	r2, #64	; 0x40
 8009954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6a3a      	ldr	r2, [r7, #32]
 8009962:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009968:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009970:	88f8      	ldrh	r0, [r7, #6]
 8009972:	893a      	ldrh	r2, [r7, #8]
 8009974:	8979      	ldrh	r1, [r7, #10]
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	9301      	str	r3, [sp, #4]
 800997a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997c:	9300      	str	r3, [sp, #0]
 800997e:	4603      	mov	r3, r0
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f000 f9d3 	bl	8009d2c <I2C_RequestMemoryWrite>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d005      	beq.n	8009998 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2200      	movs	r2, #0
 8009990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	e0a9      	b.n	8009aec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800999c:	b29b      	uxth	r3, r3
 800999e:	2bff      	cmp	r3, #255	; 0xff
 80099a0:	d90e      	bls.n	80099c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	22ff      	movs	r2, #255	; 0xff
 80099a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099ac:	b2da      	uxtb	r2, r3
 80099ae:	8979      	ldrh	r1, [r7, #10]
 80099b0:	2300      	movs	r3, #0
 80099b2:	9300      	str	r3, [sp, #0]
 80099b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f000 fc1f 	bl	800a1fc <I2C_TransferConfig>
 80099be:	e00f      	b.n	80099e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099ce:	b2da      	uxtb	r2, r3
 80099d0:	8979      	ldrh	r1, [r7, #10]
 80099d2:	2300      	movs	r3, #0
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f000 fc0e 	bl	800a1fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099e0:	697a      	ldr	r2, [r7, #20]
 80099e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f000 faad 	bl	8009f44 <I2C_WaitOnTXISFlagUntilTimeout>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d001      	beq.n	80099f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e07b      	b.n	8009aec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f8:	781a      	ldrb	r2, [r3, #0]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a04:	1c5a      	adds	r2, r3, #1
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	3b01      	subs	r3, #1
 8009a12:	b29a      	uxth	r2, r3
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d034      	beq.n	8009a98 <HAL_I2C_Mem_Write+0x1c8>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d130      	bne.n	8009a98 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	2180      	movs	r1, #128	; 0x80
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f000 fa3f 	bl	8009ec4 <I2C_WaitOnFlagUntilTimeout>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d001      	beq.n	8009a50 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e04d      	b.n	8009aec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	2bff      	cmp	r3, #255	; 0xff
 8009a58:	d90e      	bls.n	8009a78 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	22ff      	movs	r2, #255	; 0xff
 8009a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a64:	b2da      	uxtb	r2, r3
 8009a66:	8979      	ldrh	r1, [r7, #10]
 8009a68:	2300      	movs	r3, #0
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f000 fbc3 	bl	800a1fc <I2C_TransferConfig>
 8009a76:	e00f      	b.n	8009a98 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a86:	b2da      	uxtb	r2, r3
 8009a88:	8979      	ldrh	r1, [r7, #10]
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	9300      	str	r3, [sp, #0]
 8009a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 fbb2 	bl	800a1fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d19e      	bne.n	80099e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009aa2:	697a      	ldr	r2, [r7, #20]
 8009aa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f000 fa8c 	bl	8009fc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d001      	beq.n	8009ab6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e01a      	b.n	8009aec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2220      	movs	r2, #32
 8009abc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	6859      	ldr	r1, [r3, #4]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	4b0a      	ldr	r3, [pc, #40]	; (8009af4 <HAL_I2C_Mem_Write+0x224>)
 8009aca:	400b      	ands	r3, r1
 8009acc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2220      	movs	r2, #32
 8009ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	e000      	b.n	8009aec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009aea:	2302      	movs	r3, #2
  }
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3718      	adds	r7, #24
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	fe00e800 	.word	0xfe00e800

08009af8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b088      	sub	sp, #32
 8009afc:	af02      	add	r7, sp, #8
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	4608      	mov	r0, r1
 8009b02:	4611      	mov	r1, r2
 8009b04:	461a      	mov	r2, r3
 8009b06:	4603      	mov	r3, r0
 8009b08:	817b      	strh	r3, [r7, #10]
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	813b      	strh	r3, [r7, #8]
 8009b0e:	4613      	mov	r3, r2
 8009b10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	2b20      	cmp	r3, #32
 8009b1c:	f040 80fd 	bne.w	8009d1a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b20:	6a3b      	ldr	r3, [r7, #32]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d002      	beq.n	8009b2c <HAL_I2C_Mem_Read+0x34>
 8009b26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d105      	bne.n	8009b38 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b32:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	e0f1      	b.n	8009d1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d101      	bne.n	8009b46 <HAL_I2C_Mem_Read+0x4e>
 8009b42:	2302      	movs	r3, #2
 8009b44:	e0ea      	b.n	8009d1c <HAL_I2C_Mem_Read+0x224>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009b4e:	f7fb ffdf 	bl	8005b10 <HAL_GetTick>
 8009b52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	9300      	str	r3, [sp, #0]
 8009b58:	2319      	movs	r3, #25
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f000 f9af 	bl	8009ec4 <I2C_WaitOnFlagUntilTimeout>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d001      	beq.n	8009b70 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e0d5      	b.n	8009d1c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2222      	movs	r2, #34	; 0x22
 8009b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2240      	movs	r2, #64	; 0x40
 8009b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2200      	movs	r2, #0
 8009b84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6a3a      	ldr	r2, [r7, #32]
 8009b8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009b90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2200      	movs	r2, #0
 8009b96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009b98:	88f8      	ldrh	r0, [r7, #6]
 8009b9a:	893a      	ldrh	r2, [r7, #8]
 8009b9c:	8979      	ldrh	r1, [r7, #10]
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	9301      	str	r3, [sp, #4]
 8009ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f000 f913 	bl	8009dd4 <I2C_RequestMemoryRead>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d005      	beq.n	8009bc0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e0ad      	b.n	8009d1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	2bff      	cmp	r3, #255	; 0xff
 8009bc8:	d90e      	bls.n	8009be8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	22ff      	movs	r2, #255	; 0xff
 8009bce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	8979      	ldrh	r1, [r7, #10]
 8009bd8:	4b52      	ldr	r3, [pc, #328]	; (8009d24 <HAL_I2C_Mem_Read+0x22c>)
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f000 fb0b 	bl	800a1fc <I2C_TransferConfig>
 8009be6:	e00f      	b.n	8009c08 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bf6:	b2da      	uxtb	r2, r3
 8009bf8:	8979      	ldrh	r1, [r7, #10]
 8009bfa:	4b4a      	ldr	r3, [pc, #296]	; (8009d24 <HAL_I2C_Mem_Read+0x22c>)
 8009bfc:	9300      	str	r3, [sp, #0]
 8009bfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f000 fafa 	bl	800a1fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	9300      	str	r3, [sp, #0]
 8009c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0e:	2200      	movs	r2, #0
 8009c10:	2104      	movs	r1, #4
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f000 f956 	bl	8009ec4 <I2C_WaitOnFlagUntilTimeout>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d001      	beq.n	8009c22 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e07c      	b.n	8009d1c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2c:	b2d2      	uxtb	r2, r2
 8009c2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c34:	1c5a      	adds	r2, r3, #1
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	b29a      	uxth	r2, r3
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d034      	beq.n	8009cc8 <HAL_I2C_Mem_Read+0x1d0>
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d130      	bne.n	8009cc8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	2180      	movs	r1, #128	; 0x80
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f000 f927 	bl	8009ec4 <I2C_WaitOnFlagUntilTimeout>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d001      	beq.n	8009c80 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e04d      	b.n	8009d1c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	2bff      	cmp	r3, #255	; 0xff
 8009c88:	d90e      	bls.n	8009ca8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	22ff      	movs	r2, #255	; 0xff
 8009c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c94:	b2da      	uxtb	r2, r3
 8009c96:	8979      	ldrh	r1, [r7, #10]
 8009c98:	2300      	movs	r3, #0
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f000 faab 	bl	800a1fc <I2C_TransferConfig>
 8009ca6:	e00f      	b.n	8009cc8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cac:	b29a      	uxth	r2, r3
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cb6:	b2da      	uxtb	r2, r3
 8009cb8:	8979      	ldrh	r1, [r7, #10]
 8009cba:	2300      	movs	r3, #0
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	f000 fa9a 	bl	800a1fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d19a      	bne.n	8009c08 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009cd2:	697a      	ldr	r2, [r7, #20]
 8009cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f000 f974 	bl	8009fc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e01a      	b.n	8009d1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2220      	movs	r2, #32
 8009cec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	6859      	ldr	r1, [r3, #4]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	4b0b      	ldr	r3, [pc, #44]	; (8009d28 <HAL_I2C_Mem_Read+0x230>)
 8009cfa:	400b      	ands	r3, r1
 8009cfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2220      	movs	r2, #32
 8009d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d16:	2300      	movs	r3, #0
 8009d18:	e000      	b.n	8009d1c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009d1a:	2302      	movs	r3, #2
  }
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3718      	adds	r7, #24
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	80002400 	.word	0x80002400
 8009d28:	fe00e800 	.word	0xfe00e800

08009d2c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b086      	sub	sp, #24
 8009d30:	af02      	add	r7, sp, #8
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	4608      	mov	r0, r1
 8009d36:	4611      	mov	r1, r2
 8009d38:	461a      	mov	r2, r3
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	817b      	strh	r3, [r7, #10]
 8009d3e:	460b      	mov	r3, r1
 8009d40:	813b      	strh	r3, [r7, #8]
 8009d42:	4613      	mov	r3, r2
 8009d44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009d46:	88fb      	ldrh	r3, [r7, #6]
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	8979      	ldrh	r1, [r7, #10]
 8009d4c:	4b20      	ldr	r3, [pc, #128]	; (8009dd0 <I2C_RequestMemoryWrite+0xa4>)
 8009d4e:	9300      	str	r3, [sp, #0]
 8009d50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f000 fa51 	bl	800a1fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d5a:	69fa      	ldr	r2, [r7, #28]
 8009d5c:	69b9      	ldr	r1, [r7, #24]
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f000 f8f0 	bl	8009f44 <I2C_WaitOnTXISFlagUntilTimeout>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d001      	beq.n	8009d6e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e02c      	b.n	8009dc8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009d6e:	88fb      	ldrh	r3, [r7, #6]
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d105      	bne.n	8009d80 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009d74:	893b      	ldrh	r3, [r7, #8]
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	629a      	str	r2, [r3, #40]	; 0x28
 8009d7e:	e015      	b.n	8009dac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009d80:	893b      	ldrh	r3, [r7, #8]
 8009d82:	0a1b      	lsrs	r3, r3, #8
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	b2da      	uxtb	r2, r3
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d8e:	69fa      	ldr	r2, [r7, #28]
 8009d90:	69b9      	ldr	r1, [r7, #24]
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	f000 f8d6 	bl	8009f44 <I2C_WaitOnTXISFlagUntilTimeout>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d001      	beq.n	8009da2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e012      	b.n	8009dc8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009da2:	893b      	ldrh	r3, [r7, #8]
 8009da4:	b2da      	uxtb	r2, r3
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	2200      	movs	r2, #0
 8009db4:	2180      	movs	r1, #128	; 0x80
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 f884 	bl	8009ec4 <I2C_WaitOnFlagUntilTimeout>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e000      	b.n	8009dc8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	80002000 	.word	0x80002000

08009dd4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af02      	add	r7, sp, #8
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	4608      	mov	r0, r1
 8009dde:	4611      	mov	r1, r2
 8009de0:	461a      	mov	r2, r3
 8009de2:	4603      	mov	r3, r0
 8009de4:	817b      	strh	r3, [r7, #10]
 8009de6:	460b      	mov	r3, r1
 8009de8:	813b      	strh	r3, [r7, #8]
 8009dea:	4613      	mov	r3, r2
 8009dec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009dee:	88fb      	ldrh	r3, [r7, #6]
 8009df0:	b2da      	uxtb	r2, r3
 8009df2:	8979      	ldrh	r1, [r7, #10]
 8009df4:	4b20      	ldr	r3, [pc, #128]	; (8009e78 <I2C_RequestMemoryRead+0xa4>)
 8009df6:	9300      	str	r3, [sp, #0]
 8009df8:	2300      	movs	r3, #0
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f000 f9fe 	bl	800a1fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e00:	69fa      	ldr	r2, [r7, #28]
 8009e02:	69b9      	ldr	r1, [r7, #24]
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f000 f89d 	bl	8009f44 <I2C_WaitOnTXISFlagUntilTimeout>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d001      	beq.n	8009e14 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	e02c      	b.n	8009e6e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e14:	88fb      	ldrh	r3, [r7, #6]
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d105      	bne.n	8009e26 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009e1a:	893b      	ldrh	r3, [r7, #8]
 8009e1c:	b2da      	uxtb	r2, r3
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	629a      	str	r2, [r3, #40]	; 0x28
 8009e24:	e015      	b.n	8009e52 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009e26:	893b      	ldrh	r3, [r7, #8]
 8009e28:	0a1b      	lsrs	r3, r3, #8
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	b2da      	uxtb	r2, r3
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e34:	69fa      	ldr	r2, [r7, #28]
 8009e36:	69b9      	ldr	r1, [r7, #24]
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	f000 f883 	bl	8009f44 <I2C_WaitOnTXISFlagUntilTimeout>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d001      	beq.n	8009e48 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	e012      	b.n	8009e6e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009e48:	893b      	ldrh	r3, [r7, #8]
 8009e4a:	b2da      	uxtb	r2, r3
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009e52:	69fb      	ldr	r3, [r7, #28]
 8009e54:	9300      	str	r3, [sp, #0]
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	2140      	movs	r1, #64	; 0x40
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f000 f831 	bl	8009ec4 <I2C_WaitOnFlagUntilTimeout>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d001      	beq.n	8009e6c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e000      	b.n	8009e6e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	80002000 	.word	0x80002000

08009e7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	699b      	ldr	r3, [r3, #24]
 8009e8a:	f003 0302 	and.w	r3, r3, #2
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	d103      	bne.n	8009e9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2200      	movs	r2, #0
 8009e98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	f003 0301 	and.w	r3, r3, #1
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d007      	beq.n	8009eb8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	699a      	ldr	r2, [r3, #24]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f042 0201 	orr.w	r2, r2, #1
 8009eb6:	619a      	str	r2, [r3, #24]
  }
}
 8009eb8:	bf00      	nop
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	603b      	str	r3, [r7, #0]
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ed4:	e022      	b.n	8009f1c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009edc:	d01e      	beq.n	8009f1c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ede:	f7fb fe17 	bl	8005b10 <HAL_GetTick>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	69bb      	ldr	r3, [r7, #24]
 8009ee6:	1ad3      	subs	r3, r2, r3
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d302      	bcc.n	8009ef4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d113      	bne.n	8009f1c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ef8:	f043 0220 	orr.w	r2, r3, #32
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2220      	movs	r2, #32
 8009f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e00f      	b.n	8009f3c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	699a      	ldr	r2, [r3, #24]
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	4013      	ands	r3, r2
 8009f26:	68ba      	ldr	r2, [r7, #8]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	bf0c      	ite	eq
 8009f2c:	2301      	moveq	r3, #1
 8009f2e:	2300      	movne	r3, #0
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	461a      	mov	r2, r3
 8009f34:	79fb      	ldrb	r3, [r7, #7]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d0cd      	beq.n	8009ed6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009f50:	e02c      	b.n	8009fac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	68b9      	ldr	r1, [r7, #8]
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f000 f870 	bl	800a03c <I2C_IsErrorOccurred>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d001      	beq.n	8009f66 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	e02a      	b.n	8009fbc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f6c:	d01e      	beq.n	8009fac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f6e:	f7fb fdcf 	bl	8005b10 <HAL_GetTick>
 8009f72:	4602      	mov	r2, r0
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	1ad3      	subs	r3, r2, r3
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d302      	bcc.n	8009f84 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d113      	bne.n	8009fac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f88:	f043 0220 	orr.w	r2, r3, #32
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2220      	movs	r2, #32
 8009f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e007      	b.n	8009fbc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	699b      	ldr	r3, [r3, #24]
 8009fb2:	f003 0302 	and.w	r3, r3, #2
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	d1cb      	bne.n	8009f52 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009fd0:	e028      	b.n	800a024 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	68b9      	ldr	r1, [r7, #8]
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f000 f830 	bl	800a03c <I2C_IsErrorOccurred>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d001      	beq.n	8009fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e026      	b.n	800a034 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fe6:	f7fb fd93 	bl	8005b10 <HAL_GetTick>
 8009fea:	4602      	mov	r2, r0
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	1ad3      	subs	r3, r2, r3
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d302      	bcc.n	8009ffc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d113      	bne.n	800a024 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a000:	f043 0220 	orr.w	r2, r3, #32
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2220      	movs	r2, #32
 800a00c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2200      	movs	r2, #0
 800a014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	e007      	b.n	800a034 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	699b      	ldr	r3, [r3, #24]
 800a02a:	f003 0320 	and.w	r3, r3, #32
 800a02e:	2b20      	cmp	r3, #32
 800a030:	d1cf      	bne.n	8009fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b08a      	sub	sp, #40	; 0x28
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a048:	2300      	movs	r3, #0
 800a04a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	699b      	ldr	r3, [r3, #24]
 800a054:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a056:	2300      	movs	r3, #0
 800a058:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	f003 0310 	and.w	r3, r3, #16
 800a064:	2b00      	cmp	r3, #0
 800a066:	d068      	beq.n	800a13a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2210      	movs	r2, #16
 800a06e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a070:	e049      	b.n	800a106 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a078:	d045      	beq.n	800a106 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a07a:	f7fb fd49 	bl	8005b10 <HAL_GetTick>
 800a07e:	4602      	mov	r2, r0
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	1ad3      	subs	r3, r2, r3
 800a084:	68ba      	ldr	r2, [r7, #8]
 800a086:	429a      	cmp	r2, r3
 800a088:	d302      	bcc.n	800a090 <I2C_IsErrorOccurred+0x54>
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d13a      	bne.n	800a106 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a09a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a0a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	699b      	ldr	r3, [r3, #24]
 800a0aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0b2:	d121      	bne.n	800a0f8 <I2C_IsErrorOccurred+0xbc>
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0ba:	d01d      	beq.n	800a0f8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a0bc:	7cfb      	ldrb	r3, [r7, #19]
 800a0be:	2b20      	cmp	r3, #32
 800a0c0:	d01a      	beq.n	800a0f8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	685a      	ldr	r2, [r3, #4]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0d0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a0d2:	f7fb fd1d 	bl	8005b10 <HAL_GetTick>
 800a0d6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a0d8:	e00e      	b.n	800a0f8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a0da:	f7fb fd19 	bl	8005b10 <HAL_GetTick>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	1ad3      	subs	r3, r2, r3
 800a0e4:	2b19      	cmp	r3, #25
 800a0e6:	d907      	bls.n	800a0f8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800a0e8:	6a3b      	ldr	r3, [r7, #32]
 800a0ea:	f043 0320 	orr.w	r3, r3, #32
 800a0ee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800a0f6:	e006      	b.n	800a106 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	699b      	ldr	r3, [r3, #24]
 800a0fe:	f003 0320 	and.w	r3, r3, #32
 800a102:	2b20      	cmp	r3, #32
 800a104:	d1e9      	bne.n	800a0da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	699b      	ldr	r3, [r3, #24]
 800a10c:	f003 0320 	and.w	r3, r3, #32
 800a110:	2b20      	cmp	r3, #32
 800a112:	d003      	beq.n	800a11c <I2C_IsErrorOccurred+0xe0>
 800a114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d0aa      	beq.n	800a072 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a11c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a120:	2b00      	cmp	r3, #0
 800a122:	d103      	bne.n	800a12c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2220      	movs	r2, #32
 800a12a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a12c:	6a3b      	ldr	r3, [r7, #32]
 800a12e:	f043 0304 	orr.w	r3, r3, #4
 800a132:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00b      	beq.n	800a164 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a14c:	6a3b      	ldr	r3, [r7, #32]
 800a14e:	f043 0301 	orr.w	r3, r3, #1
 800a152:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a15c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00b      	beq.n	800a186 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a16e:	6a3b      	ldr	r3, [r7, #32]
 800a170:	f043 0308 	orr.w	r3, r3, #8
 800a174:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a17e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00b      	beq.n	800a1a8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a190:	6a3b      	ldr	r3, [r7, #32]
 800a192:	f043 0302 	orr.w	r3, r3, #2
 800a196:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a1a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d01c      	beq.n	800a1ea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f7ff fe63 	bl	8009e7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	6859      	ldr	r1, [r3, #4]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	4b0d      	ldr	r3, [pc, #52]	; (800a1f8 <I2C_IsErrorOccurred+0x1bc>)
 800a1c2:	400b      	ands	r3, r1
 800a1c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	431a      	orrs	r2, r3
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2220      	movs	r2, #32
 800a1d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a1ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3728      	adds	r7, #40	; 0x28
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	fe00e800 	.word	0xfe00e800

0800a1fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b087      	sub	sp, #28
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	607b      	str	r3, [r7, #4]
 800a206:	460b      	mov	r3, r1
 800a208:	817b      	strh	r3, [r7, #10]
 800a20a:	4613      	mov	r3, r2
 800a20c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a20e:	897b      	ldrh	r3, [r7, #10]
 800a210:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a214:	7a7b      	ldrb	r3, [r7, #9]
 800a216:	041b      	lsls	r3, r3, #16
 800a218:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a21c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a222:	6a3b      	ldr	r3, [r7, #32]
 800a224:	4313      	orrs	r3, r2
 800a226:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a22a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	685a      	ldr	r2, [r3, #4]
 800a232:	6a3b      	ldr	r3, [r7, #32]
 800a234:	0d5b      	lsrs	r3, r3, #21
 800a236:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a23a:	4b08      	ldr	r3, [pc, #32]	; (800a25c <I2C_TransferConfig+0x60>)
 800a23c:	430b      	orrs	r3, r1
 800a23e:	43db      	mvns	r3, r3
 800a240:	ea02 0103 	and.w	r1, r2, r3
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	697a      	ldr	r2, [r7, #20]
 800a24a:	430a      	orrs	r2, r1
 800a24c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a24e:	bf00      	nop
 800a250:	371c      	adds	r7, #28
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	03ff63ff 	.word	0x03ff63ff

0800a260 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a270:	b2db      	uxtb	r3, r3
 800a272:	2b20      	cmp	r3, #32
 800a274:	d138      	bne.n	800a2e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d101      	bne.n	800a284 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a280:	2302      	movs	r3, #2
 800a282:	e032      	b.n	800a2ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2224      	movs	r2, #36	; 0x24
 800a290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f022 0201 	bic.w	r2, r2, #1
 800a2a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a2b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	6819      	ldr	r1, [r3, #0]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	683a      	ldr	r2, [r7, #0]
 800a2c0:	430a      	orrs	r2, r1
 800a2c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f042 0201 	orr.w	r2, r2, #1
 800a2d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2220      	movs	r2, #32
 800a2d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	e000      	b.n	800a2ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a2e8:	2302      	movs	r3, #2
  }
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	370c      	adds	r7, #12
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a2f6:	b480      	push	{r7}
 800a2f8:	b085      	sub	sp, #20
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
 800a2fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a306:	b2db      	uxtb	r3, r3
 800a308:	2b20      	cmp	r3, #32
 800a30a:	d139      	bne.n	800a380 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a312:	2b01      	cmp	r3, #1
 800a314:	d101      	bne.n	800a31a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a316:	2302      	movs	r3, #2
 800a318:	e033      	b.n	800a382 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2201      	movs	r2, #1
 800a31e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2224      	movs	r2, #36	; 0x24
 800a326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f022 0201 	bic.w	r2, r2, #1
 800a338:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a348:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	021b      	lsls	r3, r3, #8
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	4313      	orrs	r3, r2
 800a352:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f042 0201 	orr.w	r2, r2, #1
 800a36a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2220      	movs	r2, #32
 800a370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a37c:	2300      	movs	r3, #0
 800a37e:	e000      	b.n	800a382 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a380:	2302      	movs	r3, #2
  }
}
 800a382:	4618      	mov	r0, r3
 800a384:	3714      	adds	r7, #20
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr
	...

0800a390 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d101      	bne.n	800a3a2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e0bf      	b.n	800a522 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d106      	bne.n	800a3bc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7f8 fd1a 	bl	8002df0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2202      	movs	r2, #2
 800a3c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	699a      	ldr	r2, [r3, #24]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800a3d2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	6999      	ldr	r1, [r3, #24]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	685a      	ldr	r2, [r3, #4]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a3e8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	430a      	orrs	r2, r1
 800a3f6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	6899      	ldr	r1, [r3, #8]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	4b4a      	ldr	r3, [pc, #296]	; (800a52c <HAL_LTDC_Init+0x19c>)
 800a404:	400b      	ands	r3, r1
 800a406:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	695b      	ldr	r3, [r3, #20]
 800a40c:	041b      	lsls	r3, r3, #16
 800a40e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	6899      	ldr	r1, [r3, #8]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	699a      	ldr	r2, [r3, #24]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	431a      	orrs	r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	430a      	orrs	r2, r1
 800a424:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	68d9      	ldr	r1, [r3, #12]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	4b3e      	ldr	r3, [pc, #248]	; (800a52c <HAL_LTDC_Init+0x19c>)
 800a432:	400b      	ands	r3, r1
 800a434:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	69db      	ldr	r3, [r3, #28]
 800a43a:	041b      	lsls	r3, r3, #16
 800a43c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	68d9      	ldr	r1, [r3, #12]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6a1a      	ldr	r2, [r3, #32]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	431a      	orrs	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	430a      	orrs	r2, r1
 800a452:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	6919      	ldr	r1, [r3, #16]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	4b33      	ldr	r3, [pc, #204]	; (800a52c <HAL_LTDC_Init+0x19c>)
 800a460:	400b      	ands	r3, r1
 800a462:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a468:	041b      	lsls	r3, r3, #16
 800a46a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	6919      	ldr	r1, [r3, #16]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	431a      	orrs	r2, r3
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	430a      	orrs	r2, r1
 800a480:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	6959      	ldr	r1, [r3, #20]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	4b27      	ldr	r3, [pc, #156]	; (800a52c <HAL_LTDC_Init+0x19c>)
 800a48e:	400b      	ands	r3, r1
 800a490:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a496:	041b      	lsls	r3, r3, #16
 800a498:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	6959      	ldr	r1, [r3, #20]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	431a      	orrs	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	430a      	orrs	r2, r1
 800a4ae:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a4b6:	021b      	lsls	r3, r3, #8
 800a4b8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a4c0:	041b      	lsls	r3, r3, #16
 800a4c2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800a4d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a4da:	68ba      	ldr	r2, [r7, #8]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a4e6:	431a      	orrs	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	430a      	orrs	r2, r1
 800a4ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f042 0206 	orr.w	r2, r2, #6
 800a4fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	699a      	ldr	r2, [r3, #24]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f042 0201 	orr.w	r2, r2, #1
 800a50e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	f000f800 	.word	0xf000f800

0800a530 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a530:	b5b0      	push	{r4, r5, r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a542:	2b01      	cmp	r3, #1
 800a544:	d101      	bne.n	800a54a <HAL_LTDC_ConfigLayer+0x1a>
 800a546:	2302      	movs	r3, #2
 800a548:	e02c      	b.n	800a5a4 <HAL_LTDC_ConfigLayer+0x74>
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2201      	movs	r2, #1
 800a54e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2202      	movs	r2, #2
 800a556:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2134      	movs	r1, #52	; 0x34
 800a560:	fb01 f303 	mul.w	r3, r1, r3
 800a564:	4413      	add	r3, r2
 800a566:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	4614      	mov	r4, r2
 800a56e:	461d      	mov	r5, r3
 800a570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a57a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a57c:	682b      	ldr	r3, [r5, #0]
 800a57e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	68b9      	ldr	r1, [r7, #8]
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f000 f847 	bl	800a618 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	2201      	movs	r2, #1
 800a590:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2201      	movs	r2, #1
 800a596:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2200      	movs	r2, #0
 800a59e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bdb0      	pop	{r4, r5, r7, pc}

0800a5ac <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b086      	sub	sp, #24
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d101      	bne.n	800a5c6 <HAL_LTDC_SetAddress+0x1a>
 800a5c2:	2302      	movs	r3, #2
 800a5c4:	e024      	b.n	800a610 <HAL_LTDC_SetAddress+0x64>
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2202      	movs	r2, #2
 800a5d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2234      	movs	r2, #52	; 0x34
 800a5da:	fb02 f303 	mul.w	r3, r2, r3
 800a5de:	3338      	adds	r3, #56	; 0x38
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	6979      	ldr	r1, [r7, #20]
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f000 f811 	bl	800a618 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2201      	movs	r2, #1
 800a602:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2200      	movs	r2, #0
 800a60a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3718      	adds	r7, #24
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a618:	b480      	push	{r7}
 800a61a:	b089      	sub	sp, #36	; 0x24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	685a      	ldr	r2, [r3, #4]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	0c1b      	lsrs	r3, r3, #16
 800a630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a634:	4413      	add	r3, r2
 800a636:	041b      	lsls	r3, r3, #16
 800a638:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	461a      	mov	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	01db      	lsls	r3, r3, #7
 800a644:	4413      	add	r3, r2
 800a646:	3384      	adds	r3, #132	; 0x84
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	68fa      	ldr	r2, [r7, #12]
 800a64c:	6812      	ldr	r2, [r2, #0]
 800a64e:	4611      	mov	r1, r2
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	01d2      	lsls	r2, r2, #7
 800a654:	440a      	add	r2, r1
 800a656:	3284      	adds	r2, #132	; 0x84
 800a658:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a65c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	0c1b      	lsrs	r3, r3, #16
 800a66a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a66e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a670:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4619      	mov	r1, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	01db      	lsls	r3, r3, #7
 800a67c:	440b      	add	r3, r1
 800a67e:	3384      	adds	r3, #132	; 0x84
 800a680:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a686:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	68da      	ldr	r2, [r3, #12]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a696:	4413      	add	r3, r2
 800a698:	041b      	lsls	r3, r3, #16
 800a69a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	01db      	lsls	r3, r3, #7
 800a6a6:	4413      	add	r3, r2
 800a6a8:	3384      	adds	r3, #132	; 0x84
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	6812      	ldr	r2, [r2, #0]
 800a6b0:	4611      	mov	r1, r2
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	01d2      	lsls	r2, r2, #7
 800a6b6:	440a      	add	r2, r1
 800a6b8:	3284      	adds	r2, #132	; 0x84
 800a6ba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a6be:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	689a      	ldr	r2, [r3, #8]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a6ce:	4413      	add	r3, r2
 800a6d0:	1c5a      	adds	r2, r3, #1
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	01db      	lsls	r3, r3, #7
 800a6dc:	440b      	add	r3, r1
 800a6de:	3384      	adds	r3, #132	; 0x84
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	01db      	lsls	r3, r3, #7
 800a6f2:	4413      	add	r3, r2
 800a6f4:	3384      	adds	r3, #132	; 0x84
 800a6f6:	691b      	ldr	r3, [r3, #16]
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	6812      	ldr	r2, [r2, #0]
 800a6fc:	4611      	mov	r1, r2
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	01d2      	lsls	r2, r2, #7
 800a702:	440a      	add	r2, r1
 800a704:	3284      	adds	r2, #132	; 0x84
 800a706:	f023 0307 	bic.w	r3, r3, #7
 800a70a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	461a      	mov	r2, r3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	01db      	lsls	r3, r3, #7
 800a716:	4413      	add	r3, r2
 800a718:	3384      	adds	r3, #132	; 0x84
 800a71a:	461a      	mov	r2, r3
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	691b      	ldr	r3, [r3, #16]
 800a720:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a728:	021b      	lsls	r3, r3, #8
 800a72a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a732:	041b      	lsls	r3, r3, #16
 800a734:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	699b      	ldr	r3, [r3, #24]
 800a73a:	061b      	lsls	r3, r3, #24
 800a73c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	461a      	mov	r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	01db      	lsls	r3, r3, #7
 800a748:	4413      	add	r3, r2
 800a74a:	3384      	adds	r3, #132	; 0x84
 800a74c:	699b      	ldr	r3, [r3, #24]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	461a      	mov	r2, r3
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	01db      	lsls	r3, r3, #7
 800a758:	4413      	add	r3, r2
 800a75a:	3384      	adds	r3, #132	; 0x84
 800a75c:	461a      	mov	r2, r3
 800a75e:	2300      	movs	r3, #0
 800a760:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a768:	461a      	mov	r2, r3
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	431a      	orrs	r2, r3
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	431a      	orrs	r2, r3
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4619      	mov	r1, r3
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	01db      	lsls	r3, r3, #7
 800a77c:	440b      	add	r3, r1
 800a77e:	3384      	adds	r3, #132	; 0x84
 800a780:	4619      	mov	r1, r3
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	4313      	orrs	r3, r2
 800a786:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	461a      	mov	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	01db      	lsls	r3, r3, #7
 800a792:	4413      	add	r3, r2
 800a794:	3384      	adds	r3, #132	; 0x84
 800a796:	695b      	ldr	r3, [r3, #20]
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	6812      	ldr	r2, [r2, #0]
 800a79c:	4611      	mov	r1, r2
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	01d2      	lsls	r2, r2, #7
 800a7a2:	440a      	add	r2, r1
 800a7a4:	3284      	adds	r2, #132	; 0x84
 800a7a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a7aa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	01db      	lsls	r3, r3, #7
 800a7b6:	4413      	add	r3, r2
 800a7b8:	3384      	adds	r3, #132	; 0x84
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	695b      	ldr	r3, [r3, #20]
 800a7c0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	01db      	lsls	r3, r3, #7
 800a7cc:	4413      	add	r3, r2
 800a7ce:	3384      	adds	r3, #132	; 0x84
 800a7d0:	69da      	ldr	r2, [r3, #28]
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	01db      	lsls	r3, r3, #7
 800a7dc:	440b      	add	r3, r1
 800a7de:	3384      	adds	r3, #132	; 0x84
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4b58      	ldr	r3, [pc, #352]	; (800a944 <LTDC_SetConfig+0x32c>)
 800a7e4:	4013      	ands	r3, r2
 800a7e6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	69da      	ldr	r2, [r3, #28]
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	6a1b      	ldr	r3, [r3, #32]
 800a7f0:	68f9      	ldr	r1, [r7, #12]
 800a7f2:	6809      	ldr	r1, [r1, #0]
 800a7f4:	4608      	mov	r0, r1
 800a7f6:	6879      	ldr	r1, [r7, #4]
 800a7f8:	01c9      	lsls	r1, r1, #7
 800a7fa:	4401      	add	r1, r0
 800a7fc:	3184      	adds	r1, #132	; 0x84
 800a7fe:	4313      	orrs	r3, r2
 800a800:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	461a      	mov	r2, r3
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	01db      	lsls	r3, r3, #7
 800a80c:	4413      	add	r3, r2
 800a80e:	3384      	adds	r3, #132	; 0x84
 800a810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	461a      	mov	r2, r3
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	01db      	lsls	r3, r3, #7
 800a81c:	4413      	add	r3, r2
 800a81e:	3384      	adds	r3, #132	; 0x84
 800a820:	461a      	mov	r2, r3
 800a822:	2300      	movs	r3, #0
 800a824:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	461a      	mov	r2, r3
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	01db      	lsls	r3, r3, #7
 800a830:	4413      	add	r3, r2
 800a832:	3384      	adds	r3, #132	; 0x84
 800a834:	461a      	mov	r2, r3
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d102      	bne.n	800a84a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a844:	2304      	movs	r3, #4
 800a846:	61fb      	str	r3, [r7, #28]
 800a848:	e01b      	b.n	800a882 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d102      	bne.n	800a858 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a852:	2303      	movs	r3, #3
 800a854:	61fb      	str	r3, [r7, #28]
 800a856:	e014      	b.n	800a882 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	691b      	ldr	r3, [r3, #16]
 800a85c:	2b04      	cmp	r3, #4
 800a85e:	d00b      	beq.n	800a878 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a864:	2b02      	cmp	r3, #2
 800a866:	d007      	beq.n	800a878 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a86c:	2b03      	cmp	r3, #3
 800a86e:	d003      	beq.n	800a878 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a874:	2b07      	cmp	r3, #7
 800a876:	d102      	bne.n	800a87e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a878:	2302      	movs	r3, #2
 800a87a:	61fb      	str	r3, [r7, #28]
 800a87c:	e001      	b.n	800a882 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a87e:	2301      	movs	r3, #1
 800a880:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	461a      	mov	r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	01db      	lsls	r3, r3, #7
 800a88c:	4413      	add	r3, r2
 800a88e:	3384      	adds	r3, #132	; 0x84
 800a890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a892:	68fa      	ldr	r2, [r7, #12]
 800a894:	6812      	ldr	r2, [r2, #0]
 800a896:	4611      	mov	r1, r2
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	01d2      	lsls	r2, r2, #7
 800a89c:	440a      	add	r2, r1
 800a89e:	3284      	adds	r2, #132	; 0x84
 800a8a0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800a8a4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8aa:	69fa      	ldr	r2, [r7, #28]
 800a8ac:	fb02 f303 	mul.w	r3, r2, r3
 800a8b0:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	6859      	ldr	r1, [r3, #4]
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	1acb      	subs	r3, r1, r3
 800a8bc:	69f9      	ldr	r1, [r7, #28]
 800a8be:	fb01 f303 	mul.w	r3, r1, r3
 800a8c2:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a8c4:	68f9      	ldr	r1, [r7, #12]
 800a8c6:	6809      	ldr	r1, [r1, #0]
 800a8c8:	4608      	mov	r0, r1
 800a8ca:	6879      	ldr	r1, [r7, #4]
 800a8cc:	01c9      	lsls	r1, r1, #7
 800a8ce:	4401      	add	r1, r0
 800a8d0:	3184      	adds	r1, #132	; 0x84
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	461a      	mov	r2, r3
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	01db      	lsls	r3, r3, #7
 800a8e0:	4413      	add	r3, r2
 800a8e2:	3384      	adds	r3, #132	; 0x84
 800a8e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	01db      	lsls	r3, r3, #7
 800a8f0:	440b      	add	r3, r1
 800a8f2:	3384      	adds	r3, #132	; 0x84
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	4b14      	ldr	r3, [pc, #80]	; (800a948 <LTDC_SetConfig+0x330>)
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	461a      	mov	r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	01db      	lsls	r3, r3, #7
 800a906:	4413      	add	r3, r2
 800a908:	3384      	adds	r3, #132	; 0x84
 800a90a:	461a      	mov	r2, r3
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a910:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	461a      	mov	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	01db      	lsls	r3, r3, #7
 800a91c:	4413      	add	r3, r2
 800a91e:	3384      	adds	r3, #132	; 0x84
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	6812      	ldr	r2, [r2, #0]
 800a926:	4611      	mov	r1, r2
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	01d2      	lsls	r2, r2, #7
 800a92c:	440a      	add	r2, r1
 800a92e:	3284      	adds	r2, #132	; 0x84
 800a930:	f043 0301 	orr.w	r3, r3, #1
 800a934:	6013      	str	r3, [r2, #0]
}
 800a936:	bf00      	nop
 800a938:	3724      	adds	r7, #36	; 0x24
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	fffff8f8 	.word	0xfffff8f8
 800a948:	fffff800 	.word	0xfffff800

0800a94c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a94c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a94e:	b08f      	sub	sp, #60	; 0x3c
 800a950:	af0a      	add	r7, sp, #40	; 0x28
 800a952:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d101      	bne.n	800a95e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	e116      	b.n	800ab8c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d106      	bne.n	800a97e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f012 f90d 	bl	801cb98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2203      	movs	r2, #3
 800a982:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a98a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d102      	bne.n	800a998 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4618      	mov	r0, r3
 800a99e:	f008 fb4e 	bl	801303e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	603b      	str	r3, [r7, #0]
 800a9a8:	687e      	ldr	r6, [r7, #4]
 800a9aa:	466d      	mov	r5, sp
 800a9ac:	f106 0410 	add.w	r4, r6, #16
 800a9b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a9b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a9b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a9b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a9b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a9bc:	e885 0003 	stmia.w	r5, {r0, r1}
 800a9c0:	1d33      	adds	r3, r6, #4
 800a9c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a9c4:	6838      	ldr	r0, [r7, #0]
 800a9c6:	f008 fa2f 	bl	8012e28 <USB_CoreInit>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d005      	beq.n	800a9dc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2202      	movs	r2, #2
 800a9d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	e0d7      	b.n	800ab8c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f008 fb3c 	bl	8013060 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	73fb      	strb	r3, [r7, #15]
 800a9ec:	e04a      	b.n	800aa84 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a9ee:	7bfa      	ldrb	r2, [r7, #15]
 800a9f0:	6879      	ldr	r1, [r7, #4]
 800a9f2:	4613      	mov	r3, r2
 800a9f4:	00db      	lsls	r3, r3, #3
 800a9f6:	4413      	add	r3, r2
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	440b      	add	r3, r1
 800a9fc:	333d      	adds	r3, #61	; 0x3d
 800a9fe:	2201      	movs	r2, #1
 800aa00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800aa02:	7bfa      	ldrb	r2, [r7, #15]
 800aa04:	6879      	ldr	r1, [r7, #4]
 800aa06:	4613      	mov	r3, r2
 800aa08:	00db      	lsls	r3, r3, #3
 800aa0a:	4413      	add	r3, r2
 800aa0c:	009b      	lsls	r3, r3, #2
 800aa0e:	440b      	add	r3, r1
 800aa10:	333c      	adds	r3, #60	; 0x3c
 800aa12:	7bfa      	ldrb	r2, [r7, #15]
 800aa14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800aa16:	7bfa      	ldrb	r2, [r7, #15]
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
 800aa1a:	b298      	uxth	r0, r3
 800aa1c:	6879      	ldr	r1, [r7, #4]
 800aa1e:	4613      	mov	r3, r2
 800aa20:	00db      	lsls	r3, r3, #3
 800aa22:	4413      	add	r3, r2
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	440b      	add	r3, r1
 800aa28:	3344      	adds	r3, #68	; 0x44
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800aa2e:	7bfa      	ldrb	r2, [r7, #15]
 800aa30:	6879      	ldr	r1, [r7, #4]
 800aa32:	4613      	mov	r3, r2
 800aa34:	00db      	lsls	r3, r3, #3
 800aa36:	4413      	add	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	440b      	add	r3, r1
 800aa3c:	3340      	adds	r3, #64	; 0x40
 800aa3e:	2200      	movs	r2, #0
 800aa40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800aa42:	7bfa      	ldrb	r2, [r7, #15]
 800aa44:	6879      	ldr	r1, [r7, #4]
 800aa46:	4613      	mov	r3, r2
 800aa48:	00db      	lsls	r3, r3, #3
 800aa4a:	4413      	add	r3, r2
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	440b      	add	r3, r1
 800aa50:	3348      	adds	r3, #72	; 0x48
 800aa52:	2200      	movs	r2, #0
 800aa54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800aa56:	7bfa      	ldrb	r2, [r7, #15]
 800aa58:	6879      	ldr	r1, [r7, #4]
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	00db      	lsls	r3, r3, #3
 800aa5e:	4413      	add	r3, r2
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	440b      	add	r3, r1
 800aa64:	334c      	adds	r3, #76	; 0x4c
 800aa66:	2200      	movs	r2, #0
 800aa68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800aa6a:	7bfa      	ldrb	r2, [r7, #15]
 800aa6c:	6879      	ldr	r1, [r7, #4]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	00db      	lsls	r3, r3, #3
 800aa72:	4413      	add	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	440b      	add	r3, r1
 800aa78:	3354      	adds	r3, #84	; 0x54
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa7e:	7bfb      	ldrb	r3, [r7, #15]
 800aa80:	3301      	adds	r3, #1
 800aa82:	73fb      	strb	r3, [r7, #15]
 800aa84:	7bfa      	ldrb	r2, [r7, #15]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d3af      	bcc.n	800a9ee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa8e:	2300      	movs	r3, #0
 800aa90:	73fb      	strb	r3, [r7, #15]
 800aa92:	e044      	b.n	800ab1e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800aa94:	7bfa      	ldrb	r2, [r7, #15]
 800aa96:	6879      	ldr	r1, [r7, #4]
 800aa98:	4613      	mov	r3, r2
 800aa9a:	00db      	lsls	r3, r3, #3
 800aa9c:	4413      	add	r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	440b      	add	r3, r1
 800aaa2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800aaaa:	7bfa      	ldrb	r2, [r7, #15]
 800aaac:	6879      	ldr	r1, [r7, #4]
 800aaae:	4613      	mov	r3, r2
 800aab0:	00db      	lsls	r3, r3, #3
 800aab2:	4413      	add	r3, r2
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	440b      	add	r3, r1
 800aab8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800aabc:	7bfa      	ldrb	r2, [r7, #15]
 800aabe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800aac0:	7bfa      	ldrb	r2, [r7, #15]
 800aac2:	6879      	ldr	r1, [r7, #4]
 800aac4:	4613      	mov	r3, r2
 800aac6:	00db      	lsls	r3, r3, #3
 800aac8:	4413      	add	r3, r2
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	440b      	add	r3, r1
 800aace:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800aad2:	2200      	movs	r2, #0
 800aad4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800aad6:	7bfa      	ldrb	r2, [r7, #15]
 800aad8:	6879      	ldr	r1, [r7, #4]
 800aada:	4613      	mov	r3, r2
 800aadc:	00db      	lsls	r3, r3, #3
 800aade:	4413      	add	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	440b      	add	r3, r1
 800aae4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800aae8:	2200      	movs	r2, #0
 800aaea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800aaec:	7bfa      	ldrb	r2, [r7, #15]
 800aaee:	6879      	ldr	r1, [r7, #4]
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	00db      	lsls	r3, r3, #3
 800aaf4:	4413      	add	r3, r2
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	440b      	add	r3, r1
 800aafa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800aafe:	2200      	movs	r2, #0
 800ab00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ab02:	7bfa      	ldrb	r2, [r7, #15]
 800ab04:	6879      	ldr	r1, [r7, #4]
 800ab06:	4613      	mov	r3, r2
 800ab08:	00db      	lsls	r3, r3, #3
 800ab0a:	4413      	add	r3, r2
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	440b      	add	r3, r1
 800ab10:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800ab14:	2200      	movs	r2, #0
 800ab16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab18:	7bfb      	ldrb	r3, [r7, #15]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	73fb      	strb	r3, [r7, #15]
 800ab1e:	7bfa      	ldrb	r2, [r7, #15]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d3b5      	bcc.n	800aa94 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	603b      	str	r3, [r7, #0]
 800ab2e:	687e      	ldr	r6, [r7, #4]
 800ab30:	466d      	mov	r5, sp
 800ab32:	f106 0410 	add.w	r4, r6, #16
 800ab36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ab42:	e885 0003 	stmia.w	r5, {r0, r1}
 800ab46:	1d33      	adds	r3, r6, #4
 800ab48:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ab4a:	6838      	ldr	r0, [r7, #0]
 800ab4c:	f008 fad4 	bl	80130f8 <USB_DevInit>
 800ab50:	4603      	mov	r3, r0
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d005      	beq.n	800ab62 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2202      	movs	r2, #2
 800ab5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e014      	b.n	800ab8c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d102      	bne.n	800ab80 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f001 f97a 	bl	800be74 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4618      	mov	r0, r3
 800ab86:	f009 fc22 	bl	80143ce <USB_DevDisconnect>

  return HAL_OK;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3714      	adds	r7, #20
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab94 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d101      	bne.n	800abaa <HAL_PCD_Start+0x16>
 800aba6:	2302      	movs	r3, #2
 800aba8:	e012      	b.n	800abd0 <HAL_PCD_Start+0x3c>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2201      	movs	r2, #1
 800abae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4618      	mov	r0, r3
 800abb8:	f008 fa30 	bl	801301c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4618      	mov	r0, r3
 800abc2:	f009 fbe3 	bl	801438c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800abce:	2300      	movs	r3, #0
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800abd8:	b590      	push	{r4, r7, lr}
 800abda:	b08d      	sub	sp, #52	; 0x34
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abe6:	6a3b      	ldr	r3, [r7, #32]
 800abe8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4618      	mov	r0, r3
 800abf0:	f009 fcc2 	bl	8014578 <USB_GetMode>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	f040 84b7 	bne.w	800b56a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f009 fc05 	bl	8014410 <USB_ReadInterrupts>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f000 84ad 	beq.w	800b568 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	0a1b      	lsrs	r3, r3, #8
 800ac18:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4618      	mov	r0, r3
 800ac28:	f009 fbf2 	bl	8014410 <USB_ReadInterrupts>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	f003 0302 	and.w	r3, r3, #2
 800ac32:	2b02      	cmp	r3, #2
 800ac34:	d107      	bne.n	800ac46 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	695a      	ldr	r2, [r3, #20]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f002 0202 	and.w	r2, r2, #2
 800ac44:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f009 fbe0 	bl	8014410 <USB_ReadInterrupts>
 800ac50:	4603      	mov	r3, r0
 800ac52:	f003 0310 	and.w	r3, r3, #16
 800ac56:	2b10      	cmp	r3, #16
 800ac58:	d161      	bne.n	800ad1e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	699a      	ldr	r2, [r3, #24]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f022 0210 	bic.w	r2, r2, #16
 800ac68:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800ac6a:	6a3b      	ldr	r3, [r7, #32]
 800ac6c:	6a1b      	ldr	r3, [r3, #32]
 800ac6e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	f003 020f 	and.w	r2, r3, #15
 800ac76:	4613      	mov	r3, r2
 800ac78:	00db      	lsls	r3, r3, #3
 800ac7a:	4413      	add	r3, r2
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	4413      	add	r3, r2
 800ac86:	3304      	adds	r3, #4
 800ac88:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	0c5b      	lsrs	r3, r3, #17
 800ac8e:	f003 030f 	and.w	r3, r3, #15
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	d124      	bne.n	800ace0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800ac96:	69ba      	ldr	r2, [r7, #24]
 800ac98:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800ac9c:	4013      	ands	r3, r2
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d035      	beq.n	800ad0e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	091b      	lsrs	r3, r3, #4
 800acaa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800acac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	461a      	mov	r2, r3
 800acb4:	6a38      	ldr	r0, [r7, #32]
 800acb6:	f009 fa17 	bl	80140e8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	691a      	ldr	r2, [r3, #16]
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	091b      	lsrs	r3, r3, #4
 800acc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800acc6:	441a      	add	r2, r3
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	6a1a      	ldr	r2, [r3, #32]
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	091b      	lsrs	r3, r3, #4
 800acd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800acd8:	441a      	add	r2, r3
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	621a      	str	r2, [r3, #32]
 800acde:	e016      	b.n	800ad0e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	0c5b      	lsrs	r3, r3, #17
 800ace4:	f003 030f 	and.w	r3, r3, #15
 800ace8:	2b06      	cmp	r3, #6
 800acea:	d110      	bne.n	800ad0e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800acf2:	2208      	movs	r2, #8
 800acf4:	4619      	mov	r1, r3
 800acf6:	6a38      	ldr	r0, [r7, #32]
 800acf8:	f009 f9f6 	bl	80140e8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	6a1a      	ldr	r2, [r3, #32]
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	091b      	lsrs	r3, r3, #4
 800ad04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad08:	441a      	add	r2, r3
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	699a      	ldr	r2, [r3, #24]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f042 0210 	orr.w	r2, r2, #16
 800ad1c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f009 fb74 	bl	8014410 <USB_ReadInterrupts>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ad2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ad32:	f040 80a7 	bne.w	800ae84 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800ad36:	2300      	movs	r3, #0
 800ad38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f009 fb9a 	bl	8014478 <USB_ReadDevAllOutEpInterrupt>
 800ad44:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800ad46:	e099      	b.n	800ae7c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800ad48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4a:	f003 0301 	and.w	r3, r3, #1
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	f000 808e 	beq.w	800ae70 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad5a:	b2d2      	uxtb	r2, r2
 800ad5c:	4611      	mov	r1, r2
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f009 fbbe 	bl	80144e0 <USB_ReadDevOutEPInterrupt>
 800ad64:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	f003 0301 	and.w	r3, r3, #1
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00c      	beq.n	800ad8a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800ad70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad72:	015a      	lsls	r2, r3, #5
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	4413      	add	r3, r2
 800ad78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	2301      	movs	r3, #1
 800ad80:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800ad82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 feef 	bl	800bb68 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	f003 0308 	and.w	r3, r3, #8
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00c      	beq.n	800adae <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	015a      	lsls	r2, r3, #5
 800ad98:	69fb      	ldr	r3, [r7, #28]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ada0:	461a      	mov	r2, r3
 800ada2:	2308      	movs	r3, #8
 800ada4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800ada6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 ffc5 	bl	800bd38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	f003 0310 	and.w	r3, r3, #16
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d008      	beq.n	800adca <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adba:	015a      	lsls	r2, r3, #5
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	4413      	add	r3, r2
 800adc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adc4:	461a      	mov	r2, r3
 800adc6:	2310      	movs	r3, #16
 800adc8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	f003 0302 	and.w	r3, r3, #2
 800add0:	2b00      	cmp	r3, #0
 800add2:	d030      	beq.n	800ae36 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800add4:	6a3b      	ldr	r3, [r7, #32]
 800add6:	695b      	ldr	r3, [r3, #20]
 800add8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800addc:	2b80      	cmp	r3, #128	; 0x80
 800adde:	d109      	bne.n	800adf4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	69fa      	ldr	r2, [r7, #28]
 800adea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800adee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800adf2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800adf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adf6:	4613      	mov	r3, r2
 800adf8:	00db      	lsls	r3, r3, #3
 800adfa:	4413      	add	r3, r2
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	4413      	add	r3, r2
 800ae06:	3304      	adds	r3, #4
 800ae08:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	78db      	ldrb	r3, [r3, #3]
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d108      	bne.n	800ae24 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	2200      	movs	r2, #0
 800ae16:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800ae18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f012 f820 	bl	801ce64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800ae24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae26:	015a      	lsls	r2, r3, #5
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae30:	461a      	mov	r2, r3
 800ae32:	2302      	movs	r3, #2
 800ae34:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	f003 0320 	and.w	r3, r3, #32
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d008      	beq.n	800ae52 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae42:	015a      	lsls	r2, r3, #5
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	4413      	add	r3, r2
 800ae48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	2320      	movs	r3, #32
 800ae50:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d009      	beq.n	800ae70 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800ae5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5e:	015a      	lsls	r2, r3, #5
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	4413      	add	r3, r2
 800ae64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae68:	461a      	mov	r2, r3
 800ae6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae6e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800ae70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae72:	3301      	adds	r3, #1
 800ae74:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800ae76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae78:	085b      	lsrs	r3, r3, #1
 800ae7a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800ae7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	f47f af62 	bne.w	800ad48 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f009 fac1 	bl	8014410 <USB_ReadInterrupts>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ae98:	f040 80db 	bne.w	800b052 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4618      	mov	r0, r3
 800aea2:	f009 fb03 	bl	80144ac <USB_ReadDevAllInEpInterrupt>
 800aea6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800aeac:	e0cd      	b.n	800b04a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800aeae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb0:	f003 0301 	and.w	r3, r3, #1
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f000 80c2 	beq.w	800b03e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aec0:	b2d2      	uxtb	r2, r2
 800aec2:	4611      	mov	r1, r2
 800aec4:	4618      	mov	r0, r3
 800aec6:	f009 fb29 	bl	801451c <USB_ReadDevInEPInterrupt>
 800aeca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	f003 0301 	and.w	r3, r3, #1
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d057      	beq.n	800af86 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800aed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed8:	f003 030f 	and.w	r3, r3, #15
 800aedc:	2201      	movs	r2, #1
 800aede:	fa02 f303 	lsl.w	r3, r2, r3
 800aee2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	43db      	mvns	r3, r3
 800aef0:	69f9      	ldr	r1, [r7, #28]
 800aef2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aef6:	4013      	ands	r3, r2
 800aef8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800aefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefc:	015a      	lsls	r2, r3, #5
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	4413      	add	r3, r2
 800af02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af06:	461a      	mov	r2, r3
 800af08:	2301      	movs	r3, #1
 800af0a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	691b      	ldr	r3, [r3, #16]
 800af10:	2b01      	cmp	r3, #1
 800af12:	d132      	bne.n	800af7a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800af14:	6879      	ldr	r1, [r7, #4]
 800af16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af18:	4613      	mov	r3, r2
 800af1a:	00db      	lsls	r3, r3, #3
 800af1c:	4413      	add	r3, r2
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	440b      	add	r3, r1
 800af22:	334c      	adds	r3, #76	; 0x4c
 800af24:	6819      	ldr	r1, [r3, #0]
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af2a:	4613      	mov	r3, r2
 800af2c:	00db      	lsls	r3, r3, #3
 800af2e:	4413      	add	r3, r2
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	4403      	add	r3, r0
 800af34:	3348      	adds	r3, #72	; 0x48
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4419      	add	r1, r3
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af3e:	4613      	mov	r3, r2
 800af40:	00db      	lsls	r3, r3, #3
 800af42:	4413      	add	r3, r2
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	4403      	add	r3, r0
 800af48:	334c      	adds	r3, #76	; 0x4c
 800af4a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800af4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d113      	bne.n	800af7a <HAL_PCD_IRQHandler+0x3a2>
 800af52:	6879      	ldr	r1, [r7, #4]
 800af54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af56:	4613      	mov	r3, r2
 800af58:	00db      	lsls	r3, r3, #3
 800af5a:	4413      	add	r3, r2
 800af5c:	009b      	lsls	r3, r3, #2
 800af5e:	440b      	add	r3, r1
 800af60:	3354      	adds	r3, #84	; 0x54
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d108      	bne.n	800af7a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6818      	ldr	r0, [r3, #0]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800af72:	461a      	mov	r2, r3
 800af74:	2101      	movs	r1, #1
 800af76:	f009 fb31 	bl	80145dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800af7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	4619      	mov	r1, r3
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f011 feea 	bl	801cd5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	f003 0308 	and.w	r3, r3, #8
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d008      	beq.n	800afa2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800af90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af92:	015a      	lsls	r2, r3, #5
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	4413      	add	r3, r2
 800af98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af9c:	461a      	mov	r2, r3
 800af9e:	2308      	movs	r3, #8
 800afa0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	f003 0310 	and.w	r3, r3, #16
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d008      	beq.n	800afbe <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800afac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afae:	015a      	lsls	r2, r3, #5
 800afb0:	69fb      	ldr	r3, [r7, #28]
 800afb2:	4413      	add	r3, r2
 800afb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afb8:	461a      	mov	r2, r3
 800afba:	2310      	movs	r3, #16
 800afbc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d008      	beq.n	800afda <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afca:	015a      	lsls	r2, r3, #5
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	4413      	add	r3, r2
 800afd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afd4:	461a      	mov	r2, r3
 800afd6:	2340      	movs	r3, #64	; 0x40
 800afd8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	f003 0302 	and.w	r3, r3, #2
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d023      	beq.n	800b02c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800afe4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afe6:	6a38      	ldr	r0, [r7, #32]
 800afe8:	f008 f9e4 	bl	80133b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800afec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afee:	4613      	mov	r3, r2
 800aff0:	00db      	lsls	r3, r3, #3
 800aff2:	4413      	add	r3, r2
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	3338      	adds	r3, #56	; 0x38
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	4413      	add	r3, r2
 800affc:	3304      	adds	r3, #4
 800affe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	78db      	ldrb	r3, [r3, #3]
 800b004:	2b01      	cmp	r3, #1
 800b006:	d108      	bne.n	800b01a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	2200      	movs	r2, #0
 800b00c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b010:	b2db      	uxtb	r3, r3
 800b012:	4619      	mov	r1, r3
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f011 ff37 	bl	801ce88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01c:	015a      	lsls	r2, r3, #5
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	4413      	add	r3, r2
 800b022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b026:	461a      	mov	r2, r3
 800b028:	2302      	movs	r3, #2
 800b02a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b032:	2b00      	cmp	r3, #0
 800b034:	d003      	beq.n	800b03e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b036:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 fd08 	bl	800ba4e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b040:	3301      	adds	r3, #1
 800b042:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b046:	085b      	lsrs	r3, r3, #1
 800b048:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	f47f af2e 	bne.w	800aeae <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4618      	mov	r0, r3
 800b058:	f009 f9da 	bl	8014410 <USB_ReadInterrupts>
 800b05c:	4603      	mov	r3, r0
 800b05e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b062:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b066:	d122      	bne.n	800b0ae <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	69fa      	ldr	r2, [r7, #28]
 800b072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b076:	f023 0301 	bic.w	r3, r3, #1
 800b07a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800b082:	2b01      	cmp	r3, #1
 800b084:	d108      	bne.n	800b098 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b08e:	2100      	movs	r1, #0
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f012 f8b7 	bl	801d204 <HAL_PCDEx_LPM_Callback>
 800b096:	e002      	b.n	800b09e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f011 fed5 	bl	801ce48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	695a      	ldr	r2, [r3, #20]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b0ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f009 f9ac 	bl	8014410 <USB_ReadInterrupts>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0c2:	d112      	bne.n	800b0ea <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0ca:	689b      	ldr	r3, [r3, #8]
 800b0cc:	f003 0301 	and.w	r3, r3, #1
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d102      	bne.n	800b0da <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f011 fe91 	bl	801cdfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	695a      	ldr	r2, [r3, #20]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b0e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f009 f98e 	bl	8014410 <USB_ReadInterrupts>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0fe:	d121      	bne.n	800b144 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	695a      	ldr	r2, [r3, #20]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800b10e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800b116:	2b00      	cmp	r3, #0
 800b118:	d111      	bne.n	800b13e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2201      	movs	r2, #1
 800b11e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b128:	089b      	lsrs	r3, r3, #2
 800b12a:	f003 020f 	and.w	r2, r3, #15
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b134:	2101      	movs	r1, #1
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f012 f864 	bl	801d204 <HAL_PCDEx_LPM_Callback>
 800b13c:	e002      	b.n	800b144 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f011 fe5c 	bl	801cdfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4618      	mov	r0, r3
 800b14a:	f009 f961 	bl	8014410 <USB_ReadInterrupts>
 800b14e:	4603      	mov	r3, r0
 800b150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b158:	f040 80b7 	bne.w	800b2ca <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	69fa      	ldr	r2, [r7, #28]
 800b166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b16a:	f023 0301 	bic.w	r3, r3, #1
 800b16e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	2110      	movs	r1, #16
 800b176:	4618      	mov	r0, r3
 800b178:	f008 f91c 	bl	80133b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b17c:	2300      	movs	r3, #0
 800b17e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b180:	e046      	b.n	800b210 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b184:	015a      	lsls	r2, r3, #5
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	4413      	add	r3, r2
 800b18a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b18e:	461a      	mov	r2, r3
 800b190:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b194:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b198:	015a      	lsls	r2, r3, #5
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	4413      	add	r3, r2
 800b19e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1a6:	0151      	lsls	r1, r2, #5
 800b1a8:	69fa      	ldr	r2, [r7, #28]
 800b1aa:	440a      	add	r2, r1
 800b1ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b1b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b8:	015a      	lsls	r2, r3, #5
 800b1ba:	69fb      	ldr	r3, [r7, #28]
 800b1bc:	4413      	add	r3, r2
 800b1be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b1c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1cc:	015a      	lsls	r2, r3, #5
 800b1ce:	69fb      	ldr	r3, [r7, #28]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1da:	0151      	lsls	r1, r2, #5
 800b1dc:	69fa      	ldr	r2, [r7, #28]
 800b1de:	440a      	add	r2, r1
 800b1e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b1e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ec:	015a      	lsls	r2, r3, #5
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	4413      	add	r3, r2
 800b1f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1fa:	0151      	lsls	r1, r2, #5
 800b1fc:	69fa      	ldr	r2, [r7, #28]
 800b1fe:	440a      	add	r2, r1
 800b200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b204:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b208:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b20c:	3301      	adds	r3, #1
 800b20e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b216:	429a      	cmp	r2, r3
 800b218:	d3b3      	bcc.n	800b182 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b220:	69db      	ldr	r3, [r3, #28]
 800b222:	69fa      	ldr	r2, [r7, #28]
 800b224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b228:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b22c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b232:	2b00      	cmp	r3, #0
 800b234:	d016      	beq.n	800b264 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b23c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b240:	69fa      	ldr	r2, [r7, #28]
 800b242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b246:	f043 030b 	orr.w	r3, r3, #11
 800b24a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b256:	69fa      	ldr	r2, [r7, #28]
 800b258:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b25c:	f043 030b 	orr.w	r3, r3, #11
 800b260:	6453      	str	r3, [r2, #68]	; 0x44
 800b262:	e015      	b.n	800b290 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b264:	69fb      	ldr	r3, [r7, #28]
 800b266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b26a:	695a      	ldr	r2, [r3, #20]
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b272:	4619      	mov	r1, r3
 800b274:	f242 032b 	movw	r3, #8235	; 0x202b
 800b278:	4313      	orrs	r3, r2
 800b27a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b282:	691b      	ldr	r3, [r3, #16]
 800b284:	69fa      	ldr	r2, [r7, #28]
 800b286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b28a:	f043 030b 	orr.w	r3, r3, #11
 800b28e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	69fa      	ldr	r2, [r7, #28]
 800b29a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b29e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b2a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6818      	ldr	r0, [r3, #0]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	691b      	ldr	r3, [r3, #16]
 800b2ac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	f009 f991 	bl	80145dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	695a      	ldr	r2, [r3, #20]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b2c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f009 f89e 	bl	8014410 <USB_ReadInterrupts>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b2da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2de:	d124      	bne.n	800b32a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f009 f955 	bl	8014594 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f008 f8dd 	bl	80134ae <USB_GetDevSpeed>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681c      	ldr	r4, [r3, #0]
 800b300:	f002 fa6e 	bl	800d7e0 <HAL_RCC_GetHCLKFreq>
 800b304:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	461a      	mov	r2, r3
 800b30e:	4620      	mov	r0, r4
 800b310:	f007 fde2 	bl	8012ed8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f011 fd48 	bl	801cdaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	695a      	ldr	r2, [r3, #20]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b328:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4618      	mov	r0, r3
 800b330:	f009 f86e 	bl	8014410 <USB_ReadInterrupts>
 800b334:	4603      	mov	r3, r0
 800b336:	f003 0308 	and.w	r3, r3, #8
 800b33a:	2b08      	cmp	r3, #8
 800b33c:	d10a      	bne.n	800b354 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f011 fd25 	bl	801cd8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	695a      	ldr	r2, [r3, #20]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f002 0208 	and.w	r2, r2, #8
 800b352:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4618      	mov	r0, r3
 800b35a:	f009 f859 	bl	8014410 <USB_ReadInterrupts>
 800b35e:	4603      	mov	r3, r0
 800b360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b364:	2b80      	cmp	r3, #128	; 0x80
 800b366:	d122      	bne.n	800b3ae <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800b368:	6a3b      	ldr	r3, [r7, #32]
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b370:	6a3b      	ldr	r3, [r7, #32]
 800b372:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b374:	2301      	movs	r3, #1
 800b376:	627b      	str	r3, [r7, #36]	; 0x24
 800b378:	e014      	b.n	800b3a4 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800b37a:	6879      	ldr	r1, [r7, #4]
 800b37c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b37e:	4613      	mov	r3, r2
 800b380:	00db      	lsls	r3, r3, #3
 800b382:	4413      	add	r3, r2
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	440b      	add	r3, r1
 800b388:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d105      	bne.n	800b39e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800b392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b394:	b2db      	uxtb	r3, r3
 800b396:	4619      	mov	r1, r3
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 fb27 	bl	800b9ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	627b      	str	r3, [r7, #36]	; 0x24
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d3e5      	bcc.n	800b37a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f009 f82c 	bl	8014410 <USB_ReadInterrupts>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b3be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3c2:	d13b      	bne.n	800b43c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	627b      	str	r3, [r7, #36]	; 0x24
 800b3c8:	e02b      	b.n	800b422 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3cc:	015a      	lsls	r2, r3, #5
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	4413      	add	r3, r2
 800b3d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b3da:	6879      	ldr	r1, [r7, #4]
 800b3dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3de:	4613      	mov	r3, r2
 800b3e0:	00db      	lsls	r3, r3, #3
 800b3e2:	4413      	add	r3, r2
 800b3e4:	009b      	lsls	r3, r3, #2
 800b3e6:	440b      	add	r3, r1
 800b3e8:	3340      	adds	r3, #64	; 0x40
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d115      	bne.n	800b41c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800b3f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	da12      	bge.n	800b41c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800b3f6:	6879      	ldr	r1, [r7, #4]
 800b3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	00db      	lsls	r3, r3, #3
 800b3fe:	4413      	add	r3, r2
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	440b      	add	r3, r1
 800b404:	333f      	adds	r3, #63	; 0x3f
 800b406:	2201      	movs	r2, #1
 800b408:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800b40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b412:	b2db      	uxtb	r3, r3
 800b414:	4619      	mov	r1, r3
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 fae8 	bl	800b9ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41e:	3301      	adds	r3, #1
 800b420:	627b      	str	r3, [r7, #36]	; 0x24
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b428:	429a      	cmp	r2, r3
 800b42a:	d3ce      	bcc.n	800b3ca <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	695a      	ldr	r2, [r3, #20]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b43a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4618      	mov	r0, r3
 800b442:	f008 ffe5 	bl	8014410 <USB_ReadInterrupts>
 800b446:	4603      	mov	r3, r0
 800b448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b44c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b450:	d155      	bne.n	800b4fe <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b452:	2301      	movs	r3, #1
 800b454:	627b      	str	r3, [r7, #36]	; 0x24
 800b456:	e045      	b.n	800b4e4 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800b458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45a:	015a      	lsls	r2, r3, #5
 800b45c:	69fb      	ldr	r3, [r7, #28]
 800b45e:	4413      	add	r3, r2
 800b460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b468:	6879      	ldr	r1, [r7, #4]
 800b46a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b46c:	4613      	mov	r3, r2
 800b46e:	00db      	lsls	r3, r3, #3
 800b470:	4413      	add	r3, r2
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	440b      	add	r3, r1
 800b476:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d12e      	bne.n	800b4de <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b480:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b482:	2b00      	cmp	r3, #0
 800b484:	da2b      	bge.n	800b4de <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800b486:	69bb      	ldr	r3, [r7, #24]
 800b488:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800b492:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b496:	429a      	cmp	r2, r3
 800b498:	d121      	bne.n	800b4de <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800b49a:	6879      	ldr	r1, [r7, #4]
 800b49c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b49e:	4613      	mov	r3, r2
 800b4a0:	00db      	lsls	r3, r3, #3
 800b4a2:	4413      	add	r3, r2
 800b4a4:	009b      	lsls	r3, r3, #2
 800b4a6:	440b      	add	r3, r1
 800b4a8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800b4b0:	6a3b      	ldr	r3, [r7, #32]
 800b4b2:	699b      	ldr	r3, [r3, #24]
 800b4b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b4b8:	6a3b      	ldr	r3, [r7, #32]
 800b4ba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800b4bc:	6a3b      	ldr	r3, [r7, #32]
 800b4be:	695b      	ldr	r3, [r3, #20]
 800b4c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d10a      	bne.n	800b4de <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800b4c8:	69fb      	ldr	r3, [r7, #28]
 800b4ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	69fa      	ldr	r2, [r7, #28]
 800b4d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b4da:	6053      	str	r3, [r2, #4]
            break;
 800b4dc:	e007      	b.n	800b4ee <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	627b      	str	r3, [r7, #36]	; 0x24
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d3b4      	bcc.n	800b458 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	695a      	ldr	r2, [r3, #20]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b4fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4618      	mov	r0, r3
 800b504:	f008 ff84 	bl	8014410 <USB_ReadInterrupts>
 800b508:	4603      	mov	r3, r0
 800b50a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b50e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b512:	d10a      	bne.n	800b52a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f011 fcc9 	bl	801ceac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	695a      	ldr	r2, [r3, #20]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b528:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4618      	mov	r0, r3
 800b530:	f008 ff6e 	bl	8014410 <USB_ReadInterrupts>
 800b534:	4603      	mov	r3, r0
 800b536:	f003 0304 	and.w	r3, r3, #4
 800b53a:	2b04      	cmp	r3, #4
 800b53c:	d115      	bne.n	800b56a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b546:	69bb      	ldr	r3, [r7, #24]
 800b548:	f003 0304 	and.w	r3, r3, #4
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d002      	beq.n	800b556 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f011 fcb9 	bl	801cec8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	6859      	ldr	r1, [r3, #4]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	69ba      	ldr	r2, [r7, #24]
 800b562:	430a      	orrs	r2, r1
 800b564:	605a      	str	r2, [r3, #4]
 800b566:	e000      	b.n	800b56a <HAL_PCD_IRQHandler+0x992>
      return;
 800b568:	bf00      	nop
    }
  }
}
 800b56a:	3734      	adds	r7, #52	; 0x34
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd90      	pop	{r4, r7, pc}

0800b570 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	460b      	mov	r3, r1
 800b57a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b582:	2b01      	cmp	r3, #1
 800b584:	d101      	bne.n	800b58a <HAL_PCD_SetAddress+0x1a>
 800b586:	2302      	movs	r3, #2
 800b588:	e013      	b.n	800b5b2 <HAL_PCD_SetAddress+0x42>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2201      	movs	r2, #1
 800b58e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	78fa      	ldrb	r2, [r7, #3]
 800b596:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	78fa      	ldrb	r2, [r7, #3]
 800b5a0:	4611      	mov	r1, r2
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f008 fecc 	bl	8014340 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3708      	adds	r7, #8
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b084      	sub	sp, #16
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
 800b5c2:	4608      	mov	r0, r1
 800b5c4:	4611      	mov	r1, r2
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	70fb      	strb	r3, [r7, #3]
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	803b      	strh	r3, [r7, #0]
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b5d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	da0f      	bge.n	800b600 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b5e0:	78fb      	ldrb	r3, [r7, #3]
 800b5e2:	f003 020f 	and.w	r2, r3, #15
 800b5e6:	4613      	mov	r3, r2
 800b5e8:	00db      	lsls	r3, r3, #3
 800b5ea:	4413      	add	r3, r2
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	3338      	adds	r3, #56	; 0x38
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	4413      	add	r3, r2
 800b5f4:	3304      	adds	r3, #4
 800b5f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	705a      	strb	r2, [r3, #1]
 800b5fe:	e00f      	b.n	800b620 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b600:	78fb      	ldrb	r3, [r7, #3]
 800b602:	f003 020f 	and.w	r2, r3, #15
 800b606:	4613      	mov	r3, r2
 800b608:	00db      	lsls	r3, r3, #3
 800b60a:	4413      	add	r3, r2
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	4413      	add	r3, r2
 800b616:	3304      	adds	r3, #4
 800b618:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2200      	movs	r2, #0
 800b61e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b620:	78fb      	ldrb	r3, [r7, #3]
 800b622:	f003 030f 	and.w	r3, r3, #15
 800b626:	b2da      	uxtb	r2, r3
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b62c:	883a      	ldrh	r2, [r7, #0]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	78ba      	ldrb	r2, [r7, #2]
 800b636:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	785b      	ldrb	r3, [r3, #1]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d004      	beq.n	800b64a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	b29a      	uxth	r2, r3
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b64a:	78bb      	ldrb	r3, [r7, #2]
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d102      	bne.n	800b656 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2200      	movs	r2, #0
 800b654:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d101      	bne.n	800b664 <HAL_PCD_EP_Open+0xaa>
 800b660:	2302      	movs	r3, #2
 800b662:	e00e      	b.n	800b682 <HAL_PCD_EP_Open+0xc8>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2201      	movs	r2, #1
 800b668:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	68f9      	ldr	r1, [r7, #12]
 800b672:	4618      	mov	r0, r3
 800b674:	f007 ff40 	bl	80134f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800b680:	7afb      	ldrb	r3, [r7, #11]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3710      	adds	r7, #16
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b084      	sub	sp, #16
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
 800b692:	460b      	mov	r3, r1
 800b694:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b696:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	da0f      	bge.n	800b6be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b69e:	78fb      	ldrb	r3, [r7, #3]
 800b6a0:	f003 020f 	and.w	r2, r3, #15
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	00db      	lsls	r3, r3, #3
 800b6a8:	4413      	add	r3, r2
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	3338      	adds	r3, #56	; 0x38
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	3304      	adds	r3, #4
 800b6b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	705a      	strb	r2, [r3, #1]
 800b6bc:	e00f      	b.n	800b6de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b6be:	78fb      	ldrb	r3, [r7, #3]
 800b6c0:	f003 020f 	and.w	r2, r3, #15
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	00db      	lsls	r3, r3, #3
 800b6c8:	4413      	add	r3, r2
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	3304      	adds	r3, #4
 800b6d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b6de:	78fb      	ldrb	r3, [r7, #3]
 800b6e0:	f003 030f 	and.w	r3, r3, #15
 800b6e4:	b2da      	uxtb	r2, r3
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d101      	bne.n	800b6f8 <HAL_PCD_EP_Close+0x6e>
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	e00e      	b.n	800b716 <HAL_PCD_EP_Close+0x8c>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	68f9      	ldr	r1, [r7, #12]
 800b706:	4618      	mov	r0, r3
 800b708:	f007 ff7e 	bl	8013608 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}

0800b71e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b71e:	b580      	push	{r7, lr}
 800b720:	b086      	sub	sp, #24
 800b722:	af00      	add	r7, sp, #0
 800b724:	60f8      	str	r0, [r7, #12]
 800b726:	607a      	str	r2, [r7, #4]
 800b728:	603b      	str	r3, [r7, #0]
 800b72a:	460b      	mov	r3, r1
 800b72c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b72e:	7afb      	ldrb	r3, [r7, #11]
 800b730:	f003 020f 	and.w	r2, r3, #15
 800b734:	4613      	mov	r3, r2
 800b736:	00db      	lsls	r3, r3, #3
 800b738:	4413      	add	r3, r2
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b740:	68fa      	ldr	r2, [r7, #12]
 800b742:	4413      	add	r3, r2
 800b744:	3304      	adds	r3, #4
 800b746:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	683a      	ldr	r2, [r7, #0]
 800b752:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	2200      	movs	r2, #0
 800b758:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	2200      	movs	r2, #0
 800b75e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b760:	7afb      	ldrb	r3, [r7, #11]
 800b762:	f003 030f 	and.w	r3, r3, #15
 800b766:	b2da      	uxtb	r2, r3
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	691b      	ldr	r3, [r3, #16]
 800b770:	2b01      	cmp	r3, #1
 800b772:	d102      	bne.n	800b77a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b77a:	7afb      	ldrb	r3, [r7, #11]
 800b77c:	f003 030f 	and.w	r3, r3, #15
 800b780:	2b00      	cmp	r3, #0
 800b782:	d109      	bne.n	800b798 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6818      	ldr	r0, [r3, #0]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	691b      	ldr	r3, [r3, #16]
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	461a      	mov	r2, r3
 800b790:	6979      	ldr	r1, [r7, #20]
 800b792:	f008 fa65 	bl	8013c60 <USB_EP0StartXfer>
 800b796:	e008      	b.n	800b7aa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	6818      	ldr	r0, [r3, #0]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	691b      	ldr	r3, [r3, #16]
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	6979      	ldr	r1, [r7, #20]
 800b7a6:	f008 f80b 	bl	80137c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b7aa:	2300      	movs	r3, #0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3718      	adds	r7, #24
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	460b      	mov	r3, r1
 800b7be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b7c0:	78fb      	ldrb	r3, [r7, #3]
 800b7c2:	f003 020f 	and.w	r2, r3, #15
 800b7c6:	6879      	ldr	r1, [r7, #4]
 800b7c8:	4613      	mov	r3, r2
 800b7ca:	00db      	lsls	r3, r3, #3
 800b7cc:	4413      	add	r3, r2
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	440b      	add	r3, r1
 800b7d2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800b7d6:	681b      	ldr	r3, [r3, #0]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	607a      	str	r2, [r7, #4]
 800b7ee:	603b      	str	r3, [r7, #0]
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b7f4:	7afb      	ldrb	r3, [r7, #11]
 800b7f6:	f003 020f 	and.w	r2, r3, #15
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	00db      	lsls	r3, r3, #3
 800b7fe:	4413      	add	r3, r2
 800b800:	009b      	lsls	r3, r3, #2
 800b802:	3338      	adds	r3, #56	; 0x38
 800b804:	68fa      	ldr	r2, [r7, #12]
 800b806:	4413      	add	r3, r2
 800b808:	3304      	adds	r3, #4
 800b80a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	683a      	ldr	r2, [r7, #0]
 800b816:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	2200      	movs	r2, #0
 800b81c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	2201      	movs	r2, #1
 800b822:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b824:	7afb      	ldrb	r3, [r7, #11]
 800b826:	f003 030f 	and.w	r3, r3, #15
 800b82a:	b2da      	uxtb	r2, r3
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	691b      	ldr	r3, [r3, #16]
 800b834:	2b01      	cmp	r3, #1
 800b836:	d102      	bne.n	800b83e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b83e:	7afb      	ldrb	r3, [r7, #11]
 800b840:	f003 030f 	and.w	r3, r3, #15
 800b844:	2b00      	cmp	r3, #0
 800b846:	d109      	bne.n	800b85c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	6818      	ldr	r0, [r3, #0]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	691b      	ldr	r3, [r3, #16]
 800b850:	b2db      	uxtb	r3, r3
 800b852:	461a      	mov	r2, r3
 800b854:	6979      	ldr	r1, [r7, #20]
 800b856:	f008 fa03 	bl	8013c60 <USB_EP0StartXfer>
 800b85a:	e008      	b.n	800b86e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6818      	ldr	r0, [r3, #0]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	691b      	ldr	r3, [r3, #16]
 800b864:	b2db      	uxtb	r3, r3
 800b866:	461a      	mov	r2, r3
 800b868:	6979      	ldr	r1, [r7, #20]
 800b86a:	f007 ffa9 	bl	80137c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	3718      	adds	r7, #24
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	460b      	mov	r3, r1
 800b882:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b884:	78fb      	ldrb	r3, [r7, #3]
 800b886:	f003 020f 	and.w	r2, r3, #15
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d901      	bls.n	800b896 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b892:	2301      	movs	r3, #1
 800b894:	e050      	b.n	800b938 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b896:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	da0f      	bge.n	800b8be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b89e:	78fb      	ldrb	r3, [r7, #3]
 800b8a0:	f003 020f 	and.w	r2, r3, #15
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	00db      	lsls	r3, r3, #3
 800b8a8:	4413      	add	r3, r2
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	3338      	adds	r3, #56	; 0x38
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	4413      	add	r3, r2
 800b8b2:	3304      	adds	r3, #4
 800b8b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	705a      	strb	r2, [r3, #1]
 800b8bc:	e00d      	b.n	800b8da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b8be:	78fa      	ldrb	r2, [r7, #3]
 800b8c0:	4613      	mov	r3, r2
 800b8c2:	00db      	lsls	r3, r3, #3
 800b8c4:	4413      	add	r3, r2
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	4413      	add	r3, r2
 800b8d0:	3304      	adds	r3, #4
 800b8d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2201      	movs	r2, #1
 800b8de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b8e0:	78fb      	ldrb	r3, [r7, #3]
 800b8e2:	f003 030f 	and.w	r3, r3, #15
 800b8e6:	b2da      	uxtb	r2, r3
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d101      	bne.n	800b8fa <HAL_PCD_EP_SetStall+0x82>
 800b8f6:	2302      	movs	r3, #2
 800b8f8:	e01e      	b.n	800b938 <HAL_PCD_EP_SetStall+0xc0>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	68f9      	ldr	r1, [r7, #12]
 800b908:	4618      	mov	r0, r3
 800b90a:	f008 fc45 	bl	8014198 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b90e:	78fb      	ldrb	r3, [r7, #3]
 800b910:	f003 030f 	and.w	r3, r3, #15
 800b914:	2b00      	cmp	r3, #0
 800b916:	d10a      	bne.n	800b92e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6818      	ldr	r0, [r3, #0]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	691b      	ldr	r3, [r3, #16]
 800b920:	b2d9      	uxtb	r1, r3
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b928:	461a      	mov	r2, r3
 800b92a:	f008 fe57 	bl	80145dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2200      	movs	r2, #0
 800b932:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b936:	2300      	movs	r3, #0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3710      	adds	r7, #16
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	460b      	mov	r3, r1
 800b94a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b94c:	78fb      	ldrb	r3, [r7, #3]
 800b94e:	f003 020f 	and.w	r2, r3, #15
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	429a      	cmp	r2, r3
 800b958:	d901      	bls.n	800b95e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b95a:	2301      	movs	r3, #1
 800b95c:	e042      	b.n	800b9e4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b95e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b962:	2b00      	cmp	r3, #0
 800b964:	da0f      	bge.n	800b986 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b966:	78fb      	ldrb	r3, [r7, #3]
 800b968:	f003 020f 	and.w	r2, r3, #15
 800b96c:	4613      	mov	r3, r2
 800b96e:	00db      	lsls	r3, r3, #3
 800b970:	4413      	add	r3, r2
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	3338      	adds	r3, #56	; 0x38
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	4413      	add	r3, r2
 800b97a:	3304      	adds	r3, #4
 800b97c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2201      	movs	r2, #1
 800b982:	705a      	strb	r2, [r3, #1]
 800b984:	e00f      	b.n	800b9a6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b986:	78fb      	ldrb	r3, [r7, #3]
 800b988:	f003 020f 	and.w	r2, r3, #15
 800b98c:	4613      	mov	r3, r2
 800b98e:	00db      	lsls	r3, r3, #3
 800b990:	4413      	add	r3, r2
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	4413      	add	r3, r2
 800b99c:	3304      	adds	r3, #4
 800b99e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b9ac:	78fb      	ldrb	r3, [r7, #3]
 800b9ae:	f003 030f 	and.w	r3, r3, #15
 800b9b2:	b2da      	uxtb	r2, r3
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d101      	bne.n	800b9c6 <HAL_PCD_EP_ClrStall+0x86>
 800b9c2:	2302      	movs	r3, #2
 800b9c4:	e00e      	b.n	800b9e4 <HAL_PCD_EP_ClrStall+0xa4>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	68f9      	ldr	r1, [r7, #12]
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f008 fc4d 	bl	8014274 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b9e2:	2300      	movs	r3, #0
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3710      	adds	r7, #16
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800b9f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	da0c      	bge.n	800ba1a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba00:	78fb      	ldrb	r3, [r7, #3]
 800ba02:	f003 020f 	and.w	r2, r3, #15
 800ba06:	4613      	mov	r3, r2
 800ba08:	00db      	lsls	r3, r3, #3
 800ba0a:	4413      	add	r3, r2
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	3338      	adds	r3, #56	; 0x38
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	4413      	add	r3, r2
 800ba14:	3304      	adds	r3, #4
 800ba16:	60fb      	str	r3, [r7, #12]
 800ba18:	e00c      	b.n	800ba34 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ba1a:	78fb      	ldrb	r3, [r7, #3]
 800ba1c:	f003 020f 	and.w	r2, r3, #15
 800ba20:	4613      	mov	r3, r2
 800ba22:	00db      	lsls	r3, r3, #3
 800ba24:	4413      	add	r3, r2
 800ba26:	009b      	lsls	r3, r3, #2
 800ba28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	4413      	add	r3, r2
 800ba30:	3304      	adds	r3, #4
 800ba32:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	68f9      	ldr	r1, [r7, #12]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f008 fa6c 	bl	8013f18 <USB_EPStopXfer>
 800ba40:	4603      	mov	r3, r0
 800ba42:	72fb      	strb	r3, [r7, #11]

  return ret;
 800ba44:	7afb      	ldrb	r3, [r7, #11]
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b08a      	sub	sp, #40	; 0x28
 800ba52:	af02      	add	r7, sp, #8
 800ba54:	6078      	str	r0, [r7, #4]
 800ba56:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800ba62:	683a      	ldr	r2, [r7, #0]
 800ba64:	4613      	mov	r3, r2
 800ba66:	00db      	lsls	r3, r3, #3
 800ba68:	4413      	add	r3, r2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	3338      	adds	r3, #56	; 0x38
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	4413      	add	r3, r2
 800ba72:	3304      	adds	r3, #4
 800ba74:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6a1a      	ldr	r2, [r3, #32]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	699b      	ldr	r3, [r3, #24]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d901      	bls.n	800ba86 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800ba82:	2301      	movs	r3, #1
 800ba84:	e06c      	b.n	800bb60 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	699a      	ldr	r2, [r3, #24]
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6a1b      	ldr	r3, [r3, #32]
 800ba8e:	1ad3      	subs	r3, r2, r3
 800ba90:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	68db      	ldr	r3, [r3, #12]
 800ba96:	69fa      	ldr	r2, [r7, #28]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d902      	bls.n	800baa2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	68db      	ldr	r3, [r3, #12]
 800baa0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800baa2:	69fb      	ldr	r3, [r7, #28]
 800baa4:	3303      	adds	r3, #3
 800baa6:	089b      	lsrs	r3, r3, #2
 800baa8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800baaa:	e02b      	b.n	800bb04 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	699a      	ldr	r2, [r3, #24]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6a1b      	ldr	r3, [r3, #32]
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	69fa      	ldr	r2, [r7, #28]
 800babe:	429a      	cmp	r2, r3
 800bac0:	d902      	bls.n	800bac8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800bac8:	69fb      	ldr	r3, [r7, #28]
 800baca:	3303      	adds	r3, #3
 800bacc:	089b      	lsrs	r3, r3, #2
 800bace:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6919      	ldr	r1, [r3, #16]
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	b2da      	uxtb	r2, r3
 800bad8:	69fb      	ldr	r3, [r7, #28]
 800bada:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	9300      	str	r3, [sp, #0]
 800bae4:	4603      	mov	r3, r0
 800bae6:	6978      	ldr	r0, [r7, #20]
 800bae8:	f008 fac0 	bl	801406c <USB_WritePacket>

    ep->xfer_buff  += len;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	691a      	ldr	r2, [r3, #16]
 800baf0:	69fb      	ldr	r3, [r7, #28]
 800baf2:	441a      	add	r2, r3
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6a1a      	ldr	r2, [r3, #32]
 800bafc:	69fb      	ldr	r3, [r7, #28]
 800bafe:	441a      	add	r2, r3
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	015a      	lsls	r2, r3, #5
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb10:	699b      	ldr	r3, [r3, #24]
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	69ba      	ldr	r2, [r7, #24]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d809      	bhi.n	800bb2e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6a1a      	ldr	r2, [r3, #32]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d203      	bcs.n	800bb2e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	699b      	ldr	r3, [r3, #24]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d1be      	bne.n	800baac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	699a      	ldr	r2, [r3, #24]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	6a1b      	ldr	r3, [r3, #32]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d811      	bhi.n	800bb5e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	f003 030f 	and.w	r3, r3, #15
 800bb40:	2201      	movs	r2, #1
 800bb42:	fa02 f303 	lsl.w	r3, r2, r3
 800bb46:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	43db      	mvns	r3, r3
 800bb54:	6939      	ldr	r1, [r7, #16]
 800bb56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb5a:	4013      	ands	r3, r2
 800bb5c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800bb5e:	2300      	movs	r3, #0
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3720      	adds	r7, #32
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b088      	sub	sp, #32
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb78:	69fb      	ldr	r3, [r7, #28]
 800bb7a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	333c      	adds	r3, #60	; 0x3c
 800bb80:	3304      	adds	r3, #4
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	015a      	lsls	r2, r3, #5
 800bb8a:	69bb      	ldr	r3, [r7, #24]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	691b      	ldr	r3, [r3, #16]
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d17b      	bne.n	800bc96 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	f003 0308 	and.w	r3, r3, #8
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d015      	beq.n	800bbd4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	4a61      	ldr	r2, [pc, #388]	; (800bd30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	f240 80b9 	bls.w	800bd24 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	f000 80b3 	beq.w	800bd24 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	015a      	lsls	r2, r3, #5
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbca:	461a      	mov	r2, r3
 800bbcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbd0:	6093      	str	r3, [r2, #8]
 800bbd2:	e0a7      	b.n	800bd24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	f003 0320 	and.w	r3, r3, #32
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d009      	beq.n	800bbf2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	015a      	lsls	r2, r3, #5
 800bbe2:	69bb      	ldr	r3, [r7, #24]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbea:	461a      	mov	r2, r3
 800bbec:	2320      	movs	r3, #32
 800bbee:	6093      	str	r3, [r2, #8]
 800bbf0:	e098      	b.n	800bd24 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	f040 8093 	bne.w	800bd24 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	4a4b      	ldr	r2, [pc, #300]	; (800bd30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d90f      	bls.n	800bc26 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d00a      	beq.n	800bc26 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	015a      	lsls	r2, r3, #5
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	4413      	add	r3, r2
 800bc18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc22:	6093      	str	r3, [r2, #8]
 800bc24:	e07e      	b.n	800bd24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800bc26:	683a      	ldr	r2, [r7, #0]
 800bc28:	4613      	mov	r3, r2
 800bc2a:	00db      	lsls	r3, r3, #3
 800bc2c:	4413      	add	r3, r2
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	4413      	add	r3, r2
 800bc38:	3304      	adds	r3, #4
 800bc3a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	69da      	ldr	r2, [r3, #28]
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	0159      	lsls	r1, r3, #5
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	440b      	add	r3, r1
 800bc48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc4c:	691b      	ldr	r3, [r3, #16]
 800bc4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc52:	1ad2      	subs	r2, r2, r3
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d114      	bne.n	800bc88 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	699b      	ldr	r3, [r3, #24]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d109      	bne.n	800bc7a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6818      	ldr	r0, [r3, #0]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bc70:	461a      	mov	r2, r3
 800bc72:	2101      	movs	r1, #1
 800bc74:	f008 fcb2 	bl	80145dc <USB_EP0_OutStart>
 800bc78:	e006      	b.n	800bc88 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	691a      	ldr	r2, [r3, #16]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	6a1b      	ldr	r3, [r3, #32]
 800bc82:	441a      	add	r2, r3
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f011 f848 	bl	801cd24 <HAL_PCD_DataOutStageCallback>
 800bc94:	e046      	b.n	800bd24 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	4a26      	ldr	r2, [pc, #152]	; (800bd34 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d124      	bne.n	800bce8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d00a      	beq.n	800bcbe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	015a      	lsls	r2, r3, #5
 800bcac:	69bb      	ldr	r3, [r7, #24]
 800bcae:	4413      	add	r3, r2
 800bcb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcba:	6093      	str	r3, [r2, #8]
 800bcbc:	e032      	b.n	800bd24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	f003 0320 	and.w	r3, r3, #32
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d008      	beq.n	800bcda <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	015a      	lsls	r2, r3, #5
 800bccc:	69bb      	ldr	r3, [r7, #24]
 800bcce:	4413      	add	r3, r2
 800bcd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	2320      	movs	r3, #32
 800bcd8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	4619      	mov	r1, r3
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f011 f81f 	bl	801cd24 <HAL_PCD_DataOutStageCallback>
 800bce6:	e01d      	b.n	800bd24 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d114      	bne.n	800bd18 <PCD_EP_OutXfrComplete_int+0x1b0>
 800bcee:	6879      	ldr	r1, [r7, #4]
 800bcf0:	683a      	ldr	r2, [r7, #0]
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	00db      	lsls	r3, r3, #3
 800bcf6:	4413      	add	r3, r2
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	440b      	add	r3, r1
 800bcfc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d108      	bne.n	800bd18 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6818      	ldr	r0, [r3, #0]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bd10:	461a      	mov	r2, r3
 800bd12:	2100      	movs	r1, #0
 800bd14:	f008 fc62 	bl	80145dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f011 f800 	bl	801cd24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800bd24:	2300      	movs	r3, #0
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3720      	adds	r7, #32
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	4f54300a 	.word	0x4f54300a
 800bd34:	4f54310a 	.word	0x4f54310a

0800bd38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b086      	sub	sp, #24
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	333c      	adds	r3, #60	; 0x3c
 800bd50:	3304      	adds	r3, #4
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	015a      	lsls	r2, r3, #5
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	4a15      	ldr	r2, [pc, #84]	; (800bdc0 <PCD_EP_OutSetupPacket_int+0x88>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d90e      	bls.n	800bd8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d009      	beq.n	800bd8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	015a      	lsls	r2, r3, #5
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	4413      	add	r3, r2
 800bd80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd84:	461a      	mov	r2, r3
 800bd86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f010 ffb7 	bl	801cd00 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	4a0a      	ldr	r2, [pc, #40]	; (800bdc0 <PCD_EP_OutSetupPacket_int+0x88>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d90c      	bls.n	800bdb4 <PCD_EP_OutSetupPacket_int+0x7c>
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	691b      	ldr	r3, [r3, #16]
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d108      	bne.n	800bdb4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6818      	ldr	r0, [r3, #0]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bdac:	461a      	mov	r2, r3
 800bdae:	2101      	movs	r1, #1
 800bdb0:	f008 fc14 	bl	80145dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800bdb4:	2300      	movs	r3, #0
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3718      	adds	r7, #24
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	4f54300a 	.word	0x4f54300a

0800bdc4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b085      	sub	sp, #20
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	460b      	mov	r3, r1
 800bdce:	70fb      	strb	r3, [r7, #3]
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdda:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800bddc:	78fb      	ldrb	r3, [r7, #3]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d107      	bne.n	800bdf2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800bde2:	883b      	ldrh	r3, [r7, #0]
 800bde4:	0419      	lsls	r1, r3, #16
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	68ba      	ldr	r2, [r7, #8]
 800bdec:	430a      	orrs	r2, r1
 800bdee:	629a      	str	r2, [r3, #40]	; 0x28
 800bdf0:	e028      	b.n	800be44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdf8:	0c1b      	lsrs	r3, r3, #16
 800bdfa:	68ba      	ldr	r2, [r7, #8]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800be00:	2300      	movs	r3, #0
 800be02:	73fb      	strb	r3, [r7, #15]
 800be04:	e00d      	b.n	800be22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	7bfb      	ldrb	r3, [r7, #15]
 800be0c:	3340      	adds	r3, #64	; 0x40
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	4413      	add	r3, r2
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	0c1b      	lsrs	r3, r3, #16
 800be16:	68ba      	ldr	r2, [r7, #8]
 800be18:	4413      	add	r3, r2
 800be1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800be1c:	7bfb      	ldrb	r3, [r7, #15]
 800be1e:	3301      	adds	r3, #1
 800be20:	73fb      	strb	r3, [r7, #15]
 800be22:	7bfa      	ldrb	r2, [r7, #15]
 800be24:	78fb      	ldrb	r3, [r7, #3]
 800be26:	3b01      	subs	r3, #1
 800be28:	429a      	cmp	r2, r3
 800be2a:	d3ec      	bcc.n	800be06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800be2c:	883b      	ldrh	r3, [r7, #0]
 800be2e:	0418      	lsls	r0, r3, #16
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6819      	ldr	r1, [r3, #0]
 800be34:	78fb      	ldrb	r3, [r7, #3]
 800be36:	3b01      	subs	r3, #1
 800be38:	68ba      	ldr	r2, [r7, #8]
 800be3a:	4302      	orrs	r2, r0
 800be3c:	3340      	adds	r3, #64	; 0x40
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	440b      	add	r3, r1
 800be42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800be44:	2300      	movs	r3, #0
}
 800be46:	4618      	mov	r0, r3
 800be48:	3714      	adds	r7, #20
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr

0800be52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800be52:	b480      	push	{r7}
 800be54:	b083      	sub	sp, #12
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
 800be5a:	460b      	mov	r3, r1
 800be5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	887a      	ldrh	r2, [r7, #2]
 800be64:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800be66:	2300      	movs	r3, #0
}
 800be68:	4618      	mov	r0, r3
 800be6a:	370c      	adds	r7, #12
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800be74:	b480      	push	{r7}
 800be76:	b085      	sub	sp, #20
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2201      	movs	r2, #1
 800be86:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2200      	movs	r2, #0
 800be8e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	699b      	ldr	r3, [r3, #24]
 800be96:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bea2:	4b05      	ldr	r3, [pc, #20]	; (800beb8 <HAL_PCDEx_ActivateLPM+0x44>)
 800bea4:	4313      	orrs	r3, r2
 800bea6:	68fa      	ldr	r2, [r7, #12]
 800bea8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800beaa:	2300      	movs	r3, #0
}
 800beac:	4618      	mov	r0, r3
 800beae:	3714      	adds	r7, #20
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr
 800beb8:	10000003 	.word	0x10000003

0800bebc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bebc:	b480      	push	{r7}
 800bebe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bec0:	4b05      	ldr	r3, [pc, #20]	; (800bed8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a04      	ldr	r2, [pc, #16]	; (800bed8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800beca:	6013      	str	r3, [r2, #0]
}
 800becc:	bf00      	nop
 800bece:	46bd      	mov	sp, r7
 800bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed4:	4770      	bx	lr
 800bed6:	bf00      	nop
 800bed8:	40007000 	.word	0x40007000

0800bedc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800bee2:	2300      	movs	r3, #0
 800bee4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800bee6:	4b23      	ldr	r3, [pc, #140]	; (800bf74 <HAL_PWREx_EnableOverDrive+0x98>)
 800bee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beea:	4a22      	ldr	r2, [pc, #136]	; (800bf74 <HAL_PWREx_EnableOverDrive+0x98>)
 800beec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bef0:	6413      	str	r3, [r2, #64]	; 0x40
 800bef2:	4b20      	ldr	r3, [pc, #128]	; (800bf74 <HAL_PWREx_EnableOverDrive+0x98>)
 800bef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800befa:	603b      	str	r3, [r7, #0]
 800befc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800befe:	4b1e      	ldr	r3, [pc, #120]	; (800bf78 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4a1d      	ldr	r2, [pc, #116]	; (800bf78 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bf04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf08:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bf0a:	f7f9 fe01 	bl	8005b10 <HAL_GetTick>
 800bf0e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bf10:	e009      	b.n	800bf26 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bf12:	f7f9 fdfd 	bl	8005b10 <HAL_GetTick>
 800bf16:	4602      	mov	r2, r0
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	1ad3      	subs	r3, r2, r3
 800bf1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf20:	d901      	bls.n	800bf26 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800bf22:	2303      	movs	r3, #3
 800bf24:	e022      	b.n	800bf6c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bf26:	4b14      	ldr	r3, [pc, #80]	; (800bf78 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf32:	d1ee      	bne.n	800bf12 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800bf34:	4b10      	ldr	r3, [pc, #64]	; (800bf78 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a0f      	ldr	r2, [pc, #60]	; (800bf78 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bf3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf3e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bf40:	f7f9 fde6 	bl	8005b10 <HAL_GetTick>
 800bf44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bf46:	e009      	b.n	800bf5c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bf48:	f7f9 fde2 	bl	8005b10 <HAL_GetTick>
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf56:	d901      	bls.n	800bf5c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800bf58:	2303      	movs	r3, #3
 800bf5a:	e007      	b.n	800bf6c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bf5c:	4b06      	ldr	r3, [pc, #24]	; (800bf78 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf68:	d1ee      	bne.n	800bf48 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800bf6a:	2300      	movs	r3, #0
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3708      	adds	r7, #8
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	40023800 	.word	0x40023800
 800bf78:	40007000 	.word	0x40007000

0800bf7c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b086      	sub	sp, #24
 800bf80:	af02      	add	r7, sp, #8
 800bf82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800bf84:	f7f9 fdc4 	bl	8005b10 <HAL_GetTick>
 800bf88:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d101      	bne.n	800bf94 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800bf90:	2301      	movs	r3, #1
 800bf92:	e067      	b.n	800c064 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d10b      	bne.n	800bfb8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f7f6 ffe1 	bl	8002f70 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800bfae:	f241 3188 	movw	r1, #5000	; 0x1388
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 fdc0 	bl	800cb38 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	689b      	ldr	r3, [r3, #8]
 800bfc6:	3b01      	subs	r3, #1
 800bfc8:	021a      	lsls	r2, r3, #8
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	430a      	orrs	r2, r1
 800bfd0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfd6:	9300      	str	r3, [sp, #0]
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	2120      	movs	r1, #32
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 fdeb 	bl	800cbba <QSPI_WaitFlagStateUntilTimeout>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800bfe8:	7afb      	ldrb	r3, [r7, #11]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d135      	bne.n	800c05a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	681a      	ldr	r2, [r3, #0]
 800bff4:	4b1d      	ldr	r3, [pc, #116]	; (800c06c <HAL_QSPI_Init+0xf0>)
 800bff6:	4013      	ands	r3, r2
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	6852      	ldr	r2, [r2, #4]
 800bffc:	0611      	lsls	r1, r2, #24
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	68d2      	ldr	r2, [r2, #12]
 800c002:	4311      	orrs	r1, r2
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	69d2      	ldr	r2, [r2, #28]
 800c008:	4311      	orrs	r1, r2
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	6a12      	ldr	r2, [r2, #32]
 800c00e:	4311      	orrs	r1, r2
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	6812      	ldr	r2, [r2, #0]
 800c014:	430b      	orrs	r3, r1
 800c016:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	685a      	ldr	r2, [r3, #4]
 800c01e:	4b14      	ldr	r3, [pc, #80]	; (800c070 <HAL_QSPI_Init+0xf4>)
 800c020:	4013      	ands	r3, r2
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	6912      	ldr	r2, [r2, #16]
 800c026:	0411      	lsls	r1, r2, #16
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	6952      	ldr	r2, [r2, #20]
 800c02c:	4311      	orrs	r1, r2
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	6992      	ldr	r2, [r2, #24]
 800c032:	4311      	orrs	r1, r2
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	6812      	ldr	r2, [r2, #0]
 800c038:	430b      	orrs	r3, r1
 800c03a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f042 0201 	orr.w	r2, r2, #1
 800c04a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2201      	movs	r2, #1
 800c056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2200      	movs	r2, #0
 800c05e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c062:	7afb      	ldrb	r3, [r7, #11]
}
 800c064:	4618      	mov	r0, r3
 800c066:	3710      	adds	r7, #16
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	00ffff2f 	.word	0x00ffff2f
 800c070:	ffe0f8fe 	.word	0xffe0f8fe

0800c074 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b086      	sub	sp, #24
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	689b      	ldr	r3, [r3, #8]
 800c082:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	f003 0304 	and.w	r3, r3, #4
 800c092:	2b00      	cmp	r3, #0
 800c094:	d064      	beq.n	800c160 <HAL_QSPI_IRQHandler+0xec>
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d05f      	beq.n	800c160 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	3320      	adds	r3, #32
 800c0a6:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0ae:	b2db      	uxtb	r3, r3
 800c0b0:	2b12      	cmp	r3, #18
 800c0b2:	d125      	bne.n	800c100 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800c0b4:	e01c      	b.n	800c0f0 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d00f      	beq.n	800c0de <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c2:	781a      	ldrb	r2, [r3, #0]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0cc:	1c5a      	adds	r2, r3, #1
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d6:	1e5a      	subs	r2, r3, #1
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	62da      	str	r2, [r3, #44]	; 0x2c
 800c0dc:	e008      	b.n	800c0f0 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	681a      	ldr	r2, [r3, #0]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c0ec:	601a      	str	r2, [r3, #0]
          break;
 800c0ee:	e033      	b.n	800c158 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	689b      	ldr	r3, [r3, #8]
 800c0f6:	f003 0304 	and.w	r3, r3, #4
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d1db      	bne.n	800c0b6 <HAL_QSPI_IRQHandler+0x42>
 800c0fe:	e02b      	b.n	800c158 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c106:	b2db      	uxtb	r3, r3
 800c108:	2b22      	cmp	r3, #34	; 0x22
 800c10a:	d125      	bne.n	800c158 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800c10c:	e01d      	b.n	800c14a <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c112:	2b00      	cmp	r3, #0
 800c114:	d010      	beq.n	800c138 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c11a:	68fa      	ldr	r2, [r7, #12]
 800c11c:	7812      	ldrb	r2, [r2, #0]
 800c11e:	b2d2      	uxtb	r2, r2
 800c120:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c126:	1c5a      	adds	r2, r3, #1
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c130:	1e5a      	subs	r2, r3, #1
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	639a      	str	r2, [r3, #56]	; 0x38
 800c136:	e008      	b.n	800c14a <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c146:	601a      	str	r2, [r3, #0]
          break;
 800c148:	e006      	b.n	800c158 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	689b      	ldr	r3, [r3, #8]
 800c150:	f003 0304 	and.w	r3, r3, #4
 800c154:	2b00      	cmp	r3, #0
 800c156:	d1da      	bne.n	800c10e <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 fbed 	bl	800c938 <HAL_QSPI_FifoThresholdCallback>
 800c15e:	e142      	b.n	800c3e6 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	f003 0302 	and.w	r3, r3, #2
 800c166:	2b00      	cmp	r3, #0
 800c168:	f000 80b6 	beq.w	800c2d8 <HAL_QSPI_IRQHandler+0x264>
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c172:	2b00      	cmp	r3, #0
 800c174:	f000 80b0 	beq.w	800c2d8 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2202      	movs	r2, #2
 800c17e:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800c18e:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c196:	b2db      	uxtb	r3, r3
 800c198:	2b12      	cmp	r3, #18
 800c19a:	d123      	bne.n	800c1e4 <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f003 0304 	and.w	r3, r3, #4
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d011      	beq.n	800c1ce <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	681a      	ldr	r2, [r3, #0]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f022 0204 	bic.w	r2, r2, #4
 800c1b8:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f022 0201 	bic.w	r2, r2, #1
 800c1cc:	601a      	str	r2, [r3, #0]
      }

#if  defined(QSPI1_V1_0)
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 fc4a 	bl	800ca68 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 fba1 	bl	800c924 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c1e2:	e0fd      	b.n	800c3e0 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	2b22      	cmp	r3, #34	; 0x22
 800c1ee:	d146      	bne.n	800c27e <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f003 0304 	and.w	r3, r3, #4
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d012      	beq.n	800c224 <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f022 0204 	bic.w	r2, r2, #4
 800c20c:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f022 0201 	bic.w	r2, r2, #1
 800c220:	601a      	str	r2, [r3, #0]
 800c222:	e021      	b.n	800c268 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	3320      	adds	r3, #32
 800c22a:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800c22c:	e013      	b.n	800c256 <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c232:	2b00      	cmp	r3, #0
 800c234:	d017      	beq.n	800c266 <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c23a:	68fa      	ldr	r2, [r7, #12]
 800c23c:	7812      	ldrb	r2, [r2, #0]
 800c23e:	b2d2      	uxtb	r2, r2
 800c240:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c246:	1c5a      	adds	r2, r3, #1
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c250:	1e5a      	subs	r2, r3, #1
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800c260:	2b00      	cmp	r3, #0
 800c262:	d1e4      	bne.n	800c22e <HAL_QSPI_IRQHandler+0x1ba>
 800c264:	e000      	b.n	800c268 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800c266:	bf00      	nop
        }
      }

#if  defined(QSPI1_V1_0)
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 fbfd 	bl	800ca68 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2201      	movs	r2, #1
 800c272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 fb4a 	bl	800c910 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c27c:	e0b0      	b.n	800c3e0 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c284:	b2db      	uxtb	r3, r3
 800c286:	2b02      	cmp	r3, #2
 800c288:	d107      	bne.n	800c29a <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2201      	movs	r2, #1
 800c28e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f000 fb32 	bl	800c8fc <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c298:	e0a2      	b.n	800c3e0 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	2b08      	cmp	r3, #8
 800c2a4:	f040 809c 	bne.w	800c3e0 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	695a      	ldr	r2, [r3, #20]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800c2b6:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d103      	bne.n	800c2d0 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 fb0d 	bl	800c8e8 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c2ce:	e087      	b.n	800c3e0 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 faff 	bl	800c8d4 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c2d6:	e083      	b.n	800c3e0 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	f003 0308 	and.w	r3, r3, #8
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d01f      	beq.n	800c322 <HAL_QSPI_IRQHandler+0x2ae>
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d01a      	beq.n	800c322 <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	2208      	movs	r2, #8
 800c2f2:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d00b      	beq.n	800c31a <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	681a      	ldr	r2, [r3, #0]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800c310:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2201      	movs	r2, #1
 800c316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 fb16 	bl	800c94c <HAL_QSPI_StatusMatchCallback>
 800c320:	e061      	b.n	800c3e6 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	f003 0301 	and.w	r3, r3, #1
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d047      	beq.n	800c3bc <HAL_QSPI_IRQHandler+0x348>
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c332:	2b00      	cmp	r3, #0
 800c334:	d042      	beq.n	800c3bc <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2201      	movs	r2, #1
 800c33c:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800c34c:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c352:	f043 0202 	orr.w	r2, r3, #2
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f003 0304 	and.w	r3, r3, #4
 800c364:	2b00      	cmp	r3, #0
 800c366:	d021      	beq.n	800c3ac <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f022 0204 	bic.w	r2, r2, #4
 800c376:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c37c:	4a1c      	ldr	r2, [pc, #112]	; (800c3f0 <HAL_QSPI_IRQHandler+0x37c>)
 800c37e:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c384:	4618      	mov	r0, r3
 800c386:	f7fa fb4d 	bl	8006a24 <HAL_DMA_Abort_IT>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d029      	beq.n	800c3e4 <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c394:	f043 0204 	orr.w	r2, r3, #4
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 fa95 	bl	800c8d4 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c3aa:	e01b      	b.n	800c3e4 <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 fa8d 	bl	800c8d4 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c3ba:	e013      	b.n	800c3e4 <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	f003 0310 	and.w	r3, r3, #16
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d00f      	beq.n	800c3e6 <HAL_QSPI_IRQHandler+0x372>
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d00a      	beq.n	800c3e6 <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	2210      	movs	r2, #16
 800c3d6:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 fac1 	bl	800c960 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800c3de:	e002      	b.n	800c3e6 <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800c3e0:	bf00      	nop
 800c3e2:	e000      	b.n	800c3e6 <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c3e4:	bf00      	nop
}
 800c3e6:	bf00      	nop
 800c3e8:	3718      	adds	r7, #24
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	0800cb55 	.word	0x0800cb55

0800c3f4 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b088      	sub	sp, #32
 800c3f8:	af02      	add	r7, sp, #8
 800c3fa:	60f8      	str	r0, [r7, #12]
 800c3fc:	60b9      	str	r1, [r7, #8]
 800c3fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c400:	f7f9 fb86 	bl	8005b10 <HAL_GetTick>
 800c404:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c40c:	b2db      	uxtb	r3, r3
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d101      	bne.n	800c416 <HAL_QSPI_Command+0x22>
 800c412:	2302      	movs	r3, #2
 800c414:	e048      	b.n	800c4a8 <HAL_QSPI_Command+0xb4>
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2201      	movs	r2, #1
 800c41a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c424:	b2db      	uxtb	r3, r3
 800c426:	2b01      	cmp	r3, #1
 800c428:	d137      	bne.n	800c49a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2200      	movs	r2, #0
 800c42e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2202      	movs	r2, #2
 800c434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	9300      	str	r3, [sp, #0]
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	2200      	movs	r2, #0
 800c440:	2120      	movs	r1, #32
 800c442:	68f8      	ldr	r0, [r7, #12]
 800c444:	f000 fbb9 	bl	800cbba <QSPI_WaitFlagStateUntilTimeout>
 800c448:	4603      	mov	r3, r0
 800c44a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c44c:	7dfb      	ldrb	r3, [r7, #23]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d125      	bne.n	800c49e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c452:	2200      	movs	r2, #0
 800c454:	68b9      	ldr	r1, [r7, #8]
 800c456:	68f8      	ldr	r0, [r7, #12]
 800c458:	f000 fbe6 	bl	800cc28 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c460:	2b00      	cmp	r3, #0
 800c462:	d115      	bne.n	800c490 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	9300      	str	r3, [sp, #0]
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	2201      	movs	r2, #1
 800c46c:	2102      	movs	r1, #2
 800c46e:	68f8      	ldr	r0, [r7, #12]
 800c470:	f000 fba3 	bl	800cbba <QSPI_WaitFlagStateUntilTimeout>
 800c474:	4603      	mov	r3, r0
 800c476:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800c478:	7dfb      	ldrb	r3, [r7, #23]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d10f      	bne.n	800c49e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2202      	movs	r2, #2
 800c484:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2201      	movs	r2, #1
 800c48a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c48e:	e006      	b.n	800c49e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	2201      	movs	r2, #1
 800c494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c498:	e001      	b.n	800c49e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800c49a:	2302      	movs	r3, #2
 800c49c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c4a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3718      	adds	r7, #24
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b08a      	sub	sp, #40	; 0x28
 800c4b4:	af02      	add	r7, sp, #8
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800c4c0:	f7f9 fb26 	bl	8005b10 <HAL_GetTick>
 800c4c4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	3320      	adds	r3, #32
 800c4cc:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d101      	bne.n	800c4de <HAL_QSPI_Transmit+0x2e>
 800c4da:	2302      	movs	r3, #2
 800c4dc:	e07b      	b.n	800c5d6 <HAL_QSPI_Transmit+0x126>
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	2b01      	cmp	r3, #1
 800c4f0:	d16a      	bne.n	800c5c8 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d05b      	beq.n	800c5b6 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2212      	movs	r2, #18
 800c502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	691b      	ldr	r3, [r3, #16]
 800c50c:	1c5a      	adds	r2, r3, #1
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	691b      	ldr	r3, [r3, #16]
 800c518:	1c5a      	adds	r2, r3, #1
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	68ba      	ldr	r2, [r7, #8]
 800c522:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	695a      	ldr	r2, [r3, #20]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800c532:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800c534:	e01b      	b.n	800c56e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	9300      	str	r3, [sp, #0]
 800c53a:	69bb      	ldr	r3, [r7, #24]
 800c53c:	2201      	movs	r2, #1
 800c53e:	2104      	movs	r1, #4
 800c540:	68f8      	ldr	r0, [r7, #12]
 800c542:	f000 fb3a 	bl	800cbba <QSPI_WaitFlagStateUntilTimeout>
 800c546:	4603      	mov	r3, r0
 800c548:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800c54a:	7ffb      	ldrb	r3, [r7, #31]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d113      	bne.n	800c578 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c554:	781a      	ldrb	r2, [r3, #0]
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c55e:	1c5a      	adds	r2, r3, #1
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c568:	1e5a      	subs	r2, r3, #1
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c572:	2b00      	cmp	r3, #0
 800c574:	d1df      	bne.n	800c536 <HAL_QSPI_Transmit+0x86>
 800c576:	e000      	b.n	800c57a <HAL_QSPI_Transmit+0xca>
          break;
 800c578:	bf00      	nop
      }

      if (status == HAL_OK)
 800c57a:	7ffb      	ldrb	r3, [r7, #31]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d115      	bne.n	800c5ac <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	9300      	str	r3, [sp, #0]
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	2201      	movs	r2, #1
 800c588:	2102      	movs	r1, #2
 800c58a:	68f8      	ldr	r0, [r7, #12]
 800c58c:	f000 fb15 	bl	800cbba <QSPI_WaitFlagStateUntilTimeout>
 800c590:	4603      	mov	r3, r0
 800c592:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800c594:	7ffb      	ldrb	r3, [r7, #31]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d108      	bne.n	800c5ac <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2202      	movs	r2, #2
 800c5a0:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800c5a2:	68f8      	ldr	r0, [r7, #12]
 800c5a4:	f000 f9e6 	bl	800c974 <HAL_QSPI_Abort>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c5b4:	e00a      	b.n	800c5cc <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5ba:	f043 0208 	orr.w	r2, r3, #8
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	77fb      	strb	r3, [r7, #31]
 800c5c6:	e001      	b.n	800c5cc <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c5c8:	2302      	movs	r3, #2
 800c5ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800c5d4:	7ffb      	ldrb	r3, [r7, #31]
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3720      	adds	r7, #32
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}

0800c5de <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800c5de:	b580      	push	{r7, lr}
 800c5e0:	b08a      	sub	sp, #40	; 0x28
 800c5e2:	af02      	add	r7, sp, #8
 800c5e4:	60f8      	str	r0, [r7, #12]
 800c5e6:	60b9      	str	r1, [r7, #8]
 800c5e8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800c5ee:	f7f9 fa8f 	bl	8005b10 <HAL_GetTick>
 800c5f2:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	699b      	ldr	r3, [r3, #24]
 800c5fa:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	3320      	adds	r3, #32
 800c602:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d101      	bne.n	800c614 <HAL_QSPI_Receive+0x36>
 800c610:	2302      	movs	r3, #2
 800c612:	e082      	b.n	800c71a <HAL_QSPI_Receive+0x13c>
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2201      	movs	r2, #1
 800c618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c622:	b2db      	uxtb	r3, r3
 800c624:	2b01      	cmp	r3, #1
 800c626:	d171      	bne.n	800c70c <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2200      	movs	r2, #0
 800c62c:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d062      	beq.n	800c6fa <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2222      	movs	r2, #34	; 0x22
 800c638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	691b      	ldr	r3, [r3, #16]
 800c642:	1c5a      	adds	r2, r3, #1
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	691b      	ldr	r3, [r3, #16]
 800c64e:	1c5a      	adds	r2, r3, #1
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	68ba      	ldr	r2, [r7, #8]
 800c658:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	695b      	ldr	r3, [r3, #20]
 800c660:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c66c:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	697a      	ldr	r2, [r7, #20]
 800c674:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800c676:	e01c      	b.n	800c6b2 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	9300      	str	r3, [sp, #0]
 800c67c:	69bb      	ldr	r3, [r7, #24]
 800c67e:	2201      	movs	r2, #1
 800c680:	2106      	movs	r1, #6
 800c682:	68f8      	ldr	r0, [r7, #12]
 800c684:	f000 fa99 	bl	800cbba <QSPI_WaitFlagStateUntilTimeout>
 800c688:	4603      	mov	r3, r0
 800c68a:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800c68c:	7ffb      	ldrb	r3, [r7, #31]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d114      	bne.n	800c6bc <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c696:	693a      	ldr	r2, [r7, #16]
 800c698:	7812      	ldrb	r2, [r2, #0]
 800c69a:	b2d2      	uxtb	r2, r2
 800c69c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6a2:	1c5a      	adds	r2, r3, #1
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ac:	1e5a      	subs	r2, r3, #1
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d1de      	bne.n	800c678 <HAL_QSPI_Receive+0x9a>
 800c6ba:	e000      	b.n	800c6be <HAL_QSPI_Receive+0xe0>
          break;
 800c6bc:	bf00      	nop
      }

      if (status == HAL_OK)
 800c6be:	7ffb      	ldrb	r3, [r7, #31]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d115      	bne.n	800c6f0 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	9300      	str	r3, [sp, #0]
 800c6c8:	69bb      	ldr	r3, [r7, #24]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	2102      	movs	r1, #2
 800c6ce:	68f8      	ldr	r0, [r7, #12]
 800c6d0:	f000 fa73 	bl	800cbba <QSPI_WaitFlagStateUntilTimeout>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800c6d8:	7ffb      	ldrb	r3, [r7, #31]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d108      	bne.n	800c6f0 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2202      	movs	r2, #2
 800c6e4:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800c6e6:	68f8      	ldr	r0, [r7, #12]
 800c6e8:	f000 f944 	bl	800c974 <HAL_QSPI_Abort>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6f8:	e00a      	b.n	800c710 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6fe:	f043 0208 	orr.w	r2, r3, #8
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800c706:	2301      	movs	r3, #1
 800c708:	77fb      	strb	r3, [r7, #31]
 800c70a:	e001      	b.n	800c710 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c70c:	2302      	movs	r3, #2
 800c70e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2200      	movs	r2, #0
 800c714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800c718:	7ffb      	ldrb	r3, [r7, #31]
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3720      	adds	r7, #32
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800c722:	b580      	push	{r7, lr}
 800c724:	b088      	sub	sp, #32
 800c726:	af02      	add	r7, sp, #8
 800c728:	60f8      	str	r0, [r7, #12]
 800c72a:	60b9      	str	r1, [r7, #8]
 800c72c:	607a      	str	r2, [r7, #4]
 800c72e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c730:	f7f9 f9ee 	bl	8005b10 <HAL_GetTick>
 800c734:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d101      	bne.n	800c746 <HAL_QSPI_AutoPolling+0x24>
 800c742:	2302      	movs	r3, #2
 800c744:	e060      	b.n	800c808 <HAL_QSPI_AutoPolling+0xe6>
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2201      	movs	r2, #1
 800c74a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c754:	b2db      	uxtb	r3, r3
 800c756:	2b01      	cmp	r3, #1
 800c758:	d14f      	bne.n	800c7fa <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2200      	movs	r2, #0
 800c75e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2242      	movs	r2, #66	; 0x42
 800c764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	9300      	str	r3, [sp, #0]
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	2200      	movs	r2, #0
 800c770:	2120      	movs	r1, #32
 800c772:	68f8      	ldr	r0, [r7, #12]
 800c774:	f000 fa21 	bl	800cbba <QSPI_WaitFlagStateUntilTimeout>
 800c778:	4603      	mov	r3, r0
 800c77a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c77c:	7dfb      	ldrb	r3, [r7, #23]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d13d      	bne.n	800c7fe <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	6812      	ldr	r2, [r2, #0]
 800c78a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	6852      	ldr	r2, [r2, #4]
 800c794:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	6892      	ldr	r2, [r2, #8]
 800c79e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	691b      	ldr	r3, [r3, #16]
 800c7ae:	431a      	orrs	r2, r3
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800c7b8:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	68da      	ldr	r2, [r3, #12]
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800c7c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c7c6:	68b9      	ldr	r1, [r7, #8]
 800c7c8:	68f8      	ldr	r0, [r7, #12]
 800c7ca:	f000 fa2d 	bl	800cc28 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	9300      	str	r3, [sp, #0]
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	2201      	movs	r2, #1
 800c7d6:	2108      	movs	r1, #8
 800c7d8:	68f8      	ldr	r0, [r7, #12]
 800c7da:	f000 f9ee 	bl	800cbba <QSPI_WaitFlagStateUntilTimeout>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800c7e2:	7dfb      	ldrb	r3, [r7, #23]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d10a      	bne.n	800c7fe <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2208      	movs	r2, #8
 800c7ee:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c7f8:	e001      	b.n	800c7fe <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800c7fa:	2302      	movs	r3, #2
 800c7fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2200      	movs	r2, #0
 800c802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c806:	7dfb      	ldrb	r3, [r7, #23]
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3718      	adds	r7, #24
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b088      	sub	sp, #32
 800c814:	af02      	add	r7, sp, #8
 800c816:	60f8      	str	r0, [r7, #12]
 800c818:	60b9      	str	r1, [r7, #8]
 800c81a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c81c:	f7f9 f978 	bl	8005b10 <HAL_GetTick>
 800c820:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c828:	b2db      	uxtb	r3, r3
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d101      	bne.n	800c832 <HAL_QSPI_MemoryMapped+0x22>
 800c82e:	2302      	movs	r3, #2
 800c830:	e04c      	b.n	800c8cc <HAL_QSPI_MemoryMapped+0xbc>
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2201      	movs	r2, #1
 800c836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c840:	b2db      	uxtb	r3, r3
 800c842:	2b01      	cmp	r3, #1
 800c844:	d13b      	bne.n	800c8be <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	2200      	movs	r2, #0
 800c84a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2282      	movs	r2, #130	; 0x82
 800c850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c858:	9300      	str	r3, [sp, #0]
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	2200      	movs	r2, #0
 800c85e:	2120      	movs	r1, #32
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	f000 f9aa 	bl	800cbba <QSPI_WaitFlagStateUntilTimeout>
 800c866:	4603      	mov	r3, r0
 800c868:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c86a:	7dfb      	ldrb	r3, [r7, #23]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d128      	bne.n	800c8c2 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f023 0108 	bic.w	r1, r3, #8
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	685a      	ldr	r2, [r3, #4]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	430a      	orrs	r2, r1
 800c884:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	2b08      	cmp	r3, #8
 800c88c:	d110      	bne.n	800c8b0 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	6812      	ldr	r2, [r2, #0]
 800c896:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2210      	movs	r2, #16
 800c89e:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c8ae:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800c8b0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800c8b4:	68b9      	ldr	r1, [r7, #8]
 800c8b6:	68f8      	ldr	r0, [r7, #12]
 800c8b8:	f000 f9b6 	bl	800cc28 <QSPI_Config>
 800c8bc:	e001      	b.n	800c8c2 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c8be:	2302      	movs	r3, #2
 800c8c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c8ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3718      	adds	r7, #24
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b083      	sub	sp, #12
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800c8dc:	bf00      	nop
 800c8de:	370c      	adds	r7, #12
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b083      	sub	sp, #12
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800c8f0:	bf00      	nop
 800c8f2:	370c      	adds	r7, #12
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr

0800c8fc <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b083      	sub	sp, #12
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800c904:	bf00      	nop
 800c906:	370c      	adds	r7, #12
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr

0800c910 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800c910:	b480      	push	{r7}
 800c912:	b083      	sub	sp, #12
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800c918:	bf00      	nop
 800c91a:	370c      	adds	r7, #12
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr

0800c924 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800c924:	b480      	push	{r7}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800c92c:	bf00      	nop
 800c92e:	370c      	adds	r7, #12
 800c930:	46bd      	mov	sp, r7
 800c932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c936:	4770      	bx	lr

0800c938 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800c940:	bf00      	nop
 800c942:	370c      	adds	r7, #12
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr

0800c94c <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800c954:	bf00      	nop
 800c956:	370c      	adds	r7, #12
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800c968:	bf00      	nop
 800c96a:	370c      	adds	r7, #12
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr

0800c974 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b086      	sub	sp, #24
 800c978:	af02      	add	r7, sp, #8
 800c97a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c97c:	2300      	movs	r3, #0
 800c97e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800c980:	f7f9 f8c6 	bl	8005b10 <HAL_GetTick>
 800c984:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	f003 0302 	and.w	r3, r3, #2
 800c992:	2b00      	cmp	r3, #0
 800c994:	d062      	beq.n	800ca5c <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2200      	movs	r2, #0
 800c99a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f003 0304 	and.w	r3, r3, #4
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d017      	beq.n	800c9dc <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f022 0204 	bic.w	r2, r2, #4
 800c9ba:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7f9 ffbf 	bl	8006944 <HAL_DMA_Abort>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800c9ca:	7bfb      	ldrb	r3, [r7, #15]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d005      	beq.n	800c9dc <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9d4:	f043 0204 	orr.w	r2, r3, #4
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	689b      	ldr	r3, [r3, #8]
 800c9e2:	f003 0320 	and.w	r3, r3, #32
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d034      	beq.n	800ca54 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f042 0202 	orr.w	r2, r2, #2
 800c9f8:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9fe:	9300      	str	r3, [sp, #0]
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	2201      	movs	r2, #1
 800ca04:	2102      	movs	r1, #2
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 f8d7 	bl	800cbba <QSPI_WaitFlagStateUntilTimeout>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 800ca10:	7bfb      	ldrb	r3, [r7, #15]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d10e      	bne.n	800ca34 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	2202      	movs	r2, #2
 800ca1c:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca22:	9300      	str	r3, [sp, #0]
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	2200      	movs	r2, #0
 800ca28:	2120      	movs	r1, #32
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f000 f8c5 	bl	800cbba <QSPI_WaitFlagStateUntilTimeout>
 800ca30:	4603      	mov	r3, r0
 800ca32:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800ca34:	7bfb      	ldrb	r3, [r7, #15]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d110      	bne.n	800ca5c <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	695a      	ldr	r2, [r3, #20]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800ca48:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ca52:	e003      	b.n	800ca5c <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2201      	movs	r2, #1
 800ca58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 800ca5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3710      	adds	r7, #16
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
	...

0800ca68 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ca70:	2300      	movs	r3, #0
 800ca72:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	f003 0302 	and.w	r3, r3, #2
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d052      	beq.n	800cb2a <HAL_QSPI_Abort_IT+0xc2>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2200      	movs	r2, #0
 800ca88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2208      	movs	r2, #8
 800ca90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	681a      	ldr	r2, [r3, #0]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800caa2:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f003 0304 	and.w	r3, r3, #4
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d01b      	beq.n	800caea <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f022 0204 	bic.w	r2, r2, #4
 800cac0:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cac6:	4a1b      	ldr	r2, [pc, #108]	; (800cb34 <HAL_QSPI_Abort_IT+0xcc>)
 800cac8:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cace:	4618      	mov	r0, r3
 800cad0:	f7f9 ffa8 	bl	8006a24 <HAL_DMA_Abort_IT>
 800cad4:	4603      	mov	r3, r0
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d027      	beq.n	800cb2a <HAL_QSPI_Abort_IT+0xc2>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2201      	movs	r2, #1
 800cade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f7ff ff00 	bl	800c8e8 <HAL_QSPI_AbortCpltCallback>
 800cae8:	e01f      	b.n	800cb2a <HAL_QSPI_Abort_IT+0xc2>
#endif
      }
    }
    else
    {
      if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	689b      	ldr	r3, [r3, #8]
 800caf0:	f003 0320 	and.w	r3, r3, #32
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d014      	beq.n	800cb22 <HAL_QSPI_Abort_IT+0xba>
      {
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2202      	movs	r2, #2
 800cafe:	60da      	str	r2, [r3, #12]
        
        /* Enable the QSPI Transfer Complete Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800cb0e:	601a      	str	r2, [r3, #0]
        
        /* Configure QSPI: CR register with Abort request */
        SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f042 0202 	orr.w	r2, r2, #2
 800cb1e:	601a      	str	r2, [r3, #0]
 800cb20:	e003      	b.n	800cb2a <HAL_QSPI_Abort_IT+0xc2>
      }    
      else
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2201      	movs	r2, #1
 800cb26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      }
    }
  }
  return status;
 800cb2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3710      	adds	r7, #16
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	0800cb55 	.word	0x0800cb55

0800cb38 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	683a      	ldr	r2, [r7, #0]
 800cb46:	649a      	str	r2, [r3, #72]	; 0x48
}
 800cb48:	bf00      	nop
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr

0800cb54 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b084      	sub	sp, #16
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb60:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2200      	movs	r2, #0
 800cb66:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb74:	b2db      	uxtb	r3, r3
 800cb76:	2b08      	cmp	r3, #8
 800cb78:	d114      	bne.n	800cba4 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	2202      	movs	r2, #2
 800cb80:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800cb90:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f042 0202 	orr.w	r2, r2, #2
 800cba0:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800cba2:	e006      	b.n	800cbb2 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	2201      	movs	r2, #1
 800cba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800cbac:	68f8      	ldr	r0, [r7, #12]
 800cbae:	f7ff fe91 	bl	800c8d4 <HAL_QSPI_ErrorCallback>
}
 800cbb2:	bf00      	nop
 800cbb4:	3710      	adds	r7, #16
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b084      	sub	sp, #16
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	60f8      	str	r0, [r7, #12]
 800cbc2:	60b9      	str	r1, [r7, #8]
 800cbc4:	603b      	str	r3, [r7, #0]
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cbca:	e01a      	b.n	800cc02 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cbcc:	69bb      	ldr	r3, [r7, #24]
 800cbce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbd2:	d016      	beq.n	800cc02 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cbd4:	f7f8 ff9c 	bl	8005b10 <HAL_GetTick>
 800cbd8:	4602      	mov	r2, r0
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	1ad3      	subs	r3, r2, r3
 800cbde:	69ba      	ldr	r2, [r7, #24]
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d302      	bcc.n	800cbea <QSPI_WaitFlagStateUntilTimeout+0x30>
 800cbe4:	69bb      	ldr	r3, [r7, #24]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d10b      	bne.n	800cc02 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2204      	movs	r2, #4
 800cbee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbf6:	f043 0201 	orr.w	r2, r3, #1
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	e00e      	b.n	800cc20 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	689a      	ldr	r2, [r3, #8]
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	4013      	ands	r3, r2
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	bf14      	ite	ne
 800cc10:	2301      	movne	r3, #1
 800cc12:	2300      	moveq	r3, #0
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	461a      	mov	r2, r3
 800cc18:	79fb      	ldrb	r3, [r7, #7]
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d1d6      	bne.n	800cbcc <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cc1e:	2300      	movs	r3, #0
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3710      	adds	r7, #16
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b085      	sub	sp, #20
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d009      	beq.n	800cc50 <QSPI_Config+0x28>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800cc42:	d005      	beq.n	800cc50 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	3a01      	subs	r2, #1
 800cc4e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	699b      	ldr	r3, [r3, #24]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	f000 80b9 	beq.w	800cdcc <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	6a1b      	ldr	r3, [r3, #32]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d05f      	beq.n	800cd22 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	68ba      	ldr	r2, [r7, #8]
 800cc68:	6892      	ldr	r2, [r2, #8]
 800cc6a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	69db      	ldr	r3, [r3, #28]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d031      	beq.n	800ccd8 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc7c:	431a      	orrs	r2, r3
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc82:	431a      	orrs	r2, r3
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc88:	431a      	orrs	r2, r3
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	695b      	ldr	r3, [r3, #20]
 800cc8e:	049b      	lsls	r3, r3, #18
 800cc90:	431a      	orrs	r2, r3
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	691b      	ldr	r3, [r3, #16]
 800cc96:	431a      	orrs	r2, r3
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	6a1b      	ldr	r3, [r3, #32]
 800cc9c:	431a      	orrs	r2, r3
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	68db      	ldr	r3, [r3, #12]
 800cca2:	431a      	orrs	r2, r3
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	69db      	ldr	r3, [r3, #28]
 800cca8:	431a      	orrs	r2, r3
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	699b      	ldr	r3, [r3, #24]
 800ccae:	431a      	orrs	r2, r3
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	ea42 0103 	orr.w	r1, r2, r3
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	430a      	orrs	r2, r1
 800ccc0:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ccc8:	f000 812e 	beq.w	800cf28 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	68ba      	ldr	r2, [r7, #8]
 800ccd2:	6852      	ldr	r2, [r2, #4]
 800ccd4:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800ccd6:	e127      	b.n	800cf28 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cce0:	431a      	orrs	r2, r3
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cce6:	431a      	orrs	r2, r3
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccec:	431a      	orrs	r2, r3
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	695b      	ldr	r3, [r3, #20]
 800ccf2:	049b      	lsls	r3, r3, #18
 800ccf4:	431a      	orrs	r2, r3
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	691b      	ldr	r3, [r3, #16]
 800ccfa:	431a      	orrs	r2, r3
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	6a1b      	ldr	r3, [r3, #32]
 800cd00:	431a      	orrs	r2, r3
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	69db      	ldr	r3, [r3, #28]
 800cd06:	431a      	orrs	r2, r3
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	699b      	ldr	r3, [r3, #24]
 800cd0c:	431a      	orrs	r2, r3
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	ea42 0103 	orr.w	r1, r2, r3
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	687a      	ldr	r2, [r7, #4]
 800cd1c:	430a      	orrs	r2, r1
 800cd1e:	615a      	str	r2, [r3, #20]
}
 800cd20:	e102      	b.n	800cf28 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	69db      	ldr	r3, [r3, #28]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d02e      	beq.n	800cd88 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd32:	431a      	orrs	r2, r3
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd38:	431a      	orrs	r2, r3
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd3e:	431a      	orrs	r2, r3
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	695b      	ldr	r3, [r3, #20]
 800cd44:	049b      	lsls	r3, r3, #18
 800cd46:	431a      	orrs	r2, r3
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	6a1b      	ldr	r3, [r3, #32]
 800cd4c:	431a      	orrs	r2, r3
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	431a      	orrs	r2, r3
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	69db      	ldr	r3, [r3, #28]
 800cd58:	431a      	orrs	r2, r3
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	699b      	ldr	r3, [r3, #24]
 800cd5e:	431a      	orrs	r2, r3
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	ea42 0103 	orr.w	r1, r2, r3
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	430a      	orrs	r2, r1
 800cd70:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800cd78:	f000 80d6 	beq.w	800cf28 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	68ba      	ldr	r2, [r7, #8]
 800cd82:	6852      	ldr	r2, [r2, #4]
 800cd84:	619a      	str	r2, [r3, #24]
}
 800cd86:	e0cf      	b.n	800cf28 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd90:	431a      	orrs	r2, r3
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd96:	431a      	orrs	r2, r3
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd9c:	431a      	orrs	r2, r3
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	695b      	ldr	r3, [r3, #20]
 800cda2:	049b      	lsls	r3, r3, #18
 800cda4:	431a      	orrs	r2, r3
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	6a1b      	ldr	r3, [r3, #32]
 800cdaa:	431a      	orrs	r2, r3
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	69db      	ldr	r3, [r3, #28]
 800cdb0:	431a      	orrs	r2, r3
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	699b      	ldr	r3, [r3, #24]
 800cdb6:	431a      	orrs	r2, r3
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	ea42 0103 	orr.w	r1, r2, r3
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	687a      	ldr	r2, [r7, #4]
 800cdc6:	430a      	orrs	r2, r1
 800cdc8:	615a      	str	r2, [r3, #20]
}
 800cdca:	e0ad      	b.n	800cf28 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	6a1b      	ldr	r3, [r3, #32]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d058      	beq.n	800ce86 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	68ba      	ldr	r2, [r7, #8]
 800cdda:	6892      	ldr	r2, [r2, #8]
 800cddc:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	69db      	ldr	r3, [r3, #28]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d02d      	beq.n	800ce42 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdee:	431a      	orrs	r2, r3
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdf4:	431a      	orrs	r2, r3
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdfa:	431a      	orrs	r2, r3
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	695b      	ldr	r3, [r3, #20]
 800ce00:	049b      	lsls	r3, r3, #18
 800ce02:	431a      	orrs	r2, r3
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	691b      	ldr	r3, [r3, #16]
 800ce08:	431a      	orrs	r2, r3
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	6a1b      	ldr	r3, [r3, #32]
 800ce0e:	431a      	orrs	r2, r3
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	68db      	ldr	r3, [r3, #12]
 800ce14:	431a      	orrs	r2, r3
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	69db      	ldr	r3, [r3, #28]
 800ce1a:	431a      	orrs	r2, r3
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	699b      	ldr	r3, [r3, #24]
 800ce20:	ea42 0103 	orr.w	r1, r2, r3
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	430a      	orrs	r2, r1
 800ce2c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ce34:	d078      	beq.n	800cf28 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	68ba      	ldr	r2, [r7, #8]
 800ce3c:	6852      	ldr	r2, [r2, #4]
 800ce3e:	619a      	str	r2, [r3, #24]
}
 800ce40:	e072      	b.n	800cf28 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce4a:	431a      	orrs	r2, r3
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce50:	431a      	orrs	r2, r3
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce56:	431a      	orrs	r2, r3
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	695b      	ldr	r3, [r3, #20]
 800ce5c:	049b      	lsls	r3, r3, #18
 800ce5e:	431a      	orrs	r2, r3
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	691b      	ldr	r3, [r3, #16]
 800ce64:	431a      	orrs	r2, r3
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	6a1b      	ldr	r3, [r3, #32]
 800ce6a:	431a      	orrs	r2, r3
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	69db      	ldr	r3, [r3, #28]
 800ce70:	431a      	orrs	r2, r3
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	699b      	ldr	r3, [r3, #24]
 800ce76:	ea42 0103 	orr.w	r1, r2, r3
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	430a      	orrs	r2, r1
 800ce82:	615a      	str	r2, [r3, #20]
}
 800ce84:	e050      	b.n	800cf28 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	69db      	ldr	r3, [r3, #28]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d02a      	beq.n	800cee4 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce96:	431a      	orrs	r2, r3
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce9c:	431a      	orrs	r2, r3
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea2:	431a      	orrs	r2, r3
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	695b      	ldr	r3, [r3, #20]
 800cea8:	049b      	lsls	r3, r3, #18
 800ceaa:	431a      	orrs	r2, r3
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	6a1b      	ldr	r3, [r3, #32]
 800ceb0:	431a      	orrs	r2, r3
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	68db      	ldr	r3, [r3, #12]
 800ceb6:	431a      	orrs	r2, r3
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	69db      	ldr	r3, [r3, #28]
 800cebc:	431a      	orrs	r2, r3
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	699b      	ldr	r3, [r3, #24]
 800cec2:	ea42 0103 	orr.w	r1, r2, r3
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	687a      	ldr	r2, [r7, #4]
 800cecc:	430a      	orrs	r2, r1
 800cece:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ced6:	d027      	beq.n	800cf28 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	68ba      	ldr	r2, [r7, #8]
 800cede:	6852      	ldr	r2, [r2, #4]
 800cee0:	619a      	str	r2, [r3, #24]
}
 800cee2:	e021      	b.n	800cf28 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d01d      	beq.n	800cf28 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cef4:	431a      	orrs	r2, r3
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cefa:	431a      	orrs	r2, r3
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf00:	431a      	orrs	r2, r3
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	695b      	ldr	r3, [r3, #20]
 800cf06:	049b      	lsls	r3, r3, #18
 800cf08:	431a      	orrs	r2, r3
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	6a1b      	ldr	r3, [r3, #32]
 800cf0e:	431a      	orrs	r2, r3
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	69db      	ldr	r3, [r3, #28]
 800cf14:	431a      	orrs	r2, r3
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	699b      	ldr	r3, [r3, #24]
 800cf1a:	ea42 0103 	orr.w	r1, r2, r3
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	430a      	orrs	r2, r1
 800cf26:	615a      	str	r2, [r3, #20]
}
 800cf28:	bf00      	nop
 800cf2a:	3714      	adds	r7, #20
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr

0800cf34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b086      	sub	sp, #24
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d101      	bne.n	800cf4a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800cf46:	2301      	movs	r3, #1
 800cf48:	e291      	b.n	800d46e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f003 0301 	and.w	r3, r3, #1
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	f000 8087 	beq.w	800d066 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800cf58:	4b96      	ldr	r3, [pc, #600]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800cf5a:	689b      	ldr	r3, [r3, #8]
 800cf5c:	f003 030c 	and.w	r3, r3, #12
 800cf60:	2b04      	cmp	r3, #4
 800cf62:	d00c      	beq.n	800cf7e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cf64:	4b93      	ldr	r3, [pc, #588]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800cf66:	689b      	ldr	r3, [r3, #8]
 800cf68:	f003 030c 	and.w	r3, r3, #12
 800cf6c:	2b08      	cmp	r3, #8
 800cf6e:	d112      	bne.n	800cf96 <HAL_RCC_OscConfig+0x62>
 800cf70:	4b90      	ldr	r3, [pc, #576]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cf7c:	d10b      	bne.n	800cf96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cf7e:	4b8d      	ldr	r3, [pc, #564]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d06c      	beq.n	800d064 <HAL_RCC_OscConfig+0x130>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	685b      	ldr	r3, [r3, #4]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d168      	bne.n	800d064 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800cf92:	2301      	movs	r3, #1
 800cf94:	e26b      	b.n	800d46e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf9e:	d106      	bne.n	800cfae <HAL_RCC_OscConfig+0x7a>
 800cfa0:	4b84      	ldr	r3, [pc, #528]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4a83      	ldr	r2, [pc, #524]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800cfa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cfaa:	6013      	str	r3, [r2, #0]
 800cfac:	e02e      	b.n	800d00c <HAL_RCC_OscConfig+0xd8>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d10c      	bne.n	800cfd0 <HAL_RCC_OscConfig+0x9c>
 800cfb6:	4b7f      	ldr	r3, [pc, #508]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4a7e      	ldr	r2, [pc, #504]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800cfbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cfc0:	6013      	str	r3, [r2, #0]
 800cfc2:	4b7c      	ldr	r3, [pc, #496]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4a7b      	ldr	r2, [pc, #492]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800cfc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cfcc:	6013      	str	r3, [r2, #0]
 800cfce:	e01d      	b.n	800d00c <HAL_RCC_OscConfig+0xd8>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cfd8:	d10c      	bne.n	800cff4 <HAL_RCC_OscConfig+0xc0>
 800cfda:	4b76      	ldr	r3, [pc, #472]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4a75      	ldr	r2, [pc, #468]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800cfe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cfe4:	6013      	str	r3, [r2, #0]
 800cfe6:	4b73      	ldr	r3, [pc, #460]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4a72      	ldr	r2, [pc, #456]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800cfec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cff0:	6013      	str	r3, [r2, #0]
 800cff2:	e00b      	b.n	800d00c <HAL_RCC_OscConfig+0xd8>
 800cff4:	4b6f      	ldr	r3, [pc, #444]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	4a6e      	ldr	r2, [pc, #440]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800cffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cffe:	6013      	str	r3, [r2, #0]
 800d000:	4b6c      	ldr	r3, [pc, #432]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4a6b      	ldr	r2, [pc, #428]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800d006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d00a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	685b      	ldr	r3, [r3, #4]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d013      	beq.n	800d03c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d014:	f7f8 fd7c 	bl	8005b10 <HAL_GetTick>
 800d018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d01a:	e008      	b.n	800d02e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d01c:	f7f8 fd78 	bl	8005b10 <HAL_GetTick>
 800d020:	4602      	mov	r2, r0
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	1ad3      	subs	r3, r2, r3
 800d026:	2b64      	cmp	r3, #100	; 0x64
 800d028:	d901      	bls.n	800d02e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d02a:	2303      	movs	r3, #3
 800d02c:	e21f      	b.n	800d46e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d02e:	4b61      	ldr	r3, [pc, #388]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d036:	2b00      	cmp	r3, #0
 800d038:	d0f0      	beq.n	800d01c <HAL_RCC_OscConfig+0xe8>
 800d03a:	e014      	b.n	800d066 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d03c:	f7f8 fd68 	bl	8005b10 <HAL_GetTick>
 800d040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d042:	e008      	b.n	800d056 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d044:	f7f8 fd64 	bl	8005b10 <HAL_GetTick>
 800d048:	4602      	mov	r2, r0
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	1ad3      	subs	r3, r2, r3
 800d04e:	2b64      	cmp	r3, #100	; 0x64
 800d050:	d901      	bls.n	800d056 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d052:	2303      	movs	r3, #3
 800d054:	e20b      	b.n	800d46e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d056:	4b57      	ldr	r3, [pc, #348]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d1f0      	bne.n	800d044 <HAL_RCC_OscConfig+0x110>
 800d062:	e000      	b.n	800d066 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f003 0302 	and.w	r3, r3, #2
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d069      	beq.n	800d146 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d072:	4b50      	ldr	r3, [pc, #320]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800d074:	689b      	ldr	r3, [r3, #8]
 800d076:	f003 030c 	and.w	r3, r3, #12
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d00b      	beq.n	800d096 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d07e:	4b4d      	ldr	r3, [pc, #308]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800d080:	689b      	ldr	r3, [r3, #8]
 800d082:	f003 030c 	and.w	r3, r3, #12
 800d086:	2b08      	cmp	r3, #8
 800d088:	d11c      	bne.n	800d0c4 <HAL_RCC_OscConfig+0x190>
 800d08a:	4b4a      	ldr	r3, [pc, #296]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800d08c:	685b      	ldr	r3, [r3, #4]
 800d08e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d092:	2b00      	cmp	r3, #0
 800d094:	d116      	bne.n	800d0c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d096:	4b47      	ldr	r3, [pc, #284]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f003 0302 	and.w	r3, r3, #2
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d005      	beq.n	800d0ae <HAL_RCC_OscConfig+0x17a>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	68db      	ldr	r3, [r3, #12]
 800d0a6:	2b01      	cmp	r3, #1
 800d0a8:	d001      	beq.n	800d0ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e1df      	b.n	800d46e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d0ae:	4b41      	ldr	r3, [pc, #260]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	691b      	ldr	r3, [r3, #16]
 800d0ba:	00db      	lsls	r3, r3, #3
 800d0bc:	493d      	ldr	r1, [pc, #244]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d0c2:	e040      	b.n	800d146 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d023      	beq.n	800d114 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d0cc:	4b39      	ldr	r3, [pc, #228]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4a38      	ldr	r2, [pc, #224]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800d0d2:	f043 0301 	orr.w	r3, r3, #1
 800d0d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0d8:	f7f8 fd1a 	bl	8005b10 <HAL_GetTick>
 800d0dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d0de:	e008      	b.n	800d0f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d0e0:	f7f8 fd16 	bl	8005b10 <HAL_GetTick>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	1ad3      	subs	r3, r2, r3
 800d0ea:	2b02      	cmp	r3, #2
 800d0ec:	d901      	bls.n	800d0f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800d0ee:	2303      	movs	r3, #3
 800d0f0:	e1bd      	b.n	800d46e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d0f2:	4b30      	ldr	r3, [pc, #192]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f003 0302 	and.w	r3, r3, #2
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d0f0      	beq.n	800d0e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d0fe:	4b2d      	ldr	r3, [pc, #180]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	691b      	ldr	r3, [r3, #16]
 800d10a:	00db      	lsls	r3, r3, #3
 800d10c:	4929      	ldr	r1, [pc, #164]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800d10e:	4313      	orrs	r3, r2
 800d110:	600b      	str	r3, [r1, #0]
 800d112:	e018      	b.n	800d146 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d114:	4b27      	ldr	r3, [pc, #156]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4a26      	ldr	r2, [pc, #152]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800d11a:	f023 0301 	bic.w	r3, r3, #1
 800d11e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d120:	f7f8 fcf6 	bl	8005b10 <HAL_GetTick>
 800d124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d126:	e008      	b.n	800d13a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d128:	f7f8 fcf2 	bl	8005b10 <HAL_GetTick>
 800d12c:	4602      	mov	r2, r0
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	1ad3      	subs	r3, r2, r3
 800d132:	2b02      	cmp	r3, #2
 800d134:	d901      	bls.n	800d13a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800d136:	2303      	movs	r3, #3
 800d138:	e199      	b.n	800d46e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d13a:	4b1e      	ldr	r3, [pc, #120]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f003 0302 	and.w	r3, r3, #2
 800d142:	2b00      	cmp	r3, #0
 800d144:	d1f0      	bne.n	800d128 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f003 0308 	and.w	r3, r3, #8
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d038      	beq.n	800d1c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	695b      	ldr	r3, [r3, #20]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d019      	beq.n	800d18e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d15a:	4b16      	ldr	r3, [pc, #88]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800d15c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d15e:	4a15      	ldr	r2, [pc, #84]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800d160:	f043 0301 	orr.w	r3, r3, #1
 800d164:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d166:	f7f8 fcd3 	bl	8005b10 <HAL_GetTick>
 800d16a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d16c:	e008      	b.n	800d180 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d16e:	f7f8 fccf 	bl	8005b10 <HAL_GetTick>
 800d172:	4602      	mov	r2, r0
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	1ad3      	subs	r3, r2, r3
 800d178:	2b02      	cmp	r3, #2
 800d17a:	d901      	bls.n	800d180 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d17c:	2303      	movs	r3, #3
 800d17e:	e176      	b.n	800d46e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d180:	4b0c      	ldr	r3, [pc, #48]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800d182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d184:	f003 0302 	and.w	r3, r3, #2
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d0f0      	beq.n	800d16e <HAL_RCC_OscConfig+0x23a>
 800d18c:	e01a      	b.n	800d1c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d18e:	4b09      	ldr	r3, [pc, #36]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800d190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d192:	4a08      	ldr	r2, [pc, #32]	; (800d1b4 <HAL_RCC_OscConfig+0x280>)
 800d194:	f023 0301 	bic.w	r3, r3, #1
 800d198:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d19a:	f7f8 fcb9 	bl	8005b10 <HAL_GetTick>
 800d19e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d1a0:	e00a      	b.n	800d1b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d1a2:	f7f8 fcb5 	bl	8005b10 <HAL_GetTick>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	1ad3      	subs	r3, r2, r3
 800d1ac:	2b02      	cmp	r3, #2
 800d1ae:	d903      	bls.n	800d1b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d1b0:	2303      	movs	r3, #3
 800d1b2:	e15c      	b.n	800d46e <HAL_RCC_OscConfig+0x53a>
 800d1b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d1b8:	4b91      	ldr	r3, [pc, #580]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d1ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1bc:	f003 0302 	and.w	r3, r3, #2
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d1ee      	bne.n	800d1a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f003 0304 	and.w	r3, r3, #4
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f000 80a4 	beq.w	800d31a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d1d2:	4b8b      	ldr	r3, [pc, #556]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d10d      	bne.n	800d1fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800d1de:	4b88      	ldr	r3, [pc, #544]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1e2:	4a87      	ldr	r2, [pc, #540]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d1e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1e8:	6413      	str	r3, [r2, #64]	; 0x40
 800d1ea:	4b85      	ldr	r3, [pc, #532]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1f2:	60bb      	str	r3, [r7, #8]
 800d1f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d1fa:	4b82      	ldr	r3, [pc, #520]	; (800d404 <HAL_RCC_OscConfig+0x4d0>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d202:	2b00      	cmp	r3, #0
 800d204:	d118      	bne.n	800d238 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800d206:	4b7f      	ldr	r3, [pc, #508]	; (800d404 <HAL_RCC_OscConfig+0x4d0>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	4a7e      	ldr	r2, [pc, #504]	; (800d404 <HAL_RCC_OscConfig+0x4d0>)
 800d20c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d212:	f7f8 fc7d 	bl	8005b10 <HAL_GetTick>
 800d216:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d218:	e008      	b.n	800d22c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d21a:	f7f8 fc79 	bl	8005b10 <HAL_GetTick>
 800d21e:	4602      	mov	r2, r0
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	1ad3      	subs	r3, r2, r3
 800d224:	2b64      	cmp	r3, #100	; 0x64
 800d226:	d901      	bls.n	800d22c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800d228:	2303      	movs	r3, #3
 800d22a:	e120      	b.n	800d46e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d22c:	4b75      	ldr	r3, [pc, #468]	; (800d404 <HAL_RCC_OscConfig+0x4d0>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d234:	2b00      	cmp	r3, #0
 800d236:	d0f0      	beq.n	800d21a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	689b      	ldr	r3, [r3, #8]
 800d23c:	2b01      	cmp	r3, #1
 800d23e:	d106      	bne.n	800d24e <HAL_RCC_OscConfig+0x31a>
 800d240:	4b6f      	ldr	r3, [pc, #444]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d244:	4a6e      	ldr	r2, [pc, #440]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d246:	f043 0301 	orr.w	r3, r3, #1
 800d24a:	6713      	str	r3, [r2, #112]	; 0x70
 800d24c:	e02d      	b.n	800d2aa <HAL_RCC_OscConfig+0x376>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	689b      	ldr	r3, [r3, #8]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d10c      	bne.n	800d270 <HAL_RCC_OscConfig+0x33c>
 800d256:	4b6a      	ldr	r3, [pc, #424]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d25a:	4a69      	ldr	r2, [pc, #420]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d25c:	f023 0301 	bic.w	r3, r3, #1
 800d260:	6713      	str	r3, [r2, #112]	; 0x70
 800d262:	4b67      	ldr	r3, [pc, #412]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d266:	4a66      	ldr	r2, [pc, #408]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d268:	f023 0304 	bic.w	r3, r3, #4
 800d26c:	6713      	str	r3, [r2, #112]	; 0x70
 800d26e:	e01c      	b.n	800d2aa <HAL_RCC_OscConfig+0x376>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	689b      	ldr	r3, [r3, #8]
 800d274:	2b05      	cmp	r3, #5
 800d276:	d10c      	bne.n	800d292 <HAL_RCC_OscConfig+0x35e>
 800d278:	4b61      	ldr	r3, [pc, #388]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d27a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d27c:	4a60      	ldr	r2, [pc, #384]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d27e:	f043 0304 	orr.w	r3, r3, #4
 800d282:	6713      	str	r3, [r2, #112]	; 0x70
 800d284:	4b5e      	ldr	r3, [pc, #376]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d288:	4a5d      	ldr	r2, [pc, #372]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d28a:	f043 0301 	orr.w	r3, r3, #1
 800d28e:	6713      	str	r3, [r2, #112]	; 0x70
 800d290:	e00b      	b.n	800d2aa <HAL_RCC_OscConfig+0x376>
 800d292:	4b5b      	ldr	r3, [pc, #364]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d296:	4a5a      	ldr	r2, [pc, #360]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d298:	f023 0301 	bic.w	r3, r3, #1
 800d29c:	6713      	str	r3, [r2, #112]	; 0x70
 800d29e:	4b58      	ldr	r3, [pc, #352]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2a2:	4a57      	ldr	r2, [pc, #348]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d2a4:	f023 0304 	bic.w	r3, r3, #4
 800d2a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	689b      	ldr	r3, [r3, #8]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d015      	beq.n	800d2de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d2b2:	f7f8 fc2d 	bl	8005b10 <HAL_GetTick>
 800d2b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d2b8:	e00a      	b.n	800d2d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d2ba:	f7f8 fc29 	bl	8005b10 <HAL_GetTick>
 800d2be:	4602      	mov	r2, r0
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	1ad3      	subs	r3, r2, r3
 800d2c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d901      	bls.n	800d2d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800d2cc:	2303      	movs	r3, #3
 800d2ce:	e0ce      	b.n	800d46e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d2d0:	4b4b      	ldr	r3, [pc, #300]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d2d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2d4:	f003 0302 	and.w	r3, r3, #2
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d0ee      	beq.n	800d2ba <HAL_RCC_OscConfig+0x386>
 800d2dc:	e014      	b.n	800d308 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d2de:	f7f8 fc17 	bl	8005b10 <HAL_GetTick>
 800d2e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d2e4:	e00a      	b.n	800d2fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d2e6:	f7f8 fc13 	bl	8005b10 <HAL_GetTick>
 800d2ea:	4602      	mov	r2, r0
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	1ad3      	subs	r3, r2, r3
 800d2f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d901      	bls.n	800d2fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800d2f8:	2303      	movs	r3, #3
 800d2fa:	e0b8      	b.n	800d46e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d2fc:	4b40      	ldr	r3, [pc, #256]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d2fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d300:	f003 0302 	and.w	r3, r3, #2
 800d304:	2b00      	cmp	r3, #0
 800d306:	d1ee      	bne.n	800d2e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d308:	7dfb      	ldrb	r3, [r7, #23]
 800d30a:	2b01      	cmp	r3, #1
 800d30c:	d105      	bne.n	800d31a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d30e:	4b3c      	ldr	r3, [pc, #240]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d312:	4a3b      	ldr	r2, [pc, #236]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d318:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	699b      	ldr	r3, [r3, #24]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	f000 80a4 	beq.w	800d46c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d324:	4b36      	ldr	r3, [pc, #216]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d326:	689b      	ldr	r3, [r3, #8]
 800d328:	f003 030c 	and.w	r3, r3, #12
 800d32c:	2b08      	cmp	r3, #8
 800d32e:	d06b      	beq.n	800d408 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	699b      	ldr	r3, [r3, #24]
 800d334:	2b02      	cmp	r3, #2
 800d336:	d149      	bne.n	800d3cc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d338:	4b31      	ldr	r3, [pc, #196]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	4a30      	ldr	r2, [pc, #192]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d33e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d344:	f7f8 fbe4 	bl	8005b10 <HAL_GetTick>
 800d348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d34a:	e008      	b.n	800d35e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d34c:	f7f8 fbe0 	bl	8005b10 <HAL_GetTick>
 800d350:	4602      	mov	r2, r0
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	1ad3      	subs	r3, r2, r3
 800d356:	2b02      	cmp	r3, #2
 800d358:	d901      	bls.n	800d35e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800d35a:	2303      	movs	r3, #3
 800d35c:	e087      	b.n	800d46e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d35e:	4b28      	ldr	r3, [pc, #160]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d366:	2b00      	cmp	r3, #0
 800d368:	d1f0      	bne.n	800d34c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	69da      	ldr	r2, [r3, #28]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6a1b      	ldr	r3, [r3, #32]
 800d372:	431a      	orrs	r2, r3
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d378:	019b      	lsls	r3, r3, #6
 800d37a:	431a      	orrs	r2, r3
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d380:	085b      	lsrs	r3, r3, #1
 800d382:	3b01      	subs	r3, #1
 800d384:	041b      	lsls	r3, r3, #16
 800d386:	431a      	orrs	r2, r3
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d38c:	061b      	lsls	r3, r3, #24
 800d38e:	4313      	orrs	r3, r2
 800d390:	4a1b      	ldr	r2, [pc, #108]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d392:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d396:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d398:	4b19      	ldr	r3, [pc, #100]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4a18      	ldr	r2, [pc, #96]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d39e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d3a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d3a4:	f7f8 fbb4 	bl	8005b10 <HAL_GetTick>
 800d3a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d3aa:	e008      	b.n	800d3be <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d3ac:	f7f8 fbb0 	bl	8005b10 <HAL_GetTick>
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	1ad3      	subs	r3, r2, r3
 800d3b6:	2b02      	cmp	r3, #2
 800d3b8:	d901      	bls.n	800d3be <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800d3ba:	2303      	movs	r3, #3
 800d3bc:	e057      	b.n	800d46e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d3be:	4b10      	ldr	r3, [pc, #64]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d0f0      	beq.n	800d3ac <HAL_RCC_OscConfig+0x478>
 800d3ca:	e04f      	b.n	800d46c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d3cc:	4b0c      	ldr	r3, [pc, #48]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	4a0b      	ldr	r2, [pc, #44]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d3d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d3d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d3d8:	f7f8 fb9a 	bl	8005b10 <HAL_GetTick>
 800d3dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d3de:	e008      	b.n	800d3f2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d3e0:	f7f8 fb96 	bl	8005b10 <HAL_GetTick>
 800d3e4:	4602      	mov	r2, r0
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	1ad3      	subs	r3, r2, r3
 800d3ea:	2b02      	cmp	r3, #2
 800d3ec:	d901      	bls.n	800d3f2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800d3ee:	2303      	movs	r3, #3
 800d3f0:	e03d      	b.n	800d46e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d3f2:	4b03      	ldr	r3, [pc, #12]	; (800d400 <HAL_RCC_OscConfig+0x4cc>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d1f0      	bne.n	800d3e0 <HAL_RCC_OscConfig+0x4ac>
 800d3fe:	e035      	b.n	800d46c <HAL_RCC_OscConfig+0x538>
 800d400:	40023800 	.word	0x40023800
 800d404:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800d408:	4b1b      	ldr	r3, [pc, #108]	; (800d478 <HAL_RCC_OscConfig+0x544>)
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	699b      	ldr	r3, [r3, #24]
 800d412:	2b01      	cmp	r3, #1
 800d414:	d028      	beq.n	800d468 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d420:	429a      	cmp	r2, r3
 800d422:	d121      	bne.n	800d468 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d42e:	429a      	cmp	r2, r3
 800d430:	d11a      	bne.n	800d468 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d432:	68fa      	ldr	r2, [r7, #12]
 800d434:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d438:	4013      	ands	r3, r2
 800d43a:	687a      	ldr	r2, [r7, #4]
 800d43c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d43e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d440:	4293      	cmp	r3, r2
 800d442:	d111      	bne.n	800d468 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d44e:	085b      	lsrs	r3, r3, #1
 800d450:	3b01      	subs	r3, #1
 800d452:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d454:	429a      	cmp	r2, r3
 800d456:	d107      	bne.n	800d468 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d462:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d464:	429a      	cmp	r2, r3
 800d466:	d001      	beq.n	800d46c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800d468:	2301      	movs	r3, #1
 800d46a:	e000      	b.n	800d46e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800d46c:	2300      	movs	r3, #0
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3718      	adds	r7, #24
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	40023800 	.word	0x40023800

0800d47c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b084      	sub	sp, #16
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800d486:	2300      	movs	r3, #0
 800d488:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d101      	bne.n	800d494 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d490:	2301      	movs	r3, #1
 800d492:	e0d0      	b.n	800d636 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d494:	4b6a      	ldr	r3, [pc, #424]	; (800d640 <HAL_RCC_ClockConfig+0x1c4>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f003 030f 	and.w	r3, r3, #15
 800d49c:	683a      	ldr	r2, [r7, #0]
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d910      	bls.n	800d4c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d4a2:	4b67      	ldr	r3, [pc, #412]	; (800d640 <HAL_RCC_ClockConfig+0x1c4>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f023 020f 	bic.w	r2, r3, #15
 800d4aa:	4965      	ldr	r1, [pc, #404]	; (800d640 <HAL_RCC_ClockConfig+0x1c4>)
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d4b2:	4b63      	ldr	r3, [pc, #396]	; (800d640 <HAL_RCC_ClockConfig+0x1c4>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f003 030f 	and.w	r3, r3, #15
 800d4ba:	683a      	ldr	r2, [r7, #0]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d001      	beq.n	800d4c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	e0b8      	b.n	800d636 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f003 0302 	and.w	r3, r3, #2
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d020      	beq.n	800d512 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f003 0304 	and.w	r3, r3, #4
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d005      	beq.n	800d4e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d4dc:	4b59      	ldr	r3, [pc, #356]	; (800d644 <HAL_RCC_ClockConfig+0x1c8>)
 800d4de:	689b      	ldr	r3, [r3, #8]
 800d4e0:	4a58      	ldr	r2, [pc, #352]	; (800d644 <HAL_RCC_ClockConfig+0x1c8>)
 800d4e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d4e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f003 0308 	and.w	r3, r3, #8
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d005      	beq.n	800d500 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d4f4:	4b53      	ldr	r3, [pc, #332]	; (800d644 <HAL_RCC_ClockConfig+0x1c8>)
 800d4f6:	689b      	ldr	r3, [r3, #8]
 800d4f8:	4a52      	ldr	r2, [pc, #328]	; (800d644 <HAL_RCC_ClockConfig+0x1c8>)
 800d4fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d4fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d500:	4b50      	ldr	r3, [pc, #320]	; (800d644 <HAL_RCC_ClockConfig+0x1c8>)
 800d502:	689b      	ldr	r3, [r3, #8]
 800d504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	689b      	ldr	r3, [r3, #8]
 800d50c:	494d      	ldr	r1, [pc, #308]	; (800d644 <HAL_RCC_ClockConfig+0x1c8>)
 800d50e:	4313      	orrs	r3, r2
 800d510:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f003 0301 	and.w	r3, r3, #1
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d040      	beq.n	800d5a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	2b01      	cmp	r3, #1
 800d524:	d107      	bne.n	800d536 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d526:	4b47      	ldr	r3, [pc, #284]	; (800d644 <HAL_RCC_ClockConfig+0x1c8>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d115      	bne.n	800d55e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d532:	2301      	movs	r3, #1
 800d534:	e07f      	b.n	800d636 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	2b02      	cmp	r3, #2
 800d53c:	d107      	bne.n	800d54e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d53e:	4b41      	ldr	r3, [pc, #260]	; (800d644 <HAL_RCC_ClockConfig+0x1c8>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d546:	2b00      	cmp	r3, #0
 800d548:	d109      	bne.n	800d55e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d54a:	2301      	movs	r3, #1
 800d54c:	e073      	b.n	800d636 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d54e:	4b3d      	ldr	r3, [pc, #244]	; (800d644 <HAL_RCC_ClockConfig+0x1c8>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f003 0302 	and.w	r3, r3, #2
 800d556:	2b00      	cmp	r3, #0
 800d558:	d101      	bne.n	800d55e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d55a:	2301      	movs	r3, #1
 800d55c:	e06b      	b.n	800d636 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d55e:	4b39      	ldr	r3, [pc, #228]	; (800d644 <HAL_RCC_ClockConfig+0x1c8>)
 800d560:	689b      	ldr	r3, [r3, #8]
 800d562:	f023 0203 	bic.w	r2, r3, #3
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	4936      	ldr	r1, [pc, #216]	; (800d644 <HAL_RCC_ClockConfig+0x1c8>)
 800d56c:	4313      	orrs	r3, r2
 800d56e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d570:	f7f8 face 	bl	8005b10 <HAL_GetTick>
 800d574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d576:	e00a      	b.n	800d58e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d578:	f7f8 faca 	bl	8005b10 <HAL_GetTick>
 800d57c:	4602      	mov	r2, r0
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	1ad3      	subs	r3, r2, r3
 800d582:	f241 3288 	movw	r2, #5000	; 0x1388
 800d586:	4293      	cmp	r3, r2
 800d588:	d901      	bls.n	800d58e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800d58a:	2303      	movs	r3, #3
 800d58c:	e053      	b.n	800d636 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d58e:	4b2d      	ldr	r3, [pc, #180]	; (800d644 <HAL_RCC_ClockConfig+0x1c8>)
 800d590:	689b      	ldr	r3, [r3, #8]
 800d592:	f003 020c 	and.w	r2, r3, #12
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	009b      	lsls	r3, r3, #2
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d1eb      	bne.n	800d578 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d5a0:	4b27      	ldr	r3, [pc, #156]	; (800d640 <HAL_RCC_ClockConfig+0x1c4>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f003 030f 	and.w	r3, r3, #15
 800d5a8:	683a      	ldr	r2, [r7, #0]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d210      	bcs.n	800d5d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d5ae:	4b24      	ldr	r3, [pc, #144]	; (800d640 <HAL_RCC_ClockConfig+0x1c4>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f023 020f 	bic.w	r2, r3, #15
 800d5b6:	4922      	ldr	r1, [pc, #136]	; (800d640 <HAL_RCC_ClockConfig+0x1c4>)
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d5be:	4b20      	ldr	r3, [pc, #128]	; (800d640 <HAL_RCC_ClockConfig+0x1c4>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f003 030f 	and.w	r3, r3, #15
 800d5c6:	683a      	ldr	r2, [r7, #0]
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d001      	beq.n	800d5d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	e032      	b.n	800d636 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f003 0304 	and.w	r3, r3, #4
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d008      	beq.n	800d5ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d5dc:	4b19      	ldr	r3, [pc, #100]	; (800d644 <HAL_RCC_ClockConfig+0x1c8>)
 800d5de:	689b      	ldr	r3, [r3, #8]
 800d5e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	4916      	ldr	r1, [pc, #88]	; (800d644 <HAL_RCC_ClockConfig+0x1c8>)
 800d5ea:	4313      	orrs	r3, r2
 800d5ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f003 0308 	and.w	r3, r3, #8
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d009      	beq.n	800d60e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d5fa:	4b12      	ldr	r3, [pc, #72]	; (800d644 <HAL_RCC_ClockConfig+0x1c8>)
 800d5fc:	689b      	ldr	r3, [r3, #8]
 800d5fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	691b      	ldr	r3, [r3, #16]
 800d606:	00db      	lsls	r3, r3, #3
 800d608:	490e      	ldr	r1, [pc, #56]	; (800d644 <HAL_RCC_ClockConfig+0x1c8>)
 800d60a:	4313      	orrs	r3, r2
 800d60c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d60e:	f000 f821 	bl	800d654 <HAL_RCC_GetSysClockFreq>
 800d612:	4602      	mov	r2, r0
 800d614:	4b0b      	ldr	r3, [pc, #44]	; (800d644 <HAL_RCC_ClockConfig+0x1c8>)
 800d616:	689b      	ldr	r3, [r3, #8]
 800d618:	091b      	lsrs	r3, r3, #4
 800d61a:	f003 030f 	and.w	r3, r3, #15
 800d61e:	490a      	ldr	r1, [pc, #40]	; (800d648 <HAL_RCC_ClockConfig+0x1cc>)
 800d620:	5ccb      	ldrb	r3, [r1, r3]
 800d622:	fa22 f303 	lsr.w	r3, r2, r3
 800d626:	4a09      	ldr	r2, [pc, #36]	; (800d64c <HAL_RCC_ClockConfig+0x1d0>)
 800d628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800d62a:	4b09      	ldr	r3, [pc, #36]	; (800d650 <HAL_RCC_ClockConfig+0x1d4>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	4618      	mov	r0, r3
 800d630:	f7f6 f9ec 	bl	8003a0c <HAL_InitTick>

  return HAL_OK;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	40023c00 	.word	0x40023c00
 800d644:	40023800 	.word	0x40023800
 800d648:	0801f07c 	.word	0x0801f07c
 800d64c:	20000010 	.word	0x20000010
 800d650:	20000024 	.word	0x20000024

0800d654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d658:	b090      	sub	sp, #64	; 0x40
 800d65a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800d65c:	2300      	movs	r3, #0
 800d65e:	637b      	str	r3, [r7, #52]	; 0x34
 800d660:	2300      	movs	r3, #0
 800d662:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d664:	2300      	movs	r3, #0
 800d666:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800d668:	2300      	movs	r3, #0
 800d66a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d66c:	4b59      	ldr	r3, [pc, #356]	; (800d7d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800d66e:	689b      	ldr	r3, [r3, #8]
 800d670:	f003 030c 	and.w	r3, r3, #12
 800d674:	2b08      	cmp	r3, #8
 800d676:	d00d      	beq.n	800d694 <HAL_RCC_GetSysClockFreq+0x40>
 800d678:	2b08      	cmp	r3, #8
 800d67a:	f200 80a1 	bhi.w	800d7c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d002      	beq.n	800d688 <HAL_RCC_GetSysClockFreq+0x34>
 800d682:	2b04      	cmp	r3, #4
 800d684:	d003      	beq.n	800d68e <HAL_RCC_GetSysClockFreq+0x3a>
 800d686:	e09b      	b.n	800d7c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d688:	4b53      	ldr	r3, [pc, #332]	; (800d7d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800d68a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800d68c:	e09b      	b.n	800d7c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d68e:	4b53      	ldr	r3, [pc, #332]	; (800d7dc <HAL_RCC_GetSysClockFreq+0x188>)
 800d690:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800d692:	e098      	b.n	800d7c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d694:	4b4f      	ldr	r3, [pc, #316]	; (800d7d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800d696:	685b      	ldr	r3, [r3, #4]
 800d698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d69c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800d69e:	4b4d      	ldr	r3, [pc, #308]	; (800d7d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d028      	beq.n	800d6fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d6aa:	4b4a      	ldr	r3, [pc, #296]	; (800d7d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	099b      	lsrs	r3, r3, #6
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	623b      	str	r3, [r7, #32]
 800d6b4:	627a      	str	r2, [r7, #36]	; 0x24
 800d6b6:	6a3b      	ldr	r3, [r7, #32]
 800d6b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800d6bc:	2100      	movs	r1, #0
 800d6be:	4b47      	ldr	r3, [pc, #284]	; (800d7dc <HAL_RCC_GetSysClockFreq+0x188>)
 800d6c0:	fb03 f201 	mul.w	r2, r3, r1
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	fb00 f303 	mul.w	r3, r0, r3
 800d6ca:	4413      	add	r3, r2
 800d6cc:	4a43      	ldr	r2, [pc, #268]	; (800d7dc <HAL_RCC_GetSysClockFreq+0x188>)
 800d6ce:	fba0 1202 	umull	r1, r2, r0, r2
 800d6d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d6d4:	460a      	mov	r2, r1
 800d6d6:	62ba      	str	r2, [r7, #40]	; 0x28
 800d6d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6da:	4413      	add	r3, r2
 800d6dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	61bb      	str	r3, [r7, #24]
 800d6e4:	61fa      	str	r2, [r7, #28]
 800d6e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d6ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d6ee:	f7f3 f9d5 	bl	8000a9c <__aeabi_uldivmod>
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	4613      	mov	r3, r2
 800d6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6fa:	e053      	b.n	800d7a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d6fc:	4b35      	ldr	r3, [pc, #212]	; (800d7d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	099b      	lsrs	r3, r3, #6
 800d702:	2200      	movs	r2, #0
 800d704:	613b      	str	r3, [r7, #16]
 800d706:	617a      	str	r2, [r7, #20]
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800d70e:	f04f 0b00 	mov.w	fp, #0
 800d712:	4652      	mov	r2, sl
 800d714:	465b      	mov	r3, fp
 800d716:	f04f 0000 	mov.w	r0, #0
 800d71a:	f04f 0100 	mov.w	r1, #0
 800d71e:	0159      	lsls	r1, r3, #5
 800d720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d724:	0150      	lsls	r0, r2, #5
 800d726:	4602      	mov	r2, r0
 800d728:	460b      	mov	r3, r1
 800d72a:	ebb2 080a 	subs.w	r8, r2, sl
 800d72e:	eb63 090b 	sbc.w	r9, r3, fp
 800d732:	f04f 0200 	mov.w	r2, #0
 800d736:	f04f 0300 	mov.w	r3, #0
 800d73a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800d73e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800d742:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800d746:	ebb2 0408 	subs.w	r4, r2, r8
 800d74a:	eb63 0509 	sbc.w	r5, r3, r9
 800d74e:	f04f 0200 	mov.w	r2, #0
 800d752:	f04f 0300 	mov.w	r3, #0
 800d756:	00eb      	lsls	r3, r5, #3
 800d758:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d75c:	00e2      	lsls	r2, r4, #3
 800d75e:	4614      	mov	r4, r2
 800d760:	461d      	mov	r5, r3
 800d762:	eb14 030a 	adds.w	r3, r4, sl
 800d766:	603b      	str	r3, [r7, #0]
 800d768:	eb45 030b 	adc.w	r3, r5, fp
 800d76c:	607b      	str	r3, [r7, #4]
 800d76e:	f04f 0200 	mov.w	r2, #0
 800d772:	f04f 0300 	mov.w	r3, #0
 800d776:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d77a:	4629      	mov	r1, r5
 800d77c:	028b      	lsls	r3, r1, #10
 800d77e:	4621      	mov	r1, r4
 800d780:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d784:	4621      	mov	r1, r4
 800d786:	028a      	lsls	r2, r1, #10
 800d788:	4610      	mov	r0, r2
 800d78a:	4619      	mov	r1, r3
 800d78c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d78e:	2200      	movs	r2, #0
 800d790:	60bb      	str	r3, [r7, #8]
 800d792:	60fa      	str	r2, [r7, #12]
 800d794:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d798:	f7f3 f980 	bl	8000a9c <__aeabi_uldivmod>
 800d79c:	4602      	mov	r2, r0
 800d79e:	460b      	mov	r3, r1
 800d7a0:	4613      	mov	r3, r2
 800d7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800d7a4:	4b0b      	ldr	r3, [pc, #44]	; (800d7d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800d7a6:	685b      	ldr	r3, [r3, #4]
 800d7a8:	0c1b      	lsrs	r3, r3, #16
 800d7aa:	f003 0303 	and.w	r3, r3, #3
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	005b      	lsls	r3, r3, #1
 800d7b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800d7b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800d7be:	e002      	b.n	800d7c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d7c0:	4b05      	ldr	r3, [pc, #20]	; (800d7d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800d7c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800d7c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3740      	adds	r7, #64	; 0x40
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d7d2:	bf00      	nop
 800d7d4:	40023800 	.word	0x40023800
 800d7d8:	00f42400 	.word	0x00f42400
 800d7dc:	017d7840 	.word	0x017d7840

0800d7e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d7e4:	4b03      	ldr	r3, [pc, #12]	; (800d7f4 <HAL_RCC_GetHCLKFreq+0x14>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr
 800d7f2:	bf00      	nop
 800d7f4:	20000010 	.word	0x20000010

0800d7f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d7fc:	f7ff fff0 	bl	800d7e0 <HAL_RCC_GetHCLKFreq>
 800d800:	4602      	mov	r2, r0
 800d802:	4b05      	ldr	r3, [pc, #20]	; (800d818 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d804:	689b      	ldr	r3, [r3, #8]
 800d806:	0a9b      	lsrs	r3, r3, #10
 800d808:	f003 0307 	and.w	r3, r3, #7
 800d80c:	4903      	ldr	r1, [pc, #12]	; (800d81c <HAL_RCC_GetPCLK1Freq+0x24>)
 800d80e:	5ccb      	ldrb	r3, [r1, r3]
 800d810:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d814:	4618      	mov	r0, r3
 800d816:	bd80      	pop	{r7, pc}
 800d818:	40023800 	.word	0x40023800
 800d81c:	0801f08c 	.word	0x0801f08c

0800d820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d824:	f7ff ffdc 	bl	800d7e0 <HAL_RCC_GetHCLKFreq>
 800d828:	4602      	mov	r2, r0
 800d82a:	4b05      	ldr	r3, [pc, #20]	; (800d840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d82c:	689b      	ldr	r3, [r3, #8]
 800d82e:	0b5b      	lsrs	r3, r3, #13
 800d830:	f003 0307 	and.w	r3, r3, #7
 800d834:	4903      	ldr	r1, [pc, #12]	; (800d844 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d836:	5ccb      	ldrb	r3, [r1, r3]
 800d838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	bd80      	pop	{r7, pc}
 800d840:	40023800 	.word	0x40023800
 800d844:	0801f08c 	.word	0x0801f08c

0800d848 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d848:	b480      	push	{r7}
 800d84a:	b083      	sub	sp, #12
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	220f      	movs	r2, #15
 800d856:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d858:	4b12      	ldr	r3, [pc, #72]	; (800d8a4 <HAL_RCC_GetClockConfig+0x5c>)
 800d85a:	689b      	ldr	r3, [r3, #8]
 800d85c:	f003 0203 	and.w	r2, r3, #3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d864:	4b0f      	ldr	r3, [pc, #60]	; (800d8a4 <HAL_RCC_GetClockConfig+0x5c>)
 800d866:	689b      	ldr	r3, [r3, #8]
 800d868:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d870:	4b0c      	ldr	r3, [pc, #48]	; (800d8a4 <HAL_RCC_GetClockConfig+0x5c>)
 800d872:	689b      	ldr	r3, [r3, #8]
 800d874:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800d87c:	4b09      	ldr	r3, [pc, #36]	; (800d8a4 <HAL_RCC_GetClockConfig+0x5c>)
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	08db      	lsrs	r3, r3, #3
 800d882:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d88a:	4b07      	ldr	r3, [pc, #28]	; (800d8a8 <HAL_RCC_GetClockConfig+0x60>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f003 020f 	and.w	r2, r3, #15
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	601a      	str	r2, [r3, #0]
}
 800d896:	bf00      	nop
 800d898:	370c      	adds	r7, #12
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr
 800d8a2:	bf00      	nop
 800d8a4:	40023800 	.word	0x40023800
 800d8a8:	40023c00 	.word	0x40023c00

0800d8ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b088      	sub	sp, #32
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	f003 0301 	and.w	r3, r3, #1
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d012      	beq.n	800d8fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d8d4:	4b69      	ldr	r3, [pc, #420]	; (800da7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d8d6:	689b      	ldr	r3, [r3, #8]
 800d8d8:	4a68      	ldr	r2, [pc, #416]	; (800da7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d8da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d8de:	6093      	str	r3, [r2, #8]
 800d8e0:	4b66      	ldr	r3, [pc, #408]	; (800da7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d8e2:	689a      	ldr	r2, [r3, #8]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8e8:	4964      	ldr	r1, [pc, #400]	; (800da7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d101      	bne.n	800d8fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d902:	2b00      	cmp	r3, #0
 800d904:	d017      	beq.n	800d936 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d906:	4b5d      	ldr	r3, [pc, #372]	; (800da7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d90c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d914:	4959      	ldr	r1, [pc, #356]	; (800da7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d916:	4313      	orrs	r3, r2
 800d918:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d920:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d924:	d101      	bne.n	800d92a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800d926:	2301      	movs	r3, #1
 800d928:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d101      	bne.n	800d936 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800d932:	2301      	movs	r3, #1
 800d934:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d017      	beq.n	800d972 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d942:	4b4e      	ldr	r3, [pc, #312]	; (800da7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d948:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d950:	494a      	ldr	r1, [pc, #296]	; (800da7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d952:	4313      	orrs	r3, r2
 800d954:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d95c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d960:	d101      	bne.n	800d966 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800d962:	2301      	movs	r3, #1
 800d964:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d101      	bne.n	800d972 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800d96e:	2301      	movs	r3, #1
 800d970:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d001      	beq.n	800d982 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800d97e:	2301      	movs	r3, #1
 800d980:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f003 0320 	and.w	r3, r3, #32
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	f000 808b 	beq.w	800daa6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800d990:	4b3a      	ldr	r3, [pc, #232]	; (800da7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d994:	4a39      	ldr	r2, [pc, #228]	; (800da7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d99a:	6413      	str	r3, [r2, #64]	; 0x40
 800d99c:	4b37      	ldr	r3, [pc, #220]	; (800da7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d99e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9a4:	60bb      	str	r3, [r7, #8]
 800d9a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d9a8:	4b35      	ldr	r3, [pc, #212]	; (800da80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4a34      	ldr	r2, [pc, #208]	; (800da80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d9ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d9b4:	f7f8 f8ac 	bl	8005b10 <HAL_GetTick>
 800d9b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d9ba:	e008      	b.n	800d9ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d9bc:	f7f8 f8a8 	bl	8005b10 <HAL_GetTick>
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	1ad3      	subs	r3, r2, r3
 800d9c6:	2b64      	cmp	r3, #100	; 0x64
 800d9c8:	d901      	bls.n	800d9ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800d9ca:	2303      	movs	r3, #3
 800d9cc:	e357      	b.n	800e07e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d9ce:	4b2c      	ldr	r3, [pc, #176]	; (800da80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d0f0      	beq.n	800d9bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d9da:	4b28      	ldr	r3, [pc, #160]	; (800da7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d9dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d9e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d035      	beq.n	800da56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d9f2:	693a      	ldr	r2, [r7, #16]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d02e      	beq.n	800da56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d9f8:	4b20      	ldr	r3, [pc, #128]	; (800da7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d9fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da00:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800da02:	4b1e      	ldr	r3, [pc, #120]	; (800da7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800da04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da06:	4a1d      	ldr	r2, [pc, #116]	; (800da7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800da08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800da0c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800da0e:	4b1b      	ldr	r3, [pc, #108]	; (800da7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800da10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da12:	4a1a      	ldr	r2, [pc, #104]	; (800da7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800da14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800da18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800da1a:	4a18      	ldr	r2, [pc, #96]	; (800da7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800da20:	4b16      	ldr	r3, [pc, #88]	; (800da7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800da22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da24:	f003 0301 	and.w	r3, r3, #1
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d114      	bne.n	800da56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da2c:	f7f8 f870 	bl	8005b10 <HAL_GetTick>
 800da30:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800da32:	e00a      	b.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800da34:	f7f8 f86c 	bl	8005b10 <HAL_GetTick>
 800da38:	4602      	mov	r2, r0
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	1ad3      	subs	r3, r2, r3
 800da3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800da42:	4293      	cmp	r3, r2
 800da44:	d901      	bls.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800da46:	2303      	movs	r3, #3
 800da48:	e319      	b.n	800e07e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800da4a:	4b0c      	ldr	r3, [pc, #48]	; (800da7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800da4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da4e:	f003 0302 	and.w	r3, r3, #2
 800da52:	2b00      	cmp	r3, #0
 800da54:	d0ee      	beq.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800da62:	d111      	bne.n	800da88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800da64:	4b05      	ldr	r3, [pc, #20]	; (800da7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800da66:	689b      	ldr	r3, [r3, #8]
 800da68:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800da70:	4b04      	ldr	r3, [pc, #16]	; (800da84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800da72:	400b      	ands	r3, r1
 800da74:	4901      	ldr	r1, [pc, #4]	; (800da7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800da76:	4313      	orrs	r3, r2
 800da78:	608b      	str	r3, [r1, #8]
 800da7a:	e00b      	b.n	800da94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800da7c:	40023800 	.word	0x40023800
 800da80:	40007000 	.word	0x40007000
 800da84:	0ffffcff 	.word	0x0ffffcff
 800da88:	4baa      	ldr	r3, [pc, #680]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800da8a:	689b      	ldr	r3, [r3, #8]
 800da8c:	4aa9      	ldr	r2, [pc, #676]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800da8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800da92:	6093      	str	r3, [r2, #8]
 800da94:	4ba7      	ldr	r3, [pc, #668]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800da96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800daa0:	49a4      	ldr	r1, [pc, #656]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800daa2:	4313      	orrs	r3, r2
 800daa4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f003 0310 	and.w	r3, r3, #16
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d010      	beq.n	800dad4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800dab2:	4ba0      	ldr	r3, [pc, #640]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dab8:	4a9e      	ldr	r2, [pc, #632]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800daba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dabe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800dac2:	4b9c      	ldr	r3, [pc, #624]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dac4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dacc:	4999      	ldr	r1, [pc, #612]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dace:	4313      	orrs	r3, r2
 800dad0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d00a      	beq.n	800daf6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dae0:	4b94      	ldr	r3, [pc, #592]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dae6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800daee:	4991      	ldr	r1, [pc, #580]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800daf0:	4313      	orrs	r3, r2
 800daf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d00a      	beq.n	800db18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800db02:	4b8c      	ldr	r3, [pc, #560]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800db04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db10:	4988      	ldr	r1, [pc, #544]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800db12:	4313      	orrs	r3, r2
 800db14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800db20:	2b00      	cmp	r3, #0
 800db22:	d00a      	beq.n	800db3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800db24:	4b83      	ldr	r3, [pc, #524]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800db26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db32:	4980      	ldr	r1, [pc, #512]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800db34:	4313      	orrs	r3, r2
 800db36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db42:	2b00      	cmp	r3, #0
 800db44:	d00a      	beq.n	800db5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800db46:	4b7b      	ldr	r3, [pc, #492]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800db48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db54:	4977      	ldr	r1, [pc, #476]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800db56:	4313      	orrs	r3, r2
 800db58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db64:	2b00      	cmp	r3, #0
 800db66:	d00a      	beq.n	800db7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800db68:	4b72      	ldr	r3, [pc, #456]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800db6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db6e:	f023 0203 	bic.w	r2, r3, #3
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db76:	496f      	ldr	r1, [pc, #444]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800db78:	4313      	orrs	r3, r2
 800db7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db86:	2b00      	cmp	r3, #0
 800db88:	d00a      	beq.n	800dba0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800db8a:	4b6a      	ldr	r3, [pc, #424]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800db8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db90:	f023 020c 	bic.w	r2, r3, #12
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db98:	4966      	ldr	r1, [pc, #408]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800db9a:	4313      	orrs	r3, r2
 800db9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d00a      	beq.n	800dbc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800dbac:	4b61      	ldr	r3, [pc, #388]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dbae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbb2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbba:	495e      	ldr	r1, [pc, #376]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dbbc:	4313      	orrs	r3, r2
 800dbbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d00a      	beq.n	800dbe4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800dbce:	4b59      	ldr	r3, [pc, #356]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dbd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbd4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbdc:	4955      	ldr	r1, [pc, #340]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d00a      	beq.n	800dc06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800dbf0:	4b50      	ldr	r3, [pc, #320]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dbf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbf6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbfe:	494d      	ldr	r1, [pc, #308]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dc00:	4313      	orrs	r3, r2
 800dc02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d00a      	beq.n	800dc28 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800dc12:	4b48      	ldr	r3, [pc, #288]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dc14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc18:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc20:	4944      	ldr	r1, [pc, #272]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dc22:	4313      	orrs	r3, r2
 800dc24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d00a      	beq.n	800dc4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800dc34:	4b3f      	ldr	r3, [pc, #252]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dc36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc42:	493c      	ldr	r1, [pc, #240]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dc44:	4313      	orrs	r3, r2
 800dc46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d00a      	beq.n	800dc6c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800dc56:	4b37      	ldr	r3, [pc, #220]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dc58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dc64:	4933      	ldr	r1, [pc, #204]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dc66:	4313      	orrs	r3, r2
 800dc68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d00a      	beq.n	800dc8e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800dc78:	4b2e      	ldr	r3, [pc, #184]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dc7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc7e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc86:	492b      	ldr	r1, [pc, #172]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dc88:	4313      	orrs	r3, r2
 800dc8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d011      	beq.n	800dcbe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800dc9a:	4b26      	ldr	r3, [pc, #152]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dc9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dca0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dca8:	4922      	ldr	r1, [pc, #136]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dcb8:	d101      	bne.n	800dcbe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800dcba:	2301      	movs	r3, #1
 800dcbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f003 0308 	and.w	r3, r3, #8
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d001      	beq.n	800dcce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800dcca:	2301      	movs	r3, #1
 800dccc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d00a      	beq.n	800dcf0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dcda:	4b16      	ldr	r3, [pc, #88]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dcdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dce0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dce8:	4912      	ldr	r1, [pc, #72]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dcea:	4313      	orrs	r3, r2
 800dcec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d00b      	beq.n	800dd14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800dcfc:	4b0d      	ldr	r3, [pc, #52]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dcfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd0c:	4909      	ldr	r1, [pc, #36]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dd0e:	4313      	orrs	r3, r2
 800dd10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800dd14:	69fb      	ldr	r3, [r7, #28]
 800dd16:	2b01      	cmp	r3, #1
 800dd18:	d006      	beq.n	800dd28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	f000 80d9 	beq.w	800deda <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800dd28:	4b02      	ldr	r3, [pc, #8]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4a01      	ldr	r2, [pc, #4]	; (800dd34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dd2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dd32:	e001      	b.n	800dd38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800dd34:	40023800 	.word	0x40023800
 800dd38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd3a:	f7f7 fee9 	bl	8005b10 <HAL_GetTick>
 800dd3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800dd40:	e008      	b.n	800dd54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800dd42:	f7f7 fee5 	bl	8005b10 <HAL_GetTick>
 800dd46:	4602      	mov	r2, r0
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	1ad3      	subs	r3, r2, r3
 800dd4c:	2b64      	cmp	r3, #100	; 0x64
 800dd4e:	d901      	bls.n	800dd54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800dd50:	2303      	movs	r3, #3
 800dd52:	e194      	b.n	800e07e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800dd54:	4b6c      	ldr	r3, [pc, #432]	; (800df08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d1f0      	bne.n	800dd42 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f003 0301 	and.w	r3, r3, #1
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d021      	beq.n	800ddb0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d11d      	bne.n	800ddb0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800dd74:	4b64      	ldr	r3, [pc, #400]	; (800df08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dd76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd7a:	0c1b      	lsrs	r3, r3, #16
 800dd7c:	f003 0303 	and.w	r3, r3, #3
 800dd80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800dd82:	4b61      	ldr	r3, [pc, #388]	; (800df08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dd84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd88:	0e1b      	lsrs	r3, r3, #24
 800dd8a:	f003 030f 	and.w	r3, r3, #15
 800dd8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	019a      	lsls	r2, r3, #6
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	041b      	lsls	r3, r3, #16
 800dd9a:	431a      	orrs	r2, r3
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	061b      	lsls	r3, r3, #24
 800dda0:	431a      	orrs	r2, r3
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	689b      	ldr	r3, [r3, #8]
 800dda6:	071b      	lsls	r3, r3, #28
 800dda8:	4957      	ldr	r1, [pc, #348]	; (800df08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d004      	beq.n	800ddc6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ddc4:	d00a      	beq.n	800dddc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d02e      	beq.n	800de30 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ddda:	d129      	bne.n	800de30 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800dddc:	4b4a      	ldr	r3, [pc, #296]	; (800df08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ddde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dde2:	0c1b      	lsrs	r3, r3, #16
 800dde4:	f003 0303 	and.w	r3, r3, #3
 800dde8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ddea:	4b47      	ldr	r3, [pc, #284]	; (800df08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ddec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddf0:	0f1b      	lsrs	r3, r3, #28
 800ddf2:	f003 0307 	and.w	r3, r3, #7
 800ddf6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	685b      	ldr	r3, [r3, #4]
 800ddfc:	019a      	lsls	r2, r3, #6
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	041b      	lsls	r3, r3, #16
 800de02:	431a      	orrs	r2, r3
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	68db      	ldr	r3, [r3, #12]
 800de08:	061b      	lsls	r3, r3, #24
 800de0a:	431a      	orrs	r2, r3
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	071b      	lsls	r3, r3, #28
 800de10:	493d      	ldr	r1, [pc, #244]	; (800df08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800de12:	4313      	orrs	r3, r2
 800de14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800de18:	4b3b      	ldr	r3, [pc, #236]	; (800df08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800de1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de1e:	f023 021f 	bic.w	r2, r3, #31
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de26:	3b01      	subs	r3, #1
 800de28:	4937      	ldr	r1, [pc, #220]	; (800df08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800de2a:	4313      	orrs	r3, r2
 800de2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d01d      	beq.n	800de78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800de3c:	4b32      	ldr	r3, [pc, #200]	; (800df08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800de3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de42:	0e1b      	lsrs	r3, r3, #24
 800de44:	f003 030f 	and.w	r3, r3, #15
 800de48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800de4a:	4b2f      	ldr	r3, [pc, #188]	; (800df08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800de4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de50:	0f1b      	lsrs	r3, r3, #28
 800de52:	f003 0307 	and.w	r3, r3, #7
 800de56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	019a      	lsls	r2, r3, #6
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	691b      	ldr	r3, [r3, #16]
 800de62:	041b      	lsls	r3, r3, #16
 800de64:	431a      	orrs	r2, r3
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	061b      	lsls	r3, r3, #24
 800de6a:	431a      	orrs	r2, r3
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	071b      	lsls	r3, r3, #28
 800de70:	4925      	ldr	r1, [pc, #148]	; (800df08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800de72:	4313      	orrs	r3, r2
 800de74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de80:	2b00      	cmp	r3, #0
 800de82:	d011      	beq.n	800dea8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	019a      	lsls	r2, r3, #6
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	691b      	ldr	r3, [r3, #16]
 800de8e:	041b      	lsls	r3, r3, #16
 800de90:	431a      	orrs	r2, r3
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	68db      	ldr	r3, [r3, #12]
 800de96:	061b      	lsls	r3, r3, #24
 800de98:	431a      	orrs	r2, r3
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	689b      	ldr	r3, [r3, #8]
 800de9e:	071b      	lsls	r3, r3, #28
 800dea0:	4919      	ldr	r1, [pc, #100]	; (800df08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dea2:	4313      	orrs	r3, r2
 800dea4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800dea8:	4b17      	ldr	r3, [pc, #92]	; (800df08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4a16      	ldr	r2, [pc, #88]	; (800df08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800deae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800deb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800deb4:	f7f7 fe2c 	bl	8005b10 <HAL_GetTick>
 800deb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800deba:	e008      	b.n	800dece <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800debc:	f7f7 fe28 	bl	8005b10 <HAL_GetTick>
 800dec0:	4602      	mov	r2, r0
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	1ad3      	subs	r3, r2, r3
 800dec6:	2b64      	cmp	r3, #100	; 0x64
 800dec8:	d901      	bls.n	800dece <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800deca:	2303      	movs	r3, #3
 800decc:	e0d7      	b.n	800e07e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800dece:	4b0e      	ldr	r3, [pc, #56]	; (800df08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d0f0      	beq.n	800debc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800deda:	69bb      	ldr	r3, [r7, #24]
 800dedc:	2b01      	cmp	r3, #1
 800dede:	f040 80cd 	bne.w	800e07c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800dee2:	4b09      	ldr	r3, [pc, #36]	; (800df08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	4a08      	ldr	r2, [pc, #32]	; (800df08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800deec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800deee:	f7f7 fe0f 	bl	8005b10 <HAL_GetTick>
 800def2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800def4:	e00a      	b.n	800df0c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800def6:	f7f7 fe0b 	bl	8005b10 <HAL_GetTick>
 800defa:	4602      	mov	r2, r0
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	1ad3      	subs	r3, r2, r3
 800df00:	2b64      	cmp	r3, #100	; 0x64
 800df02:	d903      	bls.n	800df0c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800df04:	2303      	movs	r3, #3
 800df06:	e0ba      	b.n	800e07e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800df08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800df0c:	4b5e      	ldr	r3, [pc, #376]	; (800e088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800df18:	d0ed      	beq.n	800def6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800df22:	2b00      	cmp	r3, #0
 800df24:	d003      	beq.n	800df2e <HAL_RCCEx_PeriphCLKConfig+0x682>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d009      	beq.n	800df42 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800df36:	2b00      	cmp	r3, #0
 800df38:	d02e      	beq.n	800df98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d12a      	bne.n	800df98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800df42:	4b51      	ldr	r3, [pc, #324]	; (800e088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800df44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df48:	0c1b      	lsrs	r3, r3, #16
 800df4a:	f003 0303 	and.w	r3, r3, #3
 800df4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800df50:	4b4d      	ldr	r3, [pc, #308]	; (800e088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800df52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df56:	0f1b      	lsrs	r3, r3, #28
 800df58:	f003 0307 	and.w	r3, r3, #7
 800df5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	695b      	ldr	r3, [r3, #20]
 800df62:	019a      	lsls	r2, r3, #6
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	041b      	lsls	r3, r3, #16
 800df68:	431a      	orrs	r2, r3
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	699b      	ldr	r3, [r3, #24]
 800df6e:	061b      	lsls	r3, r3, #24
 800df70:	431a      	orrs	r2, r3
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	071b      	lsls	r3, r3, #28
 800df76:	4944      	ldr	r1, [pc, #272]	; (800e088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800df78:	4313      	orrs	r3, r2
 800df7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800df7e:	4b42      	ldr	r3, [pc, #264]	; (800e088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800df80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df84:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df8c:	3b01      	subs	r3, #1
 800df8e:	021b      	lsls	r3, r3, #8
 800df90:	493d      	ldr	r1, [pc, #244]	; (800e088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800df92:	4313      	orrs	r3, r2
 800df94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d022      	beq.n	800dfea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dfac:	d11d      	bne.n	800dfea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800dfae:	4b36      	ldr	r3, [pc, #216]	; (800e088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800dfb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dfb4:	0e1b      	lsrs	r3, r3, #24
 800dfb6:	f003 030f 	and.w	r3, r3, #15
 800dfba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800dfbc:	4b32      	ldr	r3, [pc, #200]	; (800e088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800dfbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dfc2:	0f1b      	lsrs	r3, r3, #28
 800dfc4:	f003 0307 	and.w	r3, r3, #7
 800dfc8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	695b      	ldr	r3, [r3, #20]
 800dfce:	019a      	lsls	r2, r3, #6
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6a1b      	ldr	r3, [r3, #32]
 800dfd4:	041b      	lsls	r3, r3, #16
 800dfd6:	431a      	orrs	r2, r3
 800dfd8:	693b      	ldr	r3, [r7, #16]
 800dfda:	061b      	lsls	r3, r3, #24
 800dfdc:	431a      	orrs	r2, r3
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	071b      	lsls	r3, r3, #28
 800dfe2:	4929      	ldr	r1, [pc, #164]	; (800e088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f003 0308 	and.w	r3, r3, #8
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d028      	beq.n	800e048 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800dff6:	4b24      	ldr	r3, [pc, #144]	; (800e088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800dff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dffc:	0e1b      	lsrs	r3, r3, #24
 800dffe:	f003 030f 	and.w	r3, r3, #15
 800e002:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e004:	4b20      	ldr	r3, [pc, #128]	; (800e088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e00a:	0c1b      	lsrs	r3, r3, #16
 800e00c:	f003 0303 	and.w	r3, r3, #3
 800e010:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	695b      	ldr	r3, [r3, #20]
 800e016:	019a      	lsls	r2, r3, #6
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	041b      	lsls	r3, r3, #16
 800e01c:	431a      	orrs	r2, r3
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	061b      	lsls	r3, r3, #24
 800e022:	431a      	orrs	r2, r3
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	69db      	ldr	r3, [r3, #28]
 800e028:	071b      	lsls	r3, r3, #28
 800e02a:	4917      	ldr	r1, [pc, #92]	; (800e088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e02c:	4313      	orrs	r3, r2
 800e02e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e032:	4b15      	ldr	r3, [pc, #84]	; (800e088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e038:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e040:	4911      	ldr	r1, [pc, #68]	; (800e088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e042:	4313      	orrs	r3, r2
 800e044:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e048:	4b0f      	ldr	r3, [pc, #60]	; (800e088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	4a0e      	ldr	r2, [pc, #56]	; (800e088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e04e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e052:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e054:	f7f7 fd5c 	bl	8005b10 <HAL_GetTick>
 800e058:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e05a:	e008      	b.n	800e06e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e05c:	f7f7 fd58 	bl	8005b10 <HAL_GetTick>
 800e060:	4602      	mov	r2, r0
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	1ad3      	subs	r3, r2, r3
 800e066:	2b64      	cmp	r3, #100	; 0x64
 800e068:	d901      	bls.n	800e06e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e06a:	2303      	movs	r3, #3
 800e06c:	e007      	b.n	800e07e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e06e:	4b06      	ldr	r3, [pc, #24]	; (800e088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e07a:	d1ef      	bne.n	800e05c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800e07c:	2300      	movs	r3, #0
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3720      	adds	r7, #32
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop
 800e088:	40023800 	.word	0x40023800

0800e08c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800e08c:	b480      	push	{r7}
 800e08e:	b087      	sub	sp, #28
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800e094:	2300      	movs	r3, #0
 800e096:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800e098:	2300      	movs	r3, #0
 800e09a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800e09c:	2300      	movs	r3, #0
 800e09e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e0aa:	f040 808c 	bne.w	800e1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800e0ae:	4b95      	ldr	r3, [pc, #596]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e0b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0b4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800e0bc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e0c4:	d07c      	beq.n	800e1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e0cc:	d87d      	bhi.n	800e1ca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d004      	beq.n	800e0de <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0da:	d039      	beq.n	800e150 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800e0dc:	e075      	b.n	800e1ca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800e0de:	4b89      	ldr	r3, [pc, #548]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d108      	bne.n	800e0fc <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800e0ea:	4b86      	ldr	r3, [pc, #536]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e0f2:	4a85      	ldr	r2, [pc, #532]	; (800e308 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800e0f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0f8:	613b      	str	r3, [r7, #16]
 800e0fa:	e007      	b.n	800e10c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800e0fc:	4b81      	ldr	r3, [pc, #516]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e104:	4a81      	ldr	r2, [pc, #516]	; (800e30c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800e106:	fbb2 f3f3 	udiv	r3, r2, r3
 800e10a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800e10c:	4b7d      	ldr	r3, [pc, #500]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e10e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e112:	0e1b      	lsrs	r3, r3, #24
 800e114:	f003 030f 	and.w	r3, r3, #15
 800e118:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800e11a:	4b7a      	ldr	r3, [pc, #488]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e11c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e120:	099b      	lsrs	r3, r3, #6
 800e122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e126:	693a      	ldr	r2, [r7, #16]
 800e128:	fb03 f202 	mul.w	r2, r3, r2
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e132:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800e134:	4b73      	ldr	r3, [pc, #460]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e13a:	0a1b      	lsrs	r3, r3, #8
 800e13c:	f003 031f 	and.w	r3, r3, #31
 800e140:	3301      	adds	r3, #1
 800e142:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800e144:	697a      	ldr	r2, [r7, #20]
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	fbb2 f3f3 	udiv	r3, r2, r3
 800e14c:	617b      	str	r3, [r7, #20]
        break;
 800e14e:	e03d      	b.n	800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800e150:	4b6c      	ldr	r3, [pc, #432]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d108      	bne.n	800e16e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800e15c:	4b69      	ldr	r3, [pc, #420]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e164:	4a68      	ldr	r2, [pc, #416]	; (800e308 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800e166:	fbb2 f3f3 	udiv	r3, r2, r3
 800e16a:	613b      	str	r3, [r7, #16]
 800e16c:	e007      	b.n	800e17e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800e16e:	4b65      	ldr	r3, [pc, #404]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e170:	685b      	ldr	r3, [r3, #4]
 800e172:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e176:	4a65      	ldr	r2, [pc, #404]	; (800e30c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800e178:	fbb2 f3f3 	udiv	r3, r2, r3
 800e17c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800e17e:	4b61      	ldr	r3, [pc, #388]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e184:	0e1b      	lsrs	r3, r3, #24
 800e186:	f003 030f 	and.w	r3, r3, #15
 800e18a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800e18c:	4b5d      	ldr	r3, [pc, #372]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e18e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e192:	099b      	lsrs	r3, r3, #6
 800e194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e198:	693a      	ldr	r2, [r7, #16]
 800e19a:	fb03 f202 	mul.w	r2, r3, r2
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1a4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800e1a6:	4b57      	ldr	r3, [pc, #348]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e1a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1ac:	f003 031f 	and.w	r3, r3, #31
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800e1b4:	697a      	ldr	r2, [r7, #20]
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1bc:	617b      	str	r3, [r7, #20]
        break;
 800e1be:	e005      	b.n	800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800e1c0:	4b53      	ldr	r3, [pc, #332]	; (800e310 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800e1c2:	617b      	str	r3, [r7, #20]
        break;
 800e1c4:	e002      	b.n	800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800e1c6:	bf00      	nop
 800e1c8:	e000      	b.n	800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800e1ca:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e1d2:	f040 808c 	bne.w	800e2ee <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800e1d6:	4b4b      	ldr	r3, [pc, #300]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e1d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1dc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800e1e4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e1ec:	d07c      	beq.n	800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e1f4:	d87d      	bhi.n	800e2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d004      	beq.n	800e206 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e202:	d039      	beq.n	800e278 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800e204:	e075      	b.n	800e2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800e206:	4b3f      	ldr	r3, [pc, #252]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e208:	685b      	ldr	r3, [r3, #4]
 800e20a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d108      	bne.n	800e224 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800e212:	4b3c      	ldr	r3, [pc, #240]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e21a:	4a3b      	ldr	r2, [pc, #236]	; (800e308 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800e21c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e220:	613b      	str	r3, [r7, #16]
 800e222:	e007      	b.n	800e234 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800e224:	4b37      	ldr	r3, [pc, #220]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e22c:	4a37      	ldr	r2, [pc, #220]	; (800e30c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800e22e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e232:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800e234:	4b33      	ldr	r3, [pc, #204]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e23a:	0e1b      	lsrs	r3, r3, #24
 800e23c:	f003 030f 	and.w	r3, r3, #15
 800e240:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800e242:	4b30      	ldr	r3, [pc, #192]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e248:	099b      	lsrs	r3, r3, #6
 800e24a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e24e:	693a      	ldr	r2, [r7, #16]
 800e250:	fb03 f202 	mul.w	r2, r3, r2
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	fbb2 f3f3 	udiv	r3, r2, r3
 800e25a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800e25c:	4b29      	ldr	r3, [pc, #164]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e25e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e262:	0a1b      	lsrs	r3, r3, #8
 800e264:	f003 031f 	and.w	r3, r3, #31
 800e268:	3301      	adds	r3, #1
 800e26a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800e26c:	697a      	ldr	r2, [r7, #20]
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	fbb2 f3f3 	udiv	r3, r2, r3
 800e274:	617b      	str	r3, [r7, #20]
        break;
 800e276:	e03d      	b.n	800e2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800e278:	4b22      	ldr	r3, [pc, #136]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e280:	2b00      	cmp	r3, #0
 800e282:	d108      	bne.n	800e296 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800e284:	4b1f      	ldr	r3, [pc, #124]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e286:	685b      	ldr	r3, [r3, #4]
 800e288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e28c:	4a1e      	ldr	r2, [pc, #120]	; (800e308 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800e28e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e292:	613b      	str	r3, [r7, #16]
 800e294:	e007      	b.n	800e2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800e296:	4b1b      	ldr	r3, [pc, #108]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e298:	685b      	ldr	r3, [r3, #4]
 800e29a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e29e:	4a1b      	ldr	r2, [pc, #108]	; (800e30c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800e2a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2a4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800e2a6:	4b17      	ldr	r3, [pc, #92]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e2a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2ac:	0e1b      	lsrs	r3, r3, #24
 800e2ae:	f003 030f 	and.w	r3, r3, #15
 800e2b2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800e2b4:	4b13      	ldr	r3, [pc, #76]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e2b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2ba:	099b      	lsrs	r3, r3, #6
 800e2bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2c0:	693a      	ldr	r2, [r7, #16]
 800e2c2:	fb03 f202 	mul.w	r2, r3, r2
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2cc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800e2ce:	4b0d      	ldr	r3, [pc, #52]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e2d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e2d4:	f003 031f 	and.w	r3, r3, #31
 800e2d8:	3301      	adds	r3, #1
 800e2da:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800e2dc:	697a      	ldr	r2, [r7, #20]
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2e4:	617b      	str	r3, [r7, #20]
        break;
 800e2e6:	e005      	b.n	800e2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800e2e8:	4b09      	ldr	r3, [pc, #36]	; (800e310 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800e2ea:	617b      	str	r3, [r7, #20]
        break;
 800e2ec:	e002      	b.n	800e2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800e2ee:	bf00      	nop
 800e2f0:	e000      	b.n	800e2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800e2f2:	bf00      	nop

  return frequency;
 800e2f4:	697b      	ldr	r3, [r7, #20]
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	371c      	adds	r7, #28
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e300:	4770      	bx	lr
 800e302:	bf00      	nop
 800e304:	40023800 	.word	0x40023800
 800e308:	00f42400 	.word	0x00f42400
 800e30c:	017d7840 	.word	0x017d7840
 800e310:	00bb8000 	.word	0x00bb8000

0800e314 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b084      	sub	sp, #16
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e31c:	2301      	movs	r3, #1
 800e31e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d101      	bne.n	800e32a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800e326:	2301      	movs	r3, #1
 800e328:	e071      	b.n	800e40e <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	7f5b      	ldrb	r3, [r3, #29]
 800e32e:	b2db      	uxtb	r3, r3
 800e330:	2b00      	cmp	r3, #0
 800e332:	d105      	bne.n	800e340 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2200      	movs	r2, #0
 800e338:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f7f4 feb0 	bl	80030a0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2202      	movs	r2, #2
 800e344:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	68db      	ldr	r3, [r3, #12]
 800e34c:	f003 0310 	and.w	r3, r3, #16
 800e350:	2b10      	cmp	r3, #16
 800e352:	d053      	beq.n	800e3fc <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	22ca      	movs	r2, #202	; 0xca
 800e35a:	625a      	str	r2, [r3, #36]	; 0x24
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2253      	movs	r2, #83	; 0x53
 800e362:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f000 fac9 	bl	800e8fc <RTC_EnterInitMode>
 800e36a:	4603      	mov	r3, r0
 800e36c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800e36e:	7bfb      	ldrb	r3, [r7, #15]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d12a      	bne.n	800e3ca <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	6899      	ldr	r1, [r3, #8]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681a      	ldr	r2, [r3, #0]
 800e37e:	4b26      	ldr	r3, [pc, #152]	; (800e418 <HAL_RTC_Init+0x104>)
 800e380:	400b      	ands	r3, r1
 800e382:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	6899      	ldr	r1, [r3, #8]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	685a      	ldr	r2, [r3, #4]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	691b      	ldr	r3, [r3, #16]
 800e392:	431a      	orrs	r2, r3
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	695b      	ldr	r3, [r3, #20]
 800e398:	431a      	orrs	r2, r3
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	430a      	orrs	r2, r1
 800e3a0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	68d2      	ldr	r2, [r2, #12]
 800e3aa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	6919      	ldr	r1, [r3, #16]
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	689b      	ldr	r3, [r3, #8]
 800e3b6:	041a      	lsls	r2, r3, #16
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	430a      	orrs	r2, r1
 800e3be:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f000 fad2 	bl	800e96a <RTC_ExitInitMode>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800e3ca:	7bfb      	ldrb	r3, [r7, #15]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d110      	bne.n	800e3f2 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f022 0208 	bic.w	r2, r2, #8
 800e3de:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	699a      	ldr	r2, [r3, #24]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	430a      	orrs	r2, r1
 800e3f0:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	22ff      	movs	r2, #255	; 0xff
 800e3f8:	625a      	str	r2, [r3, #36]	; 0x24
 800e3fa:	e001      	b.n	800e400 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800e400:	7bfb      	ldrb	r3, [r7, #15]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d102      	bne.n	800e40c <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2201      	movs	r2, #1
 800e40a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800e40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3710      	adds	r7, #16
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
 800e416:	bf00      	nop
 800e418:	ff8fffbf 	.word	0xff8fffbf

0800e41c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800e41c:	b590      	push	{r4, r7, lr}
 800e41e:	b087      	sub	sp, #28
 800e420:	af00      	add	r7, sp, #0
 800e422:	60f8      	str	r0, [r7, #12]
 800e424:	60b9      	str	r1, [r7, #8]
 800e426:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800e428:	2300      	movs	r3, #0
 800e42a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	7f1b      	ldrb	r3, [r3, #28]
 800e430:	2b01      	cmp	r3, #1
 800e432:	d101      	bne.n	800e438 <HAL_RTC_SetTime+0x1c>
 800e434:	2302      	movs	r3, #2
 800e436:	e085      	b.n	800e544 <HAL_RTC_SetTime+0x128>
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	2201      	movs	r2, #1
 800e43c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	2202      	movs	r2, #2
 800e442:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d126      	bne.n	800e498 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	689b      	ldr	r3, [r3, #8]
 800e450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e454:	2b00      	cmp	r3, #0
 800e456:	d102      	bne.n	800e45e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	2200      	movs	r2, #0
 800e45c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	4618      	mov	r0, r3
 800e464:	f000 faa6 	bl	800e9b4 <RTC_ByteToBcd2>
 800e468:	4603      	mov	r3, r0
 800e46a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	785b      	ldrb	r3, [r3, #1]
 800e470:	4618      	mov	r0, r3
 800e472:	f000 fa9f 	bl	800e9b4 <RTC_ByteToBcd2>
 800e476:	4603      	mov	r3, r0
 800e478:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800e47a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	789b      	ldrb	r3, [r3, #2]
 800e480:	4618      	mov	r0, r3
 800e482:	f000 fa97 	bl	800e9b4 <RTC_ByteToBcd2>
 800e486:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e488:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	78db      	ldrb	r3, [r3, #3]
 800e490:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800e492:	4313      	orrs	r3, r2
 800e494:	617b      	str	r3, [r7, #20]
 800e496:	e018      	b.n	800e4ca <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	689b      	ldr	r3, [r3, #8]
 800e49e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d102      	bne.n	800e4ac <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	785b      	ldrb	r3, [r3, #1]
 800e4b6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800e4b8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800e4ba:	68ba      	ldr	r2, [r7, #8]
 800e4bc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800e4be:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	78db      	ldrb	r3, [r3, #3]
 800e4c4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	22ca      	movs	r2, #202	; 0xca
 800e4d0:	625a      	str	r2, [r3, #36]	; 0x24
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2253      	movs	r2, #83	; 0x53
 800e4d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800e4da:	68f8      	ldr	r0, [r7, #12]
 800e4dc:	f000 fa0e 	bl	800e8fc <RTC_EnterInitMode>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800e4e4:	7cfb      	ldrb	r3, [r7, #19]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d11e      	bne.n	800e528 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681a      	ldr	r2, [r3, #0]
 800e4ee:	6979      	ldr	r1, [r7, #20]
 800e4f0:	4b16      	ldr	r3, [pc, #88]	; (800e54c <HAL_RTC_SetTime+0x130>)
 800e4f2:	400b      	ands	r3, r1
 800e4f4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	689a      	ldr	r2, [r3, #8]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e504:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	6899      	ldr	r1, [r3, #8]
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	68da      	ldr	r2, [r3, #12]
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	691b      	ldr	r3, [r3, #16]
 800e514:	431a      	orrs	r2, r3
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	430a      	orrs	r2, r1
 800e51c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800e51e:	68f8      	ldr	r0, [r7, #12]
 800e520:	f000 fa23 	bl	800e96a <RTC_ExitInitMode>
 800e524:	4603      	mov	r3, r0
 800e526:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800e528:	7cfb      	ldrb	r3, [r7, #19]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d102      	bne.n	800e534 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	2201      	movs	r2, #1
 800e532:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	22ff      	movs	r2, #255	; 0xff
 800e53a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	2200      	movs	r2, #0
 800e540:	771a      	strb	r2, [r3, #28]

  return status;
 800e542:	7cfb      	ldrb	r3, [r7, #19]
}
 800e544:	4618      	mov	r0, r3
 800e546:	371c      	adds	r7, #28
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd90      	pop	{r4, r7, pc}
 800e54c:	007f7f7f 	.word	0x007f7f7f

0800e550 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800e550:	b590      	push	{r4, r7, lr}
 800e552:	b087      	sub	sp, #28
 800e554:	af00      	add	r7, sp, #0
 800e556:	60f8      	str	r0, [r7, #12]
 800e558:	60b9      	str	r1, [r7, #8]
 800e55a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800e55c:	2300      	movs	r3, #0
 800e55e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	7f1b      	ldrb	r3, [r3, #28]
 800e564:	2b01      	cmp	r3, #1
 800e566:	d101      	bne.n	800e56c <HAL_RTC_SetDate+0x1c>
 800e568:	2302      	movs	r3, #2
 800e56a:	e06f      	b.n	800e64c <HAL_RTC_SetDate+0xfc>
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	2201      	movs	r2, #1
 800e570:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2202      	movs	r2, #2
 800e576:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d10e      	bne.n	800e59c <HAL_RTC_SetDate+0x4c>
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	785b      	ldrb	r3, [r3, #1]
 800e582:	f003 0310 	and.w	r3, r3, #16
 800e586:	2b00      	cmp	r3, #0
 800e588:	d008      	beq.n	800e59c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	785b      	ldrb	r3, [r3, #1]
 800e58e:	f023 0310 	bic.w	r3, r3, #16
 800e592:	b2db      	uxtb	r3, r3
 800e594:	330a      	adds	r3, #10
 800e596:	b2da      	uxtb	r2, r3
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d11c      	bne.n	800e5dc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	78db      	ldrb	r3, [r3, #3]
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f000 fa04 	bl	800e9b4 <RTC_ByteToBcd2>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	785b      	ldrb	r3, [r3, #1]
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f000 f9fd 	bl	800e9b4 <RTC_ByteToBcd2>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800e5be:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	789b      	ldrb	r3, [r3, #2]
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f000 f9f5 	bl	800e9b4 <RTC_ByteToBcd2>
 800e5ca:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800e5cc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	781b      	ldrb	r3, [r3, #0]
 800e5d4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800e5d6:	4313      	orrs	r3, r2
 800e5d8:	617b      	str	r3, [r7, #20]
 800e5da:	e00e      	b.n	800e5fa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	78db      	ldrb	r3, [r3, #3]
 800e5e0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	785b      	ldrb	r3, [r3, #1]
 800e5e6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800e5e8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800e5ea:	68ba      	ldr	r2, [r7, #8]
 800e5ec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800e5ee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	781b      	ldrb	r3, [r3, #0]
 800e5f4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800e5f6:	4313      	orrs	r3, r2
 800e5f8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	22ca      	movs	r2, #202	; 0xca
 800e600:	625a      	str	r2, [r3, #36]	; 0x24
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	2253      	movs	r2, #83	; 0x53
 800e608:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800e60a:	68f8      	ldr	r0, [r7, #12]
 800e60c:	f000 f976 	bl	800e8fc <RTC_EnterInitMode>
 800e610:	4603      	mov	r3, r0
 800e612:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800e614:	7cfb      	ldrb	r3, [r7, #19]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d10a      	bne.n	800e630 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	681a      	ldr	r2, [r3, #0]
 800e61e:	6979      	ldr	r1, [r7, #20]
 800e620:	4b0c      	ldr	r3, [pc, #48]	; (800e654 <HAL_RTC_SetDate+0x104>)
 800e622:	400b      	ands	r3, r1
 800e624:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800e626:	68f8      	ldr	r0, [r7, #12]
 800e628:	f000 f99f 	bl	800e96a <RTC_ExitInitMode>
 800e62c:	4603      	mov	r3, r0
 800e62e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800e630:	7cfb      	ldrb	r3, [r7, #19]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d102      	bne.n	800e63c <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	2201      	movs	r2, #1
 800e63a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	22ff      	movs	r2, #255	; 0xff
 800e642:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2200      	movs	r2, #0
 800e648:	771a      	strb	r2, [r3, #28]

  return status;
 800e64a:	7cfb      	ldrb	r3, [r7, #19]
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	371c      	adds	r7, #28
 800e650:	46bd      	mov	sp, r7
 800e652:	bd90      	pop	{r4, r7, pc}
 800e654:	00ffff3f 	.word	0x00ffff3f

0800e658 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800e658:	b590      	push	{r4, r7, lr}
 800e65a:	b089      	sub	sp, #36	; 0x24
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	60b9      	str	r1, [r7, #8]
 800e662:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800e664:	2300      	movs	r3, #0
 800e666:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800e668:	2300      	movs	r3, #0
 800e66a:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800e66c:	2300      	movs	r3, #0
 800e66e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	7f1b      	ldrb	r3, [r3, #28]
 800e674:	2b01      	cmp	r3, #1
 800e676:	d101      	bne.n	800e67c <HAL_RTC_SetAlarm+0x24>
 800e678:	2302      	movs	r3, #2
 800e67a:	e113      	b.n	800e8a4 <HAL_RTC_SetAlarm+0x24c>
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2201      	movs	r2, #1
 800e680:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	2202      	movs	r2, #2
 800e686:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d137      	bne.n	800e6fe <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	689b      	ldr	r3, [r3, #8]
 800e694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d102      	bne.n	800e6a2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	781b      	ldrb	r3, [r3, #0]
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f000 f984 	bl	800e9b4 <RTC_ByteToBcd2>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	785b      	ldrb	r3, [r3, #1]
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f000 f97d 	bl	800e9b4 <RTC_ByteToBcd2>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800e6be:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	789b      	ldrb	r3, [r3, #2]
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f000 f975 	bl	800e9b4 <RTC_ByteToBcd2>
 800e6ca:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e6cc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	78db      	ldrb	r3, [r3, #3]
 800e6d4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800e6d6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f000 f967 	bl	800e9b4 <RTC_ByteToBcd2>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800e6ea:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800e6f2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800e6f8:	4313      	orrs	r3, r2
 800e6fa:	61fb      	str	r3, [r7, #28]
 800e6fc:	e023      	b.n	800e746 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	689b      	ldr	r3, [r3, #8]
 800e704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d102      	bne.n	800e712 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	2200      	movs	r2, #0
 800e710:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	785b      	ldrb	r3, [r3, #1]
 800e71c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800e71e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800e720:	68ba      	ldr	r2, [r7, #8]
 800e722:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800e724:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	78db      	ldrb	r3, [r3, #3]
 800e72a:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800e72c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e734:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800e736:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800e73c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800e742:	4313      	orrs	r3, r2
 800e744:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800e74e:	4313      	orrs	r3, r2
 800e750:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	22ca      	movs	r2, #202	; 0xca
 800e758:	625a      	str	r2, [r3, #36]	; 0x24
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2253      	movs	r2, #83	; 0x53
 800e760:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e76a:	d148      	bne.n	800e7fe <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	689a      	ldr	r2, [r3, #8]
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e77a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	689a      	ldr	r2, [r3, #8]
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e78a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	68db      	ldr	r3, [r3, #12]
 800e792:	b2da      	uxtb	r2, r3
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800e79c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e79e:	f7f7 f9b7 	bl	8005b10 <HAL_GetTick>
 800e7a2:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800e7a4:	e013      	b.n	800e7ce <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e7a6:	f7f7 f9b3 	bl	8005b10 <HAL_GetTick>
 800e7aa:	4602      	mov	r2, r0
 800e7ac:	69bb      	ldr	r3, [r7, #24]
 800e7ae:	1ad3      	subs	r3, r2, r3
 800e7b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e7b4:	d90b      	bls.n	800e7ce <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	22ff      	movs	r2, #255	; 0xff
 800e7bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	2203      	movs	r2, #3
 800e7c2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800e7ca:	2303      	movs	r3, #3
 800e7cc:	e06a      	b.n	800e8a4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	68db      	ldr	r3, [r3, #12]
 800e7d4:	f003 0301 	and.w	r3, r3, #1
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d0e4      	beq.n	800e7a6 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	69fa      	ldr	r2, [r7, #28]
 800e7e2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	697a      	ldr	r2, [r7, #20]
 800e7ea:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	689a      	ldr	r2, [r3, #8]
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e7fa:	609a      	str	r2, [r3, #8]
 800e7fc:	e047      	b.n	800e88e <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	689a      	ldr	r2, [r3, #8]
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800e80c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	689a      	ldr	r2, [r3, #8]
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e81c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	68db      	ldr	r3, [r3, #12]
 800e824:	b2da      	uxtb	r2, r3
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800e82e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e830:	f7f7 f96e 	bl	8005b10 <HAL_GetTick>
 800e834:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800e836:	e013      	b.n	800e860 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e838:	f7f7 f96a 	bl	8005b10 <HAL_GetTick>
 800e83c:	4602      	mov	r2, r0
 800e83e:	69bb      	ldr	r3, [r7, #24]
 800e840:	1ad3      	subs	r3, r2, r3
 800e842:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e846:	d90b      	bls.n	800e860 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	22ff      	movs	r2, #255	; 0xff
 800e84e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	2203      	movs	r2, #3
 800e854:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	2200      	movs	r2, #0
 800e85a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800e85c:	2303      	movs	r3, #3
 800e85e:	e021      	b.n	800e8a4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	68db      	ldr	r3, [r3, #12]
 800e866:	f003 0302 	and.w	r3, r3, #2
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d0e4      	beq.n	800e838 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	69fa      	ldr	r2, [r7, #28]
 800e874:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	697a      	ldr	r2, [r7, #20]
 800e87c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	689a      	ldr	r2, [r3, #8]
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e88c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	22ff      	movs	r2, #255	; 0xff
 800e894:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2201      	movs	r2, #1
 800e89a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800e8a2:	2300      	movs	r3, #0
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3724      	adds	r7, #36	; 0x24
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd90      	pop	{r4, r7, pc}

0800e8ac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b084      	sub	sp, #16
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	68da      	ldr	r2, [r3, #12]
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800e8c6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e8c8:	f7f7 f922 	bl	8005b10 <HAL_GetTick>
 800e8cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e8ce:	e009      	b.n	800e8e4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e8d0:	f7f7 f91e 	bl	8005b10 <HAL_GetTick>
 800e8d4:	4602      	mov	r2, r0
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	1ad3      	subs	r3, r2, r3
 800e8da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e8de:	d901      	bls.n	800e8e4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800e8e0:	2303      	movs	r3, #3
 800e8e2:	e007      	b.n	800e8f4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	68db      	ldr	r3, [r3, #12]
 800e8ea:	f003 0320 	and.w	r3, r3, #32
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d0ee      	beq.n	800e8d0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800e8f2:	2300      	movs	r3, #0
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3710      	adds	r7, #16
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}

0800e8fc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e904:	2300      	movs	r3, #0
 800e906:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800e908:	2300      	movs	r3, #0
 800e90a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	68db      	ldr	r3, [r3, #12]
 800e912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e916:	2b00      	cmp	r3, #0
 800e918:	d122      	bne.n	800e960 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	68da      	ldr	r2, [r3, #12]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e928:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e92a:	f7f7 f8f1 	bl	8005b10 <HAL_GetTick>
 800e92e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800e930:	e00c      	b.n	800e94c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e932:	f7f7 f8ed 	bl	8005b10 <HAL_GetTick>
 800e936:	4602      	mov	r2, r0
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	1ad3      	subs	r3, r2, r3
 800e93c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e940:	d904      	bls.n	800e94c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2204      	movs	r2, #4
 800e946:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800e948:	2301      	movs	r3, #1
 800e94a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	68db      	ldr	r3, [r3, #12]
 800e952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e956:	2b00      	cmp	r3, #0
 800e958:	d102      	bne.n	800e960 <RTC_EnterInitMode+0x64>
 800e95a:	7bfb      	ldrb	r3, [r7, #15]
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	d1e8      	bne.n	800e932 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800e960:	7bfb      	ldrb	r3, [r7, #15]
}
 800e962:	4618      	mov	r0, r3
 800e964:	3710      	adds	r7, #16
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}

0800e96a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e96a:	b580      	push	{r7, lr}
 800e96c:	b084      	sub	sp, #16
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e972:	2300      	movs	r3, #0
 800e974:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	68da      	ldr	r2, [r3, #12]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e984:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	689b      	ldr	r3, [r3, #8]
 800e98c:	f003 0320 	and.w	r3, r3, #32
 800e990:	2b00      	cmp	r3, #0
 800e992:	d10a      	bne.n	800e9aa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f7ff ff89 	bl	800e8ac <HAL_RTC_WaitForSynchro>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d004      	beq.n	800e9aa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2204      	movs	r2, #4
 800e9a4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800e9aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3710      	adds	r7, #16
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b085      	sub	sp, #20
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800e9c2:	e005      	b.n	800e9d0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	3301      	adds	r3, #1
 800e9c8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800e9ca:	79fb      	ldrb	r3, [r7, #7]
 800e9cc:	3b0a      	subs	r3, #10
 800e9ce:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800e9d0:	79fb      	ldrb	r3, [r7, #7]
 800e9d2:	2b09      	cmp	r3, #9
 800e9d4:	d8f6      	bhi.n	800e9c4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	011b      	lsls	r3, r3, #4
 800e9dc:	b2da      	uxtb	r2, r3
 800e9de:	79fb      	ldrb	r3, [r7, #7]
 800e9e0:	4313      	orrs	r3, r2
 800e9e2:	b2db      	uxtb	r3, r3
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	3714      	adds	r7, #20
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ee:	4770      	bx	lr

0800e9f0 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	b087      	sub	sp, #28
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	60f8      	str	r0, [r7, #12]
 800e9f8:	60b9      	str	r1, [r7, #8]
 800e9fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	7f1b      	ldrb	r3, [r3, #28]
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	d101      	bne.n	800ea0c <HAL_RTCEx_SetTimeStamp+0x1c>
 800ea08:	2302      	movs	r3, #2
 800ea0a:	e050      	b.n	800eaae <HAL_RTCEx_SetTimeStamp+0xbe>
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	2201      	movs	r2, #1
 800ea10:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2202      	movs	r2, #2
 800ea16:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	f022 0206 	bic.w	r2, r2, #6
 800ea26:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	687a      	ldr	r2, [r7, #4]
 800ea34:	430a      	orrs	r2, r1
 800ea36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	689a      	ldr	r2, [r3, #8]
 800ea3e:	4b1f      	ldr	r3, [pc, #124]	; (800eabc <HAL_RTCEx_SetTimeStamp+0xcc>)
 800ea40:	4013      	ands	r3, r2
 800ea42:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800ea44:	697a      	ldr	r2, [r7, #20]
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	4313      	orrs	r3, r2
 800ea4a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	22ca      	movs	r2, #202	; 0xca
 800ea52:	625a      	str	r2, [r3, #36]	; 0x24
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	2253      	movs	r2, #83	; 0x53
 800ea5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	697a      	ldr	r2, [r7, #20]
 800ea62:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	68db      	ldr	r3, [r3, #12]
 800ea6a:	b2da      	uxtb	r2, r3
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	f462 6208 	orn	r2, r2, #2176	; 0x880
 800ea74:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	68db      	ldr	r3, [r3, #12]
 800ea7c:	b2da      	uxtb	r2, r3
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 800ea86:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	689a      	ldr	r2, [r3, #8]
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ea96:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	22ff      	movs	r2, #255	; 0xff
 800ea9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2201      	movs	r2, #1
 800eaa4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800eaac:	2300      	movs	r3, #0
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	371c      	adds	r7, #28
 800eab2:	46bd      	mov	sp, r7
 800eab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab8:	4770      	bx	lr
 800eaba:	bf00      	nop
 800eabc:	fffff7f7 	.word	0xfffff7f7

0800eac0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b088      	sub	sp, #32
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800eac8:	2300      	movs	r3, #0
 800eaca:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800eacc:	2300      	movs	r3, #0
 800eace:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800ead0:	2300      	movs	r3, #0
 800ead2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d101      	bne.n	800eade <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800eada:	2301      	movs	r3, #1
 800eadc:	e156      	b.n	800ed8c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800eae4:	b2db      	uxtb	r3, r3
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d106      	bne.n	800eaf8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2200      	movs	r2, #0
 800eaee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f7f4 fe90 	bl	8003818 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2202      	movs	r2, #2
 800eafc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f000 facf 	bl	800f0a4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	68db      	ldr	r3, [r3, #12]
 800eb0a:	2b02      	cmp	r3, #2
 800eb0c:	d00c      	beq.n	800eb28 <HAL_SAI_Init+0x68>
 800eb0e:	2b02      	cmp	r3, #2
 800eb10:	d80d      	bhi.n	800eb2e <HAL_SAI_Init+0x6e>
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d002      	beq.n	800eb1c <HAL_SAI_Init+0x5c>
 800eb16:	2b01      	cmp	r3, #1
 800eb18:	d003      	beq.n	800eb22 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800eb1a:	e008      	b.n	800eb2e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	61fb      	str	r3, [r7, #28]
      break;
 800eb20:	e006      	b.n	800eb30 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800eb22:	2310      	movs	r3, #16
 800eb24:	61fb      	str	r3, [r7, #28]
      break;
 800eb26:	e003      	b.n	800eb30 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800eb28:	2320      	movs	r3, #32
 800eb2a:	61fb      	str	r3, [r7, #28]
      break;
 800eb2c:	e000      	b.n	800eb30 <HAL_SAI_Init+0x70>
      break;
 800eb2e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	689b      	ldr	r3, [r3, #8]
 800eb34:	2b03      	cmp	r3, #3
 800eb36:	d81e      	bhi.n	800eb76 <HAL_SAI_Init+0xb6>
 800eb38:	a201      	add	r2, pc, #4	; (adr r2, 800eb40 <HAL_SAI_Init+0x80>)
 800eb3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb3e:	bf00      	nop
 800eb40:	0800eb51 	.word	0x0800eb51
 800eb44:	0800eb57 	.word	0x0800eb57
 800eb48:	0800eb5f 	.word	0x0800eb5f
 800eb4c:	0800eb67 	.word	0x0800eb67
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800eb50:	2300      	movs	r3, #0
 800eb52:	617b      	str	r3, [r7, #20]
    }
    break;
 800eb54:	e010      	b.n	800eb78 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800eb56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb5a:	617b      	str	r3, [r7, #20]
    }
    break;
 800eb5c:	e00c      	b.n	800eb78 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800eb5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eb62:	617b      	str	r3, [r7, #20]
    }
    break;
 800eb64:	e008      	b.n	800eb78 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800eb66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eb6a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800eb6c:	69fb      	ldr	r3, [r7, #28]
 800eb6e:	f043 0301 	orr.w	r3, r3, #1
 800eb72:	61fb      	str	r3, [r7, #28]
    }
    break;
 800eb74:	e000      	b.n	800eb78 <HAL_SAI_Init+0xb8>
    default:
      break;
 800eb76:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	4a85      	ldr	r2, [pc, #532]	; (800ed94 <HAL_SAI_Init+0x2d4>)
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d004      	beq.n	800eb8c <HAL_SAI_Init+0xcc>
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	4a84      	ldr	r2, [pc, #528]	; (800ed98 <HAL_SAI_Init+0x2d8>)
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	d103      	bne.n	800eb94 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800eb8c:	4a83      	ldr	r2, [pc, #524]	; (800ed9c <HAL_SAI_Init+0x2dc>)
 800eb8e:	69fb      	ldr	r3, [r7, #28]
 800eb90:	6013      	str	r3, [r2, #0]
 800eb92:	e002      	b.n	800eb9a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800eb94:	4a82      	ldr	r2, [pc, #520]	; (800eda0 <HAL_SAI_Init+0x2e0>)
 800eb96:	69fb      	ldr	r3, [r7, #28]
 800eb98:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	69db      	ldr	r3, [r3, #28]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d04c      	beq.n	800ec3c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800eba2:	2300      	movs	r3, #0
 800eba4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	4a7a      	ldr	r2, [pc, #488]	; (800ed94 <HAL_SAI_Init+0x2d4>)
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d004      	beq.n	800ebba <HAL_SAI_Init+0xfa>
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	4a78      	ldr	r2, [pc, #480]	; (800ed98 <HAL_SAI_Init+0x2d8>)
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d104      	bne.n	800ebc4 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ebba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800ebbe:	f7ff fa65 	bl	800e08c <HAL_RCCEx_GetPeriphCLKFreq>
 800ebc2:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	4a76      	ldr	r2, [pc, #472]	; (800eda4 <HAL_SAI_Init+0x2e4>)
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	d004      	beq.n	800ebd8 <HAL_SAI_Init+0x118>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	4a75      	ldr	r2, [pc, #468]	; (800eda8 <HAL_SAI_Init+0x2e8>)
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	d104      	bne.n	800ebe2 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800ebd8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ebdc:	f7ff fa56 	bl	800e08c <HAL_RCCEx_GetPeriphCLKFreq>
 800ebe0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800ebe2:	693a      	ldr	r2, [r7, #16]
 800ebe4:	4613      	mov	r3, r2
 800ebe6:	009b      	lsls	r3, r3, #2
 800ebe8:	4413      	add	r3, r2
 800ebea:	005b      	lsls	r3, r3, #1
 800ebec:	461a      	mov	r2, r3
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	69db      	ldr	r3, [r3, #28]
 800ebf2:	025b      	lsls	r3, r3, #9
 800ebf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebf8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	4a6b      	ldr	r2, [pc, #428]	; (800edac <HAL_SAI_Init+0x2ec>)
 800ebfe:	fba2 2303 	umull	r2, r3, r2, r3
 800ec02:	08da      	lsrs	r2, r3, #3
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800ec08:	68f9      	ldr	r1, [r7, #12]
 800ec0a:	4b68      	ldr	r3, [pc, #416]	; (800edac <HAL_SAI_Init+0x2ec>)
 800ec0c:	fba3 2301 	umull	r2, r3, r3, r1
 800ec10:	08da      	lsrs	r2, r3, #3
 800ec12:	4613      	mov	r3, r2
 800ec14:	009b      	lsls	r3, r3, #2
 800ec16:	4413      	add	r3, r2
 800ec18:	005b      	lsls	r3, r3, #1
 800ec1a:	1aca      	subs	r2, r1, r3
 800ec1c:	2a08      	cmp	r2, #8
 800ec1e:	d904      	bls.n	800ec2a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6a1b      	ldr	r3, [r3, #32]
 800ec24:	1c5a      	adds	r2, r3, #1
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec2e:	2b04      	cmp	r3, #4
 800ec30:	d104      	bne.n	800ec3c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6a1b      	ldr	r3, [r3, #32]
 800ec36:	085a      	lsrs	r2, r3, #1
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	685b      	ldr	r3, [r3, #4]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d003      	beq.n	800ec4c <HAL_SAI_Init+0x18c>
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	2b02      	cmp	r3, #2
 800ec4a:	d109      	bne.n	800ec60 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec50:	2b01      	cmp	r3, #1
 800ec52:	d101      	bne.n	800ec58 <HAL_SAI_Init+0x198>
 800ec54:	2300      	movs	r3, #0
 800ec56:	e001      	b.n	800ec5c <HAL_SAI_Init+0x19c>
 800ec58:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ec5c:	61bb      	str	r3, [r7, #24]
 800ec5e:	e008      	b.n	800ec72 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d102      	bne.n	800ec6e <HAL_SAI_Init+0x1ae>
 800ec68:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ec6c:	e000      	b.n	800ec70 <HAL_SAI_Init+0x1b0>
 800ec6e:	2300      	movs	r3, #0
 800ec70:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	6819      	ldr	r1, [r3, #0]
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681a      	ldr	r2, [r3, #0]
 800ec7c:	4b4c      	ldr	r3, [pc, #304]	; (800edb0 <HAL_SAI_Init+0x2f0>)
 800ec7e:	400b      	ands	r3, r1
 800ec80:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	6819      	ldr	r1, [r3, #0]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	685a      	ldr	r2, [r3, #4]
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec90:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ec96:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec9c:	431a      	orrs	r2, r3
 800ec9e:	69bb      	ldr	r3, [r7, #24]
 800eca0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800ecaa:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	691b      	ldr	r3, [r3, #16]
 800ecb0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ecb6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6a1b      	ldr	r3, [r3, #32]
 800ecbc:	051b      	lsls	r3, r3, #20
 800ecbe:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	430a      	orrs	r2, r1
 800ecc6:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	6859      	ldr	r1, [r3, #4]
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681a      	ldr	r2, [r3, #0]
 800ecd2:	4b38      	ldr	r3, [pc, #224]	; (800edb4 <HAL_SAI_Init+0x2f4>)
 800ecd4:	400b      	ands	r3, r1
 800ecd6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	6859      	ldr	r1, [r3, #4]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	699a      	ldr	r2, [r3, #24]
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ece6:	431a      	orrs	r2, r3
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecec:	431a      	orrs	r2, r3
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	430a      	orrs	r2, r1
 800ecf4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	6899      	ldr	r1, [r3, #8]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681a      	ldr	r2, [r3, #0]
 800ed00:	4b2d      	ldr	r3, [pc, #180]	; (800edb8 <HAL_SAI_Init+0x2f8>)
 800ed02:	400b      	ands	r3, r1
 800ed04:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	6899      	ldr	r1, [r3, #8]
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed10:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ed16:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800ed1c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800ed22:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed28:	3b01      	subs	r3, #1
 800ed2a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ed2c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	430a      	orrs	r2, r1
 800ed34:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	68d9      	ldr	r1, [r3, #12]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681a      	ldr	r2, [r3, #0]
 800ed40:	f24f 0320 	movw	r3, #61472	; 0xf020
 800ed44:	400b      	ands	r3, r1
 800ed46:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	68d9      	ldr	r1, [r3, #12]
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed56:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed5c:	041b      	lsls	r3, r3, #16
 800ed5e:	431a      	orrs	r2, r3
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed64:	3b01      	subs	r3, #1
 800ed66:	021b      	lsls	r3, r3, #8
 800ed68:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	430a      	orrs	r2, r1
 800ed70:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2200      	movs	r2, #0
 800ed76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2201      	movs	r2, #1
 800ed7e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2200      	movs	r2, #0
 800ed86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ed8a:	2300      	movs	r3, #0
}
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	3720      	adds	r7, #32
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}
 800ed94:	40015804 	.word	0x40015804
 800ed98:	40015824 	.word	0x40015824
 800ed9c:	40015800 	.word	0x40015800
 800eda0:	40015c00 	.word	0x40015c00
 800eda4:	40015c04 	.word	0x40015c04
 800eda8:	40015c24 	.word	0x40015c24
 800edac:	cccccccd 	.word	0xcccccccd
 800edb0:	ff05c010 	.word	0xff05c010
 800edb4:	ffff1ff0 	.word	0xffff1ff0
 800edb8:	fff88000 	.word	0xfff88000

0800edbc <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b086      	sub	sp, #24
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	60f8      	str	r0, [r7, #12]
 800edc4:	60b9      	str	r1, [r7, #8]
 800edc6:	4613      	mov	r3, r2
 800edc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800edca:	f7f6 fea1 	bl	8005b10 <HAL_GetTick>
 800edce:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d002      	beq.n	800eddc <HAL_SAI_Transmit_DMA+0x20>
 800edd6:	88fb      	ldrh	r3, [r7, #6]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d101      	bne.n	800ede0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800eddc:	2301      	movs	r3, #1
 800edde:	e093      	b.n	800ef08 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ede6:	b2db      	uxtb	r3, r3
 800ede8:	2b01      	cmp	r3, #1
 800edea:	f040 808c 	bne.w	800ef06 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800edf4:	2b01      	cmp	r3, #1
 800edf6:	d101      	bne.n	800edfc <HAL_SAI_Transmit_DMA+0x40>
 800edf8:	2302      	movs	r3, #2
 800edfa:	e085      	b.n	800ef08 <HAL_SAI_Transmit_DMA+0x14c>
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	2201      	movs	r2, #1
 800ee00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	68ba      	ldr	r2, [r7, #8]
 800ee08:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	88fa      	ldrh	r2, [r7, #6]
 800ee0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	88fa      	ldrh	r2, [r7, #6]
 800ee16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	2212      	movs	r2, #18
 800ee26:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee2e:	4a38      	ldr	r2, [pc, #224]	; (800ef10 <HAL_SAI_Transmit_DMA+0x154>)
 800ee30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee36:	4a37      	ldr	r2, [pc, #220]	; (800ef14 <HAL_SAI_Transmit_DMA+0x158>)
 800ee38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee3e:	4a36      	ldr	r2, [pc, #216]	; (800ef18 <HAL_SAI_Transmit_DMA+0x15c>)
 800ee40:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee46:	2200      	movs	r2, #0
 800ee48:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee52:	4619      	mov	r1, r3
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	331c      	adds	r3, #28
 800ee5a:	461a      	mov	r2, r3
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ee62:	f7f7 fd0f 	bl	8006884 <HAL_DMA_Start_IT>
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d005      	beq.n	800ee78 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800ee74:	2301      	movs	r3, #1
 800ee76:	e047      	b.n	800ef08 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ee78:	2100      	movs	r1, #0
 800ee7a:	68f8      	ldr	r0, [r7, #12]
 800ee7c:	f000 f8dc 	bl	800f038 <SAI_InterruptFlag>
 800ee80:	4601      	mov	r1, r0
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	691a      	ldr	r2, [r3, #16]
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	430a      	orrs	r2, r1
 800ee8e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	681a      	ldr	r2, [r3, #0]
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ee9e:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800eea0:	e015      	b.n	800eece <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800eea2:	f7f6 fe35 	bl	8005b10 <HAL_GetTick>
 800eea6:	4602      	mov	r2, r0
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	1ad3      	subs	r3, r2, r3
 800eeac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eeb0:	d90d      	bls.n	800eece <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eeb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	2200      	movs	r2, #0
 800eec6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800eeca:	2303      	movs	r3, #3
 800eecc:	e01c      	b.n	800ef08 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	695b      	ldr	r3, [r3, #20]
 800eed4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d0e2      	beq.n	800eea2 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d107      	bne.n	800eefa <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	681a      	ldr	r2, [r3, #0]
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800eef8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2200      	movs	r2, #0
 800eefe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800ef02:	2300      	movs	r3, #0
 800ef04:	e000      	b.n	800ef08 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800ef06:	2302      	movs	r3, #2
  }
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3718      	adds	r7, #24
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}
 800ef10:	0800f175 	.word	0x0800f175
 800ef14:	0800f115 	.word	0x0800f115
 800ef18:	0800f20d 	.word	0x0800f20d

0800ef1c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b084      	sub	sp, #16
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	60f8      	str	r0, [r7, #12]
 800ef24:	60b9      	str	r1, [r7, #8]
 800ef26:	4613      	mov	r3, r2
 800ef28:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d002      	beq.n	800ef36 <HAL_SAI_Receive_DMA+0x1a>
 800ef30:	88fb      	ldrh	r3, [r7, #6]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d101      	bne.n	800ef3a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800ef36:	2301      	movs	r3, #1
 800ef38:	e074      	b.n	800f024 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	2b01      	cmp	r3, #1
 800ef44:	d16d      	bne.n	800f022 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ef4c:	2b01      	cmp	r3, #1
 800ef4e:	d101      	bne.n	800ef54 <HAL_SAI_Receive_DMA+0x38>
 800ef50:	2302      	movs	r3, #2
 800ef52:	e067      	b.n	800f024 <HAL_SAI_Receive_DMA+0x108>
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	2201      	movs	r2, #1
 800ef58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	68ba      	ldr	r2, [r7, #8]
 800ef60:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	88fa      	ldrh	r2, [r7, #6]
 800ef66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	88fa      	ldrh	r2, [r7, #6]
 800ef6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	2200      	movs	r2, #0
 800ef76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2222      	movs	r2, #34	; 0x22
 800ef7e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef86:	4a29      	ldr	r2, [pc, #164]	; (800f02c <HAL_SAI_Receive_DMA+0x110>)
 800ef88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef8e:	4a28      	ldr	r2, [pc, #160]	; (800f030 <HAL_SAI_Receive_DMA+0x114>)
 800ef90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef96:	4a27      	ldr	r2, [pc, #156]	; (800f034 <HAL_SAI_Receive_DMA+0x118>)
 800ef98:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef9e:	2200      	movs	r2, #0
 800efa0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	331c      	adds	r3, #28
 800efac:	4619      	mov	r1, r3
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efb2:	461a      	mov	r2, r3
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800efba:	f7f7 fc63 	bl	8006884 <HAL_DMA_Start_IT>
 800efbe:	4603      	mov	r3, r0
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d005      	beq.n	800efd0 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	2200      	movs	r2, #0
 800efc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800efcc:	2301      	movs	r3, #1
 800efce:	e029      	b.n	800f024 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800efd0:	2100      	movs	r1, #0
 800efd2:	68f8      	ldr	r0, [r7, #12]
 800efd4:	f000 f830 	bl	800f038 <SAI_InterruptFlag>
 800efd8:	4601      	mov	r1, r0
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	691a      	ldr	r2, [r3, #16]
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	430a      	orrs	r2, r1
 800efe6:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	681a      	ldr	r2, [r3, #0]
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800eff6:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f002:	2b00      	cmp	r3, #0
 800f004:	d107      	bne.n	800f016 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	681a      	ldr	r2, [r3, #0]
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f014:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	2200      	movs	r2, #0
 800f01a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800f01e:	2300      	movs	r3, #0
 800f020:	e000      	b.n	800f024 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800f022:	2302      	movs	r3, #2
  }
}
 800f024:	4618      	mov	r0, r3
 800f026:	3710      	adds	r7, #16
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}
 800f02c:	0800f1f1 	.word	0x0800f1f1
 800f030:	0800f191 	.word	0x0800f191
 800f034:	0800f20d 	.word	0x0800f20d

0800f038 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800f038:	b480      	push	{r7}
 800f03a:	b085      	sub	sp, #20
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
 800f040:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800f042:	2301      	movs	r3, #1
 800f044:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	2b01      	cmp	r3, #1
 800f04a:	d103      	bne.n	800f054 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f043 0308 	orr.w	r3, r3, #8
 800f052:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f058:	2b08      	cmp	r3, #8
 800f05a:	d10b      	bne.n	800f074 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f060:	2b03      	cmp	r3, #3
 800f062:	d003      	beq.n	800f06c <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	2b01      	cmp	r3, #1
 800f06a:	d103      	bne.n	800f074 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	f043 0310 	orr.w	r3, r3, #16
 800f072:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	2b03      	cmp	r3, #3
 800f07a:	d003      	beq.n	800f084 <SAI_InterruptFlag+0x4c>
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	685b      	ldr	r3, [r3, #4]
 800f080:	2b02      	cmp	r3, #2
 800f082:	d104      	bne.n	800f08e <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800f08a:	60fb      	str	r3, [r7, #12]
 800f08c:	e003      	b.n	800f096 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	f043 0304 	orr.w	r3, r3, #4
 800f094:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800f096:	68fb      	ldr	r3, [r7, #12]
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3714      	adds	r7, #20
 800f09c:	46bd      	mov	sp, r7
 800f09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a2:	4770      	bx	lr

0800f0a4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b085      	sub	sp, #20
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800f0ac:	4b17      	ldr	r3, [pc, #92]	; (800f10c <SAI_Disable+0x68>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	4a17      	ldr	r2, [pc, #92]	; (800f110 <SAI_Disable+0x6c>)
 800f0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800f0b6:	0b1b      	lsrs	r3, r3, #12
 800f0b8:	009b      	lsls	r3, r3, #2
 800f0ba:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	681a      	ldr	r2, [r3, #0]
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800f0ce:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	1e5a      	subs	r2, r3, #1
 800f0d4:	60fa      	str	r2, [r7, #12]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d10a      	bne.n	800f0f0 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800f0ea:	2303      	movs	r3, #3
 800f0ec:	72fb      	strb	r3, [r7, #11]
      break;
 800f0ee:	e006      	b.n	800f0fe <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d1e8      	bne.n	800f0d0 <SAI_Disable+0x2c>

  return status;
 800f0fe:	7afb      	ldrb	r3, [r7, #11]
}
 800f100:	4618      	mov	r0, r3
 800f102:	3714      	adds	r7, #20
 800f104:	46bd      	mov	sp, r7
 800f106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10a:	4770      	bx	lr
 800f10c:	20000010 	.word	0x20000010
 800f110:	95cbec1b 	.word	0x95cbec1b

0800f114 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b084      	sub	sp, #16
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f120:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	69db      	ldr	r3, [r3, #28]
 800f126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f12a:	d01c      	beq.n	800f166 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	2200      	movs	r2, #0
 800f130:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	681a      	ldr	r2, [r3, #0]
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800f142:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f144:	2100      	movs	r1, #0
 800f146:	68f8      	ldr	r0, [r7, #12]
 800f148:	f7ff ff76 	bl	800f038 <SAI_InterruptFlag>
 800f14c:	4603      	mov	r3, r0
 800f14e:	43d9      	mvns	r1, r3
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	691a      	ldr	r2, [r3, #16]
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	400a      	ands	r2, r1
 800f15c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	2201      	movs	r2, #1
 800f162:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800f166:	68f8      	ldr	r0, [r7, #12]
 800f168:	f7f5 fd02 	bl	8004b70 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f16c:	bf00      	nop
 800f16e:	3710      	adds	r7, #16
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}

0800f174 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b084      	sub	sp, #16
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f180:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800f182:	68f8      	ldr	r0, [r7, #12]
 800f184:	f7f5 fcfe 	bl	8004b84 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f188:	bf00      	nop
 800f18a:	3710      	adds	r7, #16
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b084      	sub	sp, #16
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f19c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	69db      	ldr	r3, [r3, #28]
 800f1a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1a6:	d01c      	beq.n	800f1e2 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	681a      	ldr	r2, [r3, #0]
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800f1b6:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f1c0:	2100      	movs	r1, #0
 800f1c2:	68f8      	ldr	r0, [r7, #12]
 800f1c4:	f7ff ff38 	bl	800f038 <SAI_InterruptFlag>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	43d9      	mvns	r1, r3
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	691a      	ldr	r2, [r3, #16]
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	400a      	ands	r2, r1
 800f1d8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	2201      	movs	r2, #1
 800f1de:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800f1e2:	68f8      	ldr	r0, [r7, #12]
 800f1e4:	f7f1 ff0e 	bl	8001004 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f1e8:	bf00      	nop
 800f1ea:	3710      	adds	r7, #16
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}

0800f1f0 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b084      	sub	sp, #16
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1fc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800f1fe:	68f8      	ldr	r0, [r7, #12]
 800f200:	f7f1 ff10 	bl	8001024 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f204:	bf00      	nop
 800f206:	3710      	adds	r7, #16
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}

0800f20c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b084      	sub	sp, #16
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f218:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f220:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f22e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f230:	2b01      	cmp	r3, #1
 800f232:	d004      	beq.n	800f23e <SAI_DMAError+0x32>
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f23a:	2b01      	cmp	r3, #1
 800f23c:	d112      	bne.n	800f264 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	681a      	ldr	r2, [r3, #0]
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800f24c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800f24e:	68f8      	ldr	r0, [r7, #12]
 800f250:	f7ff ff28 	bl	800f0a4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	2201      	movs	r2, #1
 800f258:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	2200      	movs	r2, #0
 800f260:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800f264:	68f8      	ldr	r0, [r7, #12]
 800f266:	f7f5 fc97 	bl	8004b98 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f26a:	bf00      	nop
 800f26c:	3710      	adds	r7, #16
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}

0800f272 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800f272:	b580      	push	{r7, lr}
 800f274:	b082      	sub	sp, #8
 800f276:	af00      	add	r7, sp, #0
 800f278:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d101      	bne.n	800f284 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800f280:	2301      	movs	r3, #1
 800f282:	e022      	b.n	800f2ca <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f28a:	b2db      	uxtb	r3, r3
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d105      	bne.n	800f29c <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2200      	movs	r2, #0
 800f294:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f7f3 ff30 	bl	80030fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2203      	movs	r2, #3
 800f2a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f000 f815 	bl	800f2d4 <HAL_SD_InitCard>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d001      	beq.n	800f2b4 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	e00a      	b.n	800f2ca <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2200      	movs	r2, #0
 800f2be:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2201      	movs	r2, #1
 800f2c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800f2c8:	2300      	movs	r3, #0
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	3708      	adds	r7, #8
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}
	...

0800f2d4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f2d4:	b5b0      	push	{r4, r5, r7, lr}
 800f2d6:	b08e      	sub	sp, #56	; 0x38
 800f2d8:	af04      	add	r7, sp, #16
 800f2da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800f2f0:	2376      	movs	r3, #118	; 0x76
 800f2f2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681d      	ldr	r5, [r3, #0]
 800f2f8:	466c      	mov	r4, sp
 800f2fa:	f107 0314 	add.w	r3, r7, #20
 800f2fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f302:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f306:	f107 0308 	add.w	r3, r7, #8
 800f30a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f30c:	4628      	mov	r0, r5
 800f30e:	f003 f825 	bl	801235c <SDMMC_Init>
 800f312:	4603      	mov	r3, r0
 800f314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800f318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d001      	beq.n	800f324 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800f320:	2301      	movs	r3, #1
 800f322:	e059      	b.n	800f3d8 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	685a      	ldr	r2, [r3, #4]
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f332:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	4618      	mov	r0, r3
 800f33a:	f003 f848 	bl	80123ce <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	685a      	ldr	r2, [r3, #4]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f34c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800f34e:	2002      	movs	r0, #2
 800f350:	f7f6 fbea 	bl	8005b28 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f000 fe0f 	bl	800ff78 <SD_PowerON>
 800f35a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f35c:	6a3b      	ldr	r3, [r7, #32]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d00b      	beq.n	800f37a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2201      	movs	r2, #1
 800f366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f36e:	6a3b      	ldr	r3, [r7, #32]
 800f370:	431a      	orrs	r2, r3
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f376:	2301      	movs	r3, #1
 800f378:	e02e      	b.n	800f3d8 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f000 fd2e 	bl	800fddc <SD_InitCard>
 800f380:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f382:	6a3b      	ldr	r3, [r7, #32]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d00b      	beq.n	800f3a0 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2201      	movs	r2, #1
 800f38c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f394:	6a3b      	ldr	r3, [r7, #32]
 800f396:	431a      	orrs	r2, r3
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f39c:	2301      	movs	r3, #1
 800f39e:	e01b      	b.n	800f3d8 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f003 f8a3 	bl	80124f4 <SDMMC_CmdBlockLength>
 800f3ae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f3b0:	6a3b      	ldr	r3, [r7, #32]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d00f      	beq.n	800f3d6 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	4a09      	ldr	r2, [pc, #36]	; (800f3e0 <HAL_SD_InitCard+0x10c>)
 800f3bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f3c2:	6a3b      	ldr	r3, [r7, #32]
 800f3c4:	431a      	orrs	r2, r3
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	2201      	movs	r2, #1
 800f3ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	e000      	b.n	800f3d8 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800f3d6:	2300      	movs	r3, #0
}
 800f3d8:	4618      	mov	r0, r3
 800f3da:	3728      	adds	r7, #40	; 0x28
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bdb0      	pop	{r4, r5, r7, pc}
 800f3e0:	004005ff 	.word	0x004005ff

0800f3e4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b08c      	sub	sp, #48	; 0x30
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	60f8      	str	r0, [r7, #12]
 800f3ec:	60b9      	str	r1, [r7, #8]
 800f3ee:	607a      	str	r2, [r7, #4]
 800f3f0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800f3f6:	68bb      	ldr	r3, [r7, #8]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d107      	bne.n	800f40c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f400:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f408:	2301      	movs	r3, #1
 800f40a:	e0c3      	b.n	800f594 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f412:	b2db      	uxtb	r3, r3
 800f414:	2b01      	cmp	r3, #1
 800f416:	f040 80bc 	bne.w	800f592 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	2200      	movs	r2, #0
 800f41e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800f420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	441a      	add	r2, r3
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f42a:	429a      	cmp	r2, r3
 800f42c:	d907      	bls.n	800f43e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f432:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800f43a:	2301      	movs	r3, #1
 800f43c:	e0aa      	b.n	800f594 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	2203      	movs	r2, #3
 800f442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	2200      	movs	r2, #0
 800f44c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800f45c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f462:	4a4e      	ldr	r2, [pc, #312]	; (800f59c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800f464:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f46a:	4a4d      	ldr	r2, [pc, #308]	; (800f5a0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800f46c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f472:	2200      	movs	r2, #0
 800f474:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f47a:	2200      	movs	r2, #0
 800f47c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f48e:	689a      	ldr	r2, [r3, #8]
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	430a      	orrs	r2, r1
 800f498:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	3380      	adds	r3, #128	; 0x80
 800f4a4:	4619      	mov	r1, r3
 800f4a6:	68ba      	ldr	r2, [r7, #8]
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	025b      	lsls	r3, r3, #9
 800f4ac:	089b      	lsrs	r3, r3, #2
 800f4ae:	f7f7 f9e9 	bl	8006884 <HAL_DMA_Start_IT>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d017      	beq.n	800f4e8 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800f4c6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	4a35      	ldr	r2, [pc, #212]	; (800f5a4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800f4ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	2201      	movs	r2, #1
 800f4e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	e055      	b.n	800f594 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	f042 0208 	orr.w	r2, r2, #8
 800f4f6:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4fc:	2b01      	cmp	r3, #1
 800f4fe:	d002      	beq.n	800f506 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800f500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f502:	025b      	lsls	r3, r3, #9
 800f504:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f50a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	025b      	lsls	r3, r3, #9
 800f510:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800f512:	2390      	movs	r3, #144	; 0x90
 800f514:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f516:	2302      	movs	r3, #2
 800f518:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f51a:	2300      	movs	r3, #0
 800f51c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800f51e:	2301      	movs	r3, #1
 800f520:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f107 0210 	add.w	r2, r7, #16
 800f52a:	4611      	mov	r1, r2
 800f52c:	4618      	mov	r0, r3
 800f52e:	f002 ffb5 	bl	801249c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	2b01      	cmp	r3, #1
 800f536:	d90a      	bls.n	800f54e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	2282      	movs	r2, #130	; 0x82
 800f53c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f544:	4618      	mov	r0, r3
 800f546:	f003 f819 	bl	801257c <SDMMC_CmdReadMultiBlock>
 800f54a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f54c:	e009      	b.n	800f562 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	2281      	movs	r2, #129	; 0x81
 800f552:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f55a:	4618      	mov	r0, r3
 800f55c:	f002 ffec 	bl	8012538 <SDMMC_CmdReadSingleBlock>
 800f560:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800f562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f564:	2b00      	cmp	r3, #0
 800f566:	d012      	beq.n	800f58e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	4a0d      	ldr	r2, [pc, #52]	; (800f5a4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800f56e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f576:	431a      	orrs	r2, r3
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	2201      	movs	r2, #1
 800f580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	2200      	movs	r2, #0
 800f588:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800f58a:	2301      	movs	r3, #1
 800f58c:	e002      	b.n	800f594 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800f58e:	2300      	movs	r3, #0
 800f590:	e000      	b.n	800f594 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800f592:	2302      	movs	r3, #2
  }
}
 800f594:	4618      	mov	r0, r3
 800f596:	3730      	adds	r7, #48	; 0x30
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}
 800f59c:	0800fcc7 	.word	0x0800fcc7
 800f5a0:	0800fd39 	.word	0x0800fd39
 800f5a4:	004005ff 	.word	0x004005ff

0800f5a8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b08c      	sub	sp, #48	; 0x30
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	60f8      	str	r0, [r7, #12]
 800f5b0:	60b9      	str	r1, [r7, #8]
 800f5b2:	607a      	str	r2, [r7, #4]
 800f5b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d107      	bne.n	800f5d0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	e0c6      	b.n	800f75e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	2b01      	cmp	r3, #1
 800f5da:	f040 80bf 	bne.w	800f75c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800f5e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	441a      	add	r2, r3
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d907      	bls.n	800f602 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5f6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800f5fe:	2301      	movs	r3, #1
 800f600:	e0ad      	b.n	800f75e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	2203      	movs	r2, #3
 800f606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	2200      	movs	r2, #0
 800f610:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	f042 021a 	orr.w	r2, r2, #26
 800f620:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f626:	4a50      	ldr	r2, [pc, #320]	; (800f768 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800f628:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f62e:	4a4f      	ldr	r2, [pc, #316]	; (800f76c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800f630:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f636:	2200      	movs	r2, #0
 800f638:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f63e:	2b01      	cmp	r3, #1
 800f640:	d002      	beq.n	800f648 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800f642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f644:	025b      	lsls	r3, r3, #9
 800f646:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	2b01      	cmp	r3, #1
 800f64c:	d90a      	bls.n	800f664 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	22a0      	movs	r2, #160	; 0xa0
 800f652:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f65a:	4618      	mov	r0, r3
 800f65c:	f002 ffd2 	bl	8012604 <SDMMC_CmdWriteMultiBlock>
 800f660:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f662:	e009      	b.n	800f678 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2290      	movs	r2, #144	; 0x90
 800f668:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f670:	4618      	mov	r0, r3
 800f672:	f002 ffa5 	bl	80125c0 <SDMMC_CmdWriteSingleBlock>
 800f676:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800f678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d012      	beq.n	800f6a4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	4a3b      	ldr	r2, [pc, #236]	; (800f770 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800f684:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f68c:	431a      	orrs	r2, r3
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	2201      	movs	r2, #1
 800f696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	2200      	movs	r2, #0
 800f69e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	e05c      	b.n	800f75e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	f042 0208 	orr.w	r2, r2, #8
 800f6b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6b8:	2240      	movs	r2, #64	; 0x40
 800f6ba:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6cc:	689a      	ldr	r2, [r3, #8]
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	430a      	orrs	r2, r1
 800f6d6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f6dc:	68b9      	ldr	r1, [r7, #8]
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	3380      	adds	r3, #128	; 0x80
 800f6e4:	461a      	mov	r2, r3
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	025b      	lsls	r3, r3, #9
 800f6ea:	089b      	lsrs	r3, r3, #2
 800f6ec:	f7f7 f8ca 	bl	8006884 <HAL_DMA_Start_IT>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d01a      	beq.n	800f72c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	f022 021a 	bic.w	r2, r2, #26
 800f704:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	4a19      	ldr	r2, [pc, #100]	; (800f770 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800f70c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f712:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	2201      	movs	r2, #1
 800f71e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	2200      	movs	r2, #0
 800f726:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800f728:	2301      	movs	r3, #1
 800f72a:	e018      	b.n	800f75e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f72c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f730:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	025b      	lsls	r3, r3, #9
 800f736:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800f738:	2390      	movs	r3, #144	; 0x90
 800f73a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800f73c:	2300      	movs	r3, #0
 800f73e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f740:	2300      	movs	r3, #0
 800f742:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800f744:	2301      	movs	r3, #1
 800f746:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	f107 0210 	add.w	r2, r7, #16
 800f750:	4611      	mov	r1, r2
 800f752:	4618      	mov	r0, r3
 800f754:	f002 fea2 	bl	801249c <SDMMC_ConfigData>

      return HAL_OK;
 800f758:	2300      	movs	r3, #0
 800f75a:	e000      	b.n	800f75e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800f75c:	2302      	movs	r3, #2
  }
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3730      	adds	r7, #48	; 0x30
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}
 800f766:	bf00      	nop
 800f768:	0800fc9d 	.word	0x0800fc9d
 800f76c:	0800fd39 	.word	0x0800fd39
 800f770:	004005ff 	.word	0x004005ff

0800f774 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800f774:	b480      	push	{r7}
 800f776:	b083      	sub	sp, #12
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800f77c:	bf00      	nop
 800f77e:	370c      	adds	r7, #12
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	4770      	bx	lr

0800f788 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800f788:	b480      	push	{r7}
 800f78a:	b083      	sub	sp, #12
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
 800f790:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f796:	0f9b      	lsrs	r3, r3, #30
 800f798:	b2da      	uxtb	r2, r3
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7a2:	0e9b      	lsrs	r3, r3, #26
 800f7a4:	b2db      	uxtb	r3, r3
 800f7a6:	f003 030f 	and.w	r3, r3, #15
 800f7aa:	b2da      	uxtb	r2, r3
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7b4:	0e1b      	lsrs	r3, r3, #24
 800f7b6:	b2db      	uxtb	r3, r3
 800f7b8:	f003 0303 	and.w	r3, r3, #3
 800f7bc:	b2da      	uxtb	r2, r3
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7c6:	0c1b      	lsrs	r3, r3, #16
 800f7c8:	b2da      	uxtb	r2, r3
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7d2:	0a1b      	lsrs	r3, r3, #8
 800f7d4:	b2da      	uxtb	r2, r3
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7de:	b2da      	uxtb	r2, r3
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f7e8:	0d1b      	lsrs	r3, r3, #20
 800f7ea:	b29a      	uxth	r2, r3
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f7f4:	0c1b      	lsrs	r3, r3, #16
 800f7f6:	b2db      	uxtb	r3, r3
 800f7f8:	f003 030f 	and.w	r3, r3, #15
 800f7fc:	b2da      	uxtb	r2, r3
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f806:	0bdb      	lsrs	r3, r3, #15
 800f808:	b2db      	uxtb	r3, r3
 800f80a:	f003 0301 	and.w	r3, r3, #1
 800f80e:	b2da      	uxtb	r2, r3
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f818:	0b9b      	lsrs	r3, r3, #14
 800f81a:	b2db      	uxtb	r3, r3
 800f81c:	f003 0301 	and.w	r3, r3, #1
 800f820:	b2da      	uxtb	r2, r3
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f82a:	0b5b      	lsrs	r3, r3, #13
 800f82c:	b2db      	uxtb	r3, r3
 800f82e:	f003 0301 	and.w	r3, r3, #1
 800f832:	b2da      	uxtb	r2, r3
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f83c:	0b1b      	lsrs	r3, r3, #12
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	f003 0301 	and.w	r3, r3, #1
 800f844:	b2da      	uxtb	r2, r3
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	2200      	movs	r2, #0
 800f84e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f854:	2b00      	cmp	r3, #0
 800f856:	d163      	bne.n	800f920 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f85c:	009a      	lsls	r2, r3, #2
 800f85e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800f862:	4013      	ands	r3, r2
 800f864:	687a      	ldr	r2, [r7, #4]
 800f866:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800f868:	0f92      	lsrs	r2, r2, #30
 800f86a:	431a      	orrs	r2, r3
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f874:	0edb      	lsrs	r3, r3, #27
 800f876:	b2db      	uxtb	r3, r3
 800f878:	f003 0307 	and.w	r3, r3, #7
 800f87c:	b2da      	uxtb	r2, r3
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f886:	0e1b      	lsrs	r3, r3, #24
 800f888:	b2db      	uxtb	r3, r3
 800f88a:	f003 0307 	and.w	r3, r3, #7
 800f88e:	b2da      	uxtb	r2, r3
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f898:	0d5b      	lsrs	r3, r3, #21
 800f89a:	b2db      	uxtb	r3, r3
 800f89c:	f003 0307 	and.w	r3, r3, #7
 800f8a0:	b2da      	uxtb	r2, r3
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8aa:	0c9b      	lsrs	r3, r3, #18
 800f8ac:	b2db      	uxtb	r3, r3
 800f8ae:	f003 0307 	and.w	r3, r3, #7
 800f8b2:	b2da      	uxtb	r2, r3
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8bc:	0bdb      	lsrs	r3, r3, #15
 800f8be:	b2db      	uxtb	r3, r3
 800f8c0:	f003 0307 	and.w	r3, r3, #7
 800f8c4:	b2da      	uxtb	r2, r3
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	691b      	ldr	r3, [r3, #16]
 800f8ce:	1c5a      	adds	r2, r3, #1
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	7e1b      	ldrb	r3, [r3, #24]
 800f8d8:	b2db      	uxtb	r3, r3
 800f8da:	f003 0307 	and.w	r3, r3, #7
 800f8de:	3302      	adds	r3, #2
 800f8e0:	2201      	movs	r2, #1
 800f8e2:	fa02 f303 	lsl.w	r3, r2, r3
 800f8e6:	687a      	ldr	r2, [r7, #4]
 800f8e8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800f8ea:	fb03 f202 	mul.w	r2, r3, r2
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	7a1b      	ldrb	r3, [r3, #8]
 800f8f6:	b2db      	uxtb	r3, r3
 800f8f8:	f003 030f 	and.w	r3, r3, #15
 800f8fc:	2201      	movs	r2, #1
 800f8fe:	409a      	lsls	r2, r3
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f908:	687a      	ldr	r2, [r7, #4]
 800f90a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800f90c:	0a52      	lsrs	r2, r2, #9
 800f90e:	fb03 f202 	mul.w	r2, r3, r2
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f91c:	661a      	str	r2, [r3, #96]	; 0x60
 800f91e:	e031      	b.n	800f984 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f924:	2b01      	cmp	r3, #1
 800f926:	d11d      	bne.n	800f964 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f92c:	041b      	lsls	r3, r3, #16
 800f92e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f936:	0c1b      	lsrs	r3, r3, #16
 800f938:	431a      	orrs	r2, r3
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	691b      	ldr	r3, [r3, #16]
 800f942:	3301      	adds	r3, #1
 800f944:	029a      	lsls	r2, r3, #10
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f958:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	661a      	str	r2, [r3, #96]	; 0x60
 800f962:	e00f      	b.n	800f984 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	4a58      	ldr	r2, [pc, #352]	; (800facc <HAL_SD_GetCardCSD+0x344>)
 800f96a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f970:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2201      	movs	r2, #1
 800f97c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800f980:	2301      	movs	r3, #1
 800f982:	e09d      	b.n	800fac0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f988:	0b9b      	lsrs	r3, r3, #14
 800f98a:	b2db      	uxtb	r3, r3
 800f98c:	f003 0301 	and.w	r3, r3, #1
 800f990:	b2da      	uxtb	r2, r3
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f99a:	09db      	lsrs	r3, r3, #7
 800f99c:	b2db      	uxtb	r3, r3
 800f99e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9a2:	b2da      	uxtb	r2, r3
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9ac:	b2db      	uxtb	r3, r3
 800f9ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9b2:	b2da      	uxtb	r2, r3
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9bc:	0fdb      	lsrs	r3, r3, #31
 800f9be:	b2da      	uxtb	r2, r3
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9c8:	0f5b      	lsrs	r3, r3, #29
 800f9ca:	b2db      	uxtb	r3, r3
 800f9cc:	f003 0303 	and.w	r3, r3, #3
 800f9d0:	b2da      	uxtb	r2, r3
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9da:	0e9b      	lsrs	r3, r3, #26
 800f9dc:	b2db      	uxtb	r3, r3
 800f9de:	f003 0307 	and.w	r3, r3, #7
 800f9e2:	b2da      	uxtb	r2, r3
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9ec:	0d9b      	lsrs	r3, r3, #22
 800f9ee:	b2db      	uxtb	r3, r3
 800f9f0:	f003 030f 	and.w	r3, r3, #15
 800f9f4:	b2da      	uxtb	r2, r3
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9fe:	0d5b      	lsrs	r3, r3, #21
 800fa00:	b2db      	uxtb	r3, r3
 800fa02:	f003 0301 	and.w	r3, r3, #1
 800fa06:	b2da      	uxtb	r2, r3
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	2200      	movs	r2, #0
 800fa12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa1a:	0c1b      	lsrs	r3, r3, #16
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	f003 0301 	and.w	r3, r3, #1
 800fa22:	b2da      	uxtb	r2, r3
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa2e:	0bdb      	lsrs	r3, r3, #15
 800fa30:	b2db      	uxtb	r3, r3
 800fa32:	f003 0301 	and.w	r3, r3, #1
 800fa36:	b2da      	uxtb	r2, r3
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa42:	0b9b      	lsrs	r3, r3, #14
 800fa44:	b2db      	uxtb	r3, r3
 800fa46:	f003 0301 	and.w	r3, r3, #1
 800fa4a:	b2da      	uxtb	r2, r3
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa56:	0b5b      	lsrs	r3, r3, #13
 800fa58:	b2db      	uxtb	r3, r3
 800fa5a:	f003 0301 	and.w	r3, r3, #1
 800fa5e:	b2da      	uxtb	r2, r3
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa6a:	0b1b      	lsrs	r3, r3, #12
 800fa6c:	b2db      	uxtb	r3, r3
 800fa6e:	f003 0301 	and.w	r3, r3, #1
 800fa72:	b2da      	uxtb	r2, r3
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa7e:	0a9b      	lsrs	r3, r3, #10
 800fa80:	b2db      	uxtb	r3, r3
 800fa82:	f003 0303 	and.w	r3, r3, #3
 800fa86:	b2da      	uxtb	r2, r3
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa92:	0a1b      	lsrs	r3, r3, #8
 800fa94:	b2db      	uxtb	r3, r3
 800fa96:	f003 0303 	and.w	r3, r3, #3
 800fa9a:	b2da      	uxtb	r2, r3
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800faa6:	085b      	lsrs	r3, r3, #1
 800faa8:	b2db      	uxtb	r3, r3
 800faaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800faae:	b2da      	uxtb	r2, r3
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	2201      	movs	r2, #1
 800faba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800fabe:	2300      	movs	r3, #0
}
 800fac0:	4618      	mov	r0, r3
 800fac2:	370c      	adds	r7, #12
 800fac4:	46bd      	mov	sp, r7
 800fac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faca:	4770      	bx	lr
 800facc:	004005ff 	.word	0x004005ff

0800fad0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800fad0:	b480      	push	{r7}
 800fad2:	b083      	sub	sp, #12
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fade:	683b      	ldr	r3, [r7, #0]
 800fae0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800fb1a:	2300      	movs	r3, #0
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	370c      	adds	r7, #12
 800fb20:	46bd      	mov	sp, r7
 800fb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb26:	4770      	bx	lr

0800fb28 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800fb28:	b5b0      	push	{r4, r5, r7, lr}
 800fb2a:	b08e      	sub	sp, #56	; 0x38
 800fb2c:	af04      	add	r7, sp, #16
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800fb32:	2300      	movs	r3, #0
 800fb34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2203      	movs	r2, #3
 800fb3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb44:	2b03      	cmp	r3, #3
 800fb46:	d02e      	beq.n	800fba6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb4e:	d106      	bne.n	800fb5e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	639a      	str	r2, [r3, #56]	; 0x38
 800fb5c:	e029      	b.n	800fbb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fb64:	d10a      	bne.n	800fb7c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800fb66:	6878      	ldr	r0, [r7, #4]
 800fb68:	f000 fabc 	bl	80100e4 <SD_WideBus_Enable>
 800fb6c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb72:	6a3b      	ldr	r3, [r7, #32]
 800fb74:	431a      	orrs	r2, r3
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	639a      	str	r2, [r3, #56]	; 0x38
 800fb7a:	e01a      	b.n	800fbb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d10a      	bne.n	800fb98 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f000 faf9 	bl	801017a <SD_WideBus_Disable>
 800fb88:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb8e:	6a3b      	ldr	r3, [r7, #32]
 800fb90:	431a      	orrs	r2, r3
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	639a      	str	r2, [r3, #56]	; 0x38
 800fb96:	e00c      	b.n	800fbb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb9c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	639a      	str	r2, [r3, #56]	; 0x38
 800fba4:	e005      	b.n	800fbb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbaa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d00b      	beq.n	800fbd2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	4a26      	ldr	r2, [pc, #152]	; (800fc58 <HAL_SD_ConfigWideBusOperation+0x130>)
 800fbc0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800fbca:	2301      	movs	r3, #1
 800fbcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fbd0:	e01f      	b.n	800fc12 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	685b      	ldr	r3, [r3, #4]
 800fbd6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	689b      	ldr	r3, [r3, #8]
 800fbdc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	68db      	ldr	r3, [r3, #12]
 800fbe2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	695b      	ldr	r3, [r3, #20]
 800fbec:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	699b      	ldr	r3, [r3, #24]
 800fbf2:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681d      	ldr	r5, [r3, #0]
 800fbf8:	466c      	mov	r4, sp
 800fbfa:	f107 0314 	add.w	r3, r7, #20
 800fbfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fc02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fc06:	f107 0308 	add.w	r3, r7, #8
 800fc0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fc0c:	4628      	mov	r0, r5
 800fc0e:	f002 fba5 	bl	801235c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f002 fc6a 	bl	80124f4 <SDMMC_CmdBlockLength>
 800fc20:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fc22:	6a3b      	ldr	r3, [r7, #32]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d00c      	beq.n	800fc42 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	4a0a      	ldr	r2, [pc, #40]	; (800fc58 <HAL_SD_ConfigWideBusOperation+0x130>)
 800fc2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc34:	6a3b      	ldr	r3, [r7, #32]
 800fc36:	431a      	orrs	r2, r3
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2201      	movs	r2, #1
 800fc46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800fc4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800fc4e:	4618      	mov	r0, r3
 800fc50:	3728      	adds	r7, #40	; 0x28
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bdb0      	pop	{r4, r5, r7, pc}
 800fc56:	bf00      	nop
 800fc58:	004005ff 	.word	0x004005ff

0800fc5c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b086      	sub	sp, #24
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800fc64:	2300      	movs	r3, #0
 800fc66:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800fc68:	f107 030c 	add.w	r3, r7, #12
 800fc6c:	4619      	mov	r1, r3
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f000 fa10 	bl	8010094 <SD_SendStatus>
 800fc74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d005      	beq.n	800fc88 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	431a      	orrs	r2, r3
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	0a5b      	lsrs	r3, r3, #9
 800fc8c:	f003 030f 	and.w	r3, r3, #15
 800fc90:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800fc92:	693b      	ldr	r3, [r7, #16]
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	3718      	adds	r7, #24
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}

0800fc9c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b085      	sub	sp, #20
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fca8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fcb8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800fcba:	bf00      	nop
 800fcbc:	3714      	adds	r7, #20
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc4:	4770      	bx	lr

0800fcc6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fcc6:	b580      	push	{r7, lr}
 800fcc8:	b084      	sub	sp, #16
 800fcca:	af00      	add	r7, sp, #0
 800fccc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcd2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcd8:	2b82      	cmp	r3, #130	; 0x82
 800fcda:	d111      	bne.n	800fd00 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	4618      	mov	r0, r3
 800fce2:	f002 fcb1 	bl	8012648 <SDMMC_CmdStopTransfer>
 800fce6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d008      	beq.n	800fd00 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	431a      	orrs	r2, r3
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800fcfa:	68f8      	ldr	r0, [r7, #12]
 800fcfc:	f7ff fd3a 	bl	800f774 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	f022 0208 	bic.w	r2, r2, #8
 800fd0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	f240 523a 	movw	r2, #1338	; 0x53a
 800fd18:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	2201      	movs	r2, #1
 800fd1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	2200      	movs	r2, #0
 800fd26:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800fd28:	68f8      	ldr	r0, [r7, #12]
 800fd2a:	f005 fb2d 	bl	8015388 <HAL_SD_RxCpltCallback>
#endif
}
 800fd2e:	bf00      	nop
 800fd30:	3710      	adds	r7, #16
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}
	...

0800fd38 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b086      	sub	sp, #24
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd44:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f7f7 f818 	bl	8006d7c <HAL_DMA_GetError>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	2b02      	cmp	r3, #2
 800fd50:	d03e      	beq.n	800fdd0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd58:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd60:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800fd62:	693b      	ldr	r3, [r7, #16]
 800fd64:	2b01      	cmp	r3, #1
 800fd66:	d002      	beq.n	800fd6e <SD_DMAError+0x36>
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2b01      	cmp	r3, #1
 800fd6c:	d12d      	bne.n	800fdca <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	4a19      	ldr	r2, [pc, #100]	; (800fdd8 <SD_DMAError+0xa0>)
 800fd74:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800fd84:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fd8e:	697b      	ldr	r3, [r7, #20]
 800fd90:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800fd92:	6978      	ldr	r0, [r7, #20]
 800fd94:	f7ff ff62 	bl	800fc5c <HAL_SD_GetCardState>
 800fd98:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	2b06      	cmp	r3, #6
 800fd9e:	d002      	beq.n	800fda6 <SD_DMAError+0x6e>
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	2b05      	cmp	r3, #5
 800fda4:	d10a      	bne.n	800fdbc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f002 fc4c 	bl	8012648 <SDMMC_CmdStopTransfer>
 800fdb0:	4602      	mov	r2, r0
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdb6:	431a      	orrs	r2, r3
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800fdca:	6978      	ldr	r0, [r7, #20]
 800fdcc:	f7ff fcd2 	bl	800f774 <HAL_SD_ErrorCallback>
#endif
  }
}
 800fdd0:	bf00      	nop
 800fdd2:	3718      	adds	r7, #24
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}
 800fdd8:	004005ff 	.word	0x004005ff

0800fddc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800fddc:	b5b0      	push	{r4, r5, r7, lr}
 800fdde:	b094      	sub	sp, #80	; 0x50
 800fde0:	af04      	add	r7, sp, #16
 800fde2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800fde4:	2301      	movs	r3, #1
 800fde6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	4618      	mov	r0, r3
 800fdee:	f002 fafc 	bl	80123ea <SDMMC_GetPowerState>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d102      	bne.n	800fdfe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800fdf8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800fdfc:	e0b8      	b.n	800ff70 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe02:	2b03      	cmp	r3, #3
 800fe04:	d02f      	beq.n	800fe66 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f002 fd27 	bl	801285e <SDMMC_CmdSendCID>
 800fe10:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800fe12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d001      	beq.n	800fe1c <SD_InitCard+0x40>
    {
      return errorstate;
 800fe18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe1a:	e0a9      	b.n	800ff70 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	2100      	movs	r1, #0
 800fe22:	4618      	mov	r0, r3
 800fe24:	f002 fb27 	bl	8012476 <SDMMC_GetResponse>
 800fe28:	4602      	mov	r2, r0
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	2104      	movs	r1, #4
 800fe34:	4618      	mov	r0, r3
 800fe36:	f002 fb1e 	bl	8012476 <SDMMC_GetResponse>
 800fe3a:	4602      	mov	r2, r0
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	2108      	movs	r1, #8
 800fe46:	4618      	mov	r0, r3
 800fe48:	f002 fb15 	bl	8012476 <SDMMC_GetResponse>
 800fe4c:	4602      	mov	r2, r0
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	210c      	movs	r1, #12
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f002 fb0c 	bl	8012476 <SDMMC_GetResponse>
 800fe5e:	4602      	mov	r2, r0
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe6a:	2b03      	cmp	r3, #3
 800fe6c:	d00d      	beq.n	800fe8a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	f107 020e 	add.w	r2, r7, #14
 800fe76:	4611      	mov	r1, r2
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f002 fd2d 	bl	80128d8 <SDMMC_CmdSetRelAdd>
 800fe7e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800fe80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d001      	beq.n	800fe8a <SD_InitCard+0xae>
    {
      return errorstate;
 800fe86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe88:	e072      	b.n	800ff70 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe8e:	2b03      	cmp	r3, #3
 800fe90:	d036      	beq.n	800ff00 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800fe92:	89fb      	ldrh	r3, [r7, #14]
 800fe94:	461a      	mov	r2, r3
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681a      	ldr	r2, [r3, #0]
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fea2:	041b      	lsls	r3, r3, #16
 800fea4:	4619      	mov	r1, r3
 800fea6:	4610      	mov	r0, r2
 800fea8:	f002 fcf7 	bl	801289a <SDMMC_CmdSendCSD>
 800feac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800feae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d001      	beq.n	800feb8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800feb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feb6:	e05b      	b.n	800ff70 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	2100      	movs	r1, #0
 800febe:	4618      	mov	r0, r3
 800fec0:	f002 fad9 	bl	8012476 <SDMMC_GetResponse>
 800fec4:	4602      	mov	r2, r0
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	2104      	movs	r1, #4
 800fed0:	4618      	mov	r0, r3
 800fed2:	f002 fad0 	bl	8012476 <SDMMC_GetResponse>
 800fed6:	4602      	mov	r2, r0
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	2108      	movs	r1, #8
 800fee2:	4618      	mov	r0, r3
 800fee4:	f002 fac7 	bl	8012476 <SDMMC_GetResponse>
 800fee8:	4602      	mov	r2, r0
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	210c      	movs	r1, #12
 800fef4:	4618      	mov	r0, r3
 800fef6:	f002 fabe 	bl	8012476 <SDMMC_GetResponse>
 800fefa:	4602      	mov	r2, r0
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	2104      	movs	r1, #4
 800ff06:	4618      	mov	r0, r3
 800ff08:	f002 fab5 	bl	8012476 <SDMMC_GetResponse>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	0d1a      	lsrs	r2, r3, #20
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ff14:	f107 0310 	add.w	r3, r7, #16
 800ff18:	4619      	mov	r1, r3
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f7ff fc34 	bl	800f788 <HAL_SD_GetCardCSD>
 800ff20:	4603      	mov	r3, r0
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d002      	beq.n	800ff2c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ff26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ff2a:	e021      	b.n	800ff70 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6819      	ldr	r1, [r3, #0]
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff34:	041b      	lsls	r3, r3, #16
 800ff36:	2200      	movs	r2, #0
 800ff38:	461c      	mov	r4, r3
 800ff3a:	4615      	mov	r5, r2
 800ff3c:	4622      	mov	r2, r4
 800ff3e:	462b      	mov	r3, r5
 800ff40:	4608      	mov	r0, r1
 800ff42:	f002 fba3 	bl	801268c <SDMMC_CmdSelDesel>
 800ff46:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ff48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d001      	beq.n	800ff52 <SD_InitCard+0x176>
  {
    return errorstate;
 800ff4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff50:	e00e      	b.n	800ff70 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681d      	ldr	r5, [r3, #0]
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	466c      	mov	r4, sp
 800ff5a:	f103 0210 	add.w	r2, r3, #16
 800ff5e:	ca07      	ldmia	r2, {r0, r1, r2}
 800ff60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ff64:	3304      	adds	r3, #4
 800ff66:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ff68:	4628      	mov	r0, r5
 800ff6a:	f002 f9f7 	bl	801235c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ff6e:	2300      	movs	r3, #0
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3740      	adds	r7, #64	; 0x40
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bdb0      	pop	{r4, r5, r7, pc}

0800ff78 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b086      	sub	sp, #24
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ff80:	2300      	movs	r3, #0
 800ff82:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800ff84:	2300      	movs	r3, #0
 800ff86:	617b      	str	r3, [r7, #20]
 800ff88:	2300      	movs	r3, #0
 800ff8a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	4618      	mov	r0, r3
 800ff92:	f002 fb9e 	bl	80126d2 <SDMMC_CmdGoIdleState>
 800ff96:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d001      	beq.n	800ffa2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	e072      	b.n	8010088 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f002 fbb1 	bl	801270e <SDMMC_CmdOperCond>
 800ffac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d00d      	beq.n	800ffd0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f002 fb87 	bl	80126d2 <SDMMC_CmdGoIdleState>
 800ffc4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d004      	beq.n	800ffd6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	e05b      	b.n	8010088 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ffda:	2b01      	cmp	r3, #1
 800ffdc:	d137      	bne.n	801004e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	2100      	movs	r1, #0
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f002 fbb1 	bl	801274c <SDMMC_CmdAppCommand>
 800ffea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d02d      	beq.n	801004e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fff2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fff6:	e047      	b.n	8010088 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	2100      	movs	r1, #0
 800fffe:	4618      	mov	r0, r3
 8010000:	f002 fba4 	bl	801274c <SDMMC_CmdAppCommand>
 8010004:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d001      	beq.n	8010010 <SD_PowerON+0x98>
    {
      return errorstate;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	e03b      	b.n	8010088 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	491e      	ldr	r1, [pc, #120]	; (8010090 <SD_PowerON+0x118>)
 8010016:	4618      	mov	r0, r3
 8010018:	f002 fbba 	bl	8012790 <SDMMC_CmdAppOperCommand>
 801001c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d002      	beq.n	801002a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010024:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010028:	e02e      	b.n	8010088 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	2100      	movs	r1, #0
 8010030:	4618      	mov	r0, r3
 8010032:	f002 fa20 	bl	8012476 <SDMMC_GetResponse>
 8010036:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8010038:	697b      	ldr	r3, [r7, #20]
 801003a:	0fdb      	lsrs	r3, r3, #31
 801003c:	2b01      	cmp	r3, #1
 801003e:	d101      	bne.n	8010044 <SD_PowerON+0xcc>
 8010040:	2301      	movs	r3, #1
 8010042:	e000      	b.n	8010046 <SD_PowerON+0xce>
 8010044:	2300      	movs	r3, #0
 8010046:	613b      	str	r3, [r7, #16]

    count++;
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	3301      	adds	r3, #1
 801004c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010054:	4293      	cmp	r3, r2
 8010056:	d802      	bhi.n	801005e <SD_PowerON+0xe6>
 8010058:	693b      	ldr	r3, [r7, #16]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d0cc      	beq.n	800fff8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010064:	4293      	cmp	r3, r2
 8010066:	d902      	bls.n	801006e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8010068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801006c:	e00c      	b.n	8010088 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 801006e:	697b      	ldr	r3, [r7, #20]
 8010070:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010074:	2b00      	cmp	r3, #0
 8010076:	d003      	beq.n	8010080 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2201      	movs	r2, #1
 801007c:	645a      	str	r2, [r3, #68]	; 0x44
 801007e:	e002      	b.n	8010086 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2200      	movs	r2, #0
 8010084:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8010086:	2300      	movs	r3, #0
}
 8010088:	4618      	mov	r0, r3
 801008a:	3718      	adds	r7, #24
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}
 8010090:	c1100000 	.word	0xc1100000

08010094 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b084      	sub	sp, #16
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
 801009c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d102      	bne.n	80100aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80100a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80100a8:	e018      	b.n	80100dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681a      	ldr	r2, [r3, #0]
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100b2:	041b      	lsls	r3, r3, #16
 80100b4:	4619      	mov	r1, r3
 80100b6:	4610      	mov	r0, r2
 80100b8:	f002 fc2f 	bl	801291a <SDMMC_CmdSendStatus>
 80100bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d001      	beq.n	80100c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	e009      	b.n	80100dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	2100      	movs	r1, #0
 80100ce:	4618      	mov	r0, r3
 80100d0:	f002 f9d1 	bl	8012476 <SDMMC_GetResponse>
 80100d4:	4602      	mov	r2, r0
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80100da:	2300      	movs	r3, #0
}
 80100dc:	4618      	mov	r0, r3
 80100de:	3710      	adds	r7, #16
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}

080100e4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b086      	sub	sp, #24
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80100ec:	2300      	movs	r3, #0
 80100ee:	60fb      	str	r3, [r7, #12]
 80100f0:	2300      	movs	r3, #0
 80100f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	2100      	movs	r1, #0
 80100fa:	4618      	mov	r0, r3
 80100fc:	f002 f9bb 	bl	8012476 <SDMMC_GetResponse>
 8010100:	4603      	mov	r3, r0
 8010102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010106:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801010a:	d102      	bne.n	8010112 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801010c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010110:	e02f      	b.n	8010172 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8010112:	f107 030c 	add.w	r3, r7, #12
 8010116:	4619      	mov	r1, r3
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f000 f879 	bl	8010210 <SD_FindSCR>
 801011e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d001      	beq.n	801012a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	e023      	b.n	8010172 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801012a:	693b      	ldr	r3, [r7, #16]
 801012c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010130:	2b00      	cmp	r3, #0
 8010132:	d01c      	beq.n	801016e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681a      	ldr	r2, [r3, #0]
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801013c:	041b      	lsls	r3, r3, #16
 801013e:	4619      	mov	r1, r3
 8010140:	4610      	mov	r0, r2
 8010142:	f002 fb03 	bl	801274c <SDMMC_CmdAppCommand>
 8010146:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010148:	697b      	ldr	r3, [r7, #20]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d001      	beq.n	8010152 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	e00f      	b.n	8010172 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	2102      	movs	r1, #2
 8010158:	4618      	mov	r0, r3
 801015a:	f002 fb3d 	bl	80127d8 <SDMMC_CmdBusWidth>
 801015e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010160:	697b      	ldr	r3, [r7, #20]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d001      	beq.n	801016a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	e003      	b.n	8010172 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801016a:	2300      	movs	r3, #0
 801016c:	e001      	b.n	8010172 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801016e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8010172:	4618      	mov	r0, r3
 8010174:	3718      	adds	r7, #24
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}

0801017a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 801017a:	b580      	push	{r7, lr}
 801017c:	b086      	sub	sp, #24
 801017e:	af00      	add	r7, sp, #0
 8010180:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8010182:	2300      	movs	r3, #0
 8010184:	60fb      	str	r3, [r7, #12]
 8010186:	2300      	movs	r3, #0
 8010188:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	2100      	movs	r1, #0
 8010190:	4618      	mov	r0, r3
 8010192:	f002 f970 	bl	8012476 <SDMMC_GetResponse>
 8010196:	4603      	mov	r3, r0
 8010198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801019c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80101a0:	d102      	bne.n	80101a8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80101a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80101a6:	e02f      	b.n	8010208 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80101a8:	f107 030c 	add.w	r3, r7, #12
 80101ac:	4619      	mov	r1, r3
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f000 f82e 	bl	8010210 <SD_FindSCR>
 80101b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d001      	beq.n	80101c0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	e023      	b.n	8010208 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d01c      	beq.n	8010204 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681a      	ldr	r2, [r3, #0]
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101d2:	041b      	lsls	r3, r3, #16
 80101d4:	4619      	mov	r1, r3
 80101d6:	4610      	mov	r0, r2
 80101d8:	f002 fab8 	bl	801274c <SDMMC_CmdAppCommand>
 80101dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80101de:	697b      	ldr	r3, [r7, #20]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d001      	beq.n	80101e8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	e00f      	b.n	8010208 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	2100      	movs	r1, #0
 80101ee:	4618      	mov	r0, r3
 80101f0:	f002 faf2 	bl	80127d8 <SDMMC_CmdBusWidth>
 80101f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80101f6:	697b      	ldr	r3, [r7, #20]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d001      	beq.n	8010200 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	e003      	b.n	8010208 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8010200:	2300      	movs	r3, #0
 8010202:	e001      	b.n	8010208 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010204:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8010208:	4618      	mov	r0, r3
 801020a:	3718      	adds	r7, #24
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}

08010210 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8010210:	b590      	push	{r4, r7, lr}
 8010212:	b08f      	sub	sp, #60	; 0x3c
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
 8010218:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801021a:	f7f5 fc79 	bl	8005b10 <HAL_GetTick>
 801021e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8010220:	2300      	movs	r3, #0
 8010222:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8010224:	2300      	movs	r3, #0
 8010226:	60bb      	str	r3, [r7, #8]
 8010228:	2300      	movs	r3, #0
 801022a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	2108      	movs	r1, #8
 8010236:	4618      	mov	r0, r3
 8010238:	f002 f95c 	bl	80124f4 <SDMMC_CmdBlockLength>
 801023c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801023e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010240:	2b00      	cmp	r3, #0
 8010242:	d001      	beq.n	8010248 <SD_FindSCR+0x38>
  {
    return errorstate;
 8010244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010246:	e0b2      	b.n	80103ae <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681a      	ldr	r2, [r3, #0]
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010250:	041b      	lsls	r3, r3, #16
 8010252:	4619      	mov	r1, r3
 8010254:	4610      	mov	r0, r2
 8010256:	f002 fa79 	bl	801274c <SDMMC_CmdAppCommand>
 801025a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801025c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801025e:	2b00      	cmp	r3, #0
 8010260:	d001      	beq.n	8010266 <SD_FindSCR+0x56>
  {
    return errorstate;
 8010262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010264:	e0a3      	b.n	80103ae <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801026a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 801026c:	2308      	movs	r3, #8
 801026e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8010270:	2330      	movs	r3, #48	; 0x30
 8010272:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010274:	2302      	movs	r3, #2
 8010276:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010278:	2300      	movs	r3, #0
 801027a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801027c:	2301      	movs	r3, #1
 801027e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	f107 0210 	add.w	r2, r7, #16
 8010288:	4611      	mov	r1, r2
 801028a:	4618      	mov	r0, r3
 801028c:	f002 f906 	bl	801249c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	4618      	mov	r0, r3
 8010296:	f002 fac1 	bl	801281c <SDMMC_CmdSendSCR>
 801029a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801029c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d02a      	beq.n	80102f8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80102a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102a4:	e083      	b.n	80103ae <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d00f      	beq.n	80102d4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	6819      	ldr	r1, [r3, #0]
 80102b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ba:	009b      	lsls	r3, r3, #2
 80102bc:	f107 0208 	add.w	r2, r7, #8
 80102c0:	18d4      	adds	r4, r2, r3
 80102c2:	4608      	mov	r0, r1
 80102c4:	f002 f876 	bl	80123b4 <SDMMC_ReadFIFO>
 80102c8:	4603      	mov	r3, r0
 80102ca:	6023      	str	r3, [r4, #0]
      index++;
 80102cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ce:	3301      	adds	r3, #1
 80102d0:	637b      	str	r3, [r7, #52]	; 0x34
 80102d2:	e006      	b.n	80102e2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d012      	beq.n	8010308 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80102e2:	f7f5 fc15 	bl	8005b10 <HAL_GetTick>
 80102e6:	4602      	mov	r2, r0
 80102e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ea:	1ad3      	subs	r3, r2, r3
 80102ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80102f0:	d102      	bne.n	80102f8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80102f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80102f6:	e05a      	b.n	80103ae <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102fe:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8010302:	2b00      	cmp	r3, #0
 8010304:	d0cf      	beq.n	80102a6 <SD_FindSCR+0x96>
 8010306:	e000      	b.n	801030a <SD_FindSCR+0xfa>
      break;
 8010308:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010310:	f003 0308 	and.w	r3, r3, #8
 8010314:	2b00      	cmp	r3, #0
 8010316:	d005      	beq.n	8010324 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	2208      	movs	r2, #8
 801031e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8010320:	2308      	movs	r3, #8
 8010322:	e044      	b.n	80103ae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801032a:	f003 0302 	and.w	r3, r3, #2
 801032e:	2b00      	cmp	r3, #0
 8010330:	d005      	beq.n	801033e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	2202      	movs	r2, #2
 8010338:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801033a:	2302      	movs	r3, #2
 801033c:	e037      	b.n	80103ae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010344:	f003 0320 	and.w	r3, r3, #32
 8010348:	2b00      	cmp	r3, #0
 801034a:	d005      	beq.n	8010358 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	2220      	movs	r2, #32
 8010352:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8010354:	2320      	movs	r3, #32
 8010356:	e02a      	b.n	80103ae <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	f240 523a 	movw	r2, #1338	; 0x53a
 8010360:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	061a      	lsls	r2, r3, #24
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	021b      	lsls	r3, r3, #8
 801036a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801036e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	0a1b      	lsrs	r3, r3, #8
 8010374:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010378:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	0e1b      	lsrs	r3, r3, #24
 801037e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8010380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010382:	601a      	str	r2, [r3, #0]
    scr++;
 8010384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010386:	3304      	adds	r3, #4
 8010388:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	061a      	lsls	r2, r3, #24
 801038e:	68bb      	ldr	r3, [r7, #8]
 8010390:	021b      	lsls	r3, r3, #8
 8010392:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010396:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	0a1b      	lsrs	r3, r3, #8
 801039c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80103a0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	0e1b      	lsrs	r3, r3, #24
 80103a6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80103a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103aa:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80103ac:	2300      	movs	r3, #0
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	373c      	adds	r7, #60	; 0x3c
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd90      	pop	{r4, r7, pc}

080103b6 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80103b6:	b580      	push	{r7, lr}
 80103b8:	b082      	sub	sp, #8
 80103ba:	af00      	add	r7, sp, #0
 80103bc:	6078      	str	r0, [r7, #4]
 80103be:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d101      	bne.n	80103ca <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80103c6:	2301      	movs	r3, #1
 80103c8:	e025      	b.n	8010416 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80103d0:	b2db      	uxtb	r3, r3
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d106      	bne.n	80103e4 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2200      	movs	r2, #0
 80103da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80103de:	6878      	ldr	r0, [r7, #4]
 80103e0:	f7f3 fa10 	bl	8003804 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2202      	movs	r2, #2
 80103e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	681a      	ldr	r2, [r3, #0]
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	3304      	adds	r3, #4
 80103f4:	4619      	mov	r1, r3
 80103f6:	4610      	mov	r0, r2
 80103f8:	f001 feae 	bl	8012158 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	6818      	ldr	r0, [r3, #0]
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	685b      	ldr	r3, [r3, #4]
 8010404:	461a      	mov	r2, r3
 8010406:	6839      	ldr	r1, [r7, #0]
 8010408:	f001 ff02 	bl	8012210 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2201      	movs	r2, #1
 8010410:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010414:	2300      	movs	r3, #0
}
 8010416:	4618      	mov	r0, r3
 8010418:	3708      	adds	r7, #8
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}

0801041e <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 801041e:	b580      	push	{r7, lr}
 8010420:	b086      	sub	sp, #24
 8010422:	af00      	add	r7, sp, #0
 8010424:	60f8      	str	r0, [r7, #12]
 8010426:	60b9      	str	r1, [r7, #8]
 8010428:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010430:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8010432:	7dfb      	ldrb	r3, [r7, #23]
 8010434:	2b02      	cmp	r3, #2
 8010436:	d101      	bne.n	801043c <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8010438:	2302      	movs	r3, #2
 801043a:	e021      	b.n	8010480 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 801043c:	7dfb      	ldrb	r3, [r7, #23]
 801043e:	2b01      	cmp	r3, #1
 8010440:	d002      	beq.n	8010448 <HAL_SDRAM_SendCommand+0x2a>
 8010442:	7dfb      	ldrb	r3, [r7, #23]
 8010444:	2b05      	cmp	r3, #5
 8010446:	d118      	bne.n	801047a <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	2202      	movs	r2, #2
 801044c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	687a      	ldr	r2, [r7, #4]
 8010456:	68b9      	ldr	r1, [r7, #8]
 8010458:	4618      	mov	r0, r3
 801045a:	f001 ff43 	bl	80122e4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	2b02      	cmp	r3, #2
 8010464:	d104      	bne.n	8010470 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	2205      	movs	r2, #5
 801046a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801046e:	e006      	b.n	801047e <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	2201      	movs	r2, #1
 8010474:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8010478:	e001      	b.n	801047e <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 801047a:	2301      	movs	r3, #1
 801047c:	e000      	b.n	8010480 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 801047e:	2300      	movs	r3, #0
}
 8010480:	4618      	mov	r0, r3
 8010482:	3718      	adds	r7, #24
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b082      	sub	sp, #8
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010498:	b2db      	uxtb	r3, r3
 801049a:	2b02      	cmp	r3, #2
 801049c:	d101      	bne.n	80104a2 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 801049e:	2302      	movs	r3, #2
 80104a0:	e016      	b.n	80104d0 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80104a8:	b2db      	uxtb	r3, r3
 80104aa:	2b01      	cmp	r3, #1
 80104ac:	d10f      	bne.n	80104ce <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2202      	movs	r2, #2
 80104b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	6839      	ldr	r1, [r7, #0]
 80104bc:	4618      	mov	r0, r3
 80104be:	f001 ff35 	bl	801232c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	2201      	movs	r2, #1
 80104c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80104ca:	2300      	movs	r3, #0
 80104cc:	e000      	b.n	80104d0 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80104ce:	2301      	movs	r3, #1
}
 80104d0:	4618      	mov	r0, r3
 80104d2:	3708      	adds	r7, #8
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bd80      	pop	{r7, pc}

080104d8 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b084      	sub	sp, #16
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d101      	bne.n	80104ea <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 80104e6:	2301      	movs	r3, #1
 80104e8:	e04c      	b.n	8010584 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80104f0:	b2db      	uxtb	r3, r3
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d106      	bne.n	8010504 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	2200      	movs	r2, #0
 80104fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f7f2 fe5e 	bl	80031c0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2202      	movs	r2, #2
 8010508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	681a      	ldr	r2, [r3, #0]
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	f022 0203 	bic.w	r2, r2, #3
 801051a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8010524:	68fa      	ldr	r2, [r7, #12]
 8010526:	4b19      	ldr	r3, [pc, #100]	; (801058c <HAL_SPDIFRX_Init+0xb4>)
 8010528:	4013      	ands	r3, r2
 801052a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8010534:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 801053a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8010540:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8010546:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 801054c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8010552:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8010558:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 801055e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8010564:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8010566:	68fa      	ldr	r2, [r7, #12]
 8010568:	4313      	orrs	r3, r2
 801056a:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	68fa      	ldr	r2, [r7, #12]
 8010572:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2200      	movs	r2, #0
 8010578:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2201      	movs	r2, #1
 801057e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8010582:	2300      	movs	r3, #0
}
 8010584:	4618      	mov	r0, r3
 8010586:	3710      	adds	r7, #16
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}
 801058c:	fff88407 	.word	0xfff88407

08010590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b082      	sub	sp, #8
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d101      	bne.n	80105a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801059e:	2301      	movs	r3, #1
 80105a0:	e049      	b.n	8010636 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80105a8:	b2db      	uxtb	r3, r3
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d106      	bne.n	80105bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	2200      	movs	r2, #0
 80105b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f7f2 fe66 	bl	8003288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2202      	movs	r2, #2
 80105c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681a      	ldr	r2, [r3, #0]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	3304      	adds	r3, #4
 80105cc:	4619      	mov	r1, r3
 80105ce:	4610      	mov	r0, r2
 80105d0:	f000 fc2a 	bl	8010e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2201      	movs	r2, #1
 80105d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2201      	movs	r2, #1
 80105e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2201      	movs	r2, #1
 80105e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	2201      	movs	r2, #1
 80105f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2201      	movs	r2, #1
 80105f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2201      	movs	r2, #1
 8010600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2201      	movs	r2, #1
 8010608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2201      	movs	r2, #1
 8010610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2201      	movs	r2, #1
 8010618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2201      	movs	r2, #1
 8010620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2201      	movs	r2, #1
 8010628:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2201      	movs	r2, #1
 8010630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010634:	2300      	movs	r3, #0
}
 8010636:	4618      	mov	r0, r3
 8010638:	3708      	adds	r7, #8
 801063a:	46bd      	mov	sp, r7
 801063c:	bd80      	pop	{r7, pc}
	...

08010640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010640:	b480      	push	{r7}
 8010642:	b085      	sub	sp, #20
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801064e:	b2db      	uxtb	r3, r3
 8010650:	2b01      	cmp	r3, #1
 8010652:	d001      	beq.n	8010658 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010654:	2301      	movs	r3, #1
 8010656:	e054      	b.n	8010702 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2202      	movs	r2, #2
 801065c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	68da      	ldr	r2, [r3, #12]
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	f042 0201 	orr.w	r2, r2, #1
 801066e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	4a26      	ldr	r2, [pc, #152]	; (8010710 <HAL_TIM_Base_Start_IT+0xd0>)
 8010676:	4293      	cmp	r3, r2
 8010678:	d022      	beq.n	80106c0 <HAL_TIM_Base_Start_IT+0x80>
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010682:	d01d      	beq.n	80106c0 <HAL_TIM_Base_Start_IT+0x80>
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	4a22      	ldr	r2, [pc, #136]	; (8010714 <HAL_TIM_Base_Start_IT+0xd4>)
 801068a:	4293      	cmp	r3, r2
 801068c:	d018      	beq.n	80106c0 <HAL_TIM_Base_Start_IT+0x80>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	4a21      	ldr	r2, [pc, #132]	; (8010718 <HAL_TIM_Base_Start_IT+0xd8>)
 8010694:	4293      	cmp	r3, r2
 8010696:	d013      	beq.n	80106c0 <HAL_TIM_Base_Start_IT+0x80>
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	4a1f      	ldr	r2, [pc, #124]	; (801071c <HAL_TIM_Base_Start_IT+0xdc>)
 801069e:	4293      	cmp	r3, r2
 80106a0:	d00e      	beq.n	80106c0 <HAL_TIM_Base_Start_IT+0x80>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	4a1e      	ldr	r2, [pc, #120]	; (8010720 <HAL_TIM_Base_Start_IT+0xe0>)
 80106a8:	4293      	cmp	r3, r2
 80106aa:	d009      	beq.n	80106c0 <HAL_TIM_Base_Start_IT+0x80>
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	4a1c      	ldr	r2, [pc, #112]	; (8010724 <HAL_TIM_Base_Start_IT+0xe4>)
 80106b2:	4293      	cmp	r3, r2
 80106b4:	d004      	beq.n	80106c0 <HAL_TIM_Base_Start_IT+0x80>
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	4a1b      	ldr	r2, [pc, #108]	; (8010728 <HAL_TIM_Base_Start_IT+0xe8>)
 80106bc:	4293      	cmp	r3, r2
 80106be:	d115      	bne.n	80106ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	689a      	ldr	r2, [r3, #8]
 80106c6:	4b19      	ldr	r3, [pc, #100]	; (801072c <HAL_TIM_Base_Start_IT+0xec>)
 80106c8:	4013      	ands	r3, r2
 80106ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	2b06      	cmp	r3, #6
 80106d0:	d015      	beq.n	80106fe <HAL_TIM_Base_Start_IT+0xbe>
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106d8:	d011      	beq.n	80106fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	681a      	ldr	r2, [r3, #0]
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	f042 0201 	orr.w	r2, r2, #1
 80106e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106ea:	e008      	b.n	80106fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	681a      	ldr	r2, [r3, #0]
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	f042 0201 	orr.w	r2, r2, #1
 80106fa:	601a      	str	r2, [r3, #0]
 80106fc:	e000      	b.n	8010700 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010700:	2300      	movs	r3, #0
}
 8010702:	4618      	mov	r0, r3
 8010704:	3714      	adds	r7, #20
 8010706:	46bd      	mov	sp, r7
 8010708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070c:	4770      	bx	lr
 801070e:	bf00      	nop
 8010710:	40010000 	.word	0x40010000
 8010714:	40000400 	.word	0x40000400
 8010718:	40000800 	.word	0x40000800
 801071c:	40000c00 	.word	0x40000c00
 8010720:	40010400 	.word	0x40010400
 8010724:	40014000 	.word	0x40014000
 8010728:	40001800 	.word	0x40001800
 801072c:	00010007 	.word	0x00010007

08010730 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b082      	sub	sp, #8
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d101      	bne.n	8010742 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801073e:	2301      	movs	r3, #1
 8010740:	e049      	b.n	80107d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010748:	b2db      	uxtb	r3, r3
 801074a:	2b00      	cmp	r3, #0
 801074c:	d106      	bne.n	801075c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2200      	movs	r2, #0
 8010752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f7f2 fe04 	bl	8003364 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2202      	movs	r2, #2
 8010760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681a      	ldr	r2, [r3, #0]
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	3304      	adds	r3, #4
 801076c:	4619      	mov	r1, r3
 801076e:	4610      	mov	r0, r2
 8010770:	f000 fb5a 	bl	8010e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2201      	movs	r2, #1
 8010778:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2201      	movs	r2, #1
 8010780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2201      	movs	r2, #1
 8010788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2201      	movs	r2, #1
 8010790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	2201      	movs	r2, #1
 8010798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2201      	movs	r2, #1
 80107a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2201      	movs	r2, #1
 80107a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2201      	movs	r2, #1
 80107b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2201      	movs	r2, #1
 80107b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2201      	movs	r2, #1
 80107c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	2201      	movs	r2, #1
 80107c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2201      	movs	r2, #1
 80107d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80107d4:	2300      	movs	r3, #0
}
 80107d6:	4618      	mov	r0, r3
 80107d8:	3708      	adds	r7, #8
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}

080107de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80107de:	b580      	push	{r7, lr}
 80107e0:	b082      	sub	sp, #8
 80107e2:	af00      	add	r7, sp, #0
 80107e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	691b      	ldr	r3, [r3, #16]
 80107ec:	f003 0302 	and.w	r3, r3, #2
 80107f0:	2b02      	cmp	r3, #2
 80107f2:	d122      	bne.n	801083a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	68db      	ldr	r3, [r3, #12]
 80107fa:	f003 0302 	and.w	r3, r3, #2
 80107fe:	2b02      	cmp	r3, #2
 8010800:	d11b      	bne.n	801083a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	f06f 0202 	mvn.w	r2, #2
 801080a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2201      	movs	r2, #1
 8010810:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	699b      	ldr	r3, [r3, #24]
 8010818:	f003 0303 	and.w	r3, r3, #3
 801081c:	2b00      	cmp	r3, #0
 801081e:	d003      	beq.n	8010828 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f000 fae3 	bl	8010dec <HAL_TIM_IC_CaptureCallback>
 8010826:	e005      	b.n	8010834 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f000 fad5 	bl	8010dd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f000 fae6 	bl	8010e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2200      	movs	r2, #0
 8010838:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	691b      	ldr	r3, [r3, #16]
 8010840:	f003 0304 	and.w	r3, r3, #4
 8010844:	2b04      	cmp	r3, #4
 8010846:	d122      	bne.n	801088e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	68db      	ldr	r3, [r3, #12]
 801084e:	f003 0304 	and.w	r3, r3, #4
 8010852:	2b04      	cmp	r3, #4
 8010854:	d11b      	bne.n	801088e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	f06f 0204 	mvn.w	r2, #4
 801085e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2202      	movs	r2, #2
 8010864:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	699b      	ldr	r3, [r3, #24]
 801086c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010870:	2b00      	cmp	r3, #0
 8010872:	d003      	beq.n	801087c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010874:	6878      	ldr	r0, [r7, #4]
 8010876:	f000 fab9 	bl	8010dec <HAL_TIM_IC_CaptureCallback>
 801087a:	e005      	b.n	8010888 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	f000 faab 	bl	8010dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010882:	6878      	ldr	r0, [r7, #4]
 8010884:	f000 fabc 	bl	8010e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2200      	movs	r2, #0
 801088c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	691b      	ldr	r3, [r3, #16]
 8010894:	f003 0308 	and.w	r3, r3, #8
 8010898:	2b08      	cmp	r3, #8
 801089a:	d122      	bne.n	80108e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	68db      	ldr	r3, [r3, #12]
 80108a2:	f003 0308 	and.w	r3, r3, #8
 80108a6:	2b08      	cmp	r3, #8
 80108a8:	d11b      	bne.n	80108e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	f06f 0208 	mvn.w	r2, #8
 80108b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2204      	movs	r2, #4
 80108b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	69db      	ldr	r3, [r3, #28]
 80108c0:	f003 0303 	and.w	r3, r3, #3
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d003      	beq.n	80108d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80108c8:	6878      	ldr	r0, [r7, #4]
 80108ca:	f000 fa8f 	bl	8010dec <HAL_TIM_IC_CaptureCallback>
 80108ce:	e005      	b.n	80108dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80108d0:	6878      	ldr	r0, [r7, #4]
 80108d2:	f000 fa81 	bl	8010dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80108d6:	6878      	ldr	r0, [r7, #4]
 80108d8:	f000 fa92 	bl	8010e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2200      	movs	r2, #0
 80108e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	691b      	ldr	r3, [r3, #16]
 80108e8:	f003 0310 	and.w	r3, r3, #16
 80108ec:	2b10      	cmp	r3, #16
 80108ee:	d122      	bne.n	8010936 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	68db      	ldr	r3, [r3, #12]
 80108f6:	f003 0310 	and.w	r3, r3, #16
 80108fa:	2b10      	cmp	r3, #16
 80108fc:	d11b      	bne.n	8010936 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	f06f 0210 	mvn.w	r2, #16
 8010906:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2208      	movs	r2, #8
 801090c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	69db      	ldr	r3, [r3, #28]
 8010914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010918:	2b00      	cmp	r3, #0
 801091a:	d003      	beq.n	8010924 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801091c:	6878      	ldr	r0, [r7, #4]
 801091e:	f000 fa65 	bl	8010dec <HAL_TIM_IC_CaptureCallback>
 8010922:	e005      	b.n	8010930 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f000 fa57 	bl	8010dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	f000 fa68 	bl	8010e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2200      	movs	r2, #0
 8010934:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	691b      	ldr	r3, [r3, #16]
 801093c:	f003 0301 	and.w	r3, r3, #1
 8010940:	2b01      	cmp	r3, #1
 8010942:	d10e      	bne.n	8010962 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	68db      	ldr	r3, [r3, #12]
 801094a:	f003 0301 	and.w	r3, r3, #1
 801094e:	2b01      	cmp	r3, #1
 8010950:	d107      	bne.n	8010962 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	f06f 0201 	mvn.w	r2, #1
 801095a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f7f1 ff87 	bl	8002870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	691b      	ldr	r3, [r3, #16]
 8010968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801096c:	2b80      	cmp	r3, #128	; 0x80
 801096e:	d10e      	bne.n	801098e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	68db      	ldr	r3, [r3, #12]
 8010976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801097a:	2b80      	cmp	r3, #128	; 0x80
 801097c:	d107      	bne.n	801098e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010988:	6878      	ldr	r0, [r7, #4]
 801098a:	f000 fefb 	bl	8011784 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	691b      	ldr	r3, [r3, #16]
 8010994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801099c:	d10e      	bne.n	80109bc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	68db      	ldr	r3, [r3, #12]
 80109a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109a8:	2b80      	cmp	r3, #128	; 0x80
 80109aa:	d107      	bne.n	80109bc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80109b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80109b6:	6878      	ldr	r0, [r7, #4]
 80109b8:	f000 feee 	bl	8011798 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	691b      	ldr	r3, [r3, #16]
 80109c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109c6:	2b40      	cmp	r3, #64	; 0x40
 80109c8:	d10e      	bne.n	80109e8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	68db      	ldr	r3, [r3, #12]
 80109d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109d4:	2b40      	cmp	r3, #64	; 0x40
 80109d6:	d107      	bne.n	80109e8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80109e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	f000 fa16 	bl	8010e14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	691b      	ldr	r3, [r3, #16]
 80109ee:	f003 0320 	and.w	r3, r3, #32
 80109f2:	2b20      	cmp	r3, #32
 80109f4:	d10e      	bne.n	8010a14 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	68db      	ldr	r3, [r3, #12]
 80109fc:	f003 0320 	and.w	r3, r3, #32
 8010a00:	2b20      	cmp	r3, #32
 8010a02:	d107      	bne.n	8010a14 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	f06f 0220 	mvn.w	r2, #32
 8010a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010a0e:	6878      	ldr	r0, [r7, #4]
 8010a10:	f000 feae 	bl	8011770 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010a14:	bf00      	nop
 8010a16:	3708      	adds	r7, #8
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}

08010a1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b086      	sub	sp, #24
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	60f8      	str	r0, [r7, #12]
 8010a24:	60b9      	str	r1, [r7, #8]
 8010a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010a28:	2300      	movs	r3, #0
 8010a2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010a32:	2b01      	cmp	r3, #1
 8010a34:	d101      	bne.n	8010a3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010a36:	2302      	movs	r3, #2
 8010a38:	e0ff      	b.n	8010c3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	2201      	movs	r2, #1
 8010a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2b14      	cmp	r3, #20
 8010a46:	f200 80f0 	bhi.w	8010c2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010a4a:	a201      	add	r2, pc, #4	; (adr r2, 8010a50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a50:	08010aa5 	.word	0x08010aa5
 8010a54:	08010c2b 	.word	0x08010c2b
 8010a58:	08010c2b 	.word	0x08010c2b
 8010a5c:	08010c2b 	.word	0x08010c2b
 8010a60:	08010ae5 	.word	0x08010ae5
 8010a64:	08010c2b 	.word	0x08010c2b
 8010a68:	08010c2b 	.word	0x08010c2b
 8010a6c:	08010c2b 	.word	0x08010c2b
 8010a70:	08010b27 	.word	0x08010b27
 8010a74:	08010c2b 	.word	0x08010c2b
 8010a78:	08010c2b 	.word	0x08010c2b
 8010a7c:	08010c2b 	.word	0x08010c2b
 8010a80:	08010b67 	.word	0x08010b67
 8010a84:	08010c2b 	.word	0x08010c2b
 8010a88:	08010c2b 	.word	0x08010c2b
 8010a8c:	08010c2b 	.word	0x08010c2b
 8010a90:	08010ba9 	.word	0x08010ba9
 8010a94:	08010c2b 	.word	0x08010c2b
 8010a98:	08010c2b 	.word	0x08010c2b
 8010a9c:	08010c2b 	.word	0x08010c2b
 8010aa0:	08010be9 	.word	0x08010be9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	68b9      	ldr	r1, [r7, #8]
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f000 fa5c 	bl	8010f68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	699a      	ldr	r2, [r3, #24]
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	f042 0208 	orr.w	r2, r2, #8
 8010abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	699a      	ldr	r2, [r3, #24]
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	f022 0204 	bic.w	r2, r2, #4
 8010ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	6999      	ldr	r1, [r3, #24]
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	691a      	ldr	r2, [r3, #16]
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	430a      	orrs	r2, r1
 8010ae0:	619a      	str	r2, [r3, #24]
      break;
 8010ae2:	e0a5      	b.n	8010c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	68b9      	ldr	r1, [r7, #8]
 8010aea:	4618      	mov	r0, r3
 8010aec:	f000 faae 	bl	801104c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	699a      	ldr	r2, [r3, #24]
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	699a      	ldr	r2, [r3, #24]
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	6999      	ldr	r1, [r3, #24]
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	691b      	ldr	r3, [r3, #16]
 8010b1a:	021a      	lsls	r2, r3, #8
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	430a      	orrs	r2, r1
 8010b22:	619a      	str	r2, [r3, #24]
      break;
 8010b24:	e084      	b.n	8010c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	68b9      	ldr	r1, [r7, #8]
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f000 fb05 	bl	801113c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	69da      	ldr	r2, [r3, #28]
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	f042 0208 	orr.w	r2, r2, #8
 8010b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	69da      	ldr	r2, [r3, #28]
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	f022 0204 	bic.w	r2, r2, #4
 8010b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	69d9      	ldr	r1, [r3, #28]
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	691a      	ldr	r2, [r3, #16]
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	430a      	orrs	r2, r1
 8010b62:	61da      	str	r2, [r3, #28]
      break;
 8010b64:	e064      	b.n	8010c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	68b9      	ldr	r1, [r7, #8]
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f000 fb5b 	bl	8011228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	69da      	ldr	r2, [r3, #28]
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	69da      	ldr	r2, [r3, #28]
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	69d9      	ldr	r1, [r3, #28]
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	691b      	ldr	r3, [r3, #16]
 8010b9c:	021a      	lsls	r2, r3, #8
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	430a      	orrs	r2, r1
 8010ba4:	61da      	str	r2, [r3, #28]
      break;
 8010ba6:	e043      	b.n	8010c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	68b9      	ldr	r1, [r7, #8]
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f000 fb92 	bl	80112d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	f042 0208 	orr.w	r2, r2, #8
 8010bc2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	f022 0204 	bic.w	r2, r2, #4
 8010bd2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	691a      	ldr	r2, [r3, #16]
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	430a      	orrs	r2, r1
 8010be4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010be6:	e023      	b.n	8010c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	68b9      	ldr	r1, [r7, #8]
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f000 fbc4 	bl	801137c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010c02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010c12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010c1a:	68bb      	ldr	r3, [r7, #8]
 8010c1c:	691b      	ldr	r3, [r3, #16]
 8010c1e:	021a      	lsls	r2, r3, #8
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	430a      	orrs	r2, r1
 8010c26:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010c28:	e002      	b.n	8010c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	75fb      	strb	r3, [r7, #23]
      break;
 8010c2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	2200      	movs	r2, #0
 8010c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	3718      	adds	r7, #24
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bd80      	pop	{r7, pc}
 8010c42:	bf00      	nop

08010c44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b084      	sub	sp, #16
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010c58:	2b01      	cmp	r3, #1
 8010c5a:	d101      	bne.n	8010c60 <HAL_TIM_ConfigClockSource+0x1c>
 8010c5c:	2302      	movs	r3, #2
 8010c5e:	e0b4      	b.n	8010dca <HAL_TIM_ConfigClockSource+0x186>
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2201      	movs	r2, #1
 8010c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2202      	movs	r2, #2
 8010c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	689b      	ldr	r3, [r3, #8]
 8010c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010c78:	68ba      	ldr	r2, [r7, #8]
 8010c7a:	4b56      	ldr	r3, [pc, #344]	; (8010dd4 <HAL_TIM_ConfigClockSource+0x190>)
 8010c7c:	4013      	ands	r3, r2
 8010c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010c80:	68bb      	ldr	r3, [r7, #8]
 8010c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010c86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	68ba      	ldr	r2, [r7, #8]
 8010c8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010c90:	683b      	ldr	r3, [r7, #0]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010c98:	d03e      	beq.n	8010d18 <HAL_TIM_ConfigClockSource+0xd4>
 8010c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010c9e:	f200 8087 	bhi.w	8010db0 <HAL_TIM_ConfigClockSource+0x16c>
 8010ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ca6:	f000 8086 	beq.w	8010db6 <HAL_TIM_ConfigClockSource+0x172>
 8010caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010cae:	d87f      	bhi.n	8010db0 <HAL_TIM_ConfigClockSource+0x16c>
 8010cb0:	2b70      	cmp	r3, #112	; 0x70
 8010cb2:	d01a      	beq.n	8010cea <HAL_TIM_ConfigClockSource+0xa6>
 8010cb4:	2b70      	cmp	r3, #112	; 0x70
 8010cb6:	d87b      	bhi.n	8010db0 <HAL_TIM_ConfigClockSource+0x16c>
 8010cb8:	2b60      	cmp	r3, #96	; 0x60
 8010cba:	d050      	beq.n	8010d5e <HAL_TIM_ConfigClockSource+0x11a>
 8010cbc:	2b60      	cmp	r3, #96	; 0x60
 8010cbe:	d877      	bhi.n	8010db0 <HAL_TIM_ConfigClockSource+0x16c>
 8010cc0:	2b50      	cmp	r3, #80	; 0x50
 8010cc2:	d03c      	beq.n	8010d3e <HAL_TIM_ConfigClockSource+0xfa>
 8010cc4:	2b50      	cmp	r3, #80	; 0x50
 8010cc6:	d873      	bhi.n	8010db0 <HAL_TIM_ConfigClockSource+0x16c>
 8010cc8:	2b40      	cmp	r3, #64	; 0x40
 8010cca:	d058      	beq.n	8010d7e <HAL_TIM_ConfigClockSource+0x13a>
 8010ccc:	2b40      	cmp	r3, #64	; 0x40
 8010cce:	d86f      	bhi.n	8010db0 <HAL_TIM_ConfigClockSource+0x16c>
 8010cd0:	2b30      	cmp	r3, #48	; 0x30
 8010cd2:	d064      	beq.n	8010d9e <HAL_TIM_ConfigClockSource+0x15a>
 8010cd4:	2b30      	cmp	r3, #48	; 0x30
 8010cd6:	d86b      	bhi.n	8010db0 <HAL_TIM_ConfigClockSource+0x16c>
 8010cd8:	2b20      	cmp	r3, #32
 8010cda:	d060      	beq.n	8010d9e <HAL_TIM_ConfigClockSource+0x15a>
 8010cdc:	2b20      	cmp	r3, #32
 8010cde:	d867      	bhi.n	8010db0 <HAL_TIM_ConfigClockSource+0x16c>
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d05c      	beq.n	8010d9e <HAL_TIM_ConfigClockSource+0x15a>
 8010ce4:	2b10      	cmp	r3, #16
 8010ce6:	d05a      	beq.n	8010d9e <HAL_TIM_ConfigClockSource+0x15a>
 8010ce8:	e062      	b.n	8010db0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	6818      	ldr	r0, [r3, #0]
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	6899      	ldr	r1, [r3, #8]
 8010cf2:	683b      	ldr	r3, [r7, #0]
 8010cf4:	685a      	ldr	r2, [r3, #4]
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	68db      	ldr	r3, [r3, #12]
 8010cfa:	f000 fc0d 	bl	8011518 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	689b      	ldr	r3, [r3, #8]
 8010d04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010d06:	68bb      	ldr	r3, [r7, #8]
 8010d08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010d0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	68ba      	ldr	r2, [r7, #8]
 8010d14:	609a      	str	r2, [r3, #8]
      break;
 8010d16:	e04f      	b.n	8010db8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6818      	ldr	r0, [r3, #0]
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	6899      	ldr	r1, [r3, #8]
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	685a      	ldr	r2, [r3, #4]
 8010d24:	683b      	ldr	r3, [r7, #0]
 8010d26:	68db      	ldr	r3, [r3, #12]
 8010d28:	f000 fbf6 	bl	8011518 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	689a      	ldr	r2, [r3, #8]
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010d3a:	609a      	str	r2, [r3, #8]
      break;
 8010d3c:	e03c      	b.n	8010db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	6818      	ldr	r0, [r3, #0]
 8010d42:	683b      	ldr	r3, [r7, #0]
 8010d44:	6859      	ldr	r1, [r3, #4]
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	68db      	ldr	r3, [r3, #12]
 8010d4a:	461a      	mov	r2, r3
 8010d4c:	f000 fb6a 	bl	8011424 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	2150      	movs	r1, #80	; 0x50
 8010d56:	4618      	mov	r0, r3
 8010d58:	f000 fbc3 	bl	80114e2 <TIM_ITRx_SetConfig>
      break;
 8010d5c:	e02c      	b.n	8010db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	6818      	ldr	r0, [r3, #0]
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	6859      	ldr	r1, [r3, #4]
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	68db      	ldr	r3, [r3, #12]
 8010d6a:	461a      	mov	r2, r3
 8010d6c:	f000 fb89 	bl	8011482 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	2160      	movs	r1, #96	; 0x60
 8010d76:	4618      	mov	r0, r3
 8010d78:	f000 fbb3 	bl	80114e2 <TIM_ITRx_SetConfig>
      break;
 8010d7c:	e01c      	b.n	8010db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	6818      	ldr	r0, [r3, #0]
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	6859      	ldr	r1, [r3, #4]
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	68db      	ldr	r3, [r3, #12]
 8010d8a:	461a      	mov	r2, r3
 8010d8c:	f000 fb4a 	bl	8011424 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	2140      	movs	r1, #64	; 0x40
 8010d96:	4618      	mov	r0, r3
 8010d98:	f000 fba3 	bl	80114e2 <TIM_ITRx_SetConfig>
      break;
 8010d9c:	e00c      	b.n	8010db8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681a      	ldr	r2, [r3, #0]
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	4619      	mov	r1, r3
 8010da8:	4610      	mov	r0, r2
 8010daa:	f000 fb9a 	bl	80114e2 <TIM_ITRx_SetConfig>
      break;
 8010dae:	e003      	b.n	8010db8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8010db0:	2301      	movs	r3, #1
 8010db2:	73fb      	strb	r3, [r7, #15]
      break;
 8010db4:	e000      	b.n	8010db8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8010db6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2201      	movs	r2, #1
 8010dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3710      	adds	r7, #16
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}
 8010dd2:	bf00      	nop
 8010dd4:	fffeff88 	.word	0xfffeff88

08010dd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010dd8:	b480      	push	{r7}
 8010dda:	b083      	sub	sp, #12
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010de0:	bf00      	nop
 8010de2:	370c      	adds	r7, #12
 8010de4:	46bd      	mov	sp, r7
 8010de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dea:	4770      	bx	lr

08010dec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010dec:	b480      	push	{r7}
 8010dee:	b083      	sub	sp, #12
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010df4:	bf00      	nop
 8010df6:	370c      	adds	r7, #12
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfe:	4770      	bx	lr

08010e00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010e00:	b480      	push	{r7}
 8010e02:	b083      	sub	sp, #12
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010e08:	bf00      	nop
 8010e0a:	370c      	adds	r7, #12
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e12:	4770      	bx	lr

08010e14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010e14:	b480      	push	{r7}
 8010e16:	b083      	sub	sp, #12
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010e1c:	bf00      	nop
 8010e1e:	370c      	adds	r7, #12
 8010e20:	46bd      	mov	sp, r7
 8010e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e26:	4770      	bx	lr

08010e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010e28:	b480      	push	{r7}
 8010e2a:	b085      	sub	sp, #20
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
 8010e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	4a40      	ldr	r2, [pc, #256]	; (8010f3c <TIM_Base_SetConfig+0x114>)
 8010e3c:	4293      	cmp	r3, r2
 8010e3e:	d013      	beq.n	8010e68 <TIM_Base_SetConfig+0x40>
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e46:	d00f      	beq.n	8010e68 <TIM_Base_SetConfig+0x40>
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	4a3d      	ldr	r2, [pc, #244]	; (8010f40 <TIM_Base_SetConfig+0x118>)
 8010e4c:	4293      	cmp	r3, r2
 8010e4e:	d00b      	beq.n	8010e68 <TIM_Base_SetConfig+0x40>
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	4a3c      	ldr	r2, [pc, #240]	; (8010f44 <TIM_Base_SetConfig+0x11c>)
 8010e54:	4293      	cmp	r3, r2
 8010e56:	d007      	beq.n	8010e68 <TIM_Base_SetConfig+0x40>
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	4a3b      	ldr	r2, [pc, #236]	; (8010f48 <TIM_Base_SetConfig+0x120>)
 8010e5c:	4293      	cmp	r3, r2
 8010e5e:	d003      	beq.n	8010e68 <TIM_Base_SetConfig+0x40>
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	4a3a      	ldr	r2, [pc, #232]	; (8010f4c <TIM_Base_SetConfig+0x124>)
 8010e64:	4293      	cmp	r3, r2
 8010e66:	d108      	bne.n	8010e7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010e70:	683b      	ldr	r3, [r7, #0]
 8010e72:	685b      	ldr	r3, [r3, #4]
 8010e74:	68fa      	ldr	r2, [r7, #12]
 8010e76:	4313      	orrs	r3, r2
 8010e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	4a2f      	ldr	r2, [pc, #188]	; (8010f3c <TIM_Base_SetConfig+0x114>)
 8010e7e:	4293      	cmp	r3, r2
 8010e80:	d02b      	beq.n	8010eda <TIM_Base_SetConfig+0xb2>
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e88:	d027      	beq.n	8010eda <TIM_Base_SetConfig+0xb2>
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	4a2c      	ldr	r2, [pc, #176]	; (8010f40 <TIM_Base_SetConfig+0x118>)
 8010e8e:	4293      	cmp	r3, r2
 8010e90:	d023      	beq.n	8010eda <TIM_Base_SetConfig+0xb2>
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	4a2b      	ldr	r2, [pc, #172]	; (8010f44 <TIM_Base_SetConfig+0x11c>)
 8010e96:	4293      	cmp	r3, r2
 8010e98:	d01f      	beq.n	8010eda <TIM_Base_SetConfig+0xb2>
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	4a2a      	ldr	r2, [pc, #168]	; (8010f48 <TIM_Base_SetConfig+0x120>)
 8010e9e:	4293      	cmp	r3, r2
 8010ea0:	d01b      	beq.n	8010eda <TIM_Base_SetConfig+0xb2>
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	4a29      	ldr	r2, [pc, #164]	; (8010f4c <TIM_Base_SetConfig+0x124>)
 8010ea6:	4293      	cmp	r3, r2
 8010ea8:	d017      	beq.n	8010eda <TIM_Base_SetConfig+0xb2>
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	4a28      	ldr	r2, [pc, #160]	; (8010f50 <TIM_Base_SetConfig+0x128>)
 8010eae:	4293      	cmp	r3, r2
 8010eb0:	d013      	beq.n	8010eda <TIM_Base_SetConfig+0xb2>
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	4a27      	ldr	r2, [pc, #156]	; (8010f54 <TIM_Base_SetConfig+0x12c>)
 8010eb6:	4293      	cmp	r3, r2
 8010eb8:	d00f      	beq.n	8010eda <TIM_Base_SetConfig+0xb2>
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	4a26      	ldr	r2, [pc, #152]	; (8010f58 <TIM_Base_SetConfig+0x130>)
 8010ebe:	4293      	cmp	r3, r2
 8010ec0:	d00b      	beq.n	8010eda <TIM_Base_SetConfig+0xb2>
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	4a25      	ldr	r2, [pc, #148]	; (8010f5c <TIM_Base_SetConfig+0x134>)
 8010ec6:	4293      	cmp	r3, r2
 8010ec8:	d007      	beq.n	8010eda <TIM_Base_SetConfig+0xb2>
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	4a24      	ldr	r2, [pc, #144]	; (8010f60 <TIM_Base_SetConfig+0x138>)
 8010ece:	4293      	cmp	r3, r2
 8010ed0:	d003      	beq.n	8010eda <TIM_Base_SetConfig+0xb2>
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	4a23      	ldr	r2, [pc, #140]	; (8010f64 <TIM_Base_SetConfig+0x13c>)
 8010ed6:	4293      	cmp	r3, r2
 8010ed8:	d108      	bne.n	8010eec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	68db      	ldr	r3, [r3, #12]
 8010ee6:	68fa      	ldr	r2, [r7, #12]
 8010ee8:	4313      	orrs	r3, r2
 8010eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	695b      	ldr	r3, [r3, #20]
 8010ef6:	4313      	orrs	r3, r2
 8010ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	68fa      	ldr	r2, [r7, #12]
 8010efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	689a      	ldr	r2, [r3, #8]
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010f08:	683b      	ldr	r3, [r7, #0]
 8010f0a:	681a      	ldr	r2, [r3, #0]
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	4a0a      	ldr	r2, [pc, #40]	; (8010f3c <TIM_Base_SetConfig+0x114>)
 8010f14:	4293      	cmp	r3, r2
 8010f16:	d003      	beq.n	8010f20 <TIM_Base_SetConfig+0xf8>
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	4a0c      	ldr	r2, [pc, #48]	; (8010f4c <TIM_Base_SetConfig+0x124>)
 8010f1c:	4293      	cmp	r3, r2
 8010f1e:	d103      	bne.n	8010f28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	691a      	ldr	r2, [r3, #16]
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2201      	movs	r2, #1
 8010f2c:	615a      	str	r2, [r3, #20]
}
 8010f2e:	bf00      	nop
 8010f30:	3714      	adds	r7, #20
 8010f32:	46bd      	mov	sp, r7
 8010f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f38:	4770      	bx	lr
 8010f3a:	bf00      	nop
 8010f3c:	40010000 	.word	0x40010000
 8010f40:	40000400 	.word	0x40000400
 8010f44:	40000800 	.word	0x40000800
 8010f48:	40000c00 	.word	0x40000c00
 8010f4c:	40010400 	.word	0x40010400
 8010f50:	40014000 	.word	0x40014000
 8010f54:	40014400 	.word	0x40014400
 8010f58:	40014800 	.word	0x40014800
 8010f5c:	40001800 	.word	0x40001800
 8010f60:	40001c00 	.word	0x40001c00
 8010f64:	40002000 	.word	0x40002000

08010f68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010f68:	b480      	push	{r7}
 8010f6a:	b087      	sub	sp, #28
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	6a1b      	ldr	r3, [r3, #32]
 8010f76:	f023 0201 	bic.w	r2, r3, #1
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	6a1b      	ldr	r3, [r3, #32]
 8010f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	685b      	ldr	r3, [r3, #4]
 8010f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	699b      	ldr	r3, [r3, #24]
 8010f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010f90:	68fa      	ldr	r2, [r7, #12]
 8010f92:	4b2b      	ldr	r3, [pc, #172]	; (8011040 <TIM_OC1_SetConfig+0xd8>)
 8010f94:	4013      	ands	r3, r2
 8010f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	f023 0303 	bic.w	r3, r3, #3
 8010f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	68fa      	ldr	r2, [r7, #12]
 8010fa6:	4313      	orrs	r3, r2
 8010fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	f023 0302 	bic.w	r3, r3, #2
 8010fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010fb2:	683b      	ldr	r3, [r7, #0]
 8010fb4:	689b      	ldr	r3, [r3, #8]
 8010fb6:	697a      	ldr	r2, [r7, #20]
 8010fb8:	4313      	orrs	r3, r2
 8010fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	4a21      	ldr	r2, [pc, #132]	; (8011044 <TIM_OC1_SetConfig+0xdc>)
 8010fc0:	4293      	cmp	r3, r2
 8010fc2:	d003      	beq.n	8010fcc <TIM_OC1_SetConfig+0x64>
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	4a20      	ldr	r2, [pc, #128]	; (8011048 <TIM_OC1_SetConfig+0xe0>)
 8010fc8:	4293      	cmp	r3, r2
 8010fca:	d10c      	bne.n	8010fe6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010fcc:	697b      	ldr	r3, [r7, #20]
 8010fce:	f023 0308 	bic.w	r3, r3, #8
 8010fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	68db      	ldr	r3, [r3, #12]
 8010fd8:	697a      	ldr	r2, [r7, #20]
 8010fda:	4313      	orrs	r3, r2
 8010fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	f023 0304 	bic.w	r3, r3, #4
 8010fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	4a16      	ldr	r2, [pc, #88]	; (8011044 <TIM_OC1_SetConfig+0xdc>)
 8010fea:	4293      	cmp	r3, r2
 8010fec:	d003      	beq.n	8010ff6 <TIM_OC1_SetConfig+0x8e>
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	4a15      	ldr	r2, [pc, #84]	; (8011048 <TIM_OC1_SetConfig+0xe0>)
 8010ff2:	4293      	cmp	r3, r2
 8010ff4:	d111      	bne.n	801101a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010ff6:	693b      	ldr	r3, [r7, #16]
 8010ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010ffe:	693b      	ldr	r3, [r7, #16]
 8011000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011006:	683b      	ldr	r3, [r7, #0]
 8011008:	695b      	ldr	r3, [r3, #20]
 801100a:	693a      	ldr	r2, [r7, #16]
 801100c:	4313      	orrs	r3, r2
 801100e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	699b      	ldr	r3, [r3, #24]
 8011014:	693a      	ldr	r2, [r7, #16]
 8011016:	4313      	orrs	r3, r2
 8011018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	693a      	ldr	r2, [r7, #16]
 801101e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	68fa      	ldr	r2, [r7, #12]
 8011024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011026:	683b      	ldr	r3, [r7, #0]
 8011028:	685a      	ldr	r2, [r3, #4]
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	697a      	ldr	r2, [r7, #20]
 8011032:	621a      	str	r2, [r3, #32]
}
 8011034:	bf00      	nop
 8011036:	371c      	adds	r7, #28
 8011038:	46bd      	mov	sp, r7
 801103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103e:	4770      	bx	lr
 8011040:	fffeff8f 	.word	0xfffeff8f
 8011044:	40010000 	.word	0x40010000
 8011048:	40010400 	.word	0x40010400

0801104c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801104c:	b480      	push	{r7}
 801104e:	b087      	sub	sp, #28
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
 8011054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	6a1b      	ldr	r3, [r3, #32]
 801105a:	f023 0210 	bic.w	r2, r3, #16
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	6a1b      	ldr	r3, [r3, #32]
 8011066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	685b      	ldr	r3, [r3, #4]
 801106c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	699b      	ldr	r3, [r3, #24]
 8011072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011074:	68fa      	ldr	r2, [r7, #12]
 8011076:	4b2e      	ldr	r3, [pc, #184]	; (8011130 <TIM_OC2_SetConfig+0xe4>)
 8011078:	4013      	ands	r3, r2
 801107a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	021b      	lsls	r3, r3, #8
 801108a:	68fa      	ldr	r2, [r7, #12]
 801108c:	4313      	orrs	r3, r2
 801108e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011090:	697b      	ldr	r3, [r7, #20]
 8011092:	f023 0320 	bic.w	r3, r3, #32
 8011096:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	689b      	ldr	r3, [r3, #8]
 801109c:	011b      	lsls	r3, r3, #4
 801109e:	697a      	ldr	r2, [r7, #20]
 80110a0:	4313      	orrs	r3, r2
 80110a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	4a23      	ldr	r2, [pc, #140]	; (8011134 <TIM_OC2_SetConfig+0xe8>)
 80110a8:	4293      	cmp	r3, r2
 80110aa:	d003      	beq.n	80110b4 <TIM_OC2_SetConfig+0x68>
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	4a22      	ldr	r2, [pc, #136]	; (8011138 <TIM_OC2_SetConfig+0xec>)
 80110b0:	4293      	cmp	r3, r2
 80110b2:	d10d      	bne.n	80110d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80110b4:	697b      	ldr	r3, [r7, #20]
 80110b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80110ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	68db      	ldr	r3, [r3, #12]
 80110c0:	011b      	lsls	r3, r3, #4
 80110c2:	697a      	ldr	r2, [r7, #20]
 80110c4:	4313      	orrs	r3, r2
 80110c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80110c8:	697b      	ldr	r3, [r7, #20]
 80110ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80110ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	4a18      	ldr	r2, [pc, #96]	; (8011134 <TIM_OC2_SetConfig+0xe8>)
 80110d4:	4293      	cmp	r3, r2
 80110d6:	d003      	beq.n	80110e0 <TIM_OC2_SetConfig+0x94>
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	4a17      	ldr	r2, [pc, #92]	; (8011138 <TIM_OC2_SetConfig+0xec>)
 80110dc:	4293      	cmp	r3, r2
 80110de:	d113      	bne.n	8011108 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80110e0:	693b      	ldr	r3, [r7, #16]
 80110e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80110e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80110e8:	693b      	ldr	r3, [r7, #16]
 80110ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80110ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	695b      	ldr	r3, [r3, #20]
 80110f4:	009b      	lsls	r3, r3, #2
 80110f6:	693a      	ldr	r2, [r7, #16]
 80110f8:	4313      	orrs	r3, r2
 80110fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	699b      	ldr	r3, [r3, #24]
 8011100:	009b      	lsls	r3, r3, #2
 8011102:	693a      	ldr	r2, [r7, #16]
 8011104:	4313      	orrs	r3, r2
 8011106:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	693a      	ldr	r2, [r7, #16]
 801110c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	68fa      	ldr	r2, [r7, #12]
 8011112:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	685a      	ldr	r2, [r3, #4]
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	697a      	ldr	r2, [r7, #20]
 8011120:	621a      	str	r2, [r3, #32]
}
 8011122:	bf00      	nop
 8011124:	371c      	adds	r7, #28
 8011126:	46bd      	mov	sp, r7
 8011128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112c:	4770      	bx	lr
 801112e:	bf00      	nop
 8011130:	feff8fff 	.word	0xfeff8fff
 8011134:	40010000 	.word	0x40010000
 8011138:	40010400 	.word	0x40010400

0801113c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801113c:	b480      	push	{r7}
 801113e:	b087      	sub	sp, #28
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
 8011144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	6a1b      	ldr	r3, [r3, #32]
 801114a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	6a1b      	ldr	r3, [r3, #32]
 8011156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	685b      	ldr	r3, [r3, #4]
 801115c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	69db      	ldr	r3, [r3, #28]
 8011162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011164:	68fa      	ldr	r2, [r7, #12]
 8011166:	4b2d      	ldr	r3, [pc, #180]	; (801121c <TIM_OC3_SetConfig+0xe0>)
 8011168:	4013      	ands	r3, r2
 801116a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	f023 0303 	bic.w	r3, r3, #3
 8011172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011174:	683b      	ldr	r3, [r7, #0]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	68fa      	ldr	r2, [r7, #12]
 801117a:	4313      	orrs	r3, r2
 801117c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801117e:	697b      	ldr	r3, [r7, #20]
 8011180:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	689b      	ldr	r3, [r3, #8]
 801118a:	021b      	lsls	r3, r3, #8
 801118c:	697a      	ldr	r2, [r7, #20]
 801118e:	4313      	orrs	r3, r2
 8011190:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	4a22      	ldr	r2, [pc, #136]	; (8011220 <TIM_OC3_SetConfig+0xe4>)
 8011196:	4293      	cmp	r3, r2
 8011198:	d003      	beq.n	80111a2 <TIM_OC3_SetConfig+0x66>
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	4a21      	ldr	r2, [pc, #132]	; (8011224 <TIM_OC3_SetConfig+0xe8>)
 801119e:	4293      	cmp	r3, r2
 80111a0:	d10d      	bne.n	80111be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80111a2:	697b      	ldr	r3, [r7, #20]
 80111a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80111a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	68db      	ldr	r3, [r3, #12]
 80111ae:	021b      	lsls	r3, r3, #8
 80111b0:	697a      	ldr	r2, [r7, #20]
 80111b2:	4313      	orrs	r3, r2
 80111b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80111bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	4a17      	ldr	r2, [pc, #92]	; (8011220 <TIM_OC3_SetConfig+0xe4>)
 80111c2:	4293      	cmp	r3, r2
 80111c4:	d003      	beq.n	80111ce <TIM_OC3_SetConfig+0x92>
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	4a16      	ldr	r2, [pc, #88]	; (8011224 <TIM_OC3_SetConfig+0xe8>)
 80111ca:	4293      	cmp	r3, r2
 80111cc:	d113      	bne.n	80111f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80111ce:	693b      	ldr	r3, [r7, #16]
 80111d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80111d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80111dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	695b      	ldr	r3, [r3, #20]
 80111e2:	011b      	lsls	r3, r3, #4
 80111e4:	693a      	ldr	r2, [r7, #16]
 80111e6:	4313      	orrs	r3, r2
 80111e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	699b      	ldr	r3, [r3, #24]
 80111ee:	011b      	lsls	r3, r3, #4
 80111f0:	693a      	ldr	r2, [r7, #16]
 80111f2:	4313      	orrs	r3, r2
 80111f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	693a      	ldr	r2, [r7, #16]
 80111fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	68fa      	ldr	r2, [r7, #12]
 8011200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011202:	683b      	ldr	r3, [r7, #0]
 8011204:	685a      	ldr	r2, [r3, #4]
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	697a      	ldr	r2, [r7, #20]
 801120e:	621a      	str	r2, [r3, #32]
}
 8011210:	bf00      	nop
 8011212:	371c      	adds	r7, #28
 8011214:	46bd      	mov	sp, r7
 8011216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121a:	4770      	bx	lr
 801121c:	fffeff8f 	.word	0xfffeff8f
 8011220:	40010000 	.word	0x40010000
 8011224:	40010400 	.word	0x40010400

08011228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011228:	b480      	push	{r7}
 801122a:	b087      	sub	sp, #28
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6a1b      	ldr	r3, [r3, #32]
 8011236:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	6a1b      	ldr	r3, [r3, #32]
 8011242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	685b      	ldr	r3, [r3, #4]
 8011248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	69db      	ldr	r3, [r3, #28]
 801124e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011250:	68fa      	ldr	r2, [r7, #12]
 8011252:	4b1e      	ldr	r3, [pc, #120]	; (80112cc <TIM_OC4_SetConfig+0xa4>)
 8011254:	4013      	ands	r3, r2
 8011256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801125e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	021b      	lsls	r3, r3, #8
 8011266:	68fa      	ldr	r2, [r7, #12]
 8011268:	4313      	orrs	r3, r2
 801126a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801126c:	693b      	ldr	r3, [r7, #16]
 801126e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	689b      	ldr	r3, [r3, #8]
 8011278:	031b      	lsls	r3, r3, #12
 801127a:	693a      	ldr	r2, [r7, #16]
 801127c:	4313      	orrs	r3, r2
 801127e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	4a13      	ldr	r2, [pc, #76]	; (80112d0 <TIM_OC4_SetConfig+0xa8>)
 8011284:	4293      	cmp	r3, r2
 8011286:	d003      	beq.n	8011290 <TIM_OC4_SetConfig+0x68>
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	4a12      	ldr	r2, [pc, #72]	; (80112d4 <TIM_OC4_SetConfig+0xac>)
 801128c:	4293      	cmp	r3, r2
 801128e:	d109      	bne.n	80112a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011290:	697b      	ldr	r3, [r7, #20]
 8011292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	695b      	ldr	r3, [r3, #20]
 801129c:	019b      	lsls	r3, r3, #6
 801129e:	697a      	ldr	r2, [r7, #20]
 80112a0:	4313      	orrs	r3, r2
 80112a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	697a      	ldr	r2, [r7, #20]
 80112a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	68fa      	ldr	r2, [r7, #12]
 80112ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	685a      	ldr	r2, [r3, #4]
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	693a      	ldr	r2, [r7, #16]
 80112bc:	621a      	str	r2, [r3, #32]
}
 80112be:	bf00      	nop
 80112c0:	371c      	adds	r7, #28
 80112c2:	46bd      	mov	sp, r7
 80112c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c8:	4770      	bx	lr
 80112ca:	bf00      	nop
 80112cc:	feff8fff 	.word	0xfeff8fff
 80112d0:	40010000 	.word	0x40010000
 80112d4:	40010400 	.word	0x40010400

080112d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80112d8:	b480      	push	{r7}
 80112da:	b087      	sub	sp, #28
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
 80112e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6a1b      	ldr	r3, [r3, #32]
 80112e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6a1b      	ldr	r3, [r3, #32]
 80112f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	685b      	ldr	r3, [r3, #4]
 80112f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011300:	68fa      	ldr	r2, [r7, #12]
 8011302:	4b1b      	ldr	r3, [pc, #108]	; (8011370 <TIM_OC5_SetConfig+0x98>)
 8011304:	4013      	ands	r3, r2
 8011306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011308:	683b      	ldr	r3, [r7, #0]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	68fa      	ldr	r2, [r7, #12]
 801130e:	4313      	orrs	r3, r2
 8011310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011312:	693b      	ldr	r3, [r7, #16]
 8011314:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011318:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	689b      	ldr	r3, [r3, #8]
 801131e:	041b      	lsls	r3, r3, #16
 8011320:	693a      	ldr	r2, [r7, #16]
 8011322:	4313      	orrs	r3, r2
 8011324:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	4a12      	ldr	r2, [pc, #72]	; (8011374 <TIM_OC5_SetConfig+0x9c>)
 801132a:	4293      	cmp	r3, r2
 801132c:	d003      	beq.n	8011336 <TIM_OC5_SetConfig+0x5e>
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	4a11      	ldr	r2, [pc, #68]	; (8011378 <TIM_OC5_SetConfig+0xa0>)
 8011332:	4293      	cmp	r3, r2
 8011334:	d109      	bne.n	801134a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801133c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	695b      	ldr	r3, [r3, #20]
 8011342:	021b      	lsls	r3, r3, #8
 8011344:	697a      	ldr	r2, [r7, #20]
 8011346:	4313      	orrs	r3, r2
 8011348:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	697a      	ldr	r2, [r7, #20]
 801134e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	68fa      	ldr	r2, [r7, #12]
 8011354:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	685a      	ldr	r2, [r3, #4]
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	693a      	ldr	r2, [r7, #16]
 8011362:	621a      	str	r2, [r3, #32]
}
 8011364:	bf00      	nop
 8011366:	371c      	adds	r7, #28
 8011368:	46bd      	mov	sp, r7
 801136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136e:	4770      	bx	lr
 8011370:	fffeff8f 	.word	0xfffeff8f
 8011374:	40010000 	.word	0x40010000
 8011378:	40010400 	.word	0x40010400

0801137c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801137c:	b480      	push	{r7}
 801137e:	b087      	sub	sp, #28
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
 8011384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	6a1b      	ldr	r3, [r3, #32]
 801138a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	6a1b      	ldr	r3, [r3, #32]
 8011396:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	685b      	ldr	r3, [r3, #4]
 801139c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80113a4:	68fa      	ldr	r2, [r7, #12]
 80113a6:	4b1c      	ldr	r3, [pc, #112]	; (8011418 <TIM_OC6_SetConfig+0x9c>)
 80113a8:	4013      	ands	r3, r2
 80113aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	021b      	lsls	r3, r3, #8
 80113b2:	68fa      	ldr	r2, [r7, #12]
 80113b4:	4313      	orrs	r3, r2
 80113b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80113b8:	693b      	ldr	r3, [r7, #16]
 80113ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80113be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	689b      	ldr	r3, [r3, #8]
 80113c4:	051b      	lsls	r3, r3, #20
 80113c6:	693a      	ldr	r2, [r7, #16]
 80113c8:	4313      	orrs	r3, r2
 80113ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	4a13      	ldr	r2, [pc, #76]	; (801141c <TIM_OC6_SetConfig+0xa0>)
 80113d0:	4293      	cmp	r3, r2
 80113d2:	d003      	beq.n	80113dc <TIM_OC6_SetConfig+0x60>
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	4a12      	ldr	r2, [pc, #72]	; (8011420 <TIM_OC6_SetConfig+0xa4>)
 80113d8:	4293      	cmp	r3, r2
 80113da:	d109      	bne.n	80113f0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80113dc:	697b      	ldr	r3, [r7, #20]
 80113de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80113e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	695b      	ldr	r3, [r3, #20]
 80113e8:	029b      	lsls	r3, r3, #10
 80113ea:	697a      	ldr	r2, [r7, #20]
 80113ec:	4313      	orrs	r3, r2
 80113ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	697a      	ldr	r2, [r7, #20]
 80113f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	68fa      	ldr	r2, [r7, #12]
 80113fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	685a      	ldr	r2, [r3, #4]
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	693a      	ldr	r2, [r7, #16]
 8011408:	621a      	str	r2, [r3, #32]
}
 801140a:	bf00      	nop
 801140c:	371c      	adds	r7, #28
 801140e:	46bd      	mov	sp, r7
 8011410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011414:	4770      	bx	lr
 8011416:	bf00      	nop
 8011418:	feff8fff 	.word	0xfeff8fff
 801141c:	40010000 	.word	0x40010000
 8011420:	40010400 	.word	0x40010400

08011424 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011424:	b480      	push	{r7}
 8011426:	b087      	sub	sp, #28
 8011428:	af00      	add	r7, sp, #0
 801142a:	60f8      	str	r0, [r7, #12]
 801142c:	60b9      	str	r1, [r7, #8]
 801142e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	6a1b      	ldr	r3, [r3, #32]
 8011434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	6a1b      	ldr	r3, [r3, #32]
 801143a:	f023 0201 	bic.w	r2, r3, #1
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	699b      	ldr	r3, [r3, #24]
 8011446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011448:	693b      	ldr	r3, [r7, #16]
 801144a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801144e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	011b      	lsls	r3, r3, #4
 8011454:	693a      	ldr	r2, [r7, #16]
 8011456:	4313      	orrs	r3, r2
 8011458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801145a:	697b      	ldr	r3, [r7, #20]
 801145c:	f023 030a 	bic.w	r3, r3, #10
 8011460:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011462:	697a      	ldr	r2, [r7, #20]
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	4313      	orrs	r3, r2
 8011468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	693a      	ldr	r2, [r7, #16]
 801146e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	697a      	ldr	r2, [r7, #20]
 8011474:	621a      	str	r2, [r3, #32]
}
 8011476:	bf00      	nop
 8011478:	371c      	adds	r7, #28
 801147a:	46bd      	mov	sp, r7
 801147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011480:	4770      	bx	lr

08011482 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011482:	b480      	push	{r7}
 8011484:	b087      	sub	sp, #28
 8011486:	af00      	add	r7, sp, #0
 8011488:	60f8      	str	r0, [r7, #12]
 801148a:	60b9      	str	r1, [r7, #8]
 801148c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	6a1b      	ldr	r3, [r3, #32]
 8011492:	f023 0210 	bic.w	r2, r3, #16
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	699b      	ldr	r3, [r3, #24]
 801149e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	6a1b      	ldr	r3, [r3, #32]
 80114a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80114a6:	697b      	ldr	r3, [r7, #20]
 80114a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80114ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	031b      	lsls	r3, r3, #12
 80114b2:	697a      	ldr	r2, [r7, #20]
 80114b4:	4313      	orrs	r3, r2
 80114b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80114b8:	693b      	ldr	r3, [r7, #16]
 80114ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80114be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80114c0:	68bb      	ldr	r3, [r7, #8]
 80114c2:	011b      	lsls	r3, r3, #4
 80114c4:	693a      	ldr	r2, [r7, #16]
 80114c6:	4313      	orrs	r3, r2
 80114c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	697a      	ldr	r2, [r7, #20]
 80114ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	693a      	ldr	r2, [r7, #16]
 80114d4:	621a      	str	r2, [r3, #32]
}
 80114d6:	bf00      	nop
 80114d8:	371c      	adds	r7, #28
 80114da:	46bd      	mov	sp, r7
 80114dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e0:	4770      	bx	lr

080114e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80114e2:	b480      	push	{r7}
 80114e4:	b085      	sub	sp, #20
 80114e6:	af00      	add	r7, sp, #0
 80114e8:	6078      	str	r0, [r7, #4]
 80114ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	689b      	ldr	r3, [r3, #8]
 80114f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80114f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80114fa:	683a      	ldr	r2, [r7, #0]
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	4313      	orrs	r3, r2
 8011500:	f043 0307 	orr.w	r3, r3, #7
 8011504:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	68fa      	ldr	r2, [r7, #12]
 801150a:	609a      	str	r2, [r3, #8]
}
 801150c:	bf00      	nop
 801150e:	3714      	adds	r7, #20
 8011510:	46bd      	mov	sp, r7
 8011512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011516:	4770      	bx	lr

08011518 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011518:	b480      	push	{r7}
 801151a:	b087      	sub	sp, #28
 801151c:	af00      	add	r7, sp, #0
 801151e:	60f8      	str	r0, [r7, #12]
 8011520:	60b9      	str	r1, [r7, #8]
 8011522:	607a      	str	r2, [r7, #4]
 8011524:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	689b      	ldr	r3, [r3, #8]
 801152a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801152c:	697b      	ldr	r3, [r7, #20]
 801152e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011532:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011534:	683b      	ldr	r3, [r7, #0]
 8011536:	021a      	lsls	r2, r3, #8
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	431a      	orrs	r2, r3
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	4313      	orrs	r3, r2
 8011540:	697a      	ldr	r2, [r7, #20]
 8011542:	4313      	orrs	r3, r2
 8011544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	697a      	ldr	r2, [r7, #20]
 801154a:	609a      	str	r2, [r3, #8]
}
 801154c:	bf00      	nop
 801154e:	371c      	adds	r7, #28
 8011550:	46bd      	mov	sp, r7
 8011552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011556:	4770      	bx	lr

08011558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011558:	b480      	push	{r7}
 801155a:	b085      	sub	sp, #20
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
 8011560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011568:	2b01      	cmp	r3, #1
 801156a:	d101      	bne.n	8011570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801156c:	2302      	movs	r3, #2
 801156e:	e06d      	b.n	801164c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	2201      	movs	r2, #1
 8011574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	2202      	movs	r2, #2
 801157c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	685b      	ldr	r3, [r3, #4]
 8011586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	689b      	ldr	r3, [r3, #8]
 801158e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	4a30      	ldr	r2, [pc, #192]	; (8011658 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011596:	4293      	cmp	r3, r2
 8011598:	d004      	beq.n	80115a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	4a2f      	ldr	r2, [pc, #188]	; (801165c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80115a0:	4293      	cmp	r3, r2
 80115a2:	d108      	bne.n	80115b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80115aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80115ac:	683b      	ldr	r3, [r7, #0]
 80115ae:	685b      	ldr	r3, [r3, #4]
 80115b0:	68fa      	ldr	r2, [r7, #12]
 80115b2:	4313      	orrs	r3, r2
 80115b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80115bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	68fa      	ldr	r2, [r7, #12]
 80115c4:	4313      	orrs	r3, r2
 80115c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	68fa      	ldr	r2, [r7, #12]
 80115ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	4a20      	ldr	r2, [pc, #128]	; (8011658 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80115d6:	4293      	cmp	r3, r2
 80115d8:	d022      	beq.n	8011620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80115e2:	d01d      	beq.n	8011620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	4a1d      	ldr	r2, [pc, #116]	; (8011660 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80115ea:	4293      	cmp	r3, r2
 80115ec:	d018      	beq.n	8011620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	4a1c      	ldr	r2, [pc, #112]	; (8011664 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80115f4:	4293      	cmp	r3, r2
 80115f6:	d013      	beq.n	8011620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	4a1a      	ldr	r2, [pc, #104]	; (8011668 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80115fe:	4293      	cmp	r3, r2
 8011600:	d00e      	beq.n	8011620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	4a15      	ldr	r2, [pc, #84]	; (801165c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011608:	4293      	cmp	r3, r2
 801160a:	d009      	beq.n	8011620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	4a16      	ldr	r2, [pc, #88]	; (801166c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011612:	4293      	cmp	r3, r2
 8011614:	d004      	beq.n	8011620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	4a15      	ldr	r2, [pc, #84]	; (8011670 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801161c:	4293      	cmp	r3, r2
 801161e:	d10c      	bne.n	801163a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011626:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011628:	683b      	ldr	r3, [r7, #0]
 801162a:	689b      	ldr	r3, [r3, #8]
 801162c:	68ba      	ldr	r2, [r7, #8]
 801162e:	4313      	orrs	r3, r2
 8011630:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	68ba      	ldr	r2, [r7, #8]
 8011638:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2201      	movs	r2, #1
 801163e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2200      	movs	r2, #0
 8011646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801164a:	2300      	movs	r3, #0
}
 801164c:	4618      	mov	r0, r3
 801164e:	3714      	adds	r7, #20
 8011650:	46bd      	mov	sp, r7
 8011652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011656:	4770      	bx	lr
 8011658:	40010000 	.word	0x40010000
 801165c:	40010400 	.word	0x40010400
 8011660:	40000400 	.word	0x40000400
 8011664:	40000800 	.word	0x40000800
 8011668:	40000c00 	.word	0x40000c00
 801166c:	40014000 	.word	0x40014000
 8011670:	40001800 	.word	0x40001800

08011674 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011674:	b480      	push	{r7}
 8011676:	b085      	sub	sp, #20
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
 801167c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801167e:	2300      	movs	r3, #0
 8011680:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011688:	2b01      	cmp	r3, #1
 801168a:	d101      	bne.n	8011690 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801168c:	2302      	movs	r3, #2
 801168e:	e065      	b.n	801175c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	2201      	movs	r2, #1
 8011694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	68db      	ldr	r3, [r3, #12]
 80116a2:	4313      	orrs	r3, r2
 80116a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80116ac:	683b      	ldr	r3, [r7, #0]
 80116ae:	689b      	ldr	r3, [r3, #8]
 80116b0:	4313      	orrs	r3, r2
 80116b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80116ba:	683b      	ldr	r3, [r7, #0]
 80116bc:	685b      	ldr	r3, [r3, #4]
 80116be:	4313      	orrs	r3, r2
 80116c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	4313      	orrs	r3, r2
 80116ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	691b      	ldr	r3, [r3, #16]
 80116da:	4313      	orrs	r3, r2
 80116dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	695b      	ldr	r3, [r3, #20]
 80116e8:	4313      	orrs	r3, r2
 80116ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116f6:	4313      	orrs	r3, r2
 80116f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	699b      	ldr	r3, [r3, #24]
 8011704:	041b      	lsls	r3, r3, #16
 8011706:	4313      	orrs	r3, r2
 8011708:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	4a16      	ldr	r2, [pc, #88]	; (8011768 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8011710:	4293      	cmp	r3, r2
 8011712:	d004      	beq.n	801171e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	4a14      	ldr	r2, [pc, #80]	; (801176c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801171a:	4293      	cmp	r3, r2
 801171c:	d115      	bne.n	801174a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8011724:	683b      	ldr	r3, [r7, #0]
 8011726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011728:	051b      	lsls	r3, r3, #20
 801172a:	4313      	orrs	r3, r2
 801172c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	69db      	ldr	r3, [r3, #28]
 8011738:	4313      	orrs	r3, r2
 801173a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	6a1b      	ldr	r3, [r3, #32]
 8011746:	4313      	orrs	r3, r2
 8011748:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	68fa      	ldr	r2, [r7, #12]
 8011750:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	2200      	movs	r2, #0
 8011756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801175a:	2300      	movs	r3, #0
}
 801175c:	4618      	mov	r0, r3
 801175e:	3714      	adds	r7, #20
 8011760:	46bd      	mov	sp, r7
 8011762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011766:	4770      	bx	lr
 8011768:	40010000 	.word	0x40010000
 801176c:	40010400 	.word	0x40010400

08011770 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011770:	b480      	push	{r7}
 8011772:	b083      	sub	sp, #12
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011778:	bf00      	nop
 801177a:	370c      	adds	r7, #12
 801177c:	46bd      	mov	sp, r7
 801177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011782:	4770      	bx	lr

08011784 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011784:	b480      	push	{r7}
 8011786:	b083      	sub	sp, #12
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801178c:	bf00      	nop
 801178e:	370c      	adds	r7, #12
 8011790:	46bd      	mov	sp, r7
 8011792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011796:	4770      	bx	lr

08011798 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011798:	b480      	push	{r7}
 801179a:	b083      	sub	sp, #12
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80117a0:	bf00      	nop
 80117a2:	370c      	adds	r7, #12
 80117a4:	46bd      	mov	sp, r7
 80117a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117aa:	4770      	bx	lr

080117ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b082      	sub	sp, #8
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d101      	bne.n	80117be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80117ba:	2301      	movs	r3, #1
 80117bc:	e040      	b.n	8011840 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d106      	bne.n	80117d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2200      	movs	r2, #0
 80117ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80117ce:	6878      	ldr	r0, [r7, #4]
 80117d0:	f7f1 feb6 	bl	8003540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	2224      	movs	r2, #36	; 0x24
 80117d8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	681a      	ldr	r2, [r3, #0]
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	f022 0201 	bic.w	r2, r2, #1
 80117e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80117ea:	6878      	ldr	r0, [r7, #4]
 80117ec:	f000 f8b0 	bl	8011950 <UART_SetConfig>
 80117f0:	4603      	mov	r3, r0
 80117f2:	2b01      	cmp	r3, #1
 80117f4:	d101      	bne.n	80117fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80117f6:	2301      	movs	r3, #1
 80117f8:	e022      	b.n	8011840 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d002      	beq.n	8011808 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f000 fb08 	bl	8011e18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	685a      	ldr	r2, [r3, #4]
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011816:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	689a      	ldr	r2, [r3, #8]
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011826:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	681a      	ldr	r2, [r3, #0]
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	f042 0201 	orr.w	r2, r2, #1
 8011836:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f000 fb8f 	bl	8011f5c <UART_CheckIdleState>
 801183e:	4603      	mov	r3, r0
}
 8011840:	4618      	mov	r0, r3
 8011842:	3708      	adds	r7, #8
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}

08011848 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b08a      	sub	sp, #40	; 0x28
 801184c:	af02      	add	r7, sp, #8
 801184e:	60f8      	str	r0, [r7, #12]
 8011850:	60b9      	str	r1, [r7, #8]
 8011852:	603b      	str	r3, [r7, #0]
 8011854:	4613      	mov	r3, r2
 8011856:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801185c:	2b20      	cmp	r3, #32
 801185e:	d171      	bne.n	8011944 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8011860:	68bb      	ldr	r3, [r7, #8]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d002      	beq.n	801186c <HAL_UART_Transmit+0x24>
 8011866:	88fb      	ldrh	r3, [r7, #6]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d101      	bne.n	8011870 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801186c:	2301      	movs	r3, #1
 801186e:	e06a      	b.n	8011946 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	2200      	movs	r2, #0
 8011874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	2221      	movs	r2, #33	; 0x21
 801187c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801187e:	f7f4 f947 	bl	8005b10 <HAL_GetTick>
 8011882:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	88fa      	ldrh	r2, [r7, #6]
 8011888:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	88fa      	ldrh	r2, [r7, #6]
 8011890:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	689b      	ldr	r3, [r3, #8]
 8011898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801189c:	d108      	bne.n	80118b0 <HAL_UART_Transmit+0x68>
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	691b      	ldr	r3, [r3, #16]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d104      	bne.n	80118b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80118a6:	2300      	movs	r3, #0
 80118a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80118aa:	68bb      	ldr	r3, [r7, #8]
 80118ac:	61bb      	str	r3, [r7, #24]
 80118ae:	e003      	b.n	80118b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80118b4:	2300      	movs	r3, #0
 80118b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80118b8:	e02c      	b.n	8011914 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80118ba:	683b      	ldr	r3, [r7, #0]
 80118bc:	9300      	str	r3, [sp, #0]
 80118be:	697b      	ldr	r3, [r7, #20]
 80118c0:	2200      	movs	r2, #0
 80118c2:	2180      	movs	r1, #128	; 0x80
 80118c4:	68f8      	ldr	r0, [r7, #12]
 80118c6:	f000 fb80 	bl	8011fca <UART_WaitOnFlagUntilTimeout>
 80118ca:	4603      	mov	r3, r0
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d001      	beq.n	80118d4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80118d0:	2303      	movs	r3, #3
 80118d2:	e038      	b.n	8011946 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80118d4:	69fb      	ldr	r3, [r7, #28]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d10b      	bne.n	80118f2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80118da:	69bb      	ldr	r3, [r7, #24]
 80118dc:	881b      	ldrh	r3, [r3, #0]
 80118de:	461a      	mov	r2, r3
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80118e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80118ea:	69bb      	ldr	r3, [r7, #24]
 80118ec:	3302      	adds	r3, #2
 80118ee:	61bb      	str	r3, [r7, #24]
 80118f0:	e007      	b.n	8011902 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80118f2:	69fb      	ldr	r3, [r7, #28]
 80118f4:	781a      	ldrb	r2, [r3, #0]
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80118fc:	69fb      	ldr	r3, [r7, #28]
 80118fe:	3301      	adds	r3, #1
 8011900:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011908:	b29b      	uxth	r3, r3
 801190a:	3b01      	subs	r3, #1
 801190c:	b29a      	uxth	r2, r3
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801191a:	b29b      	uxth	r3, r3
 801191c:	2b00      	cmp	r3, #0
 801191e:	d1cc      	bne.n	80118ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	9300      	str	r3, [sp, #0]
 8011924:	697b      	ldr	r3, [r7, #20]
 8011926:	2200      	movs	r2, #0
 8011928:	2140      	movs	r1, #64	; 0x40
 801192a:	68f8      	ldr	r0, [r7, #12]
 801192c:	f000 fb4d 	bl	8011fca <UART_WaitOnFlagUntilTimeout>
 8011930:	4603      	mov	r3, r0
 8011932:	2b00      	cmp	r3, #0
 8011934:	d001      	beq.n	801193a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8011936:	2303      	movs	r3, #3
 8011938:	e005      	b.n	8011946 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	2220      	movs	r2, #32
 801193e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8011940:	2300      	movs	r3, #0
 8011942:	e000      	b.n	8011946 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8011944:	2302      	movs	r3, #2
  }
}
 8011946:	4618      	mov	r0, r3
 8011948:	3720      	adds	r7, #32
 801194a:	46bd      	mov	sp, r7
 801194c:	bd80      	pop	{r7, pc}
	...

08011950 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b088      	sub	sp, #32
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011958:	2300      	movs	r3, #0
 801195a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	689a      	ldr	r2, [r3, #8]
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	691b      	ldr	r3, [r3, #16]
 8011964:	431a      	orrs	r2, r3
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	695b      	ldr	r3, [r3, #20]
 801196a:	431a      	orrs	r2, r3
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	69db      	ldr	r3, [r3, #28]
 8011970:	4313      	orrs	r3, r2
 8011972:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	681a      	ldr	r2, [r3, #0]
 801197a:	4ba6      	ldr	r3, [pc, #664]	; (8011c14 <UART_SetConfig+0x2c4>)
 801197c:	4013      	ands	r3, r2
 801197e:	687a      	ldr	r2, [r7, #4]
 8011980:	6812      	ldr	r2, [r2, #0]
 8011982:	6979      	ldr	r1, [r7, #20]
 8011984:	430b      	orrs	r3, r1
 8011986:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	685b      	ldr	r3, [r3, #4]
 801198e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	68da      	ldr	r2, [r3, #12]
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	430a      	orrs	r2, r1
 801199c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	699b      	ldr	r3, [r3, #24]
 80119a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	6a1b      	ldr	r3, [r3, #32]
 80119a8:	697a      	ldr	r2, [r7, #20]
 80119aa:	4313      	orrs	r3, r2
 80119ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	689b      	ldr	r3, [r3, #8]
 80119b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	697a      	ldr	r2, [r7, #20]
 80119be:	430a      	orrs	r2, r1
 80119c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	4a94      	ldr	r2, [pc, #592]	; (8011c18 <UART_SetConfig+0x2c8>)
 80119c8:	4293      	cmp	r3, r2
 80119ca:	d120      	bne.n	8011a0e <UART_SetConfig+0xbe>
 80119cc:	4b93      	ldr	r3, [pc, #588]	; (8011c1c <UART_SetConfig+0x2cc>)
 80119ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119d2:	f003 0303 	and.w	r3, r3, #3
 80119d6:	2b03      	cmp	r3, #3
 80119d8:	d816      	bhi.n	8011a08 <UART_SetConfig+0xb8>
 80119da:	a201      	add	r2, pc, #4	; (adr r2, 80119e0 <UART_SetConfig+0x90>)
 80119dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119e0:	080119f1 	.word	0x080119f1
 80119e4:	080119fd 	.word	0x080119fd
 80119e8:	080119f7 	.word	0x080119f7
 80119ec:	08011a03 	.word	0x08011a03
 80119f0:	2301      	movs	r3, #1
 80119f2:	77fb      	strb	r3, [r7, #31]
 80119f4:	e150      	b.n	8011c98 <UART_SetConfig+0x348>
 80119f6:	2302      	movs	r3, #2
 80119f8:	77fb      	strb	r3, [r7, #31]
 80119fa:	e14d      	b.n	8011c98 <UART_SetConfig+0x348>
 80119fc:	2304      	movs	r3, #4
 80119fe:	77fb      	strb	r3, [r7, #31]
 8011a00:	e14a      	b.n	8011c98 <UART_SetConfig+0x348>
 8011a02:	2308      	movs	r3, #8
 8011a04:	77fb      	strb	r3, [r7, #31]
 8011a06:	e147      	b.n	8011c98 <UART_SetConfig+0x348>
 8011a08:	2310      	movs	r3, #16
 8011a0a:	77fb      	strb	r3, [r7, #31]
 8011a0c:	e144      	b.n	8011c98 <UART_SetConfig+0x348>
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	4a83      	ldr	r2, [pc, #524]	; (8011c20 <UART_SetConfig+0x2d0>)
 8011a14:	4293      	cmp	r3, r2
 8011a16:	d132      	bne.n	8011a7e <UART_SetConfig+0x12e>
 8011a18:	4b80      	ldr	r3, [pc, #512]	; (8011c1c <UART_SetConfig+0x2cc>)
 8011a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a1e:	f003 030c 	and.w	r3, r3, #12
 8011a22:	2b0c      	cmp	r3, #12
 8011a24:	d828      	bhi.n	8011a78 <UART_SetConfig+0x128>
 8011a26:	a201      	add	r2, pc, #4	; (adr r2, 8011a2c <UART_SetConfig+0xdc>)
 8011a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a2c:	08011a61 	.word	0x08011a61
 8011a30:	08011a79 	.word	0x08011a79
 8011a34:	08011a79 	.word	0x08011a79
 8011a38:	08011a79 	.word	0x08011a79
 8011a3c:	08011a6d 	.word	0x08011a6d
 8011a40:	08011a79 	.word	0x08011a79
 8011a44:	08011a79 	.word	0x08011a79
 8011a48:	08011a79 	.word	0x08011a79
 8011a4c:	08011a67 	.word	0x08011a67
 8011a50:	08011a79 	.word	0x08011a79
 8011a54:	08011a79 	.word	0x08011a79
 8011a58:	08011a79 	.word	0x08011a79
 8011a5c:	08011a73 	.word	0x08011a73
 8011a60:	2300      	movs	r3, #0
 8011a62:	77fb      	strb	r3, [r7, #31]
 8011a64:	e118      	b.n	8011c98 <UART_SetConfig+0x348>
 8011a66:	2302      	movs	r3, #2
 8011a68:	77fb      	strb	r3, [r7, #31]
 8011a6a:	e115      	b.n	8011c98 <UART_SetConfig+0x348>
 8011a6c:	2304      	movs	r3, #4
 8011a6e:	77fb      	strb	r3, [r7, #31]
 8011a70:	e112      	b.n	8011c98 <UART_SetConfig+0x348>
 8011a72:	2308      	movs	r3, #8
 8011a74:	77fb      	strb	r3, [r7, #31]
 8011a76:	e10f      	b.n	8011c98 <UART_SetConfig+0x348>
 8011a78:	2310      	movs	r3, #16
 8011a7a:	77fb      	strb	r3, [r7, #31]
 8011a7c:	e10c      	b.n	8011c98 <UART_SetConfig+0x348>
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	4a68      	ldr	r2, [pc, #416]	; (8011c24 <UART_SetConfig+0x2d4>)
 8011a84:	4293      	cmp	r3, r2
 8011a86:	d120      	bne.n	8011aca <UART_SetConfig+0x17a>
 8011a88:	4b64      	ldr	r3, [pc, #400]	; (8011c1c <UART_SetConfig+0x2cc>)
 8011a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011a92:	2b30      	cmp	r3, #48	; 0x30
 8011a94:	d013      	beq.n	8011abe <UART_SetConfig+0x16e>
 8011a96:	2b30      	cmp	r3, #48	; 0x30
 8011a98:	d814      	bhi.n	8011ac4 <UART_SetConfig+0x174>
 8011a9a:	2b20      	cmp	r3, #32
 8011a9c:	d009      	beq.n	8011ab2 <UART_SetConfig+0x162>
 8011a9e:	2b20      	cmp	r3, #32
 8011aa0:	d810      	bhi.n	8011ac4 <UART_SetConfig+0x174>
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d002      	beq.n	8011aac <UART_SetConfig+0x15c>
 8011aa6:	2b10      	cmp	r3, #16
 8011aa8:	d006      	beq.n	8011ab8 <UART_SetConfig+0x168>
 8011aaa:	e00b      	b.n	8011ac4 <UART_SetConfig+0x174>
 8011aac:	2300      	movs	r3, #0
 8011aae:	77fb      	strb	r3, [r7, #31]
 8011ab0:	e0f2      	b.n	8011c98 <UART_SetConfig+0x348>
 8011ab2:	2302      	movs	r3, #2
 8011ab4:	77fb      	strb	r3, [r7, #31]
 8011ab6:	e0ef      	b.n	8011c98 <UART_SetConfig+0x348>
 8011ab8:	2304      	movs	r3, #4
 8011aba:	77fb      	strb	r3, [r7, #31]
 8011abc:	e0ec      	b.n	8011c98 <UART_SetConfig+0x348>
 8011abe:	2308      	movs	r3, #8
 8011ac0:	77fb      	strb	r3, [r7, #31]
 8011ac2:	e0e9      	b.n	8011c98 <UART_SetConfig+0x348>
 8011ac4:	2310      	movs	r3, #16
 8011ac6:	77fb      	strb	r3, [r7, #31]
 8011ac8:	e0e6      	b.n	8011c98 <UART_SetConfig+0x348>
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	4a56      	ldr	r2, [pc, #344]	; (8011c28 <UART_SetConfig+0x2d8>)
 8011ad0:	4293      	cmp	r3, r2
 8011ad2:	d120      	bne.n	8011b16 <UART_SetConfig+0x1c6>
 8011ad4:	4b51      	ldr	r3, [pc, #324]	; (8011c1c <UART_SetConfig+0x2cc>)
 8011ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ada:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011ade:	2bc0      	cmp	r3, #192	; 0xc0
 8011ae0:	d013      	beq.n	8011b0a <UART_SetConfig+0x1ba>
 8011ae2:	2bc0      	cmp	r3, #192	; 0xc0
 8011ae4:	d814      	bhi.n	8011b10 <UART_SetConfig+0x1c0>
 8011ae6:	2b80      	cmp	r3, #128	; 0x80
 8011ae8:	d009      	beq.n	8011afe <UART_SetConfig+0x1ae>
 8011aea:	2b80      	cmp	r3, #128	; 0x80
 8011aec:	d810      	bhi.n	8011b10 <UART_SetConfig+0x1c0>
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d002      	beq.n	8011af8 <UART_SetConfig+0x1a8>
 8011af2:	2b40      	cmp	r3, #64	; 0x40
 8011af4:	d006      	beq.n	8011b04 <UART_SetConfig+0x1b4>
 8011af6:	e00b      	b.n	8011b10 <UART_SetConfig+0x1c0>
 8011af8:	2300      	movs	r3, #0
 8011afa:	77fb      	strb	r3, [r7, #31]
 8011afc:	e0cc      	b.n	8011c98 <UART_SetConfig+0x348>
 8011afe:	2302      	movs	r3, #2
 8011b00:	77fb      	strb	r3, [r7, #31]
 8011b02:	e0c9      	b.n	8011c98 <UART_SetConfig+0x348>
 8011b04:	2304      	movs	r3, #4
 8011b06:	77fb      	strb	r3, [r7, #31]
 8011b08:	e0c6      	b.n	8011c98 <UART_SetConfig+0x348>
 8011b0a:	2308      	movs	r3, #8
 8011b0c:	77fb      	strb	r3, [r7, #31]
 8011b0e:	e0c3      	b.n	8011c98 <UART_SetConfig+0x348>
 8011b10:	2310      	movs	r3, #16
 8011b12:	77fb      	strb	r3, [r7, #31]
 8011b14:	e0c0      	b.n	8011c98 <UART_SetConfig+0x348>
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	4a44      	ldr	r2, [pc, #272]	; (8011c2c <UART_SetConfig+0x2dc>)
 8011b1c:	4293      	cmp	r3, r2
 8011b1e:	d125      	bne.n	8011b6c <UART_SetConfig+0x21c>
 8011b20:	4b3e      	ldr	r3, [pc, #248]	; (8011c1c <UART_SetConfig+0x2cc>)
 8011b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011b2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011b2e:	d017      	beq.n	8011b60 <UART_SetConfig+0x210>
 8011b30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011b34:	d817      	bhi.n	8011b66 <UART_SetConfig+0x216>
 8011b36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b3a:	d00b      	beq.n	8011b54 <UART_SetConfig+0x204>
 8011b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b40:	d811      	bhi.n	8011b66 <UART_SetConfig+0x216>
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d003      	beq.n	8011b4e <UART_SetConfig+0x1fe>
 8011b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011b4a:	d006      	beq.n	8011b5a <UART_SetConfig+0x20a>
 8011b4c:	e00b      	b.n	8011b66 <UART_SetConfig+0x216>
 8011b4e:	2300      	movs	r3, #0
 8011b50:	77fb      	strb	r3, [r7, #31]
 8011b52:	e0a1      	b.n	8011c98 <UART_SetConfig+0x348>
 8011b54:	2302      	movs	r3, #2
 8011b56:	77fb      	strb	r3, [r7, #31]
 8011b58:	e09e      	b.n	8011c98 <UART_SetConfig+0x348>
 8011b5a:	2304      	movs	r3, #4
 8011b5c:	77fb      	strb	r3, [r7, #31]
 8011b5e:	e09b      	b.n	8011c98 <UART_SetConfig+0x348>
 8011b60:	2308      	movs	r3, #8
 8011b62:	77fb      	strb	r3, [r7, #31]
 8011b64:	e098      	b.n	8011c98 <UART_SetConfig+0x348>
 8011b66:	2310      	movs	r3, #16
 8011b68:	77fb      	strb	r3, [r7, #31]
 8011b6a:	e095      	b.n	8011c98 <UART_SetConfig+0x348>
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	4a2f      	ldr	r2, [pc, #188]	; (8011c30 <UART_SetConfig+0x2e0>)
 8011b72:	4293      	cmp	r3, r2
 8011b74:	d125      	bne.n	8011bc2 <UART_SetConfig+0x272>
 8011b76:	4b29      	ldr	r3, [pc, #164]	; (8011c1c <UART_SetConfig+0x2cc>)
 8011b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8011b80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011b84:	d017      	beq.n	8011bb6 <UART_SetConfig+0x266>
 8011b86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011b8a:	d817      	bhi.n	8011bbc <UART_SetConfig+0x26c>
 8011b8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011b90:	d00b      	beq.n	8011baa <UART_SetConfig+0x25a>
 8011b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011b96:	d811      	bhi.n	8011bbc <UART_SetConfig+0x26c>
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d003      	beq.n	8011ba4 <UART_SetConfig+0x254>
 8011b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011ba0:	d006      	beq.n	8011bb0 <UART_SetConfig+0x260>
 8011ba2:	e00b      	b.n	8011bbc <UART_SetConfig+0x26c>
 8011ba4:	2301      	movs	r3, #1
 8011ba6:	77fb      	strb	r3, [r7, #31]
 8011ba8:	e076      	b.n	8011c98 <UART_SetConfig+0x348>
 8011baa:	2302      	movs	r3, #2
 8011bac:	77fb      	strb	r3, [r7, #31]
 8011bae:	e073      	b.n	8011c98 <UART_SetConfig+0x348>
 8011bb0:	2304      	movs	r3, #4
 8011bb2:	77fb      	strb	r3, [r7, #31]
 8011bb4:	e070      	b.n	8011c98 <UART_SetConfig+0x348>
 8011bb6:	2308      	movs	r3, #8
 8011bb8:	77fb      	strb	r3, [r7, #31]
 8011bba:	e06d      	b.n	8011c98 <UART_SetConfig+0x348>
 8011bbc:	2310      	movs	r3, #16
 8011bbe:	77fb      	strb	r3, [r7, #31]
 8011bc0:	e06a      	b.n	8011c98 <UART_SetConfig+0x348>
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	4a1b      	ldr	r2, [pc, #108]	; (8011c34 <UART_SetConfig+0x2e4>)
 8011bc8:	4293      	cmp	r3, r2
 8011bca:	d138      	bne.n	8011c3e <UART_SetConfig+0x2ee>
 8011bcc:	4b13      	ldr	r3, [pc, #76]	; (8011c1c <UART_SetConfig+0x2cc>)
 8011bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011bd2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8011bd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011bda:	d017      	beq.n	8011c0c <UART_SetConfig+0x2bc>
 8011bdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011be0:	d82a      	bhi.n	8011c38 <UART_SetConfig+0x2e8>
 8011be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011be6:	d00b      	beq.n	8011c00 <UART_SetConfig+0x2b0>
 8011be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011bec:	d824      	bhi.n	8011c38 <UART_SetConfig+0x2e8>
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d003      	beq.n	8011bfa <UART_SetConfig+0x2aa>
 8011bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011bf6:	d006      	beq.n	8011c06 <UART_SetConfig+0x2b6>
 8011bf8:	e01e      	b.n	8011c38 <UART_SetConfig+0x2e8>
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	77fb      	strb	r3, [r7, #31]
 8011bfe:	e04b      	b.n	8011c98 <UART_SetConfig+0x348>
 8011c00:	2302      	movs	r3, #2
 8011c02:	77fb      	strb	r3, [r7, #31]
 8011c04:	e048      	b.n	8011c98 <UART_SetConfig+0x348>
 8011c06:	2304      	movs	r3, #4
 8011c08:	77fb      	strb	r3, [r7, #31]
 8011c0a:	e045      	b.n	8011c98 <UART_SetConfig+0x348>
 8011c0c:	2308      	movs	r3, #8
 8011c0e:	77fb      	strb	r3, [r7, #31]
 8011c10:	e042      	b.n	8011c98 <UART_SetConfig+0x348>
 8011c12:	bf00      	nop
 8011c14:	efff69f3 	.word	0xefff69f3
 8011c18:	40011000 	.word	0x40011000
 8011c1c:	40023800 	.word	0x40023800
 8011c20:	40004400 	.word	0x40004400
 8011c24:	40004800 	.word	0x40004800
 8011c28:	40004c00 	.word	0x40004c00
 8011c2c:	40005000 	.word	0x40005000
 8011c30:	40011400 	.word	0x40011400
 8011c34:	40007800 	.word	0x40007800
 8011c38:	2310      	movs	r3, #16
 8011c3a:	77fb      	strb	r3, [r7, #31]
 8011c3c:	e02c      	b.n	8011c98 <UART_SetConfig+0x348>
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	4a72      	ldr	r2, [pc, #456]	; (8011e0c <UART_SetConfig+0x4bc>)
 8011c44:	4293      	cmp	r3, r2
 8011c46:	d125      	bne.n	8011c94 <UART_SetConfig+0x344>
 8011c48:	4b71      	ldr	r3, [pc, #452]	; (8011e10 <UART_SetConfig+0x4c0>)
 8011c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011c52:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8011c56:	d017      	beq.n	8011c88 <UART_SetConfig+0x338>
 8011c58:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8011c5c:	d817      	bhi.n	8011c8e <UART_SetConfig+0x33e>
 8011c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011c62:	d00b      	beq.n	8011c7c <UART_SetConfig+0x32c>
 8011c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011c68:	d811      	bhi.n	8011c8e <UART_SetConfig+0x33e>
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d003      	beq.n	8011c76 <UART_SetConfig+0x326>
 8011c6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011c72:	d006      	beq.n	8011c82 <UART_SetConfig+0x332>
 8011c74:	e00b      	b.n	8011c8e <UART_SetConfig+0x33e>
 8011c76:	2300      	movs	r3, #0
 8011c78:	77fb      	strb	r3, [r7, #31]
 8011c7a:	e00d      	b.n	8011c98 <UART_SetConfig+0x348>
 8011c7c:	2302      	movs	r3, #2
 8011c7e:	77fb      	strb	r3, [r7, #31]
 8011c80:	e00a      	b.n	8011c98 <UART_SetConfig+0x348>
 8011c82:	2304      	movs	r3, #4
 8011c84:	77fb      	strb	r3, [r7, #31]
 8011c86:	e007      	b.n	8011c98 <UART_SetConfig+0x348>
 8011c88:	2308      	movs	r3, #8
 8011c8a:	77fb      	strb	r3, [r7, #31]
 8011c8c:	e004      	b.n	8011c98 <UART_SetConfig+0x348>
 8011c8e:	2310      	movs	r3, #16
 8011c90:	77fb      	strb	r3, [r7, #31]
 8011c92:	e001      	b.n	8011c98 <UART_SetConfig+0x348>
 8011c94:	2310      	movs	r3, #16
 8011c96:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	69db      	ldr	r3, [r3, #28]
 8011c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011ca0:	d15b      	bne.n	8011d5a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8011ca2:	7ffb      	ldrb	r3, [r7, #31]
 8011ca4:	2b08      	cmp	r3, #8
 8011ca6:	d828      	bhi.n	8011cfa <UART_SetConfig+0x3aa>
 8011ca8:	a201      	add	r2, pc, #4	; (adr r2, 8011cb0 <UART_SetConfig+0x360>)
 8011caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cae:	bf00      	nop
 8011cb0:	08011cd5 	.word	0x08011cd5
 8011cb4:	08011cdd 	.word	0x08011cdd
 8011cb8:	08011ce5 	.word	0x08011ce5
 8011cbc:	08011cfb 	.word	0x08011cfb
 8011cc0:	08011ceb 	.word	0x08011ceb
 8011cc4:	08011cfb 	.word	0x08011cfb
 8011cc8:	08011cfb 	.word	0x08011cfb
 8011ccc:	08011cfb 	.word	0x08011cfb
 8011cd0:	08011cf3 	.word	0x08011cf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011cd4:	f7fb fd90 	bl	800d7f8 <HAL_RCC_GetPCLK1Freq>
 8011cd8:	61b8      	str	r0, [r7, #24]
        break;
 8011cda:	e013      	b.n	8011d04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011cdc:	f7fb fda0 	bl	800d820 <HAL_RCC_GetPCLK2Freq>
 8011ce0:	61b8      	str	r0, [r7, #24]
        break;
 8011ce2:	e00f      	b.n	8011d04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011ce4:	4b4b      	ldr	r3, [pc, #300]	; (8011e14 <UART_SetConfig+0x4c4>)
 8011ce6:	61bb      	str	r3, [r7, #24]
        break;
 8011ce8:	e00c      	b.n	8011d04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011cea:	f7fb fcb3 	bl	800d654 <HAL_RCC_GetSysClockFreq>
 8011cee:	61b8      	str	r0, [r7, #24]
        break;
 8011cf0:	e008      	b.n	8011d04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011cf6:	61bb      	str	r3, [r7, #24]
        break;
 8011cf8:	e004      	b.n	8011d04 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8011cfe:	2301      	movs	r3, #1
 8011d00:	77bb      	strb	r3, [r7, #30]
        break;
 8011d02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011d04:	69bb      	ldr	r3, [r7, #24]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d074      	beq.n	8011df4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8011d0a:	69bb      	ldr	r3, [r7, #24]
 8011d0c:	005a      	lsls	r2, r3, #1
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	685b      	ldr	r3, [r3, #4]
 8011d12:	085b      	lsrs	r3, r3, #1
 8011d14:	441a      	add	r2, r3
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	685b      	ldr	r3, [r3, #4]
 8011d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011d20:	693b      	ldr	r3, [r7, #16]
 8011d22:	2b0f      	cmp	r3, #15
 8011d24:	d916      	bls.n	8011d54 <UART_SetConfig+0x404>
 8011d26:	693b      	ldr	r3, [r7, #16]
 8011d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d2c:	d212      	bcs.n	8011d54 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011d2e:	693b      	ldr	r3, [r7, #16]
 8011d30:	b29b      	uxth	r3, r3
 8011d32:	f023 030f 	bic.w	r3, r3, #15
 8011d36:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011d38:	693b      	ldr	r3, [r7, #16]
 8011d3a:	085b      	lsrs	r3, r3, #1
 8011d3c:	b29b      	uxth	r3, r3
 8011d3e:	f003 0307 	and.w	r3, r3, #7
 8011d42:	b29a      	uxth	r2, r3
 8011d44:	89fb      	ldrh	r3, [r7, #14]
 8011d46:	4313      	orrs	r3, r2
 8011d48:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	89fa      	ldrh	r2, [r7, #14]
 8011d50:	60da      	str	r2, [r3, #12]
 8011d52:	e04f      	b.n	8011df4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8011d54:	2301      	movs	r3, #1
 8011d56:	77bb      	strb	r3, [r7, #30]
 8011d58:	e04c      	b.n	8011df4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011d5a:	7ffb      	ldrb	r3, [r7, #31]
 8011d5c:	2b08      	cmp	r3, #8
 8011d5e:	d828      	bhi.n	8011db2 <UART_SetConfig+0x462>
 8011d60:	a201      	add	r2, pc, #4	; (adr r2, 8011d68 <UART_SetConfig+0x418>)
 8011d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d66:	bf00      	nop
 8011d68:	08011d8d 	.word	0x08011d8d
 8011d6c:	08011d95 	.word	0x08011d95
 8011d70:	08011d9d 	.word	0x08011d9d
 8011d74:	08011db3 	.word	0x08011db3
 8011d78:	08011da3 	.word	0x08011da3
 8011d7c:	08011db3 	.word	0x08011db3
 8011d80:	08011db3 	.word	0x08011db3
 8011d84:	08011db3 	.word	0x08011db3
 8011d88:	08011dab 	.word	0x08011dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011d8c:	f7fb fd34 	bl	800d7f8 <HAL_RCC_GetPCLK1Freq>
 8011d90:	61b8      	str	r0, [r7, #24]
        break;
 8011d92:	e013      	b.n	8011dbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011d94:	f7fb fd44 	bl	800d820 <HAL_RCC_GetPCLK2Freq>
 8011d98:	61b8      	str	r0, [r7, #24]
        break;
 8011d9a:	e00f      	b.n	8011dbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011d9c:	4b1d      	ldr	r3, [pc, #116]	; (8011e14 <UART_SetConfig+0x4c4>)
 8011d9e:	61bb      	str	r3, [r7, #24]
        break;
 8011da0:	e00c      	b.n	8011dbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011da2:	f7fb fc57 	bl	800d654 <HAL_RCC_GetSysClockFreq>
 8011da6:	61b8      	str	r0, [r7, #24]
        break;
 8011da8:	e008      	b.n	8011dbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011dae:	61bb      	str	r3, [r7, #24]
        break;
 8011db0:	e004      	b.n	8011dbc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8011db2:	2300      	movs	r3, #0
 8011db4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8011db6:	2301      	movs	r3, #1
 8011db8:	77bb      	strb	r3, [r7, #30]
        break;
 8011dba:	bf00      	nop
    }

    if (pclk != 0U)
 8011dbc:	69bb      	ldr	r3, [r7, #24]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d018      	beq.n	8011df4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	685b      	ldr	r3, [r3, #4]
 8011dc6:	085a      	lsrs	r2, r3, #1
 8011dc8:	69bb      	ldr	r3, [r7, #24]
 8011dca:	441a      	add	r2, r3
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	685b      	ldr	r3, [r3, #4]
 8011dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8011dd4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011dd6:	693b      	ldr	r3, [r7, #16]
 8011dd8:	2b0f      	cmp	r3, #15
 8011dda:	d909      	bls.n	8011df0 <UART_SetConfig+0x4a0>
 8011ddc:	693b      	ldr	r3, [r7, #16]
 8011dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011de2:	d205      	bcs.n	8011df0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011de4:	693b      	ldr	r3, [r7, #16]
 8011de6:	b29a      	uxth	r2, r3
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	60da      	str	r2, [r3, #12]
 8011dee:	e001      	b.n	8011df4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8011df0:	2301      	movs	r3, #1
 8011df2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2200      	movs	r2, #0
 8011df8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8011e00:	7fbb      	ldrb	r3, [r7, #30]
}
 8011e02:	4618      	mov	r0, r3
 8011e04:	3720      	adds	r7, #32
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}
 8011e0a:	bf00      	nop
 8011e0c:	40007c00 	.word	0x40007c00
 8011e10:	40023800 	.word	0x40023800
 8011e14:	00f42400 	.word	0x00f42400

08011e18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011e18:	b480      	push	{r7}
 8011e1a:	b083      	sub	sp, #12
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e24:	f003 0301 	and.w	r3, r3, #1
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d00a      	beq.n	8011e42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	685b      	ldr	r3, [r3, #4]
 8011e32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	430a      	orrs	r2, r1
 8011e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e46:	f003 0302 	and.w	r3, r3, #2
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d00a      	beq.n	8011e64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	685b      	ldr	r3, [r3, #4]
 8011e54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	430a      	orrs	r2, r1
 8011e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e68:	f003 0304 	and.w	r3, r3, #4
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d00a      	beq.n	8011e86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	685b      	ldr	r3, [r3, #4]
 8011e76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	430a      	orrs	r2, r1
 8011e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e8a:	f003 0308 	and.w	r3, r3, #8
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d00a      	beq.n	8011ea8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	685b      	ldr	r3, [r3, #4]
 8011e98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	430a      	orrs	r2, r1
 8011ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eac:	f003 0310 	and.w	r3, r3, #16
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d00a      	beq.n	8011eca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	689b      	ldr	r3, [r3, #8]
 8011eba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	430a      	orrs	r2, r1
 8011ec8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ece:	f003 0320 	and.w	r3, r3, #32
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d00a      	beq.n	8011eec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	689b      	ldr	r3, [r3, #8]
 8011edc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	430a      	orrs	r2, r1
 8011eea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d01a      	beq.n	8011f2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	685b      	ldr	r3, [r3, #4]
 8011efe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	430a      	orrs	r2, r1
 8011f0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011f16:	d10a      	bne.n	8011f2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	685b      	ldr	r3, [r3, #4]
 8011f1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	430a      	orrs	r2, r1
 8011f2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d00a      	beq.n	8011f50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	685b      	ldr	r3, [r3, #4]
 8011f40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	430a      	orrs	r2, r1
 8011f4e:	605a      	str	r2, [r3, #4]
  }
}
 8011f50:	bf00      	nop
 8011f52:	370c      	adds	r7, #12
 8011f54:	46bd      	mov	sp, r7
 8011f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5a:	4770      	bx	lr

08011f5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b086      	sub	sp, #24
 8011f60:	af02      	add	r7, sp, #8
 8011f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	2200      	movs	r2, #0
 8011f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011f6c:	f7f3 fdd0 	bl	8005b10 <HAL_GetTick>
 8011f70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	f003 0308 	and.w	r3, r3, #8
 8011f7c:	2b08      	cmp	r3, #8
 8011f7e:	d10e      	bne.n	8011f9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011f80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011f84:	9300      	str	r3, [sp, #0]
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	2200      	movs	r2, #0
 8011f8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011f8e:	6878      	ldr	r0, [r7, #4]
 8011f90:	f000 f81b 	bl	8011fca <UART_WaitOnFlagUntilTimeout>
 8011f94:	4603      	mov	r3, r0
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d001      	beq.n	8011f9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011f9a:	2303      	movs	r3, #3
 8011f9c:	e011      	b.n	8011fc2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	2220      	movs	r2, #32
 8011fa2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	2220      	movs	r2, #32
 8011fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2200      	movs	r2, #0
 8011fb0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	2200      	movs	r2, #0
 8011fbc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8011fc0:	2300      	movs	r3, #0
}
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	3710      	adds	r7, #16
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}

08011fca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011fca:	b580      	push	{r7, lr}
 8011fcc:	b09c      	sub	sp, #112	; 0x70
 8011fce:	af00      	add	r7, sp, #0
 8011fd0:	60f8      	str	r0, [r7, #12]
 8011fd2:	60b9      	str	r1, [r7, #8]
 8011fd4:	603b      	str	r3, [r7, #0]
 8011fd6:	4613      	mov	r3, r2
 8011fd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011fda:	e0a7      	b.n	801212c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011fdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011fe2:	f000 80a3 	beq.w	801212c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011fe6:	f7f3 fd93 	bl	8005b10 <HAL_GetTick>
 8011fea:	4602      	mov	r2, r0
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	1ad3      	subs	r3, r2, r3
 8011ff0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011ff2:	429a      	cmp	r2, r3
 8011ff4:	d302      	bcc.n	8011ffc <UART_WaitOnFlagUntilTimeout+0x32>
 8011ff6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d13f      	bne.n	801207c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012004:	e853 3f00 	ldrex	r3, [r3]
 8012008:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801200a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801200c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8012010:	667b      	str	r3, [r7, #100]	; 0x64
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	461a      	mov	r2, r3
 8012018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801201a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801201c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801201e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012020:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012022:	e841 2300 	strex	r3, r2, [r1]
 8012026:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8012028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801202a:	2b00      	cmp	r3, #0
 801202c:	d1e6      	bne.n	8011ffc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	3308      	adds	r3, #8
 8012034:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012038:	e853 3f00 	ldrex	r3, [r3]
 801203c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801203e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012040:	f023 0301 	bic.w	r3, r3, #1
 8012044:	663b      	str	r3, [r7, #96]	; 0x60
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	3308      	adds	r3, #8
 801204c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801204e:	64ba      	str	r2, [r7, #72]	; 0x48
 8012050:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012052:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012054:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012056:	e841 2300 	strex	r3, r2, [r1]
 801205a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801205c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801205e:	2b00      	cmp	r3, #0
 8012060:	d1e5      	bne.n	801202e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	2220      	movs	r2, #32
 8012066:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	2220      	movs	r2, #32
 801206c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	2200      	movs	r2, #0
 8012074:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8012078:	2303      	movs	r3, #3
 801207a:	e068      	b.n	801214e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	f003 0304 	and.w	r3, r3, #4
 8012086:	2b00      	cmp	r3, #0
 8012088:	d050      	beq.n	801212c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	69db      	ldr	r3, [r3, #28]
 8012090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012094:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012098:	d148      	bne.n	801212c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80120a2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ac:	e853 3f00 	ldrex	r3, [r3]
 80120b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80120b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80120b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	461a      	mov	r2, r3
 80120c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80120c2:	637b      	str	r3, [r7, #52]	; 0x34
 80120c4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80120c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80120ca:	e841 2300 	strex	r3, r2, [r1]
 80120ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80120d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d1e6      	bne.n	80120a4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	3308      	adds	r3, #8
 80120dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120de:	697b      	ldr	r3, [r7, #20]
 80120e0:	e853 3f00 	ldrex	r3, [r3]
 80120e4:	613b      	str	r3, [r7, #16]
   return(result);
 80120e6:	693b      	ldr	r3, [r7, #16]
 80120e8:	f023 0301 	bic.w	r3, r3, #1
 80120ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	3308      	adds	r3, #8
 80120f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80120f6:	623a      	str	r2, [r7, #32]
 80120f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120fa:	69f9      	ldr	r1, [r7, #28]
 80120fc:	6a3a      	ldr	r2, [r7, #32]
 80120fe:	e841 2300 	strex	r3, r2, [r1]
 8012102:	61bb      	str	r3, [r7, #24]
   return(result);
 8012104:	69bb      	ldr	r3, [r7, #24]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d1e5      	bne.n	80120d6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	2220      	movs	r2, #32
 801210e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	2220      	movs	r2, #32
 8012114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	2220      	movs	r2, #32
 801211c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	2200      	movs	r2, #0
 8012124:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8012128:	2303      	movs	r3, #3
 801212a:	e010      	b.n	801214e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	69da      	ldr	r2, [r3, #28]
 8012132:	68bb      	ldr	r3, [r7, #8]
 8012134:	4013      	ands	r3, r2
 8012136:	68ba      	ldr	r2, [r7, #8]
 8012138:	429a      	cmp	r2, r3
 801213a:	bf0c      	ite	eq
 801213c:	2301      	moveq	r3, #1
 801213e:	2300      	movne	r3, #0
 8012140:	b2db      	uxtb	r3, r3
 8012142:	461a      	mov	r2, r3
 8012144:	79fb      	ldrb	r3, [r7, #7]
 8012146:	429a      	cmp	r2, r3
 8012148:	f43f af48 	beq.w	8011fdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801214c:	2300      	movs	r3, #0
}
 801214e:	4618      	mov	r0, r3
 8012150:	3770      	adds	r7, #112	; 0x70
 8012152:	46bd      	mov	sp, r7
 8012154:	bd80      	pop	{r7, pc}
	...

08012158 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8012158:	b480      	push	{r7}
 801215a:	b083      	sub	sp, #12
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
 8012160:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d121      	bne.n	80121ae <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	681a      	ldr	r2, [r3, #0]
 801216e:	4b27      	ldr	r3, [pc, #156]	; (801220c <FMC_SDRAM_Init+0xb4>)
 8012170:	4013      	ands	r3, r2
 8012172:	683a      	ldr	r2, [r7, #0]
 8012174:	6851      	ldr	r1, [r2, #4]
 8012176:	683a      	ldr	r2, [r7, #0]
 8012178:	6892      	ldr	r2, [r2, #8]
 801217a:	4311      	orrs	r1, r2
 801217c:	683a      	ldr	r2, [r7, #0]
 801217e:	68d2      	ldr	r2, [r2, #12]
 8012180:	4311      	orrs	r1, r2
 8012182:	683a      	ldr	r2, [r7, #0]
 8012184:	6912      	ldr	r2, [r2, #16]
 8012186:	4311      	orrs	r1, r2
 8012188:	683a      	ldr	r2, [r7, #0]
 801218a:	6952      	ldr	r2, [r2, #20]
 801218c:	4311      	orrs	r1, r2
 801218e:	683a      	ldr	r2, [r7, #0]
 8012190:	6992      	ldr	r2, [r2, #24]
 8012192:	4311      	orrs	r1, r2
 8012194:	683a      	ldr	r2, [r7, #0]
 8012196:	69d2      	ldr	r2, [r2, #28]
 8012198:	4311      	orrs	r1, r2
 801219a:	683a      	ldr	r2, [r7, #0]
 801219c:	6a12      	ldr	r2, [r2, #32]
 801219e:	4311      	orrs	r1, r2
 80121a0:	683a      	ldr	r2, [r7, #0]
 80121a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80121a4:	430a      	orrs	r2, r1
 80121a6:	431a      	orrs	r2, r3
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	601a      	str	r2, [r3, #0]
 80121ac:	e026      	b.n	80121fc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	69d9      	ldr	r1, [r3, #28]
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	6a1b      	ldr	r3, [r3, #32]
 80121be:	4319      	orrs	r1, r3
 80121c0:	683b      	ldr	r3, [r7, #0]
 80121c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121c4:	430b      	orrs	r3, r1
 80121c6:	431a      	orrs	r2, r3
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	685a      	ldr	r2, [r3, #4]
 80121d0:	4b0e      	ldr	r3, [pc, #56]	; (801220c <FMC_SDRAM_Init+0xb4>)
 80121d2:	4013      	ands	r3, r2
 80121d4:	683a      	ldr	r2, [r7, #0]
 80121d6:	6851      	ldr	r1, [r2, #4]
 80121d8:	683a      	ldr	r2, [r7, #0]
 80121da:	6892      	ldr	r2, [r2, #8]
 80121dc:	4311      	orrs	r1, r2
 80121de:	683a      	ldr	r2, [r7, #0]
 80121e0:	68d2      	ldr	r2, [r2, #12]
 80121e2:	4311      	orrs	r1, r2
 80121e4:	683a      	ldr	r2, [r7, #0]
 80121e6:	6912      	ldr	r2, [r2, #16]
 80121e8:	4311      	orrs	r1, r2
 80121ea:	683a      	ldr	r2, [r7, #0]
 80121ec:	6952      	ldr	r2, [r2, #20]
 80121ee:	4311      	orrs	r1, r2
 80121f0:	683a      	ldr	r2, [r7, #0]
 80121f2:	6992      	ldr	r2, [r2, #24]
 80121f4:	430a      	orrs	r2, r1
 80121f6:	431a      	orrs	r2, r3
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80121fc:	2300      	movs	r3, #0
}
 80121fe:	4618      	mov	r0, r3
 8012200:	370c      	adds	r7, #12
 8012202:	46bd      	mov	sp, r7
 8012204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012208:	4770      	bx	lr
 801220a:	bf00      	nop
 801220c:	ffff8000 	.word	0xffff8000

08012210 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8012210:	b480      	push	{r7}
 8012212:	b085      	sub	sp, #20
 8012214:	af00      	add	r7, sp, #0
 8012216:	60f8      	str	r0, [r7, #12]
 8012218:	60b9      	str	r1, [r7, #8]
 801221a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d128      	bne.n	8012274 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	689b      	ldr	r3, [r3, #8]
 8012226:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 801222a:	68bb      	ldr	r3, [r7, #8]
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	1e59      	subs	r1, r3, #1
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	685b      	ldr	r3, [r3, #4]
 8012234:	3b01      	subs	r3, #1
 8012236:	011b      	lsls	r3, r3, #4
 8012238:	4319      	orrs	r1, r3
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	689b      	ldr	r3, [r3, #8]
 801223e:	3b01      	subs	r3, #1
 8012240:	021b      	lsls	r3, r3, #8
 8012242:	4319      	orrs	r1, r3
 8012244:	68bb      	ldr	r3, [r7, #8]
 8012246:	68db      	ldr	r3, [r3, #12]
 8012248:	3b01      	subs	r3, #1
 801224a:	031b      	lsls	r3, r3, #12
 801224c:	4319      	orrs	r1, r3
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	691b      	ldr	r3, [r3, #16]
 8012252:	3b01      	subs	r3, #1
 8012254:	041b      	lsls	r3, r3, #16
 8012256:	4319      	orrs	r1, r3
 8012258:	68bb      	ldr	r3, [r7, #8]
 801225a:	695b      	ldr	r3, [r3, #20]
 801225c:	3b01      	subs	r3, #1
 801225e:	051b      	lsls	r3, r3, #20
 8012260:	4319      	orrs	r1, r3
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	699b      	ldr	r3, [r3, #24]
 8012266:	3b01      	subs	r3, #1
 8012268:	061b      	lsls	r3, r3, #24
 801226a:	430b      	orrs	r3, r1
 801226c:	431a      	orrs	r2, r3
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	609a      	str	r2, [r3, #8]
 8012272:	e02d      	b.n	80122d0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	689a      	ldr	r2, [r3, #8]
 8012278:	4b19      	ldr	r3, [pc, #100]	; (80122e0 <FMC_SDRAM_Timing_Init+0xd0>)
 801227a:	4013      	ands	r3, r2
 801227c:	68ba      	ldr	r2, [r7, #8]
 801227e:	68d2      	ldr	r2, [r2, #12]
 8012280:	3a01      	subs	r2, #1
 8012282:	0311      	lsls	r1, r2, #12
 8012284:	68ba      	ldr	r2, [r7, #8]
 8012286:	6952      	ldr	r2, [r2, #20]
 8012288:	3a01      	subs	r2, #1
 801228a:	0512      	lsls	r2, r2, #20
 801228c:	430a      	orrs	r2, r1
 801228e:	431a      	orrs	r2, r3
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	68db      	ldr	r3, [r3, #12]
 8012298:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 801229c:	68bb      	ldr	r3, [r7, #8]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	1e59      	subs	r1, r3, #1
 80122a2:	68bb      	ldr	r3, [r7, #8]
 80122a4:	685b      	ldr	r3, [r3, #4]
 80122a6:	3b01      	subs	r3, #1
 80122a8:	011b      	lsls	r3, r3, #4
 80122aa:	4319      	orrs	r1, r3
 80122ac:	68bb      	ldr	r3, [r7, #8]
 80122ae:	689b      	ldr	r3, [r3, #8]
 80122b0:	3b01      	subs	r3, #1
 80122b2:	021b      	lsls	r3, r3, #8
 80122b4:	4319      	orrs	r1, r3
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	691b      	ldr	r3, [r3, #16]
 80122ba:	3b01      	subs	r3, #1
 80122bc:	041b      	lsls	r3, r3, #16
 80122be:	4319      	orrs	r1, r3
 80122c0:	68bb      	ldr	r3, [r7, #8]
 80122c2:	699b      	ldr	r3, [r3, #24]
 80122c4:	3b01      	subs	r3, #1
 80122c6:	061b      	lsls	r3, r3, #24
 80122c8:	430b      	orrs	r3, r1
 80122ca:	431a      	orrs	r2, r3
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80122d0:	2300      	movs	r3, #0
}
 80122d2:	4618      	mov	r0, r3
 80122d4:	3714      	adds	r7, #20
 80122d6:	46bd      	mov	sp, r7
 80122d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122dc:	4770      	bx	lr
 80122de:	bf00      	nop
 80122e0:	ff0f0fff 	.word	0xff0f0fff

080122e4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80122e4:	b480      	push	{r7}
 80122e6:	b085      	sub	sp, #20
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	60f8      	str	r0, [r7, #12]
 80122ec:	60b9      	str	r1, [r7, #8]
 80122ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	691a      	ldr	r2, [r3, #16]
 80122f4:	4b0c      	ldr	r3, [pc, #48]	; (8012328 <FMC_SDRAM_SendCommand+0x44>)
 80122f6:	4013      	ands	r3, r2
 80122f8:	68ba      	ldr	r2, [r7, #8]
 80122fa:	6811      	ldr	r1, [r2, #0]
 80122fc:	68ba      	ldr	r2, [r7, #8]
 80122fe:	6852      	ldr	r2, [r2, #4]
 8012300:	4311      	orrs	r1, r2
 8012302:	68ba      	ldr	r2, [r7, #8]
 8012304:	6892      	ldr	r2, [r2, #8]
 8012306:	3a01      	subs	r2, #1
 8012308:	0152      	lsls	r2, r2, #5
 801230a:	4311      	orrs	r1, r2
 801230c:	68ba      	ldr	r2, [r7, #8]
 801230e:	68d2      	ldr	r2, [r2, #12]
 8012310:	0252      	lsls	r2, r2, #9
 8012312:	430a      	orrs	r2, r1
 8012314:	431a      	orrs	r2, r3
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 801231a:	2300      	movs	r3, #0
}
 801231c:	4618      	mov	r0, r3
 801231e:	3714      	adds	r7, #20
 8012320:	46bd      	mov	sp, r7
 8012322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012326:	4770      	bx	lr
 8012328:	ffc00000 	.word	0xffc00000

0801232c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 801232c:	b480      	push	{r7}
 801232e:	b083      	sub	sp, #12
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
 8012334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	695a      	ldr	r2, [r3, #20]
 801233a:	4b07      	ldr	r3, [pc, #28]	; (8012358 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 801233c:	4013      	ands	r3, r2
 801233e:	683a      	ldr	r2, [r7, #0]
 8012340:	0052      	lsls	r2, r2, #1
 8012342:	431a      	orrs	r2, r3
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8012348:	2300      	movs	r3, #0
}
 801234a:	4618      	mov	r0, r3
 801234c:	370c      	adds	r7, #12
 801234e:	46bd      	mov	sp, r7
 8012350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012354:	4770      	bx	lr
 8012356:	bf00      	nop
 8012358:	ffffc001 	.word	0xffffc001

0801235c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801235c:	b084      	sub	sp, #16
 801235e:	b480      	push	{r7}
 8012360:	b085      	sub	sp, #20
 8012362:	af00      	add	r7, sp, #0
 8012364:	6078      	str	r0, [r7, #4]
 8012366:	f107 001c 	add.w	r0, r7, #28
 801236a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801236e:	2300      	movs	r3, #0
 8012370:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8012372:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8012374:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8012376:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8012378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 801237a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 801237c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 801237e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8012380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8012382:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8012386:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8012388:	68fa      	ldr	r2, [r7, #12]
 801238a:	4313      	orrs	r3, r2
 801238c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	685a      	ldr	r2, [r3, #4]
 8012392:	4b07      	ldr	r3, [pc, #28]	; (80123b0 <SDMMC_Init+0x54>)
 8012394:	4013      	ands	r3, r2
 8012396:	68fa      	ldr	r2, [r7, #12]
 8012398:	431a      	orrs	r2, r3
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801239e:	2300      	movs	r3, #0
}
 80123a0:	4618      	mov	r0, r3
 80123a2:	3714      	adds	r7, #20
 80123a4:	46bd      	mov	sp, r7
 80123a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123aa:	b004      	add	sp, #16
 80123ac:	4770      	bx	lr
 80123ae:	bf00      	nop
 80123b0:	ffff8100 	.word	0xffff8100

080123b4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80123b4:	b480      	push	{r7}
 80123b6:	b083      	sub	sp, #12
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80123c2:	4618      	mov	r0, r3
 80123c4:	370c      	adds	r7, #12
 80123c6:	46bd      	mov	sp, r7
 80123c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123cc:	4770      	bx	lr

080123ce <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80123ce:	b480      	push	{r7}
 80123d0:	b083      	sub	sp, #12
 80123d2:	af00      	add	r7, sp, #0
 80123d4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	2203      	movs	r2, #3
 80123da:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80123dc:	2300      	movs	r3, #0
}
 80123de:	4618      	mov	r0, r3
 80123e0:	370c      	adds	r7, #12
 80123e2:	46bd      	mov	sp, r7
 80123e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e8:	4770      	bx	lr

080123ea <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80123ea:	b480      	push	{r7}
 80123ec:	b083      	sub	sp, #12
 80123ee:	af00      	add	r7, sp, #0
 80123f0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	f003 0303 	and.w	r3, r3, #3
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	370c      	adds	r7, #12
 80123fe:	46bd      	mov	sp, r7
 8012400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012404:	4770      	bx	lr
	...

08012408 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012408:	b480      	push	{r7}
 801240a:	b085      	sub	sp, #20
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
 8012410:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012412:	2300      	movs	r3, #0
 8012414:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	681a      	ldr	r2, [r3, #0]
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8012422:	683b      	ldr	r3, [r7, #0]
 8012424:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012426:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 801242c:	431a      	orrs	r2, r3
                       Command->CPSM);
 801242e:	683b      	ldr	r3, [r7, #0]
 8012430:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8012432:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012434:	68fa      	ldr	r2, [r7, #12]
 8012436:	4313      	orrs	r3, r2
 8012438:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	68da      	ldr	r2, [r3, #12]
 801243e:	4b06      	ldr	r3, [pc, #24]	; (8012458 <SDMMC_SendCommand+0x50>)
 8012440:	4013      	ands	r3, r2
 8012442:	68fa      	ldr	r2, [r7, #12]
 8012444:	431a      	orrs	r2, r3
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 801244a:	2300      	movs	r3, #0
}
 801244c:	4618      	mov	r0, r3
 801244e:	3714      	adds	r7, #20
 8012450:	46bd      	mov	sp, r7
 8012452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012456:	4770      	bx	lr
 8012458:	fffff000 	.word	0xfffff000

0801245c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801245c:	b480      	push	{r7}
 801245e:	b083      	sub	sp, #12
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	691b      	ldr	r3, [r3, #16]
 8012468:	b2db      	uxtb	r3, r3
}
 801246a:	4618      	mov	r0, r3
 801246c:	370c      	adds	r7, #12
 801246e:	46bd      	mov	sp, r7
 8012470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012474:	4770      	bx	lr

08012476 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012476:	b480      	push	{r7}
 8012478:	b085      	sub	sp, #20
 801247a:	af00      	add	r7, sp, #0
 801247c:	6078      	str	r0, [r7, #4]
 801247e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	3314      	adds	r3, #20
 8012484:	461a      	mov	r2, r3
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	4413      	add	r3, r2
 801248a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	681b      	ldr	r3, [r3, #0]
}  
 8012490:	4618      	mov	r0, r3
 8012492:	3714      	adds	r7, #20
 8012494:	46bd      	mov	sp, r7
 8012496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249a:	4770      	bx	lr

0801249c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 801249c:	b480      	push	{r7}
 801249e:	b085      	sub	sp, #20
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
 80124a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80124a6:	2300      	movs	r3, #0
 80124a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	681a      	ldr	r2, [r3, #0]
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80124b2:	683b      	ldr	r3, [r7, #0]
 80124b4:	685a      	ldr	r2, [r3, #4]
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80124be:	683b      	ldr	r3, [r7, #0]
 80124c0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80124c2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80124c4:	683b      	ldr	r3, [r7, #0]
 80124c6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80124c8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80124ca:	683b      	ldr	r3, [r7, #0]
 80124cc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80124ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80124d0:	68fa      	ldr	r2, [r7, #12]
 80124d2:	4313      	orrs	r3, r2
 80124d4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124da:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	431a      	orrs	r2, r3
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80124e6:	2300      	movs	r3, #0

}
 80124e8:	4618      	mov	r0, r3
 80124ea:	3714      	adds	r7, #20
 80124ec:	46bd      	mov	sp, r7
 80124ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f2:	4770      	bx	lr

080124f4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b088      	sub	sp, #32
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
 80124fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80124fe:	683b      	ldr	r3, [r7, #0]
 8012500:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012502:	2310      	movs	r3, #16
 8012504:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012506:	2340      	movs	r3, #64	; 0x40
 8012508:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801250a:	2300      	movs	r3, #0
 801250c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801250e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012512:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012514:	f107 0308 	add.w	r3, r7, #8
 8012518:	4619      	mov	r1, r3
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f7ff ff74 	bl	8012408 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012520:	f241 3288 	movw	r2, #5000	; 0x1388
 8012524:	2110      	movs	r1, #16
 8012526:	6878      	ldr	r0, [r7, #4]
 8012528:	f000 fa1a 	bl	8012960 <SDMMC_GetCmdResp1>
 801252c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801252e:	69fb      	ldr	r3, [r7, #28]
}
 8012530:	4618      	mov	r0, r3
 8012532:	3720      	adds	r7, #32
 8012534:	46bd      	mov	sp, r7
 8012536:	bd80      	pop	{r7, pc}

08012538 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b088      	sub	sp, #32
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
 8012540:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012546:	2311      	movs	r3, #17
 8012548:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801254a:	2340      	movs	r3, #64	; 0x40
 801254c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801254e:	2300      	movs	r3, #0
 8012550:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012556:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012558:	f107 0308 	add.w	r3, r7, #8
 801255c:	4619      	mov	r1, r3
 801255e:	6878      	ldr	r0, [r7, #4]
 8012560:	f7ff ff52 	bl	8012408 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012564:	f241 3288 	movw	r2, #5000	; 0x1388
 8012568:	2111      	movs	r1, #17
 801256a:	6878      	ldr	r0, [r7, #4]
 801256c:	f000 f9f8 	bl	8012960 <SDMMC_GetCmdResp1>
 8012570:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012572:	69fb      	ldr	r3, [r7, #28]
}
 8012574:	4618      	mov	r0, r3
 8012576:	3720      	adds	r7, #32
 8012578:	46bd      	mov	sp, r7
 801257a:	bd80      	pop	{r7, pc}

0801257c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801257c:	b580      	push	{r7, lr}
 801257e:	b088      	sub	sp, #32
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
 8012584:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012586:	683b      	ldr	r3, [r7, #0]
 8012588:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801258a:	2312      	movs	r3, #18
 801258c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801258e:	2340      	movs	r3, #64	; 0x40
 8012590:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012592:	2300      	movs	r3, #0
 8012594:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801259a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801259c:	f107 0308 	add.w	r3, r7, #8
 80125a0:	4619      	mov	r1, r3
 80125a2:	6878      	ldr	r0, [r7, #4]
 80125a4:	f7ff ff30 	bl	8012408 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80125a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80125ac:	2112      	movs	r1, #18
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f000 f9d6 	bl	8012960 <SDMMC_GetCmdResp1>
 80125b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125b6:	69fb      	ldr	r3, [r7, #28]
}
 80125b8:	4618      	mov	r0, r3
 80125ba:	3720      	adds	r7, #32
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}

080125c0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b088      	sub	sp, #32
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
 80125c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80125ca:	683b      	ldr	r3, [r7, #0]
 80125cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80125ce:	2318      	movs	r3, #24
 80125d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80125d2:	2340      	movs	r3, #64	; 0x40
 80125d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80125d6:	2300      	movs	r3, #0
 80125d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80125da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80125e0:	f107 0308 	add.w	r3, r7, #8
 80125e4:	4619      	mov	r1, r3
 80125e6:	6878      	ldr	r0, [r7, #4]
 80125e8:	f7ff ff0e 	bl	8012408 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80125ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80125f0:	2118      	movs	r1, #24
 80125f2:	6878      	ldr	r0, [r7, #4]
 80125f4:	f000 f9b4 	bl	8012960 <SDMMC_GetCmdResp1>
 80125f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125fa:	69fb      	ldr	r3, [r7, #28]
}
 80125fc:	4618      	mov	r0, r3
 80125fe:	3720      	adds	r7, #32
 8012600:	46bd      	mov	sp, r7
 8012602:	bd80      	pop	{r7, pc}

08012604 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b088      	sub	sp, #32
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
 801260c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012612:	2319      	movs	r3, #25
 8012614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012616:	2340      	movs	r3, #64	; 0x40
 8012618:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801261a:	2300      	movs	r3, #0
 801261c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801261e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012622:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012624:	f107 0308 	add.w	r3, r7, #8
 8012628:	4619      	mov	r1, r3
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f7ff feec 	bl	8012408 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012630:	f241 3288 	movw	r2, #5000	; 0x1388
 8012634:	2119      	movs	r1, #25
 8012636:	6878      	ldr	r0, [r7, #4]
 8012638:	f000 f992 	bl	8012960 <SDMMC_GetCmdResp1>
 801263c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801263e:	69fb      	ldr	r3, [r7, #28]
}
 8012640:	4618      	mov	r0, r3
 8012642:	3720      	adds	r7, #32
 8012644:	46bd      	mov	sp, r7
 8012646:	bd80      	pop	{r7, pc}

08012648 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012648:	b580      	push	{r7, lr}
 801264a:	b088      	sub	sp, #32
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012650:	2300      	movs	r3, #0
 8012652:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012654:	230c      	movs	r3, #12
 8012656:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012658:	2340      	movs	r3, #64	; 0x40
 801265a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801265c:	2300      	movs	r3, #0
 801265e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012664:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012666:	f107 0308 	add.w	r3, r7, #8
 801266a:	4619      	mov	r1, r3
 801266c:	6878      	ldr	r0, [r7, #4]
 801266e:	f7ff fecb 	bl	8012408 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012672:	4a05      	ldr	r2, [pc, #20]	; (8012688 <SDMMC_CmdStopTransfer+0x40>)
 8012674:	210c      	movs	r1, #12
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f000 f972 	bl	8012960 <SDMMC_GetCmdResp1>
 801267c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801267e:	69fb      	ldr	r3, [r7, #28]
}
 8012680:	4618      	mov	r0, r3
 8012682:	3720      	adds	r7, #32
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}
 8012688:	05f5e100 	.word	0x05f5e100

0801268c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b08a      	sub	sp, #40	; 0x28
 8012690:	af00      	add	r7, sp, #0
 8012692:	60f8      	str	r0, [r7, #12]
 8012694:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801269c:	2307      	movs	r3, #7
 801269e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80126a0:	2340      	movs	r3, #64	; 0x40
 80126a2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80126a4:	2300      	movs	r3, #0
 80126a6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80126a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126ac:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80126ae:	f107 0310 	add.w	r3, r7, #16
 80126b2:	4619      	mov	r1, r3
 80126b4:	68f8      	ldr	r0, [r7, #12]
 80126b6:	f7ff fea7 	bl	8012408 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80126ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80126be:	2107      	movs	r1, #7
 80126c0:	68f8      	ldr	r0, [r7, #12]
 80126c2:	f000 f94d 	bl	8012960 <SDMMC_GetCmdResp1>
 80126c6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80126c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80126ca:	4618      	mov	r0, r3
 80126cc:	3728      	adds	r7, #40	; 0x28
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bd80      	pop	{r7, pc}

080126d2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80126d2:	b580      	push	{r7, lr}
 80126d4:	b088      	sub	sp, #32
 80126d6:	af00      	add	r7, sp, #0
 80126d8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80126da:	2300      	movs	r3, #0
 80126dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80126de:	2300      	movs	r3, #0
 80126e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80126e2:	2300      	movs	r3, #0
 80126e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80126e6:	2300      	movs	r3, #0
 80126e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80126ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80126f0:	f107 0308 	add.w	r3, r7, #8
 80126f4:	4619      	mov	r1, r3
 80126f6:	6878      	ldr	r0, [r7, #4]
 80126f8:	f7ff fe86 	bl	8012408 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f000 fb67 	bl	8012dd0 <SDMMC_GetCmdError>
 8012702:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012704:	69fb      	ldr	r3, [r7, #28]
}
 8012706:	4618      	mov	r0, r3
 8012708:	3720      	adds	r7, #32
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}

0801270e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801270e:	b580      	push	{r7, lr}
 8012710:	b088      	sub	sp, #32
 8012712:	af00      	add	r7, sp, #0
 8012714:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012716:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801271a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801271c:	2308      	movs	r3, #8
 801271e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012720:	2340      	movs	r3, #64	; 0x40
 8012722:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012724:	2300      	movs	r3, #0
 8012726:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801272c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801272e:	f107 0308 	add.w	r3, r7, #8
 8012732:	4619      	mov	r1, r3
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f7ff fe67 	bl	8012408 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f000 fafa 	bl	8012d34 <SDMMC_GetCmdResp7>
 8012740:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012742:	69fb      	ldr	r3, [r7, #28]
}
 8012744:	4618      	mov	r0, r3
 8012746:	3720      	adds	r7, #32
 8012748:	46bd      	mov	sp, r7
 801274a:	bd80      	pop	{r7, pc}

0801274c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b088      	sub	sp, #32
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
 8012754:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012756:	683b      	ldr	r3, [r7, #0]
 8012758:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801275a:	2337      	movs	r3, #55	; 0x37
 801275c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801275e:	2340      	movs	r3, #64	; 0x40
 8012760:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012762:	2300      	movs	r3, #0
 8012764:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801276a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801276c:	f107 0308 	add.w	r3, r7, #8
 8012770:	4619      	mov	r1, r3
 8012772:	6878      	ldr	r0, [r7, #4]
 8012774:	f7ff fe48 	bl	8012408 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012778:	f241 3288 	movw	r2, #5000	; 0x1388
 801277c:	2137      	movs	r1, #55	; 0x37
 801277e:	6878      	ldr	r0, [r7, #4]
 8012780:	f000 f8ee 	bl	8012960 <SDMMC_GetCmdResp1>
 8012784:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012786:	69fb      	ldr	r3, [r7, #28]
}
 8012788:	4618      	mov	r0, r3
 801278a:	3720      	adds	r7, #32
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}

08012790 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b088      	sub	sp, #32
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
 8012798:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801279a:	683a      	ldr	r2, [r7, #0]
 801279c:	4b0d      	ldr	r3, [pc, #52]	; (80127d4 <SDMMC_CmdAppOperCommand+0x44>)
 801279e:	4313      	orrs	r3, r2
 80127a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80127a2:	2329      	movs	r3, #41	; 0x29
 80127a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80127a6:	2340      	movs	r3, #64	; 0x40
 80127a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80127aa:	2300      	movs	r3, #0
 80127ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80127ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80127b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80127b4:	f107 0308 	add.w	r3, r7, #8
 80127b8:	4619      	mov	r1, r3
 80127ba:	6878      	ldr	r0, [r7, #4]
 80127bc:	f7ff fe24 	bl	8012408 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f000 fa03 	bl	8012bcc <SDMMC_GetCmdResp3>
 80127c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127c8:	69fb      	ldr	r3, [r7, #28]
}
 80127ca:	4618      	mov	r0, r3
 80127cc:	3720      	adds	r7, #32
 80127ce:	46bd      	mov	sp, r7
 80127d0:	bd80      	pop	{r7, pc}
 80127d2:	bf00      	nop
 80127d4:	80100000 	.word	0x80100000

080127d8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b088      	sub	sp, #32
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
 80127e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80127e2:	683b      	ldr	r3, [r7, #0]
 80127e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80127e6:	2306      	movs	r3, #6
 80127e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80127ea:	2340      	movs	r3, #64	; 0x40
 80127ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80127ee:	2300      	movs	r3, #0
 80127f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80127f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80127f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80127f8:	f107 0308 	add.w	r3, r7, #8
 80127fc:	4619      	mov	r1, r3
 80127fe:	6878      	ldr	r0, [r7, #4]
 8012800:	f7ff fe02 	bl	8012408 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012804:	f241 3288 	movw	r2, #5000	; 0x1388
 8012808:	2106      	movs	r1, #6
 801280a:	6878      	ldr	r0, [r7, #4]
 801280c:	f000 f8a8 	bl	8012960 <SDMMC_GetCmdResp1>
 8012810:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012812:	69fb      	ldr	r3, [r7, #28]
}
 8012814:	4618      	mov	r0, r3
 8012816:	3720      	adds	r7, #32
 8012818:	46bd      	mov	sp, r7
 801281a:	bd80      	pop	{r7, pc}

0801281c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b088      	sub	sp, #32
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012824:	2300      	movs	r3, #0
 8012826:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012828:	2333      	movs	r3, #51	; 0x33
 801282a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801282c:	2340      	movs	r3, #64	; 0x40
 801282e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012830:	2300      	movs	r3, #0
 8012832:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012838:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801283a:	f107 0308 	add.w	r3, r7, #8
 801283e:	4619      	mov	r1, r3
 8012840:	6878      	ldr	r0, [r7, #4]
 8012842:	f7ff fde1 	bl	8012408 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012846:	f241 3288 	movw	r2, #5000	; 0x1388
 801284a:	2133      	movs	r1, #51	; 0x33
 801284c:	6878      	ldr	r0, [r7, #4]
 801284e:	f000 f887 	bl	8012960 <SDMMC_GetCmdResp1>
 8012852:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012854:	69fb      	ldr	r3, [r7, #28]
}
 8012856:	4618      	mov	r0, r3
 8012858:	3720      	adds	r7, #32
 801285a:	46bd      	mov	sp, r7
 801285c:	bd80      	pop	{r7, pc}

0801285e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801285e:	b580      	push	{r7, lr}
 8012860:	b088      	sub	sp, #32
 8012862:	af00      	add	r7, sp, #0
 8012864:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012866:	2300      	movs	r3, #0
 8012868:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801286a:	2302      	movs	r3, #2
 801286c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801286e:	23c0      	movs	r3, #192	; 0xc0
 8012870:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012872:	2300      	movs	r3, #0
 8012874:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801287a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801287c:	f107 0308 	add.w	r3, r7, #8
 8012880:	4619      	mov	r1, r3
 8012882:	6878      	ldr	r0, [r7, #4]
 8012884:	f7ff fdc0 	bl	8012408 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012888:	6878      	ldr	r0, [r7, #4]
 801288a:	f000 f957 	bl	8012b3c <SDMMC_GetCmdResp2>
 801288e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012890:	69fb      	ldr	r3, [r7, #28]
}
 8012892:	4618      	mov	r0, r3
 8012894:	3720      	adds	r7, #32
 8012896:	46bd      	mov	sp, r7
 8012898:	bd80      	pop	{r7, pc}

0801289a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801289a:	b580      	push	{r7, lr}
 801289c:	b088      	sub	sp, #32
 801289e:	af00      	add	r7, sp, #0
 80128a0:	6078      	str	r0, [r7, #4]
 80128a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80128a4:	683b      	ldr	r3, [r7, #0]
 80128a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80128a8:	2309      	movs	r3, #9
 80128aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80128ac:	23c0      	movs	r3, #192	; 0xc0
 80128ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80128b0:	2300      	movs	r3, #0
 80128b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80128b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80128b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80128ba:	f107 0308 	add.w	r3, r7, #8
 80128be:	4619      	mov	r1, r3
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f7ff fda1 	bl	8012408 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80128c6:	6878      	ldr	r0, [r7, #4]
 80128c8:	f000 f938 	bl	8012b3c <SDMMC_GetCmdResp2>
 80128cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80128ce:	69fb      	ldr	r3, [r7, #28]
}
 80128d0:	4618      	mov	r0, r3
 80128d2:	3720      	adds	r7, #32
 80128d4:	46bd      	mov	sp, r7
 80128d6:	bd80      	pop	{r7, pc}

080128d8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b088      	sub	sp, #32
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
 80128e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80128e2:	2300      	movs	r3, #0
 80128e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80128e6:	2303      	movs	r3, #3
 80128e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80128ea:	2340      	movs	r3, #64	; 0x40
 80128ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80128ee:	2300      	movs	r3, #0
 80128f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80128f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80128f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80128f8:	f107 0308 	add.w	r3, r7, #8
 80128fc:	4619      	mov	r1, r3
 80128fe:	6878      	ldr	r0, [r7, #4]
 8012900:	f7ff fd82 	bl	8012408 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012904:	683a      	ldr	r2, [r7, #0]
 8012906:	2103      	movs	r1, #3
 8012908:	6878      	ldr	r0, [r7, #4]
 801290a:	f000 f99d 	bl	8012c48 <SDMMC_GetCmdResp6>
 801290e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012910:	69fb      	ldr	r3, [r7, #28]
}
 8012912:	4618      	mov	r0, r3
 8012914:	3720      	adds	r7, #32
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}

0801291a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801291a:	b580      	push	{r7, lr}
 801291c:	b088      	sub	sp, #32
 801291e:	af00      	add	r7, sp, #0
 8012920:	6078      	str	r0, [r7, #4]
 8012922:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012928:	230d      	movs	r3, #13
 801292a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801292c:	2340      	movs	r3, #64	; 0x40
 801292e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012930:	2300      	movs	r3, #0
 8012932:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012938:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801293a:	f107 0308 	add.w	r3, r7, #8
 801293e:	4619      	mov	r1, r3
 8012940:	6878      	ldr	r0, [r7, #4]
 8012942:	f7ff fd61 	bl	8012408 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012946:	f241 3288 	movw	r2, #5000	; 0x1388
 801294a:	210d      	movs	r1, #13
 801294c:	6878      	ldr	r0, [r7, #4]
 801294e:	f000 f807 	bl	8012960 <SDMMC_GetCmdResp1>
 8012952:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012954:	69fb      	ldr	r3, [r7, #28]
}
 8012956:	4618      	mov	r0, r3
 8012958:	3720      	adds	r7, #32
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}
	...

08012960 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b088      	sub	sp, #32
 8012964:	af00      	add	r7, sp, #0
 8012966:	60f8      	str	r0, [r7, #12]
 8012968:	460b      	mov	r3, r1
 801296a:	607a      	str	r2, [r7, #4]
 801296c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801296e:	4b70      	ldr	r3, [pc, #448]	; (8012b30 <SDMMC_GetCmdResp1+0x1d0>)
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	4a70      	ldr	r2, [pc, #448]	; (8012b34 <SDMMC_GetCmdResp1+0x1d4>)
 8012974:	fba2 2303 	umull	r2, r3, r2, r3
 8012978:	0a5a      	lsrs	r2, r3, #9
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	fb02 f303 	mul.w	r3, r2, r3
 8012980:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8012982:	69fb      	ldr	r3, [r7, #28]
 8012984:	1e5a      	subs	r2, r3, #1
 8012986:	61fa      	str	r2, [r7, #28]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d102      	bne.n	8012992 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801298c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012990:	e0c9      	b.n	8012b26 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012996:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012998:	69bb      	ldr	r3, [r7, #24]
 801299a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d0ef      	beq.n	8012982 <SDMMC_GetCmdResp1+0x22>
 80129a2:	69bb      	ldr	r3, [r7, #24]
 80129a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d1ea      	bne.n	8012982 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129b0:	f003 0304 	and.w	r3, r3, #4
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d004      	beq.n	80129c2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	2204      	movs	r2, #4
 80129bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80129be:	2304      	movs	r3, #4
 80129c0:	e0b1      	b.n	8012b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129c6:	f003 0301 	and.w	r3, r3, #1
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d004      	beq.n	80129d8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	2201      	movs	r2, #1
 80129d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80129d4:	2301      	movs	r3, #1
 80129d6:	e0a6      	b.n	8012b26 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	22c5      	movs	r2, #197	; 0xc5
 80129dc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80129de:	68f8      	ldr	r0, [r7, #12]
 80129e0:	f7ff fd3c 	bl	801245c <SDMMC_GetCommandResponse>
 80129e4:	4603      	mov	r3, r0
 80129e6:	461a      	mov	r2, r3
 80129e8:	7afb      	ldrb	r3, [r7, #11]
 80129ea:	4293      	cmp	r3, r2
 80129ec:	d001      	beq.n	80129f2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80129ee:	2301      	movs	r3, #1
 80129f0:	e099      	b.n	8012b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80129f2:	2100      	movs	r1, #0
 80129f4:	68f8      	ldr	r0, [r7, #12]
 80129f6:	f7ff fd3e 	bl	8012476 <SDMMC_GetResponse>
 80129fa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80129fc:	697a      	ldr	r2, [r7, #20]
 80129fe:	4b4e      	ldr	r3, [pc, #312]	; (8012b38 <SDMMC_GetCmdResp1+0x1d8>)
 8012a00:	4013      	ands	r3, r2
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d101      	bne.n	8012a0a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012a06:	2300      	movs	r3, #0
 8012a08:	e08d      	b.n	8012b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012a0a:	697b      	ldr	r3, [r7, #20]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	da02      	bge.n	8012a16 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012a10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012a14:	e087      	b.n	8012b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012a16:	697b      	ldr	r3, [r7, #20]
 8012a18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d001      	beq.n	8012a24 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012a20:	2340      	movs	r3, #64	; 0x40
 8012a22:	e080      	b.n	8012b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012a24:	697b      	ldr	r3, [r7, #20]
 8012a26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d001      	beq.n	8012a32 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012a2e:	2380      	movs	r3, #128	; 0x80
 8012a30:	e079      	b.n	8012b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012a32:	697b      	ldr	r3, [r7, #20]
 8012a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d002      	beq.n	8012a42 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012a3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a40:	e071      	b.n	8012b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d002      	beq.n	8012a52 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012a50:	e069      	b.n	8012b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012a52:	697b      	ldr	r3, [r7, #20]
 8012a54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d002      	beq.n	8012a62 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012a60:	e061      	b.n	8012b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d002      	beq.n	8012a72 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012a6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012a70:	e059      	b.n	8012b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d002      	beq.n	8012a82 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a80:	e051      	b.n	8012b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012a82:	697b      	ldr	r3, [r7, #20]
 8012a84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d002      	beq.n	8012a92 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012a90:	e049      	b.n	8012b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012a92:	697b      	ldr	r3, [r7, #20]
 8012a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d002      	beq.n	8012aa2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012a9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012aa0:	e041      	b.n	8012b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d002      	beq.n	8012ab2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012aac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012ab0:	e039      	b.n	8012b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d002      	beq.n	8012ac2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012abc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012ac0:	e031      	b.n	8012b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012ac2:	697b      	ldr	r3, [r7, #20]
 8012ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d002      	beq.n	8012ad2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012acc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012ad0:	e029      	b.n	8012b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012ad2:	697b      	ldr	r3, [r7, #20]
 8012ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d002      	beq.n	8012ae2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012adc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012ae0:	e021      	b.n	8012b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012ae2:	697b      	ldr	r3, [r7, #20]
 8012ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d002      	beq.n	8012af2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012aec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012af0:	e019      	b.n	8012b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012af2:	697b      	ldr	r3, [r7, #20]
 8012af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d002      	beq.n	8012b02 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012afc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012b00:	e011      	b.n	8012b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012b02:	697b      	ldr	r3, [r7, #20]
 8012b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d002      	beq.n	8012b12 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012b0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012b10:	e009      	b.n	8012b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012b12:	697b      	ldr	r3, [r7, #20]
 8012b14:	f003 0308 	and.w	r3, r3, #8
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d002      	beq.n	8012b22 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012b1c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012b20:	e001      	b.n	8012b26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012b22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012b26:	4618      	mov	r0, r3
 8012b28:	3720      	adds	r7, #32
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	bd80      	pop	{r7, pc}
 8012b2e:	bf00      	nop
 8012b30:	20000010 	.word	0x20000010
 8012b34:	10624dd3 	.word	0x10624dd3
 8012b38:	fdffe008 	.word	0xfdffe008

08012b3c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012b3c:	b480      	push	{r7}
 8012b3e:	b085      	sub	sp, #20
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012b44:	4b1f      	ldr	r3, [pc, #124]	; (8012bc4 <SDMMC_GetCmdResp2+0x88>)
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	4a1f      	ldr	r2, [pc, #124]	; (8012bc8 <SDMMC_GetCmdResp2+0x8c>)
 8012b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8012b4e:	0a5b      	lsrs	r3, r3, #9
 8012b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b54:	fb02 f303 	mul.w	r3, r2, r3
 8012b58:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	1e5a      	subs	r2, r3, #1
 8012b5e:	60fa      	str	r2, [r7, #12]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d102      	bne.n	8012b6a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012b64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012b68:	e026      	b.n	8012bb8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b6e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d0ef      	beq.n	8012b5a <SDMMC_GetCmdResp2+0x1e>
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d1ea      	bne.n	8012b5a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b88:	f003 0304 	and.w	r3, r3, #4
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d004      	beq.n	8012b9a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	2204      	movs	r2, #4
 8012b94:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012b96:	2304      	movs	r3, #4
 8012b98:	e00e      	b.n	8012bb8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b9e:	f003 0301 	and.w	r3, r3, #1
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d004      	beq.n	8012bb0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	2201      	movs	r2, #1
 8012baa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012bac:	2301      	movs	r3, #1
 8012bae:	e003      	b.n	8012bb8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	22c5      	movs	r2, #197	; 0xc5
 8012bb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012bb6:	2300      	movs	r3, #0
}
 8012bb8:	4618      	mov	r0, r3
 8012bba:	3714      	adds	r7, #20
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc2:	4770      	bx	lr
 8012bc4:	20000010 	.word	0x20000010
 8012bc8:	10624dd3 	.word	0x10624dd3

08012bcc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012bcc:	b480      	push	{r7}
 8012bce:	b085      	sub	sp, #20
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012bd4:	4b1a      	ldr	r3, [pc, #104]	; (8012c40 <SDMMC_GetCmdResp3+0x74>)
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	4a1a      	ldr	r2, [pc, #104]	; (8012c44 <SDMMC_GetCmdResp3+0x78>)
 8012bda:	fba2 2303 	umull	r2, r3, r2, r3
 8012bde:	0a5b      	lsrs	r3, r3, #9
 8012be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8012be4:	fb02 f303 	mul.w	r3, r2, r3
 8012be8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	1e5a      	subs	r2, r3, #1
 8012bee:	60fa      	str	r2, [r7, #12]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d102      	bne.n	8012bfa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012bf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012bf8:	e01b      	b.n	8012c32 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bfe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c00:	68bb      	ldr	r3, [r7, #8]
 8012c02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d0ef      	beq.n	8012bea <SDMMC_GetCmdResp3+0x1e>
 8012c0a:	68bb      	ldr	r3, [r7, #8]
 8012c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d1ea      	bne.n	8012bea <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c18:	f003 0304 	and.w	r3, r3, #4
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d004      	beq.n	8012c2a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2204      	movs	r2, #4
 8012c24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012c26:	2304      	movs	r3, #4
 8012c28:	e003      	b.n	8012c32 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	22c5      	movs	r2, #197	; 0xc5
 8012c2e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012c30:	2300      	movs	r3, #0
}
 8012c32:	4618      	mov	r0, r3
 8012c34:	3714      	adds	r7, #20
 8012c36:	46bd      	mov	sp, r7
 8012c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c3c:	4770      	bx	lr
 8012c3e:	bf00      	nop
 8012c40:	20000010 	.word	0x20000010
 8012c44:	10624dd3 	.word	0x10624dd3

08012c48 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b088      	sub	sp, #32
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	60f8      	str	r0, [r7, #12]
 8012c50:	460b      	mov	r3, r1
 8012c52:	607a      	str	r2, [r7, #4]
 8012c54:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012c56:	4b35      	ldr	r3, [pc, #212]	; (8012d2c <SDMMC_GetCmdResp6+0xe4>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	4a35      	ldr	r2, [pc, #212]	; (8012d30 <SDMMC_GetCmdResp6+0xe8>)
 8012c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8012c60:	0a5b      	lsrs	r3, r3, #9
 8012c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c66:	fb02 f303 	mul.w	r3, r2, r3
 8012c6a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8012c6c:	69fb      	ldr	r3, [r7, #28]
 8012c6e:	1e5a      	subs	r2, r3, #1
 8012c70:	61fa      	str	r2, [r7, #28]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d102      	bne.n	8012c7c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012c76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012c7a:	e052      	b.n	8012d22 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c80:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c82:	69bb      	ldr	r3, [r7, #24]
 8012c84:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d0ef      	beq.n	8012c6c <SDMMC_GetCmdResp6+0x24>
 8012c8c:	69bb      	ldr	r3, [r7, #24]
 8012c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d1ea      	bne.n	8012c6c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c9a:	f003 0304 	and.w	r3, r3, #4
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d004      	beq.n	8012cac <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	2204      	movs	r2, #4
 8012ca6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012ca8:	2304      	movs	r3, #4
 8012caa:	e03a      	b.n	8012d22 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cb0:	f003 0301 	and.w	r3, r3, #1
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d004      	beq.n	8012cc2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	2201      	movs	r2, #1
 8012cbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012cbe:	2301      	movs	r3, #1
 8012cc0:	e02f      	b.n	8012d22 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012cc2:	68f8      	ldr	r0, [r7, #12]
 8012cc4:	f7ff fbca 	bl	801245c <SDMMC_GetCommandResponse>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	461a      	mov	r2, r3
 8012ccc:	7afb      	ldrb	r3, [r7, #11]
 8012cce:	4293      	cmp	r3, r2
 8012cd0:	d001      	beq.n	8012cd6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012cd2:	2301      	movs	r3, #1
 8012cd4:	e025      	b.n	8012d22 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	22c5      	movs	r2, #197	; 0xc5
 8012cda:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012cdc:	2100      	movs	r1, #0
 8012cde:	68f8      	ldr	r0, [r7, #12]
 8012ce0:	f7ff fbc9 	bl	8012476 <SDMMC_GetResponse>
 8012ce4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8012ce6:	697b      	ldr	r3, [r7, #20]
 8012ce8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d106      	bne.n	8012cfe <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8012cf0:	697b      	ldr	r3, [r7, #20]
 8012cf2:	0c1b      	lsrs	r3, r3, #16
 8012cf4:	b29a      	uxth	r2, r3
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	e011      	b.n	8012d22 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012cfe:	697b      	ldr	r3, [r7, #20]
 8012d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d002      	beq.n	8012d0e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012d08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012d0c:	e009      	b.n	8012d22 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012d0e:	697b      	ldr	r3, [r7, #20]
 8012d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d002      	beq.n	8012d1e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d1c:	e001      	b.n	8012d22 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012d1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012d22:	4618      	mov	r0, r3
 8012d24:	3720      	adds	r7, #32
 8012d26:	46bd      	mov	sp, r7
 8012d28:	bd80      	pop	{r7, pc}
 8012d2a:	bf00      	nop
 8012d2c:	20000010 	.word	0x20000010
 8012d30:	10624dd3 	.word	0x10624dd3

08012d34 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012d34:	b480      	push	{r7}
 8012d36:	b085      	sub	sp, #20
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012d3c:	4b22      	ldr	r3, [pc, #136]	; (8012dc8 <SDMMC_GetCmdResp7+0x94>)
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	4a22      	ldr	r2, [pc, #136]	; (8012dcc <SDMMC_GetCmdResp7+0x98>)
 8012d42:	fba2 2303 	umull	r2, r3, r2, r3
 8012d46:	0a5b      	lsrs	r3, r3, #9
 8012d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8012d4c:	fb02 f303 	mul.w	r3, r2, r3
 8012d50:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	1e5a      	subs	r2, r3, #1
 8012d56:	60fa      	str	r2, [r7, #12]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d102      	bne.n	8012d62 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012d5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012d60:	e02c      	b.n	8012dbc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d66:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012d68:	68bb      	ldr	r3, [r7, #8]
 8012d6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d0ef      	beq.n	8012d52 <SDMMC_GetCmdResp7+0x1e>
 8012d72:	68bb      	ldr	r3, [r7, #8]
 8012d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d1ea      	bne.n	8012d52 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d80:	f003 0304 	and.w	r3, r3, #4
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d004      	beq.n	8012d92 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	2204      	movs	r2, #4
 8012d8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012d8e:	2304      	movs	r3, #4
 8012d90:	e014      	b.n	8012dbc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d96:	f003 0301 	and.w	r3, r3, #1
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d004      	beq.n	8012da8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	2201      	movs	r2, #1
 8012da2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012da4:	2301      	movs	r3, #1
 8012da6:	e009      	b.n	8012dbc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d002      	beq.n	8012dba <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2240      	movs	r2, #64	; 0x40
 8012db8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012dba:	2300      	movs	r3, #0
  
}
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3714      	adds	r7, #20
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc6:	4770      	bx	lr
 8012dc8:	20000010 	.word	0x20000010
 8012dcc:	10624dd3 	.word	0x10624dd3

08012dd0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012dd0:	b480      	push	{r7}
 8012dd2:	b085      	sub	sp, #20
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012dd8:	4b11      	ldr	r3, [pc, #68]	; (8012e20 <SDMMC_GetCmdError+0x50>)
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	4a11      	ldr	r2, [pc, #68]	; (8012e24 <SDMMC_GetCmdError+0x54>)
 8012dde:	fba2 2303 	umull	r2, r3, r2, r3
 8012de2:	0a5b      	lsrs	r3, r3, #9
 8012de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012de8:	fb02 f303 	mul.w	r3, r2, r3
 8012dec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	1e5a      	subs	r2, r3, #1
 8012df2:	60fa      	str	r2, [r7, #12]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d102      	bne.n	8012dfe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012df8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012dfc:	e009      	b.n	8012e12 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d0f1      	beq.n	8012dee <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	22c5      	movs	r2, #197	; 0xc5
 8012e0e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8012e10:	2300      	movs	r3, #0
}
 8012e12:	4618      	mov	r0, r3
 8012e14:	3714      	adds	r7, #20
 8012e16:	46bd      	mov	sp, r7
 8012e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1c:	4770      	bx	lr
 8012e1e:	bf00      	nop
 8012e20:	20000010 	.word	0x20000010
 8012e24:	10624dd3 	.word	0x10624dd3

08012e28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012e28:	b084      	sub	sp, #16
 8012e2a:	b580      	push	{r7, lr}
 8012e2c:	b084      	sub	sp, #16
 8012e2e:	af00      	add	r7, sp, #0
 8012e30:	6078      	str	r0, [r7, #4]
 8012e32:	f107 001c 	add.w	r0, r7, #28
 8012e36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e3c:	2b01      	cmp	r3, #1
 8012e3e:	d120      	bne.n	8012e82 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	68da      	ldr	r2, [r3, #12]
 8012e50:	4b20      	ldr	r3, [pc, #128]	; (8012ed4 <USB_CoreInit+0xac>)
 8012e52:	4013      	ands	r3, r2
 8012e54:	687a      	ldr	r2, [r7, #4]
 8012e56:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	68db      	ldr	r3, [r3, #12]
 8012e5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e66:	2b01      	cmp	r3, #1
 8012e68:	d105      	bne.n	8012e76 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	68db      	ldr	r3, [r3, #12]
 8012e6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012e76:	6878      	ldr	r0, [r7, #4]
 8012e78:	f001 fc0e 	bl	8014698 <USB_CoreReset>
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	73fb      	strb	r3, [r7, #15]
 8012e80:	e010      	b.n	8012ea4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	68db      	ldr	r3, [r3, #12]
 8012e86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012e8e:	6878      	ldr	r0, [r7, #4]
 8012e90:	f001 fc02 	bl	8014698 <USB_CoreReset>
 8012e94:	4603      	mov	r3, r0
 8012e96:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8012ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ea6:	2b01      	cmp	r3, #1
 8012ea8:	d10b      	bne.n	8012ec2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	689b      	ldr	r3, [r3, #8]
 8012eae:	f043 0206 	orr.w	r2, r3, #6
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	689b      	ldr	r3, [r3, #8]
 8012eba:	f043 0220 	orr.w	r2, r3, #32
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	3710      	adds	r7, #16
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012ece:	b004      	add	sp, #16
 8012ed0:	4770      	bx	lr
 8012ed2:	bf00      	nop
 8012ed4:	ffbdffbf 	.word	0xffbdffbf

08012ed8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012ed8:	b480      	push	{r7}
 8012eda:	b087      	sub	sp, #28
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	60f8      	str	r0, [r7, #12]
 8012ee0:	60b9      	str	r1, [r7, #8]
 8012ee2:	4613      	mov	r3, r2
 8012ee4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012ee6:	79fb      	ldrb	r3, [r7, #7]
 8012ee8:	2b02      	cmp	r3, #2
 8012eea:	d165      	bne.n	8012fb8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	4a41      	ldr	r2, [pc, #260]	; (8012ff4 <USB_SetTurnaroundTime+0x11c>)
 8012ef0:	4293      	cmp	r3, r2
 8012ef2:	d906      	bls.n	8012f02 <USB_SetTurnaroundTime+0x2a>
 8012ef4:	68bb      	ldr	r3, [r7, #8]
 8012ef6:	4a40      	ldr	r2, [pc, #256]	; (8012ff8 <USB_SetTurnaroundTime+0x120>)
 8012ef8:	4293      	cmp	r3, r2
 8012efa:	d202      	bcs.n	8012f02 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012efc:	230f      	movs	r3, #15
 8012efe:	617b      	str	r3, [r7, #20]
 8012f00:	e062      	b.n	8012fc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	4a3c      	ldr	r2, [pc, #240]	; (8012ff8 <USB_SetTurnaroundTime+0x120>)
 8012f06:	4293      	cmp	r3, r2
 8012f08:	d306      	bcc.n	8012f18 <USB_SetTurnaroundTime+0x40>
 8012f0a:	68bb      	ldr	r3, [r7, #8]
 8012f0c:	4a3b      	ldr	r2, [pc, #236]	; (8012ffc <USB_SetTurnaroundTime+0x124>)
 8012f0e:	4293      	cmp	r3, r2
 8012f10:	d202      	bcs.n	8012f18 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012f12:	230e      	movs	r3, #14
 8012f14:	617b      	str	r3, [r7, #20]
 8012f16:	e057      	b.n	8012fc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012f18:	68bb      	ldr	r3, [r7, #8]
 8012f1a:	4a38      	ldr	r2, [pc, #224]	; (8012ffc <USB_SetTurnaroundTime+0x124>)
 8012f1c:	4293      	cmp	r3, r2
 8012f1e:	d306      	bcc.n	8012f2e <USB_SetTurnaroundTime+0x56>
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	4a37      	ldr	r2, [pc, #220]	; (8013000 <USB_SetTurnaroundTime+0x128>)
 8012f24:	4293      	cmp	r3, r2
 8012f26:	d202      	bcs.n	8012f2e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012f28:	230d      	movs	r3, #13
 8012f2a:	617b      	str	r3, [r7, #20]
 8012f2c:	e04c      	b.n	8012fc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012f2e:	68bb      	ldr	r3, [r7, #8]
 8012f30:	4a33      	ldr	r2, [pc, #204]	; (8013000 <USB_SetTurnaroundTime+0x128>)
 8012f32:	4293      	cmp	r3, r2
 8012f34:	d306      	bcc.n	8012f44 <USB_SetTurnaroundTime+0x6c>
 8012f36:	68bb      	ldr	r3, [r7, #8]
 8012f38:	4a32      	ldr	r2, [pc, #200]	; (8013004 <USB_SetTurnaroundTime+0x12c>)
 8012f3a:	4293      	cmp	r3, r2
 8012f3c:	d802      	bhi.n	8012f44 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012f3e:	230c      	movs	r3, #12
 8012f40:	617b      	str	r3, [r7, #20]
 8012f42:	e041      	b.n	8012fc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012f44:	68bb      	ldr	r3, [r7, #8]
 8012f46:	4a2f      	ldr	r2, [pc, #188]	; (8013004 <USB_SetTurnaroundTime+0x12c>)
 8012f48:	4293      	cmp	r3, r2
 8012f4a:	d906      	bls.n	8012f5a <USB_SetTurnaroundTime+0x82>
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	4a2e      	ldr	r2, [pc, #184]	; (8013008 <USB_SetTurnaroundTime+0x130>)
 8012f50:	4293      	cmp	r3, r2
 8012f52:	d802      	bhi.n	8012f5a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012f54:	230b      	movs	r3, #11
 8012f56:	617b      	str	r3, [r7, #20]
 8012f58:	e036      	b.n	8012fc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012f5a:	68bb      	ldr	r3, [r7, #8]
 8012f5c:	4a2a      	ldr	r2, [pc, #168]	; (8013008 <USB_SetTurnaroundTime+0x130>)
 8012f5e:	4293      	cmp	r3, r2
 8012f60:	d906      	bls.n	8012f70 <USB_SetTurnaroundTime+0x98>
 8012f62:	68bb      	ldr	r3, [r7, #8]
 8012f64:	4a29      	ldr	r2, [pc, #164]	; (801300c <USB_SetTurnaroundTime+0x134>)
 8012f66:	4293      	cmp	r3, r2
 8012f68:	d802      	bhi.n	8012f70 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012f6a:	230a      	movs	r3, #10
 8012f6c:	617b      	str	r3, [r7, #20]
 8012f6e:	e02b      	b.n	8012fc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	4a26      	ldr	r2, [pc, #152]	; (801300c <USB_SetTurnaroundTime+0x134>)
 8012f74:	4293      	cmp	r3, r2
 8012f76:	d906      	bls.n	8012f86 <USB_SetTurnaroundTime+0xae>
 8012f78:	68bb      	ldr	r3, [r7, #8]
 8012f7a:	4a25      	ldr	r2, [pc, #148]	; (8013010 <USB_SetTurnaroundTime+0x138>)
 8012f7c:	4293      	cmp	r3, r2
 8012f7e:	d202      	bcs.n	8012f86 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012f80:	2309      	movs	r3, #9
 8012f82:	617b      	str	r3, [r7, #20]
 8012f84:	e020      	b.n	8012fc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012f86:	68bb      	ldr	r3, [r7, #8]
 8012f88:	4a21      	ldr	r2, [pc, #132]	; (8013010 <USB_SetTurnaroundTime+0x138>)
 8012f8a:	4293      	cmp	r3, r2
 8012f8c:	d306      	bcc.n	8012f9c <USB_SetTurnaroundTime+0xc4>
 8012f8e:	68bb      	ldr	r3, [r7, #8]
 8012f90:	4a20      	ldr	r2, [pc, #128]	; (8013014 <USB_SetTurnaroundTime+0x13c>)
 8012f92:	4293      	cmp	r3, r2
 8012f94:	d802      	bhi.n	8012f9c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012f96:	2308      	movs	r3, #8
 8012f98:	617b      	str	r3, [r7, #20]
 8012f9a:	e015      	b.n	8012fc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012f9c:	68bb      	ldr	r3, [r7, #8]
 8012f9e:	4a1d      	ldr	r2, [pc, #116]	; (8013014 <USB_SetTurnaroundTime+0x13c>)
 8012fa0:	4293      	cmp	r3, r2
 8012fa2:	d906      	bls.n	8012fb2 <USB_SetTurnaroundTime+0xda>
 8012fa4:	68bb      	ldr	r3, [r7, #8]
 8012fa6:	4a1c      	ldr	r2, [pc, #112]	; (8013018 <USB_SetTurnaroundTime+0x140>)
 8012fa8:	4293      	cmp	r3, r2
 8012faa:	d202      	bcs.n	8012fb2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012fac:	2307      	movs	r3, #7
 8012fae:	617b      	str	r3, [r7, #20]
 8012fb0:	e00a      	b.n	8012fc8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012fb2:	2306      	movs	r3, #6
 8012fb4:	617b      	str	r3, [r7, #20]
 8012fb6:	e007      	b.n	8012fc8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012fb8:	79fb      	ldrb	r3, [r7, #7]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d102      	bne.n	8012fc4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012fbe:	2309      	movs	r3, #9
 8012fc0:	617b      	str	r3, [r7, #20]
 8012fc2:	e001      	b.n	8012fc8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012fc4:	2309      	movs	r3, #9
 8012fc6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	68db      	ldr	r3, [r3, #12]
 8012fcc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	68da      	ldr	r2, [r3, #12]
 8012fd8:	697b      	ldr	r3, [r7, #20]
 8012fda:	029b      	lsls	r3, r3, #10
 8012fdc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012fe0:	431a      	orrs	r2, r3
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012fe6:	2300      	movs	r3, #0
}
 8012fe8:	4618      	mov	r0, r3
 8012fea:	371c      	adds	r7, #28
 8012fec:	46bd      	mov	sp, r7
 8012fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff2:	4770      	bx	lr
 8012ff4:	00d8acbf 	.word	0x00d8acbf
 8012ff8:	00e4e1c0 	.word	0x00e4e1c0
 8012ffc:	00f42400 	.word	0x00f42400
 8013000:	01067380 	.word	0x01067380
 8013004:	011a499f 	.word	0x011a499f
 8013008:	01312cff 	.word	0x01312cff
 801300c:	014ca43f 	.word	0x014ca43f
 8013010:	016e3600 	.word	0x016e3600
 8013014:	01a6ab1f 	.word	0x01a6ab1f
 8013018:	01e84800 	.word	0x01e84800

0801301c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801301c:	b480      	push	{r7}
 801301e:	b083      	sub	sp, #12
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	689b      	ldr	r3, [r3, #8]
 8013028:	f043 0201 	orr.w	r2, r3, #1
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013030:	2300      	movs	r3, #0
}
 8013032:	4618      	mov	r0, r3
 8013034:	370c      	adds	r7, #12
 8013036:	46bd      	mov	sp, r7
 8013038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303c:	4770      	bx	lr

0801303e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801303e:	b480      	push	{r7}
 8013040:	b083      	sub	sp, #12
 8013042:	af00      	add	r7, sp, #0
 8013044:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	689b      	ldr	r3, [r3, #8]
 801304a:	f023 0201 	bic.w	r2, r3, #1
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013052:	2300      	movs	r3, #0
}
 8013054:	4618      	mov	r0, r3
 8013056:	370c      	adds	r7, #12
 8013058:	46bd      	mov	sp, r7
 801305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305e:	4770      	bx	lr

08013060 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b084      	sub	sp, #16
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
 8013068:	460b      	mov	r3, r1
 801306a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801306c:	2300      	movs	r3, #0
 801306e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	68db      	ldr	r3, [r3, #12]
 8013074:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801307c:	78fb      	ldrb	r3, [r7, #3]
 801307e:	2b01      	cmp	r3, #1
 8013080:	d115      	bne.n	80130ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	68db      	ldr	r3, [r3, #12]
 8013086:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801308e:	2001      	movs	r0, #1
 8013090:	f7f2 fd4a 	bl	8005b28 <HAL_Delay>
      ms++;
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	3301      	adds	r3, #1
 8013098:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801309a:	6878      	ldr	r0, [r7, #4]
 801309c:	f001 fa6c 	bl	8014578 <USB_GetMode>
 80130a0:	4603      	mov	r3, r0
 80130a2:	2b01      	cmp	r3, #1
 80130a4:	d01e      	beq.n	80130e4 <USB_SetCurrentMode+0x84>
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	2b31      	cmp	r3, #49	; 0x31
 80130aa:	d9f0      	bls.n	801308e <USB_SetCurrentMode+0x2e>
 80130ac:	e01a      	b.n	80130e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80130ae:	78fb      	ldrb	r3, [r7, #3]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d115      	bne.n	80130e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	68db      	ldr	r3, [r3, #12]
 80130b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80130c0:	2001      	movs	r0, #1
 80130c2:	f7f2 fd31 	bl	8005b28 <HAL_Delay>
      ms++;
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	3301      	adds	r3, #1
 80130ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80130cc:	6878      	ldr	r0, [r7, #4]
 80130ce:	f001 fa53 	bl	8014578 <USB_GetMode>
 80130d2:	4603      	mov	r3, r0
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d005      	beq.n	80130e4 <USB_SetCurrentMode+0x84>
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	2b31      	cmp	r3, #49	; 0x31
 80130dc:	d9f0      	bls.n	80130c0 <USB_SetCurrentMode+0x60>
 80130de:	e001      	b.n	80130e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80130e0:	2301      	movs	r3, #1
 80130e2:	e005      	b.n	80130f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	2b32      	cmp	r3, #50	; 0x32
 80130e8:	d101      	bne.n	80130ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80130ea:	2301      	movs	r3, #1
 80130ec:	e000      	b.n	80130f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80130ee:	2300      	movs	r3, #0
}
 80130f0:	4618      	mov	r0, r3
 80130f2:	3710      	adds	r7, #16
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bd80      	pop	{r7, pc}

080130f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80130f8:	b084      	sub	sp, #16
 80130fa:	b580      	push	{r7, lr}
 80130fc:	b086      	sub	sp, #24
 80130fe:	af00      	add	r7, sp, #0
 8013100:	6078      	str	r0, [r7, #4]
 8013102:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013106:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801310a:	2300      	movs	r3, #0
 801310c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013112:	2300      	movs	r3, #0
 8013114:	613b      	str	r3, [r7, #16]
 8013116:	e009      	b.n	801312c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013118:	687a      	ldr	r2, [r7, #4]
 801311a:	693b      	ldr	r3, [r7, #16]
 801311c:	3340      	adds	r3, #64	; 0x40
 801311e:	009b      	lsls	r3, r3, #2
 8013120:	4413      	add	r3, r2
 8013122:	2200      	movs	r2, #0
 8013124:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013126:	693b      	ldr	r3, [r7, #16]
 8013128:	3301      	adds	r3, #1
 801312a:	613b      	str	r3, [r7, #16]
 801312c:	693b      	ldr	r3, [r7, #16]
 801312e:	2b0e      	cmp	r3, #14
 8013130:	d9f2      	bls.n	8013118 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013134:	2b00      	cmp	r3, #0
 8013136:	d11c      	bne.n	8013172 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801313e:	685b      	ldr	r3, [r3, #4]
 8013140:	68fa      	ldr	r2, [r7, #12]
 8013142:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013146:	f043 0302 	orr.w	r3, r3, #2
 801314a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013150:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	601a      	str	r2, [r3, #0]
 8013170:	e005      	b.n	801317e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013176:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013184:	461a      	mov	r2, r3
 8013186:	2300      	movs	r3, #0
 8013188:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013190:	4619      	mov	r1, r3
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013198:	461a      	mov	r2, r3
 801319a:	680b      	ldr	r3, [r1, #0]
 801319c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801319e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131a0:	2b01      	cmp	r3, #1
 80131a2:	d10c      	bne.n	80131be <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80131a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d104      	bne.n	80131b4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80131aa:	2100      	movs	r1, #0
 80131ac:	6878      	ldr	r0, [r7, #4]
 80131ae:	f000 f965 	bl	801347c <USB_SetDevSpeed>
 80131b2:	e008      	b.n	80131c6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80131b4:	2101      	movs	r1, #1
 80131b6:	6878      	ldr	r0, [r7, #4]
 80131b8:	f000 f960 	bl	801347c <USB_SetDevSpeed>
 80131bc:	e003      	b.n	80131c6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80131be:	2103      	movs	r1, #3
 80131c0:	6878      	ldr	r0, [r7, #4]
 80131c2:	f000 f95b 	bl	801347c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80131c6:	2110      	movs	r1, #16
 80131c8:	6878      	ldr	r0, [r7, #4]
 80131ca:	f000 f8f3 	bl	80133b4 <USB_FlushTxFifo>
 80131ce:	4603      	mov	r3, r0
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d001      	beq.n	80131d8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80131d4:	2301      	movs	r3, #1
 80131d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80131d8:	6878      	ldr	r0, [r7, #4]
 80131da:	f000 f91f 	bl	801341c <USB_FlushRxFifo>
 80131de:	4603      	mov	r3, r0
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d001      	beq.n	80131e8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80131e4:	2301      	movs	r3, #1
 80131e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131ee:	461a      	mov	r2, r3
 80131f0:	2300      	movs	r3, #0
 80131f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131fa:	461a      	mov	r2, r3
 80131fc:	2300      	movs	r3, #0
 80131fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013206:	461a      	mov	r2, r3
 8013208:	2300      	movs	r3, #0
 801320a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801320c:	2300      	movs	r3, #0
 801320e:	613b      	str	r3, [r7, #16]
 8013210:	e043      	b.n	801329a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013212:	693b      	ldr	r3, [r7, #16]
 8013214:	015a      	lsls	r2, r3, #5
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	4413      	add	r3, r2
 801321a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013228:	d118      	bne.n	801325c <USB_DevInit+0x164>
    {
      if (i == 0U)
 801322a:	693b      	ldr	r3, [r7, #16]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d10a      	bne.n	8013246 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013230:	693b      	ldr	r3, [r7, #16]
 8013232:	015a      	lsls	r2, r3, #5
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	4413      	add	r3, r2
 8013238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801323c:	461a      	mov	r2, r3
 801323e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013242:	6013      	str	r3, [r2, #0]
 8013244:	e013      	b.n	801326e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013246:	693b      	ldr	r3, [r7, #16]
 8013248:	015a      	lsls	r2, r3, #5
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	4413      	add	r3, r2
 801324e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013252:	461a      	mov	r2, r3
 8013254:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013258:	6013      	str	r3, [r2, #0]
 801325a:	e008      	b.n	801326e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801325c:	693b      	ldr	r3, [r7, #16]
 801325e:	015a      	lsls	r2, r3, #5
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	4413      	add	r3, r2
 8013264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013268:	461a      	mov	r2, r3
 801326a:	2300      	movs	r3, #0
 801326c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801326e:	693b      	ldr	r3, [r7, #16]
 8013270:	015a      	lsls	r2, r3, #5
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	4413      	add	r3, r2
 8013276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801327a:	461a      	mov	r2, r3
 801327c:	2300      	movs	r3, #0
 801327e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013280:	693b      	ldr	r3, [r7, #16]
 8013282:	015a      	lsls	r2, r3, #5
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	4413      	add	r3, r2
 8013288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801328c:	461a      	mov	r2, r3
 801328e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013292:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013294:	693b      	ldr	r3, [r7, #16]
 8013296:	3301      	adds	r3, #1
 8013298:	613b      	str	r3, [r7, #16]
 801329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801329c:	693a      	ldr	r2, [r7, #16]
 801329e:	429a      	cmp	r2, r3
 80132a0:	d3b7      	bcc.n	8013212 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80132a2:	2300      	movs	r3, #0
 80132a4:	613b      	str	r3, [r7, #16]
 80132a6:	e043      	b.n	8013330 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	015a      	lsls	r2, r3, #5
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	4413      	add	r3, r2
 80132b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80132ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80132be:	d118      	bne.n	80132f2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80132c0:	693b      	ldr	r3, [r7, #16]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d10a      	bne.n	80132dc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80132c6:	693b      	ldr	r3, [r7, #16]
 80132c8:	015a      	lsls	r2, r3, #5
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	4413      	add	r3, r2
 80132ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132d2:	461a      	mov	r2, r3
 80132d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80132d8:	6013      	str	r3, [r2, #0]
 80132da:	e013      	b.n	8013304 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80132dc:	693b      	ldr	r3, [r7, #16]
 80132de:	015a      	lsls	r2, r3, #5
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	4413      	add	r3, r2
 80132e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132e8:	461a      	mov	r2, r3
 80132ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80132ee:	6013      	str	r3, [r2, #0]
 80132f0:	e008      	b.n	8013304 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80132f2:	693b      	ldr	r3, [r7, #16]
 80132f4:	015a      	lsls	r2, r3, #5
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	4413      	add	r3, r2
 80132fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132fe:	461a      	mov	r2, r3
 8013300:	2300      	movs	r3, #0
 8013302:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013304:	693b      	ldr	r3, [r7, #16]
 8013306:	015a      	lsls	r2, r3, #5
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	4413      	add	r3, r2
 801330c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013310:	461a      	mov	r2, r3
 8013312:	2300      	movs	r3, #0
 8013314:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013316:	693b      	ldr	r3, [r7, #16]
 8013318:	015a      	lsls	r2, r3, #5
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	4413      	add	r3, r2
 801331e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013322:	461a      	mov	r2, r3
 8013324:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013328:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801332a:	693b      	ldr	r3, [r7, #16]
 801332c:	3301      	adds	r3, #1
 801332e:	613b      	str	r3, [r7, #16]
 8013330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013332:	693a      	ldr	r2, [r7, #16]
 8013334:	429a      	cmp	r2, r3
 8013336:	d3b7      	bcc.n	80132a8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801333e:	691b      	ldr	r3, [r3, #16]
 8013340:	68fa      	ldr	r2, [r7, #12]
 8013342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013346:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801334a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	2200      	movs	r2, #0
 8013350:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013358:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801335a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801335c:	2b00      	cmp	r3, #0
 801335e:	d105      	bne.n	801336c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	699b      	ldr	r3, [r3, #24]
 8013364:	f043 0210 	orr.w	r2, r3, #16
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	699a      	ldr	r2, [r3, #24]
 8013370:	4b0e      	ldr	r3, [pc, #56]	; (80133ac <USB_DevInit+0x2b4>)
 8013372:	4313      	orrs	r3, r2
 8013374:	687a      	ldr	r2, [r7, #4]
 8013376:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801337a:	2b00      	cmp	r3, #0
 801337c:	d005      	beq.n	801338a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	699b      	ldr	r3, [r3, #24]
 8013382:	f043 0208 	orr.w	r2, r3, #8
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801338a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801338c:	2b01      	cmp	r3, #1
 801338e:	d105      	bne.n	801339c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	699a      	ldr	r2, [r3, #24]
 8013394:	4b06      	ldr	r3, [pc, #24]	; (80133b0 <USB_DevInit+0x2b8>)
 8013396:	4313      	orrs	r3, r2
 8013398:	687a      	ldr	r2, [r7, #4]
 801339a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801339c:	7dfb      	ldrb	r3, [r7, #23]
}
 801339e:	4618      	mov	r0, r3
 80133a0:	3718      	adds	r7, #24
 80133a2:	46bd      	mov	sp, r7
 80133a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80133a8:	b004      	add	sp, #16
 80133aa:	4770      	bx	lr
 80133ac:	803c3800 	.word	0x803c3800
 80133b0:	40000004 	.word	0x40000004

080133b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80133b4:	b480      	push	{r7}
 80133b6:	b085      	sub	sp, #20
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
 80133bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80133be:	2300      	movs	r3, #0
 80133c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	3301      	adds	r3, #1
 80133c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	4a13      	ldr	r2, [pc, #76]	; (8013418 <USB_FlushTxFifo+0x64>)
 80133cc:	4293      	cmp	r3, r2
 80133ce:	d901      	bls.n	80133d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80133d0:	2303      	movs	r3, #3
 80133d2:	e01b      	b.n	801340c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	691b      	ldr	r3, [r3, #16]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	daf2      	bge.n	80133c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80133dc:	2300      	movs	r3, #0
 80133de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	019b      	lsls	r3, r3, #6
 80133e4:	f043 0220 	orr.w	r2, r3, #32
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	3301      	adds	r3, #1
 80133f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	4a08      	ldr	r2, [pc, #32]	; (8013418 <USB_FlushTxFifo+0x64>)
 80133f6:	4293      	cmp	r3, r2
 80133f8:	d901      	bls.n	80133fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80133fa:	2303      	movs	r3, #3
 80133fc:	e006      	b.n	801340c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	691b      	ldr	r3, [r3, #16]
 8013402:	f003 0320 	and.w	r3, r3, #32
 8013406:	2b20      	cmp	r3, #32
 8013408:	d0f0      	beq.n	80133ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801340a:	2300      	movs	r3, #0
}
 801340c:	4618      	mov	r0, r3
 801340e:	3714      	adds	r7, #20
 8013410:	46bd      	mov	sp, r7
 8013412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013416:	4770      	bx	lr
 8013418:	00030d40 	.word	0x00030d40

0801341c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801341c:	b480      	push	{r7}
 801341e:	b085      	sub	sp, #20
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013424:	2300      	movs	r3, #0
 8013426:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	3301      	adds	r3, #1
 801342c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	4a11      	ldr	r2, [pc, #68]	; (8013478 <USB_FlushRxFifo+0x5c>)
 8013432:	4293      	cmp	r3, r2
 8013434:	d901      	bls.n	801343a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013436:	2303      	movs	r3, #3
 8013438:	e018      	b.n	801346c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	691b      	ldr	r3, [r3, #16]
 801343e:	2b00      	cmp	r3, #0
 8013440:	daf2      	bge.n	8013428 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8013442:	2300      	movs	r3, #0
 8013444:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	2210      	movs	r2, #16
 801344a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	3301      	adds	r3, #1
 8013450:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	4a08      	ldr	r2, [pc, #32]	; (8013478 <USB_FlushRxFifo+0x5c>)
 8013456:	4293      	cmp	r3, r2
 8013458:	d901      	bls.n	801345e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801345a:	2303      	movs	r3, #3
 801345c:	e006      	b.n	801346c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	691b      	ldr	r3, [r3, #16]
 8013462:	f003 0310 	and.w	r3, r3, #16
 8013466:	2b10      	cmp	r3, #16
 8013468:	d0f0      	beq.n	801344c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801346a:	2300      	movs	r3, #0
}
 801346c:	4618      	mov	r0, r3
 801346e:	3714      	adds	r7, #20
 8013470:	46bd      	mov	sp, r7
 8013472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013476:	4770      	bx	lr
 8013478:	00030d40 	.word	0x00030d40

0801347c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801347c:	b480      	push	{r7}
 801347e:	b085      	sub	sp, #20
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
 8013484:	460b      	mov	r3, r1
 8013486:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013492:	681a      	ldr	r2, [r3, #0]
 8013494:	78fb      	ldrb	r3, [r7, #3]
 8013496:	68f9      	ldr	r1, [r7, #12]
 8013498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801349c:	4313      	orrs	r3, r2
 801349e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80134a0:	2300      	movs	r3, #0
}
 80134a2:	4618      	mov	r0, r3
 80134a4:	3714      	adds	r7, #20
 80134a6:	46bd      	mov	sp, r7
 80134a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ac:	4770      	bx	lr

080134ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80134ae:	b480      	push	{r7}
 80134b0:	b087      	sub	sp, #28
 80134b2:	af00      	add	r7, sp, #0
 80134b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80134ba:	693b      	ldr	r3, [r7, #16]
 80134bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134c0:	689b      	ldr	r3, [r3, #8]
 80134c2:	f003 0306 	and.w	r3, r3, #6
 80134c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d102      	bne.n	80134d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80134ce:	2300      	movs	r3, #0
 80134d0:	75fb      	strb	r3, [r7, #23]
 80134d2:	e00a      	b.n	80134ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	2b02      	cmp	r3, #2
 80134d8:	d002      	beq.n	80134e0 <USB_GetDevSpeed+0x32>
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	2b06      	cmp	r3, #6
 80134de:	d102      	bne.n	80134e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80134e0:	2302      	movs	r3, #2
 80134e2:	75fb      	strb	r3, [r7, #23]
 80134e4:	e001      	b.n	80134ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80134e6:	230f      	movs	r3, #15
 80134e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80134ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80134ec:	4618      	mov	r0, r3
 80134ee:	371c      	adds	r7, #28
 80134f0:	46bd      	mov	sp, r7
 80134f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f6:	4770      	bx	lr

080134f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80134f8:	b480      	push	{r7}
 80134fa:	b085      	sub	sp, #20
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
 8013500:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013506:	683b      	ldr	r3, [r7, #0]
 8013508:	781b      	ldrb	r3, [r3, #0]
 801350a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801350c:	683b      	ldr	r3, [r7, #0]
 801350e:	785b      	ldrb	r3, [r3, #1]
 8013510:	2b01      	cmp	r3, #1
 8013512:	d139      	bne.n	8013588 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801351a:	69da      	ldr	r2, [r3, #28]
 801351c:	683b      	ldr	r3, [r7, #0]
 801351e:	781b      	ldrb	r3, [r3, #0]
 8013520:	f003 030f 	and.w	r3, r3, #15
 8013524:	2101      	movs	r1, #1
 8013526:	fa01 f303 	lsl.w	r3, r1, r3
 801352a:	b29b      	uxth	r3, r3
 801352c:	68f9      	ldr	r1, [r7, #12]
 801352e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013532:	4313      	orrs	r3, r2
 8013534:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	015a      	lsls	r2, r3, #5
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	4413      	add	r3, r2
 801353e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013548:	2b00      	cmp	r3, #0
 801354a:	d153      	bne.n	80135f4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	015a      	lsls	r2, r3, #5
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	4413      	add	r3, r2
 8013554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013558:	681a      	ldr	r2, [r3, #0]
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	68db      	ldr	r3, [r3, #12]
 801355e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013562:	683b      	ldr	r3, [r7, #0]
 8013564:	791b      	ldrb	r3, [r3, #4]
 8013566:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013568:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	059b      	lsls	r3, r3, #22
 801356e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013570:	431a      	orrs	r2, r3
 8013572:	68bb      	ldr	r3, [r7, #8]
 8013574:	0159      	lsls	r1, r3, #5
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	440b      	add	r3, r1
 801357a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801357e:	4619      	mov	r1, r3
 8013580:	4b20      	ldr	r3, [pc, #128]	; (8013604 <USB_ActivateEndpoint+0x10c>)
 8013582:	4313      	orrs	r3, r2
 8013584:	600b      	str	r3, [r1, #0]
 8013586:	e035      	b.n	80135f4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801358e:	69da      	ldr	r2, [r3, #28]
 8013590:	683b      	ldr	r3, [r7, #0]
 8013592:	781b      	ldrb	r3, [r3, #0]
 8013594:	f003 030f 	and.w	r3, r3, #15
 8013598:	2101      	movs	r1, #1
 801359a:	fa01 f303 	lsl.w	r3, r1, r3
 801359e:	041b      	lsls	r3, r3, #16
 80135a0:	68f9      	ldr	r1, [r7, #12]
 80135a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80135a6:	4313      	orrs	r3, r2
 80135a8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	015a      	lsls	r2, r3, #5
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	4413      	add	r3, r2
 80135b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d119      	bne.n	80135f4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	015a      	lsls	r2, r3, #5
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	4413      	add	r3, r2
 80135c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135cc:	681a      	ldr	r2, [r3, #0]
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	68db      	ldr	r3, [r3, #12]
 80135d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	791b      	ldrb	r3, [r3, #4]
 80135da:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80135dc:	430b      	orrs	r3, r1
 80135de:	431a      	orrs	r2, r3
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	0159      	lsls	r1, r3, #5
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	440b      	add	r3, r1
 80135e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135ec:	4619      	mov	r1, r3
 80135ee:	4b05      	ldr	r3, [pc, #20]	; (8013604 <USB_ActivateEndpoint+0x10c>)
 80135f0:	4313      	orrs	r3, r2
 80135f2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80135f4:	2300      	movs	r3, #0
}
 80135f6:	4618      	mov	r0, r3
 80135f8:	3714      	adds	r7, #20
 80135fa:	46bd      	mov	sp, r7
 80135fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013600:	4770      	bx	lr
 8013602:	bf00      	nop
 8013604:	10008000 	.word	0x10008000

08013608 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013608:	b480      	push	{r7}
 801360a:	b085      	sub	sp, #20
 801360c:	af00      	add	r7, sp, #0
 801360e:	6078      	str	r0, [r7, #4]
 8013610:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013616:	683b      	ldr	r3, [r7, #0]
 8013618:	781b      	ldrb	r3, [r3, #0]
 801361a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801361c:	683b      	ldr	r3, [r7, #0]
 801361e:	785b      	ldrb	r3, [r3, #1]
 8013620:	2b01      	cmp	r3, #1
 8013622:	d161      	bne.n	80136e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013624:	68bb      	ldr	r3, [r7, #8]
 8013626:	015a      	lsls	r2, r3, #5
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	4413      	add	r3, r2
 801362c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013636:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801363a:	d11f      	bne.n	801367c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801363c:	68bb      	ldr	r3, [r7, #8]
 801363e:	015a      	lsls	r2, r3, #5
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	4413      	add	r3, r2
 8013644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	68ba      	ldr	r2, [r7, #8]
 801364c:	0151      	lsls	r1, r2, #5
 801364e:	68fa      	ldr	r2, [r7, #12]
 8013650:	440a      	add	r2, r1
 8013652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013656:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801365a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801365c:	68bb      	ldr	r3, [r7, #8]
 801365e:	015a      	lsls	r2, r3, #5
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	4413      	add	r3, r2
 8013664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	68ba      	ldr	r2, [r7, #8]
 801366c:	0151      	lsls	r1, r2, #5
 801366e:	68fa      	ldr	r2, [r7, #12]
 8013670:	440a      	add	r2, r1
 8013672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013676:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801367a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013684:	683b      	ldr	r3, [r7, #0]
 8013686:	781b      	ldrb	r3, [r3, #0]
 8013688:	f003 030f 	and.w	r3, r3, #15
 801368c:	2101      	movs	r1, #1
 801368e:	fa01 f303 	lsl.w	r3, r1, r3
 8013692:	b29b      	uxth	r3, r3
 8013694:	43db      	mvns	r3, r3
 8013696:	68f9      	ldr	r1, [r7, #12]
 8013698:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801369c:	4013      	ands	r3, r2
 801369e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136a6:	69da      	ldr	r2, [r3, #28]
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	781b      	ldrb	r3, [r3, #0]
 80136ac:	f003 030f 	and.w	r3, r3, #15
 80136b0:	2101      	movs	r1, #1
 80136b2:	fa01 f303 	lsl.w	r3, r1, r3
 80136b6:	b29b      	uxth	r3, r3
 80136b8:	43db      	mvns	r3, r3
 80136ba:	68f9      	ldr	r1, [r7, #12]
 80136bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80136c0:	4013      	ands	r3, r2
 80136c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	015a      	lsls	r2, r3, #5
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	4413      	add	r3, r2
 80136cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136d0:	681a      	ldr	r2, [r3, #0]
 80136d2:	68bb      	ldr	r3, [r7, #8]
 80136d4:	0159      	lsls	r1, r3, #5
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	440b      	add	r3, r1
 80136da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136de:	4619      	mov	r1, r3
 80136e0:	4b35      	ldr	r3, [pc, #212]	; (80137b8 <USB_DeactivateEndpoint+0x1b0>)
 80136e2:	4013      	ands	r3, r2
 80136e4:	600b      	str	r3, [r1, #0]
 80136e6:	e060      	b.n	80137aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80136e8:	68bb      	ldr	r3, [r7, #8]
 80136ea:	015a      	lsls	r2, r3, #5
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	4413      	add	r3, r2
 80136f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80136fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80136fe:	d11f      	bne.n	8013740 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	015a      	lsls	r2, r3, #5
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	4413      	add	r3, r2
 8013708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	68ba      	ldr	r2, [r7, #8]
 8013710:	0151      	lsls	r1, r2, #5
 8013712:	68fa      	ldr	r2, [r7, #12]
 8013714:	440a      	add	r2, r1
 8013716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801371a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801371e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013720:	68bb      	ldr	r3, [r7, #8]
 8013722:	015a      	lsls	r2, r3, #5
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	4413      	add	r3, r2
 8013728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	68ba      	ldr	r2, [r7, #8]
 8013730:	0151      	lsls	r1, r2, #5
 8013732:	68fa      	ldr	r2, [r7, #12]
 8013734:	440a      	add	r2, r1
 8013736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801373a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801373e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013748:	683b      	ldr	r3, [r7, #0]
 801374a:	781b      	ldrb	r3, [r3, #0]
 801374c:	f003 030f 	and.w	r3, r3, #15
 8013750:	2101      	movs	r1, #1
 8013752:	fa01 f303 	lsl.w	r3, r1, r3
 8013756:	041b      	lsls	r3, r3, #16
 8013758:	43db      	mvns	r3, r3
 801375a:	68f9      	ldr	r1, [r7, #12]
 801375c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013760:	4013      	ands	r3, r2
 8013762:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801376a:	69da      	ldr	r2, [r3, #28]
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	781b      	ldrb	r3, [r3, #0]
 8013770:	f003 030f 	and.w	r3, r3, #15
 8013774:	2101      	movs	r1, #1
 8013776:	fa01 f303 	lsl.w	r3, r1, r3
 801377a:	041b      	lsls	r3, r3, #16
 801377c:	43db      	mvns	r3, r3
 801377e:	68f9      	ldr	r1, [r7, #12]
 8013780:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013784:	4013      	ands	r3, r2
 8013786:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	015a      	lsls	r2, r3, #5
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	4413      	add	r3, r2
 8013790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013794:	681a      	ldr	r2, [r3, #0]
 8013796:	68bb      	ldr	r3, [r7, #8]
 8013798:	0159      	lsls	r1, r3, #5
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	440b      	add	r3, r1
 801379e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137a2:	4619      	mov	r1, r3
 80137a4:	4b05      	ldr	r3, [pc, #20]	; (80137bc <USB_DeactivateEndpoint+0x1b4>)
 80137a6:	4013      	ands	r3, r2
 80137a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80137aa:	2300      	movs	r3, #0
}
 80137ac:	4618      	mov	r0, r3
 80137ae:	3714      	adds	r7, #20
 80137b0:	46bd      	mov	sp, r7
 80137b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b6:	4770      	bx	lr
 80137b8:	ec337800 	.word	0xec337800
 80137bc:	eff37800 	.word	0xeff37800

080137c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b08a      	sub	sp, #40	; 0x28
 80137c4:	af02      	add	r7, sp, #8
 80137c6:	60f8      	str	r0, [r7, #12]
 80137c8:	60b9      	str	r1, [r7, #8]
 80137ca:	4613      	mov	r3, r2
 80137cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80137d2:	68bb      	ldr	r3, [r7, #8]
 80137d4:	781b      	ldrb	r3, [r3, #0]
 80137d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80137d8:	68bb      	ldr	r3, [r7, #8]
 80137da:	785b      	ldrb	r3, [r3, #1]
 80137dc:	2b01      	cmp	r3, #1
 80137de:	f040 8163 	bne.w	8013aa8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80137e2:	68bb      	ldr	r3, [r7, #8]
 80137e4:	699b      	ldr	r3, [r3, #24]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d132      	bne.n	8013850 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80137ea:	69bb      	ldr	r3, [r7, #24]
 80137ec:	015a      	lsls	r2, r3, #5
 80137ee:	69fb      	ldr	r3, [r7, #28]
 80137f0:	4413      	add	r3, r2
 80137f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137f6:	691a      	ldr	r2, [r3, #16]
 80137f8:	69bb      	ldr	r3, [r7, #24]
 80137fa:	0159      	lsls	r1, r3, #5
 80137fc:	69fb      	ldr	r3, [r7, #28]
 80137fe:	440b      	add	r3, r1
 8013800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013804:	4619      	mov	r1, r3
 8013806:	4ba5      	ldr	r3, [pc, #660]	; (8013a9c <USB_EPStartXfer+0x2dc>)
 8013808:	4013      	ands	r3, r2
 801380a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801380c:	69bb      	ldr	r3, [r7, #24]
 801380e:	015a      	lsls	r2, r3, #5
 8013810:	69fb      	ldr	r3, [r7, #28]
 8013812:	4413      	add	r3, r2
 8013814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013818:	691b      	ldr	r3, [r3, #16]
 801381a:	69ba      	ldr	r2, [r7, #24]
 801381c:	0151      	lsls	r1, r2, #5
 801381e:	69fa      	ldr	r2, [r7, #28]
 8013820:	440a      	add	r2, r1
 8013822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013826:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801382a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801382c:	69bb      	ldr	r3, [r7, #24]
 801382e:	015a      	lsls	r2, r3, #5
 8013830:	69fb      	ldr	r3, [r7, #28]
 8013832:	4413      	add	r3, r2
 8013834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013838:	691a      	ldr	r2, [r3, #16]
 801383a:	69bb      	ldr	r3, [r7, #24]
 801383c:	0159      	lsls	r1, r3, #5
 801383e:	69fb      	ldr	r3, [r7, #28]
 8013840:	440b      	add	r3, r1
 8013842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013846:	4619      	mov	r1, r3
 8013848:	4b95      	ldr	r3, [pc, #596]	; (8013aa0 <USB_EPStartXfer+0x2e0>)
 801384a:	4013      	ands	r3, r2
 801384c:	610b      	str	r3, [r1, #16]
 801384e:	e074      	b.n	801393a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013850:	69bb      	ldr	r3, [r7, #24]
 8013852:	015a      	lsls	r2, r3, #5
 8013854:	69fb      	ldr	r3, [r7, #28]
 8013856:	4413      	add	r3, r2
 8013858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801385c:	691a      	ldr	r2, [r3, #16]
 801385e:	69bb      	ldr	r3, [r7, #24]
 8013860:	0159      	lsls	r1, r3, #5
 8013862:	69fb      	ldr	r3, [r7, #28]
 8013864:	440b      	add	r3, r1
 8013866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801386a:	4619      	mov	r1, r3
 801386c:	4b8c      	ldr	r3, [pc, #560]	; (8013aa0 <USB_EPStartXfer+0x2e0>)
 801386e:	4013      	ands	r3, r2
 8013870:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013872:	69bb      	ldr	r3, [r7, #24]
 8013874:	015a      	lsls	r2, r3, #5
 8013876:	69fb      	ldr	r3, [r7, #28]
 8013878:	4413      	add	r3, r2
 801387a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801387e:	691a      	ldr	r2, [r3, #16]
 8013880:	69bb      	ldr	r3, [r7, #24]
 8013882:	0159      	lsls	r1, r3, #5
 8013884:	69fb      	ldr	r3, [r7, #28]
 8013886:	440b      	add	r3, r1
 8013888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801388c:	4619      	mov	r1, r3
 801388e:	4b83      	ldr	r3, [pc, #524]	; (8013a9c <USB_EPStartXfer+0x2dc>)
 8013890:	4013      	ands	r3, r2
 8013892:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013894:	69bb      	ldr	r3, [r7, #24]
 8013896:	015a      	lsls	r2, r3, #5
 8013898:	69fb      	ldr	r3, [r7, #28]
 801389a:	4413      	add	r3, r2
 801389c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138a0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80138a2:	68bb      	ldr	r3, [r7, #8]
 80138a4:	6999      	ldr	r1, [r3, #24]
 80138a6:	68bb      	ldr	r3, [r7, #8]
 80138a8:	68db      	ldr	r3, [r3, #12]
 80138aa:	440b      	add	r3, r1
 80138ac:	1e59      	subs	r1, r3, #1
 80138ae:	68bb      	ldr	r3, [r7, #8]
 80138b0:	68db      	ldr	r3, [r3, #12]
 80138b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80138b6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80138b8:	4b7a      	ldr	r3, [pc, #488]	; (8013aa4 <USB_EPStartXfer+0x2e4>)
 80138ba:	400b      	ands	r3, r1
 80138bc:	69b9      	ldr	r1, [r7, #24]
 80138be:	0148      	lsls	r0, r1, #5
 80138c0:	69f9      	ldr	r1, [r7, #28]
 80138c2:	4401      	add	r1, r0
 80138c4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80138c8:	4313      	orrs	r3, r2
 80138ca:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80138cc:	69bb      	ldr	r3, [r7, #24]
 80138ce:	015a      	lsls	r2, r3, #5
 80138d0:	69fb      	ldr	r3, [r7, #28]
 80138d2:	4413      	add	r3, r2
 80138d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138d8:	691a      	ldr	r2, [r3, #16]
 80138da:	68bb      	ldr	r3, [r7, #8]
 80138dc:	699b      	ldr	r3, [r3, #24]
 80138de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80138e2:	69b9      	ldr	r1, [r7, #24]
 80138e4:	0148      	lsls	r0, r1, #5
 80138e6:	69f9      	ldr	r1, [r7, #28]
 80138e8:	4401      	add	r1, r0
 80138ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80138ee:	4313      	orrs	r3, r2
 80138f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80138f2:	68bb      	ldr	r3, [r7, #8]
 80138f4:	791b      	ldrb	r3, [r3, #4]
 80138f6:	2b01      	cmp	r3, #1
 80138f8:	d11f      	bne.n	801393a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80138fa:	69bb      	ldr	r3, [r7, #24]
 80138fc:	015a      	lsls	r2, r3, #5
 80138fe:	69fb      	ldr	r3, [r7, #28]
 8013900:	4413      	add	r3, r2
 8013902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013906:	691b      	ldr	r3, [r3, #16]
 8013908:	69ba      	ldr	r2, [r7, #24]
 801390a:	0151      	lsls	r1, r2, #5
 801390c:	69fa      	ldr	r2, [r7, #28]
 801390e:	440a      	add	r2, r1
 8013910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013914:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013918:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801391a:	69bb      	ldr	r3, [r7, #24]
 801391c:	015a      	lsls	r2, r3, #5
 801391e:	69fb      	ldr	r3, [r7, #28]
 8013920:	4413      	add	r3, r2
 8013922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013926:	691b      	ldr	r3, [r3, #16]
 8013928:	69ba      	ldr	r2, [r7, #24]
 801392a:	0151      	lsls	r1, r2, #5
 801392c:	69fa      	ldr	r2, [r7, #28]
 801392e:	440a      	add	r2, r1
 8013930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013934:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013938:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801393a:	79fb      	ldrb	r3, [r7, #7]
 801393c:	2b01      	cmp	r3, #1
 801393e:	d14b      	bne.n	80139d8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013940:	68bb      	ldr	r3, [r7, #8]
 8013942:	695b      	ldr	r3, [r3, #20]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d009      	beq.n	801395c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013948:	69bb      	ldr	r3, [r7, #24]
 801394a:	015a      	lsls	r2, r3, #5
 801394c:	69fb      	ldr	r3, [r7, #28]
 801394e:	4413      	add	r3, r2
 8013950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013954:	461a      	mov	r2, r3
 8013956:	68bb      	ldr	r3, [r7, #8]
 8013958:	695b      	ldr	r3, [r3, #20]
 801395a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	791b      	ldrb	r3, [r3, #4]
 8013960:	2b01      	cmp	r3, #1
 8013962:	d128      	bne.n	80139b6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013964:	69fb      	ldr	r3, [r7, #28]
 8013966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801396a:	689b      	ldr	r3, [r3, #8]
 801396c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013970:	2b00      	cmp	r3, #0
 8013972:	d110      	bne.n	8013996 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013974:	69bb      	ldr	r3, [r7, #24]
 8013976:	015a      	lsls	r2, r3, #5
 8013978:	69fb      	ldr	r3, [r7, #28]
 801397a:	4413      	add	r3, r2
 801397c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	69ba      	ldr	r2, [r7, #24]
 8013984:	0151      	lsls	r1, r2, #5
 8013986:	69fa      	ldr	r2, [r7, #28]
 8013988:	440a      	add	r2, r1
 801398a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801398e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013992:	6013      	str	r3, [r2, #0]
 8013994:	e00f      	b.n	80139b6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013996:	69bb      	ldr	r3, [r7, #24]
 8013998:	015a      	lsls	r2, r3, #5
 801399a:	69fb      	ldr	r3, [r7, #28]
 801399c:	4413      	add	r3, r2
 801399e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	69ba      	ldr	r2, [r7, #24]
 80139a6:	0151      	lsls	r1, r2, #5
 80139a8:	69fa      	ldr	r2, [r7, #28]
 80139aa:	440a      	add	r2, r1
 80139ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80139b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80139b6:	69bb      	ldr	r3, [r7, #24]
 80139b8:	015a      	lsls	r2, r3, #5
 80139ba:	69fb      	ldr	r3, [r7, #28]
 80139bc:	4413      	add	r3, r2
 80139be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	69ba      	ldr	r2, [r7, #24]
 80139c6:	0151      	lsls	r1, r2, #5
 80139c8:	69fa      	ldr	r2, [r7, #28]
 80139ca:	440a      	add	r2, r1
 80139cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80139d4:	6013      	str	r3, [r2, #0]
 80139d6:	e137      	b.n	8013c48 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80139d8:	69bb      	ldr	r3, [r7, #24]
 80139da:	015a      	lsls	r2, r3, #5
 80139dc:	69fb      	ldr	r3, [r7, #28]
 80139de:	4413      	add	r3, r2
 80139e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	69ba      	ldr	r2, [r7, #24]
 80139e8:	0151      	lsls	r1, r2, #5
 80139ea:	69fa      	ldr	r2, [r7, #28]
 80139ec:	440a      	add	r2, r1
 80139ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80139f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80139f8:	68bb      	ldr	r3, [r7, #8]
 80139fa:	791b      	ldrb	r3, [r3, #4]
 80139fc:	2b01      	cmp	r3, #1
 80139fe:	d015      	beq.n	8013a2c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013a00:	68bb      	ldr	r3, [r7, #8]
 8013a02:	699b      	ldr	r3, [r3, #24]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	f000 811f 	beq.w	8013c48 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013a0a:	69fb      	ldr	r3, [r7, #28]
 8013a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013a12:	68bb      	ldr	r3, [r7, #8]
 8013a14:	781b      	ldrb	r3, [r3, #0]
 8013a16:	f003 030f 	and.w	r3, r3, #15
 8013a1a:	2101      	movs	r1, #1
 8013a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8013a20:	69f9      	ldr	r1, [r7, #28]
 8013a22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013a26:	4313      	orrs	r3, r2
 8013a28:	634b      	str	r3, [r1, #52]	; 0x34
 8013a2a:	e10d      	b.n	8013c48 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013a2c:	69fb      	ldr	r3, [r7, #28]
 8013a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a32:	689b      	ldr	r3, [r3, #8]
 8013a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d110      	bne.n	8013a5e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013a3c:	69bb      	ldr	r3, [r7, #24]
 8013a3e:	015a      	lsls	r2, r3, #5
 8013a40:	69fb      	ldr	r3, [r7, #28]
 8013a42:	4413      	add	r3, r2
 8013a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	69ba      	ldr	r2, [r7, #24]
 8013a4c:	0151      	lsls	r1, r2, #5
 8013a4e:	69fa      	ldr	r2, [r7, #28]
 8013a50:	440a      	add	r2, r1
 8013a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013a5a:	6013      	str	r3, [r2, #0]
 8013a5c:	e00f      	b.n	8013a7e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013a5e:	69bb      	ldr	r3, [r7, #24]
 8013a60:	015a      	lsls	r2, r3, #5
 8013a62:	69fb      	ldr	r3, [r7, #28]
 8013a64:	4413      	add	r3, r2
 8013a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	69ba      	ldr	r2, [r7, #24]
 8013a6e:	0151      	lsls	r1, r2, #5
 8013a70:	69fa      	ldr	r2, [r7, #28]
 8013a72:	440a      	add	r2, r1
 8013a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013a7c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013a7e:	68bb      	ldr	r3, [r7, #8]
 8013a80:	6919      	ldr	r1, [r3, #16]
 8013a82:	68bb      	ldr	r3, [r7, #8]
 8013a84:	781a      	ldrb	r2, [r3, #0]
 8013a86:	68bb      	ldr	r3, [r7, #8]
 8013a88:	699b      	ldr	r3, [r3, #24]
 8013a8a:	b298      	uxth	r0, r3
 8013a8c:	79fb      	ldrb	r3, [r7, #7]
 8013a8e:	9300      	str	r3, [sp, #0]
 8013a90:	4603      	mov	r3, r0
 8013a92:	68f8      	ldr	r0, [r7, #12]
 8013a94:	f000 faea 	bl	801406c <USB_WritePacket>
 8013a98:	e0d6      	b.n	8013c48 <USB_EPStartXfer+0x488>
 8013a9a:	bf00      	nop
 8013a9c:	e007ffff 	.word	0xe007ffff
 8013aa0:	fff80000 	.word	0xfff80000
 8013aa4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013aa8:	69bb      	ldr	r3, [r7, #24]
 8013aaa:	015a      	lsls	r2, r3, #5
 8013aac:	69fb      	ldr	r3, [r7, #28]
 8013aae:	4413      	add	r3, r2
 8013ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ab4:	691a      	ldr	r2, [r3, #16]
 8013ab6:	69bb      	ldr	r3, [r7, #24]
 8013ab8:	0159      	lsls	r1, r3, #5
 8013aba:	69fb      	ldr	r3, [r7, #28]
 8013abc:	440b      	add	r3, r1
 8013abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ac2:	4619      	mov	r1, r3
 8013ac4:	4b63      	ldr	r3, [pc, #396]	; (8013c54 <USB_EPStartXfer+0x494>)
 8013ac6:	4013      	ands	r3, r2
 8013ac8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013aca:	69bb      	ldr	r3, [r7, #24]
 8013acc:	015a      	lsls	r2, r3, #5
 8013ace:	69fb      	ldr	r3, [r7, #28]
 8013ad0:	4413      	add	r3, r2
 8013ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ad6:	691a      	ldr	r2, [r3, #16]
 8013ad8:	69bb      	ldr	r3, [r7, #24]
 8013ada:	0159      	lsls	r1, r3, #5
 8013adc:	69fb      	ldr	r3, [r7, #28]
 8013ade:	440b      	add	r3, r1
 8013ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ae4:	4619      	mov	r1, r3
 8013ae6:	4b5c      	ldr	r3, [pc, #368]	; (8013c58 <USB_EPStartXfer+0x498>)
 8013ae8:	4013      	ands	r3, r2
 8013aea:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8013aec:	68bb      	ldr	r3, [r7, #8]
 8013aee:	699b      	ldr	r3, [r3, #24]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d123      	bne.n	8013b3c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013af4:	69bb      	ldr	r3, [r7, #24]
 8013af6:	015a      	lsls	r2, r3, #5
 8013af8:	69fb      	ldr	r3, [r7, #28]
 8013afa:	4413      	add	r3, r2
 8013afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b00:	691a      	ldr	r2, [r3, #16]
 8013b02:	68bb      	ldr	r3, [r7, #8]
 8013b04:	68db      	ldr	r3, [r3, #12]
 8013b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013b0a:	69b9      	ldr	r1, [r7, #24]
 8013b0c:	0148      	lsls	r0, r1, #5
 8013b0e:	69f9      	ldr	r1, [r7, #28]
 8013b10:	4401      	add	r1, r0
 8013b12:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013b16:	4313      	orrs	r3, r2
 8013b18:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013b1a:	69bb      	ldr	r3, [r7, #24]
 8013b1c:	015a      	lsls	r2, r3, #5
 8013b1e:	69fb      	ldr	r3, [r7, #28]
 8013b20:	4413      	add	r3, r2
 8013b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b26:	691b      	ldr	r3, [r3, #16]
 8013b28:	69ba      	ldr	r2, [r7, #24]
 8013b2a:	0151      	lsls	r1, r2, #5
 8013b2c:	69fa      	ldr	r2, [r7, #28]
 8013b2e:	440a      	add	r2, r1
 8013b30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013b38:	6113      	str	r3, [r2, #16]
 8013b3a:	e037      	b.n	8013bac <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013b3c:	68bb      	ldr	r3, [r7, #8]
 8013b3e:	699a      	ldr	r2, [r3, #24]
 8013b40:	68bb      	ldr	r3, [r7, #8]
 8013b42:	68db      	ldr	r3, [r3, #12]
 8013b44:	4413      	add	r3, r2
 8013b46:	1e5a      	subs	r2, r3, #1
 8013b48:	68bb      	ldr	r3, [r7, #8]
 8013b4a:	68db      	ldr	r3, [r3, #12]
 8013b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013b50:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8013b52:	68bb      	ldr	r3, [r7, #8]
 8013b54:	68db      	ldr	r3, [r3, #12]
 8013b56:	8afa      	ldrh	r2, [r7, #22]
 8013b58:	fb03 f202 	mul.w	r2, r3, r2
 8013b5c:	68bb      	ldr	r3, [r7, #8]
 8013b5e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013b60:	69bb      	ldr	r3, [r7, #24]
 8013b62:	015a      	lsls	r2, r3, #5
 8013b64:	69fb      	ldr	r3, [r7, #28]
 8013b66:	4413      	add	r3, r2
 8013b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b6c:	691a      	ldr	r2, [r3, #16]
 8013b6e:	8afb      	ldrh	r3, [r7, #22]
 8013b70:	04d9      	lsls	r1, r3, #19
 8013b72:	4b3a      	ldr	r3, [pc, #232]	; (8013c5c <USB_EPStartXfer+0x49c>)
 8013b74:	400b      	ands	r3, r1
 8013b76:	69b9      	ldr	r1, [r7, #24]
 8013b78:	0148      	lsls	r0, r1, #5
 8013b7a:	69f9      	ldr	r1, [r7, #28]
 8013b7c:	4401      	add	r1, r0
 8013b7e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013b82:	4313      	orrs	r3, r2
 8013b84:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013b86:	69bb      	ldr	r3, [r7, #24]
 8013b88:	015a      	lsls	r2, r3, #5
 8013b8a:	69fb      	ldr	r3, [r7, #28]
 8013b8c:	4413      	add	r3, r2
 8013b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b92:	691a      	ldr	r2, [r3, #16]
 8013b94:	68bb      	ldr	r3, [r7, #8]
 8013b96:	69db      	ldr	r3, [r3, #28]
 8013b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013b9c:	69b9      	ldr	r1, [r7, #24]
 8013b9e:	0148      	lsls	r0, r1, #5
 8013ba0:	69f9      	ldr	r1, [r7, #28]
 8013ba2:	4401      	add	r1, r0
 8013ba4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013ba8:	4313      	orrs	r3, r2
 8013baa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8013bac:	79fb      	ldrb	r3, [r7, #7]
 8013bae:	2b01      	cmp	r3, #1
 8013bb0:	d10d      	bne.n	8013bce <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013bb2:	68bb      	ldr	r3, [r7, #8]
 8013bb4:	691b      	ldr	r3, [r3, #16]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d009      	beq.n	8013bce <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013bba:	68bb      	ldr	r3, [r7, #8]
 8013bbc:	6919      	ldr	r1, [r3, #16]
 8013bbe:	69bb      	ldr	r3, [r7, #24]
 8013bc0:	015a      	lsls	r2, r3, #5
 8013bc2:	69fb      	ldr	r3, [r7, #28]
 8013bc4:	4413      	add	r3, r2
 8013bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bca:	460a      	mov	r2, r1
 8013bcc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013bce:	68bb      	ldr	r3, [r7, #8]
 8013bd0:	791b      	ldrb	r3, [r3, #4]
 8013bd2:	2b01      	cmp	r3, #1
 8013bd4:	d128      	bne.n	8013c28 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013bd6:	69fb      	ldr	r3, [r7, #28]
 8013bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bdc:	689b      	ldr	r3, [r3, #8]
 8013bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d110      	bne.n	8013c08 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013be6:	69bb      	ldr	r3, [r7, #24]
 8013be8:	015a      	lsls	r2, r3, #5
 8013bea:	69fb      	ldr	r3, [r7, #28]
 8013bec:	4413      	add	r3, r2
 8013bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	69ba      	ldr	r2, [r7, #24]
 8013bf6:	0151      	lsls	r1, r2, #5
 8013bf8:	69fa      	ldr	r2, [r7, #28]
 8013bfa:	440a      	add	r2, r1
 8013bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013c04:	6013      	str	r3, [r2, #0]
 8013c06:	e00f      	b.n	8013c28 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013c08:	69bb      	ldr	r3, [r7, #24]
 8013c0a:	015a      	lsls	r2, r3, #5
 8013c0c:	69fb      	ldr	r3, [r7, #28]
 8013c0e:	4413      	add	r3, r2
 8013c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	69ba      	ldr	r2, [r7, #24]
 8013c18:	0151      	lsls	r1, r2, #5
 8013c1a:	69fa      	ldr	r2, [r7, #28]
 8013c1c:	440a      	add	r2, r1
 8013c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013c26:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013c28:	69bb      	ldr	r3, [r7, #24]
 8013c2a:	015a      	lsls	r2, r3, #5
 8013c2c:	69fb      	ldr	r3, [r7, #28]
 8013c2e:	4413      	add	r3, r2
 8013c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	69ba      	ldr	r2, [r7, #24]
 8013c38:	0151      	lsls	r1, r2, #5
 8013c3a:	69fa      	ldr	r2, [r7, #28]
 8013c3c:	440a      	add	r2, r1
 8013c3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013c46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013c48:	2300      	movs	r3, #0
}
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	3720      	adds	r7, #32
 8013c4e:	46bd      	mov	sp, r7
 8013c50:	bd80      	pop	{r7, pc}
 8013c52:	bf00      	nop
 8013c54:	fff80000 	.word	0xfff80000
 8013c58:	e007ffff 	.word	0xe007ffff
 8013c5c:	1ff80000 	.word	0x1ff80000

08013c60 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013c60:	b480      	push	{r7}
 8013c62:	b087      	sub	sp, #28
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	60f8      	str	r0, [r7, #12]
 8013c68:	60b9      	str	r1, [r7, #8]
 8013c6a:	4613      	mov	r3, r2
 8013c6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8013c72:	68bb      	ldr	r3, [r7, #8]
 8013c74:	781b      	ldrb	r3, [r3, #0]
 8013c76:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013c78:	68bb      	ldr	r3, [r7, #8]
 8013c7a:	785b      	ldrb	r3, [r3, #1]
 8013c7c:	2b01      	cmp	r3, #1
 8013c7e:	f040 80ce 	bne.w	8013e1e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013c82:	68bb      	ldr	r3, [r7, #8]
 8013c84:	699b      	ldr	r3, [r3, #24]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d132      	bne.n	8013cf0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013c8a:	693b      	ldr	r3, [r7, #16]
 8013c8c:	015a      	lsls	r2, r3, #5
 8013c8e:	697b      	ldr	r3, [r7, #20]
 8013c90:	4413      	add	r3, r2
 8013c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c96:	691a      	ldr	r2, [r3, #16]
 8013c98:	693b      	ldr	r3, [r7, #16]
 8013c9a:	0159      	lsls	r1, r3, #5
 8013c9c:	697b      	ldr	r3, [r7, #20]
 8013c9e:	440b      	add	r3, r1
 8013ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ca4:	4619      	mov	r1, r3
 8013ca6:	4b9a      	ldr	r3, [pc, #616]	; (8013f10 <USB_EP0StartXfer+0x2b0>)
 8013ca8:	4013      	ands	r3, r2
 8013caa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013cac:	693b      	ldr	r3, [r7, #16]
 8013cae:	015a      	lsls	r2, r3, #5
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	4413      	add	r3, r2
 8013cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cb8:	691b      	ldr	r3, [r3, #16]
 8013cba:	693a      	ldr	r2, [r7, #16]
 8013cbc:	0151      	lsls	r1, r2, #5
 8013cbe:	697a      	ldr	r2, [r7, #20]
 8013cc0:	440a      	add	r2, r1
 8013cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013cca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013ccc:	693b      	ldr	r3, [r7, #16]
 8013cce:	015a      	lsls	r2, r3, #5
 8013cd0:	697b      	ldr	r3, [r7, #20]
 8013cd2:	4413      	add	r3, r2
 8013cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cd8:	691a      	ldr	r2, [r3, #16]
 8013cda:	693b      	ldr	r3, [r7, #16]
 8013cdc:	0159      	lsls	r1, r3, #5
 8013cde:	697b      	ldr	r3, [r7, #20]
 8013ce0:	440b      	add	r3, r1
 8013ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ce6:	4619      	mov	r1, r3
 8013ce8:	4b8a      	ldr	r3, [pc, #552]	; (8013f14 <USB_EP0StartXfer+0x2b4>)
 8013cea:	4013      	ands	r3, r2
 8013cec:	610b      	str	r3, [r1, #16]
 8013cee:	e04e      	b.n	8013d8e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013cf0:	693b      	ldr	r3, [r7, #16]
 8013cf2:	015a      	lsls	r2, r3, #5
 8013cf4:	697b      	ldr	r3, [r7, #20]
 8013cf6:	4413      	add	r3, r2
 8013cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cfc:	691a      	ldr	r2, [r3, #16]
 8013cfe:	693b      	ldr	r3, [r7, #16]
 8013d00:	0159      	lsls	r1, r3, #5
 8013d02:	697b      	ldr	r3, [r7, #20]
 8013d04:	440b      	add	r3, r1
 8013d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d0a:	4619      	mov	r1, r3
 8013d0c:	4b81      	ldr	r3, [pc, #516]	; (8013f14 <USB_EP0StartXfer+0x2b4>)
 8013d0e:	4013      	ands	r3, r2
 8013d10:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013d12:	693b      	ldr	r3, [r7, #16]
 8013d14:	015a      	lsls	r2, r3, #5
 8013d16:	697b      	ldr	r3, [r7, #20]
 8013d18:	4413      	add	r3, r2
 8013d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d1e:	691a      	ldr	r2, [r3, #16]
 8013d20:	693b      	ldr	r3, [r7, #16]
 8013d22:	0159      	lsls	r1, r3, #5
 8013d24:	697b      	ldr	r3, [r7, #20]
 8013d26:	440b      	add	r3, r1
 8013d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d2c:	4619      	mov	r1, r3
 8013d2e:	4b78      	ldr	r3, [pc, #480]	; (8013f10 <USB_EP0StartXfer+0x2b0>)
 8013d30:	4013      	ands	r3, r2
 8013d32:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8013d34:	68bb      	ldr	r3, [r7, #8]
 8013d36:	699a      	ldr	r2, [r3, #24]
 8013d38:	68bb      	ldr	r3, [r7, #8]
 8013d3a:	68db      	ldr	r3, [r3, #12]
 8013d3c:	429a      	cmp	r2, r3
 8013d3e:	d903      	bls.n	8013d48 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8013d40:	68bb      	ldr	r3, [r7, #8]
 8013d42:	68da      	ldr	r2, [r3, #12]
 8013d44:	68bb      	ldr	r3, [r7, #8]
 8013d46:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013d48:	693b      	ldr	r3, [r7, #16]
 8013d4a:	015a      	lsls	r2, r3, #5
 8013d4c:	697b      	ldr	r3, [r7, #20]
 8013d4e:	4413      	add	r3, r2
 8013d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d54:	691b      	ldr	r3, [r3, #16]
 8013d56:	693a      	ldr	r2, [r7, #16]
 8013d58:	0151      	lsls	r1, r2, #5
 8013d5a:	697a      	ldr	r2, [r7, #20]
 8013d5c:	440a      	add	r2, r1
 8013d5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013d66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013d68:	693b      	ldr	r3, [r7, #16]
 8013d6a:	015a      	lsls	r2, r3, #5
 8013d6c:	697b      	ldr	r3, [r7, #20]
 8013d6e:	4413      	add	r3, r2
 8013d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d74:	691a      	ldr	r2, [r3, #16]
 8013d76:	68bb      	ldr	r3, [r7, #8]
 8013d78:	699b      	ldr	r3, [r3, #24]
 8013d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013d7e:	6939      	ldr	r1, [r7, #16]
 8013d80:	0148      	lsls	r0, r1, #5
 8013d82:	6979      	ldr	r1, [r7, #20]
 8013d84:	4401      	add	r1, r0
 8013d86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013d8a:	4313      	orrs	r3, r2
 8013d8c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8013d8e:	79fb      	ldrb	r3, [r7, #7]
 8013d90:	2b01      	cmp	r3, #1
 8013d92:	d11e      	bne.n	8013dd2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013d94:	68bb      	ldr	r3, [r7, #8]
 8013d96:	695b      	ldr	r3, [r3, #20]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d009      	beq.n	8013db0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013d9c:	693b      	ldr	r3, [r7, #16]
 8013d9e:	015a      	lsls	r2, r3, #5
 8013da0:	697b      	ldr	r3, [r7, #20]
 8013da2:	4413      	add	r3, r2
 8013da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013da8:	461a      	mov	r2, r3
 8013daa:	68bb      	ldr	r3, [r7, #8]
 8013dac:	695b      	ldr	r3, [r3, #20]
 8013dae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013db0:	693b      	ldr	r3, [r7, #16]
 8013db2:	015a      	lsls	r2, r3, #5
 8013db4:	697b      	ldr	r3, [r7, #20]
 8013db6:	4413      	add	r3, r2
 8013db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	693a      	ldr	r2, [r7, #16]
 8013dc0:	0151      	lsls	r1, r2, #5
 8013dc2:	697a      	ldr	r2, [r7, #20]
 8013dc4:	440a      	add	r2, r1
 8013dc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013dca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013dce:	6013      	str	r3, [r2, #0]
 8013dd0:	e097      	b.n	8013f02 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013dd2:	693b      	ldr	r3, [r7, #16]
 8013dd4:	015a      	lsls	r2, r3, #5
 8013dd6:	697b      	ldr	r3, [r7, #20]
 8013dd8:	4413      	add	r3, r2
 8013dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	693a      	ldr	r2, [r7, #16]
 8013de2:	0151      	lsls	r1, r2, #5
 8013de4:	697a      	ldr	r2, [r7, #20]
 8013de6:	440a      	add	r2, r1
 8013de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013dec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013df0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8013df2:	68bb      	ldr	r3, [r7, #8]
 8013df4:	699b      	ldr	r3, [r3, #24]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	f000 8083 	beq.w	8013f02 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013dfc:	697b      	ldr	r3, [r7, #20]
 8013dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013e04:	68bb      	ldr	r3, [r7, #8]
 8013e06:	781b      	ldrb	r3, [r3, #0]
 8013e08:	f003 030f 	and.w	r3, r3, #15
 8013e0c:	2101      	movs	r1, #1
 8013e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8013e12:	6979      	ldr	r1, [r7, #20]
 8013e14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013e18:	4313      	orrs	r3, r2
 8013e1a:	634b      	str	r3, [r1, #52]	; 0x34
 8013e1c:	e071      	b.n	8013f02 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013e1e:	693b      	ldr	r3, [r7, #16]
 8013e20:	015a      	lsls	r2, r3, #5
 8013e22:	697b      	ldr	r3, [r7, #20]
 8013e24:	4413      	add	r3, r2
 8013e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e2a:	691a      	ldr	r2, [r3, #16]
 8013e2c:	693b      	ldr	r3, [r7, #16]
 8013e2e:	0159      	lsls	r1, r3, #5
 8013e30:	697b      	ldr	r3, [r7, #20]
 8013e32:	440b      	add	r3, r1
 8013e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e38:	4619      	mov	r1, r3
 8013e3a:	4b36      	ldr	r3, [pc, #216]	; (8013f14 <USB_EP0StartXfer+0x2b4>)
 8013e3c:	4013      	ands	r3, r2
 8013e3e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013e40:	693b      	ldr	r3, [r7, #16]
 8013e42:	015a      	lsls	r2, r3, #5
 8013e44:	697b      	ldr	r3, [r7, #20]
 8013e46:	4413      	add	r3, r2
 8013e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e4c:	691a      	ldr	r2, [r3, #16]
 8013e4e:	693b      	ldr	r3, [r7, #16]
 8013e50:	0159      	lsls	r1, r3, #5
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	440b      	add	r3, r1
 8013e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e5a:	4619      	mov	r1, r3
 8013e5c:	4b2c      	ldr	r3, [pc, #176]	; (8013f10 <USB_EP0StartXfer+0x2b0>)
 8013e5e:	4013      	ands	r3, r2
 8013e60:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8013e62:	68bb      	ldr	r3, [r7, #8]
 8013e64:	699b      	ldr	r3, [r3, #24]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d003      	beq.n	8013e72 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8013e6a:	68bb      	ldr	r3, [r7, #8]
 8013e6c:	68da      	ldr	r2, [r3, #12]
 8013e6e:	68bb      	ldr	r3, [r7, #8]
 8013e70:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8013e72:	68bb      	ldr	r3, [r7, #8]
 8013e74:	68da      	ldr	r2, [r3, #12]
 8013e76:	68bb      	ldr	r3, [r7, #8]
 8013e78:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013e7a:	693b      	ldr	r3, [r7, #16]
 8013e7c:	015a      	lsls	r2, r3, #5
 8013e7e:	697b      	ldr	r3, [r7, #20]
 8013e80:	4413      	add	r3, r2
 8013e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e86:	691b      	ldr	r3, [r3, #16]
 8013e88:	693a      	ldr	r2, [r7, #16]
 8013e8a:	0151      	lsls	r1, r2, #5
 8013e8c:	697a      	ldr	r2, [r7, #20]
 8013e8e:	440a      	add	r2, r1
 8013e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013e94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013e98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013e9a:	693b      	ldr	r3, [r7, #16]
 8013e9c:	015a      	lsls	r2, r3, #5
 8013e9e:	697b      	ldr	r3, [r7, #20]
 8013ea0:	4413      	add	r3, r2
 8013ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ea6:	691a      	ldr	r2, [r3, #16]
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	69db      	ldr	r3, [r3, #28]
 8013eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013eb0:	6939      	ldr	r1, [r7, #16]
 8013eb2:	0148      	lsls	r0, r1, #5
 8013eb4:	6979      	ldr	r1, [r7, #20]
 8013eb6:	4401      	add	r1, r0
 8013eb8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013ebc:	4313      	orrs	r3, r2
 8013ebe:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8013ec0:	79fb      	ldrb	r3, [r7, #7]
 8013ec2:	2b01      	cmp	r3, #1
 8013ec4:	d10d      	bne.n	8013ee2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013ec6:	68bb      	ldr	r3, [r7, #8]
 8013ec8:	691b      	ldr	r3, [r3, #16]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d009      	beq.n	8013ee2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013ece:	68bb      	ldr	r3, [r7, #8]
 8013ed0:	6919      	ldr	r1, [r3, #16]
 8013ed2:	693b      	ldr	r3, [r7, #16]
 8013ed4:	015a      	lsls	r2, r3, #5
 8013ed6:	697b      	ldr	r3, [r7, #20]
 8013ed8:	4413      	add	r3, r2
 8013eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ede:	460a      	mov	r2, r1
 8013ee0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013ee2:	693b      	ldr	r3, [r7, #16]
 8013ee4:	015a      	lsls	r2, r3, #5
 8013ee6:	697b      	ldr	r3, [r7, #20]
 8013ee8:	4413      	add	r3, r2
 8013eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	693a      	ldr	r2, [r7, #16]
 8013ef2:	0151      	lsls	r1, r2, #5
 8013ef4:	697a      	ldr	r2, [r7, #20]
 8013ef6:	440a      	add	r2, r1
 8013ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013efc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013f00:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013f02:	2300      	movs	r3, #0
}
 8013f04:	4618      	mov	r0, r3
 8013f06:	371c      	adds	r7, #28
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f0e:	4770      	bx	lr
 8013f10:	e007ffff 	.word	0xe007ffff
 8013f14:	fff80000 	.word	0xfff80000

08013f18 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013f18:	b480      	push	{r7}
 8013f1a:	b087      	sub	sp, #28
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
 8013f20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013f22:	2300      	movs	r3, #0
 8013f24:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013f26:	2300      	movs	r3, #0
 8013f28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013f2e:	683b      	ldr	r3, [r7, #0]
 8013f30:	785b      	ldrb	r3, [r3, #1]
 8013f32:	2b01      	cmp	r3, #1
 8013f34:	d14a      	bne.n	8013fcc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013f36:	683b      	ldr	r3, [r7, #0]
 8013f38:	781b      	ldrb	r3, [r3, #0]
 8013f3a:	015a      	lsls	r2, r3, #5
 8013f3c:	693b      	ldr	r3, [r7, #16]
 8013f3e:	4413      	add	r3, r2
 8013f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013f4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013f4e:	f040 8086 	bne.w	801405e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013f52:	683b      	ldr	r3, [r7, #0]
 8013f54:	781b      	ldrb	r3, [r3, #0]
 8013f56:	015a      	lsls	r2, r3, #5
 8013f58:	693b      	ldr	r3, [r7, #16]
 8013f5a:	4413      	add	r3, r2
 8013f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	683a      	ldr	r2, [r7, #0]
 8013f64:	7812      	ldrb	r2, [r2, #0]
 8013f66:	0151      	lsls	r1, r2, #5
 8013f68:	693a      	ldr	r2, [r7, #16]
 8013f6a:	440a      	add	r2, r1
 8013f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013f70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013f74:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	781b      	ldrb	r3, [r3, #0]
 8013f7a:	015a      	lsls	r2, r3, #5
 8013f7c:	693b      	ldr	r3, [r7, #16]
 8013f7e:	4413      	add	r3, r2
 8013f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	683a      	ldr	r2, [r7, #0]
 8013f88:	7812      	ldrb	r2, [r2, #0]
 8013f8a:	0151      	lsls	r1, r2, #5
 8013f8c:	693a      	ldr	r2, [r7, #16]
 8013f8e:	440a      	add	r2, r1
 8013f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013f94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013f98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	3301      	adds	r3, #1
 8013f9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	f242 7210 	movw	r2, #10000	; 0x2710
 8013fa6:	4293      	cmp	r3, r2
 8013fa8:	d902      	bls.n	8013fb0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013faa:	2301      	movs	r3, #1
 8013fac:	75fb      	strb	r3, [r7, #23]
          break;
 8013fae:	e056      	b.n	801405e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013fb0:	683b      	ldr	r3, [r7, #0]
 8013fb2:	781b      	ldrb	r3, [r3, #0]
 8013fb4:	015a      	lsls	r2, r3, #5
 8013fb6:	693b      	ldr	r3, [r7, #16]
 8013fb8:	4413      	add	r3, r2
 8013fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013fc8:	d0e7      	beq.n	8013f9a <USB_EPStopXfer+0x82>
 8013fca:	e048      	b.n	801405e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013fcc:	683b      	ldr	r3, [r7, #0]
 8013fce:	781b      	ldrb	r3, [r3, #0]
 8013fd0:	015a      	lsls	r2, r3, #5
 8013fd2:	693b      	ldr	r3, [r7, #16]
 8013fd4:	4413      	add	r3, r2
 8013fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013fe0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013fe4:	d13b      	bne.n	801405e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013fe6:	683b      	ldr	r3, [r7, #0]
 8013fe8:	781b      	ldrb	r3, [r3, #0]
 8013fea:	015a      	lsls	r2, r3, #5
 8013fec:	693b      	ldr	r3, [r7, #16]
 8013fee:	4413      	add	r3, r2
 8013ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	683a      	ldr	r2, [r7, #0]
 8013ff8:	7812      	ldrb	r2, [r2, #0]
 8013ffa:	0151      	lsls	r1, r2, #5
 8013ffc:	693a      	ldr	r2, [r7, #16]
 8013ffe:	440a      	add	r2, r1
 8014000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014004:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014008:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801400a:	683b      	ldr	r3, [r7, #0]
 801400c:	781b      	ldrb	r3, [r3, #0]
 801400e:	015a      	lsls	r2, r3, #5
 8014010:	693b      	ldr	r3, [r7, #16]
 8014012:	4413      	add	r3, r2
 8014014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	683a      	ldr	r2, [r7, #0]
 801401c:	7812      	ldrb	r2, [r2, #0]
 801401e:	0151      	lsls	r1, r2, #5
 8014020:	693a      	ldr	r2, [r7, #16]
 8014022:	440a      	add	r2, r1
 8014024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014028:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801402c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	3301      	adds	r3, #1
 8014032:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	f242 7210 	movw	r2, #10000	; 0x2710
 801403a:	4293      	cmp	r3, r2
 801403c:	d902      	bls.n	8014044 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801403e:	2301      	movs	r3, #1
 8014040:	75fb      	strb	r3, [r7, #23]
          break;
 8014042:	e00c      	b.n	801405e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8014044:	683b      	ldr	r3, [r7, #0]
 8014046:	781b      	ldrb	r3, [r3, #0]
 8014048:	015a      	lsls	r2, r3, #5
 801404a:	693b      	ldr	r3, [r7, #16]
 801404c:	4413      	add	r3, r2
 801404e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014058:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801405c:	d0e7      	beq.n	801402e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801405e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014060:	4618      	mov	r0, r3
 8014062:	371c      	adds	r7, #28
 8014064:	46bd      	mov	sp, r7
 8014066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406a:	4770      	bx	lr

0801406c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801406c:	b480      	push	{r7}
 801406e:	b089      	sub	sp, #36	; 0x24
 8014070:	af00      	add	r7, sp, #0
 8014072:	60f8      	str	r0, [r7, #12]
 8014074:	60b9      	str	r1, [r7, #8]
 8014076:	4611      	mov	r1, r2
 8014078:	461a      	mov	r2, r3
 801407a:	460b      	mov	r3, r1
 801407c:	71fb      	strb	r3, [r7, #7]
 801407e:	4613      	mov	r3, r2
 8014080:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014086:	68bb      	ldr	r3, [r7, #8]
 8014088:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801408a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801408e:	2b00      	cmp	r3, #0
 8014090:	d123      	bne.n	80140da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014092:	88bb      	ldrh	r3, [r7, #4]
 8014094:	3303      	adds	r3, #3
 8014096:	089b      	lsrs	r3, r3, #2
 8014098:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801409a:	2300      	movs	r3, #0
 801409c:	61bb      	str	r3, [r7, #24]
 801409e:	e018      	b.n	80140d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80140a0:	79fb      	ldrb	r3, [r7, #7]
 80140a2:	031a      	lsls	r2, r3, #12
 80140a4:	697b      	ldr	r3, [r7, #20]
 80140a6:	4413      	add	r3, r2
 80140a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80140ac:	461a      	mov	r2, r3
 80140ae:	69fb      	ldr	r3, [r7, #28]
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80140b4:	69fb      	ldr	r3, [r7, #28]
 80140b6:	3301      	adds	r3, #1
 80140b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80140ba:	69fb      	ldr	r3, [r7, #28]
 80140bc:	3301      	adds	r3, #1
 80140be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80140c0:	69fb      	ldr	r3, [r7, #28]
 80140c2:	3301      	adds	r3, #1
 80140c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80140c6:	69fb      	ldr	r3, [r7, #28]
 80140c8:	3301      	adds	r3, #1
 80140ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80140cc:	69bb      	ldr	r3, [r7, #24]
 80140ce:	3301      	adds	r3, #1
 80140d0:	61bb      	str	r3, [r7, #24]
 80140d2:	69ba      	ldr	r2, [r7, #24]
 80140d4:	693b      	ldr	r3, [r7, #16]
 80140d6:	429a      	cmp	r2, r3
 80140d8:	d3e2      	bcc.n	80140a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80140da:	2300      	movs	r3, #0
}
 80140dc:	4618      	mov	r0, r3
 80140de:	3724      	adds	r7, #36	; 0x24
 80140e0:	46bd      	mov	sp, r7
 80140e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e6:	4770      	bx	lr

080140e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80140e8:	b480      	push	{r7}
 80140ea:	b08b      	sub	sp, #44	; 0x2c
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	60f8      	str	r0, [r7, #12]
 80140f0:	60b9      	str	r1, [r7, #8]
 80140f2:	4613      	mov	r3, r2
 80140f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80140fa:	68bb      	ldr	r3, [r7, #8]
 80140fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80140fe:	88fb      	ldrh	r3, [r7, #6]
 8014100:	089b      	lsrs	r3, r3, #2
 8014102:	b29b      	uxth	r3, r3
 8014104:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8014106:	88fb      	ldrh	r3, [r7, #6]
 8014108:	f003 0303 	and.w	r3, r3, #3
 801410c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801410e:	2300      	movs	r3, #0
 8014110:	623b      	str	r3, [r7, #32]
 8014112:	e014      	b.n	801413e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014114:	69bb      	ldr	r3, [r7, #24]
 8014116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801411a:	681a      	ldr	r2, [r3, #0]
 801411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801411e:	601a      	str	r2, [r3, #0]
    pDest++;
 8014120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014122:	3301      	adds	r3, #1
 8014124:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014128:	3301      	adds	r3, #1
 801412a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801412e:	3301      	adds	r3, #1
 8014130:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014134:	3301      	adds	r3, #1
 8014136:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8014138:	6a3b      	ldr	r3, [r7, #32]
 801413a:	3301      	adds	r3, #1
 801413c:	623b      	str	r3, [r7, #32]
 801413e:	6a3a      	ldr	r2, [r7, #32]
 8014140:	697b      	ldr	r3, [r7, #20]
 8014142:	429a      	cmp	r2, r3
 8014144:	d3e6      	bcc.n	8014114 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8014146:	8bfb      	ldrh	r3, [r7, #30]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d01e      	beq.n	801418a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801414c:	2300      	movs	r3, #0
 801414e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014150:	69bb      	ldr	r3, [r7, #24]
 8014152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014156:	461a      	mov	r2, r3
 8014158:	f107 0310 	add.w	r3, r7, #16
 801415c:	6812      	ldr	r2, [r2, #0]
 801415e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014160:	693a      	ldr	r2, [r7, #16]
 8014162:	6a3b      	ldr	r3, [r7, #32]
 8014164:	b2db      	uxtb	r3, r3
 8014166:	00db      	lsls	r3, r3, #3
 8014168:	fa22 f303 	lsr.w	r3, r2, r3
 801416c:	b2da      	uxtb	r2, r3
 801416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014170:	701a      	strb	r2, [r3, #0]
      i++;
 8014172:	6a3b      	ldr	r3, [r7, #32]
 8014174:	3301      	adds	r3, #1
 8014176:	623b      	str	r3, [r7, #32]
      pDest++;
 8014178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801417a:	3301      	adds	r3, #1
 801417c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801417e:	8bfb      	ldrh	r3, [r7, #30]
 8014180:	3b01      	subs	r3, #1
 8014182:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014184:	8bfb      	ldrh	r3, [r7, #30]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d1ea      	bne.n	8014160 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801418c:	4618      	mov	r0, r3
 801418e:	372c      	adds	r7, #44	; 0x2c
 8014190:	46bd      	mov	sp, r7
 8014192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014196:	4770      	bx	lr

08014198 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014198:	b480      	push	{r7}
 801419a:	b085      	sub	sp, #20
 801419c:	af00      	add	r7, sp, #0
 801419e:	6078      	str	r0, [r7, #4]
 80141a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80141a6:	683b      	ldr	r3, [r7, #0]
 80141a8:	781b      	ldrb	r3, [r3, #0]
 80141aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80141ac:	683b      	ldr	r3, [r7, #0]
 80141ae:	785b      	ldrb	r3, [r3, #1]
 80141b0:	2b01      	cmp	r3, #1
 80141b2:	d12c      	bne.n	801420e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80141b4:	68bb      	ldr	r3, [r7, #8]
 80141b6:	015a      	lsls	r2, r3, #5
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	4413      	add	r3, r2
 80141bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	db12      	blt.n	80141ec <USB_EPSetStall+0x54>
 80141c6:	68bb      	ldr	r3, [r7, #8]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d00f      	beq.n	80141ec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80141cc:	68bb      	ldr	r3, [r7, #8]
 80141ce:	015a      	lsls	r2, r3, #5
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	4413      	add	r3, r2
 80141d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	68ba      	ldr	r2, [r7, #8]
 80141dc:	0151      	lsls	r1, r2, #5
 80141de:	68fa      	ldr	r2, [r7, #12]
 80141e0:	440a      	add	r2, r1
 80141e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80141e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80141ea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80141ec:	68bb      	ldr	r3, [r7, #8]
 80141ee:	015a      	lsls	r2, r3, #5
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	4413      	add	r3, r2
 80141f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	68ba      	ldr	r2, [r7, #8]
 80141fc:	0151      	lsls	r1, r2, #5
 80141fe:	68fa      	ldr	r2, [r7, #12]
 8014200:	440a      	add	r2, r1
 8014202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014206:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801420a:	6013      	str	r3, [r2, #0]
 801420c:	e02b      	b.n	8014266 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	015a      	lsls	r2, r3, #5
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	4413      	add	r3, r2
 8014216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	2b00      	cmp	r3, #0
 801421e:	db12      	blt.n	8014246 <USB_EPSetStall+0xae>
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d00f      	beq.n	8014246 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8014226:	68bb      	ldr	r3, [r7, #8]
 8014228:	015a      	lsls	r2, r3, #5
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	4413      	add	r3, r2
 801422e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	68ba      	ldr	r2, [r7, #8]
 8014236:	0151      	lsls	r1, r2, #5
 8014238:	68fa      	ldr	r2, [r7, #12]
 801423a:	440a      	add	r2, r1
 801423c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014240:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014244:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8014246:	68bb      	ldr	r3, [r7, #8]
 8014248:	015a      	lsls	r2, r3, #5
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	4413      	add	r3, r2
 801424e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	68ba      	ldr	r2, [r7, #8]
 8014256:	0151      	lsls	r1, r2, #5
 8014258:	68fa      	ldr	r2, [r7, #12]
 801425a:	440a      	add	r2, r1
 801425c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014260:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014264:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014266:	2300      	movs	r3, #0
}
 8014268:	4618      	mov	r0, r3
 801426a:	3714      	adds	r7, #20
 801426c:	46bd      	mov	sp, r7
 801426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014272:	4770      	bx	lr

08014274 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014274:	b480      	push	{r7}
 8014276:	b085      	sub	sp, #20
 8014278:	af00      	add	r7, sp, #0
 801427a:	6078      	str	r0, [r7, #4]
 801427c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014282:	683b      	ldr	r3, [r7, #0]
 8014284:	781b      	ldrb	r3, [r3, #0]
 8014286:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014288:	683b      	ldr	r3, [r7, #0]
 801428a:	785b      	ldrb	r3, [r3, #1]
 801428c:	2b01      	cmp	r3, #1
 801428e:	d128      	bne.n	80142e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014290:	68bb      	ldr	r3, [r7, #8]
 8014292:	015a      	lsls	r2, r3, #5
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	4413      	add	r3, r2
 8014298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	68ba      	ldr	r2, [r7, #8]
 80142a0:	0151      	lsls	r1, r2, #5
 80142a2:	68fa      	ldr	r2, [r7, #12]
 80142a4:	440a      	add	r2, r1
 80142a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80142ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80142b0:	683b      	ldr	r3, [r7, #0]
 80142b2:	791b      	ldrb	r3, [r3, #4]
 80142b4:	2b03      	cmp	r3, #3
 80142b6:	d003      	beq.n	80142c0 <USB_EPClearStall+0x4c>
 80142b8:	683b      	ldr	r3, [r7, #0]
 80142ba:	791b      	ldrb	r3, [r3, #4]
 80142bc:	2b02      	cmp	r3, #2
 80142be:	d138      	bne.n	8014332 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80142c0:	68bb      	ldr	r3, [r7, #8]
 80142c2:	015a      	lsls	r2, r3, #5
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	4413      	add	r3, r2
 80142c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	68ba      	ldr	r2, [r7, #8]
 80142d0:	0151      	lsls	r1, r2, #5
 80142d2:	68fa      	ldr	r2, [r7, #12]
 80142d4:	440a      	add	r2, r1
 80142d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80142de:	6013      	str	r3, [r2, #0]
 80142e0:	e027      	b.n	8014332 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80142e2:	68bb      	ldr	r3, [r7, #8]
 80142e4:	015a      	lsls	r2, r3, #5
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	4413      	add	r3, r2
 80142ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	68ba      	ldr	r2, [r7, #8]
 80142f2:	0151      	lsls	r1, r2, #5
 80142f4:	68fa      	ldr	r2, [r7, #12]
 80142f6:	440a      	add	r2, r1
 80142f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80142fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014300:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014302:	683b      	ldr	r3, [r7, #0]
 8014304:	791b      	ldrb	r3, [r3, #4]
 8014306:	2b03      	cmp	r3, #3
 8014308:	d003      	beq.n	8014312 <USB_EPClearStall+0x9e>
 801430a:	683b      	ldr	r3, [r7, #0]
 801430c:	791b      	ldrb	r3, [r3, #4]
 801430e:	2b02      	cmp	r3, #2
 8014310:	d10f      	bne.n	8014332 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014312:	68bb      	ldr	r3, [r7, #8]
 8014314:	015a      	lsls	r2, r3, #5
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	4413      	add	r3, r2
 801431a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	68ba      	ldr	r2, [r7, #8]
 8014322:	0151      	lsls	r1, r2, #5
 8014324:	68fa      	ldr	r2, [r7, #12]
 8014326:	440a      	add	r2, r1
 8014328:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801432c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014330:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014332:	2300      	movs	r3, #0
}
 8014334:	4618      	mov	r0, r3
 8014336:	3714      	adds	r7, #20
 8014338:	46bd      	mov	sp, r7
 801433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433e:	4770      	bx	lr

08014340 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014340:	b480      	push	{r7}
 8014342:	b085      	sub	sp, #20
 8014344:	af00      	add	r7, sp, #0
 8014346:	6078      	str	r0, [r7, #4]
 8014348:	460b      	mov	r3, r1
 801434a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	68fa      	ldr	r2, [r7, #12]
 801435a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801435e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014362:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801436a:	681a      	ldr	r2, [r3, #0]
 801436c:	78fb      	ldrb	r3, [r7, #3]
 801436e:	011b      	lsls	r3, r3, #4
 8014370:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014374:	68f9      	ldr	r1, [r7, #12]
 8014376:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801437a:	4313      	orrs	r3, r2
 801437c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801437e:	2300      	movs	r3, #0
}
 8014380:	4618      	mov	r0, r3
 8014382:	3714      	adds	r7, #20
 8014384:	46bd      	mov	sp, r7
 8014386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438a:	4770      	bx	lr

0801438c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801438c:	b480      	push	{r7}
 801438e:	b085      	sub	sp, #20
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	68fa      	ldr	r2, [r7, #12]
 80143a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80143a6:	f023 0303 	bic.w	r3, r3, #3
 80143aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80143b2:	685b      	ldr	r3, [r3, #4]
 80143b4:	68fa      	ldr	r2, [r7, #12]
 80143b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80143ba:	f023 0302 	bic.w	r3, r3, #2
 80143be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80143c0:	2300      	movs	r3, #0
}
 80143c2:	4618      	mov	r0, r3
 80143c4:	3714      	adds	r7, #20
 80143c6:	46bd      	mov	sp, r7
 80143c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143cc:	4770      	bx	lr

080143ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80143ce:	b480      	push	{r7}
 80143d0:	b085      	sub	sp, #20
 80143d2:	af00      	add	r7, sp, #0
 80143d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	68fa      	ldr	r2, [r7, #12]
 80143e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80143e8:	f023 0303 	bic.w	r3, r3, #3
 80143ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80143f4:	685b      	ldr	r3, [r3, #4]
 80143f6:	68fa      	ldr	r2, [r7, #12]
 80143f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80143fc:	f043 0302 	orr.w	r3, r3, #2
 8014400:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014402:	2300      	movs	r3, #0
}
 8014404:	4618      	mov	r0, r3
 8014406:	3714      	adds	r7, #20
 8014408:	46bd      	mov	sp, r7
 801440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440e:	4770      	bx	lr

08014410 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014410:	b480      	push	{r7}
 8014412:	b085      	sub	sp, #20
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	695b      	ldr	r3, [r3, #20]
 801441c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	699b      	ldr	r3, [r3, #24]
 8014422:	68fa      	ldr	r2, [r7, #12]
 8014424:	4013      	ands	r3, r2
 8014426:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014428:	68fb      	ldr	r3, [r7, #12]
}
 801442a:	4618      	mov	r0, r3
 801442c:	3714      	adds	r7, #20
 801442e:	46bd      	mov	sp, r7
 8014430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014434:	4770      	bx	lr

08014436 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8014436:	b480      	push	{r7}
 8014438:	b085      	sub	sp, #20
 801443a:	af00      	add	r7, sp, #0
 801443c:	6078      	str	r0, [r7, #4]
 801443e:	460b      	mov	r3, r1
 8014440:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8014446:	78fb      	ldrb	r3, [r7, #3]
 8014448:	015a      	lsls	r2, r3, #5
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	4413      	add	r3, r2
 801444e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014452:	689b      	ldr	r3, [r3, #8]
 8014454:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8014456:	78fb      	ldrb	r3, [r7, #3]
 8014458:	015a      	lsls	r2, r3, #5
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	4413      	add	r3, r2
 801445e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014462:	68db      	ldr	r3, [r3, #12]
 8014464:	68ba      	ldr	r2, [r7, #8]
 8014466:	4013      	ands	r3, r2
 8014468:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801446a:	68bb      	ldr	r3, [r7, #8]
}
 801446c:	4618      	mov	r0, r3
 801446e:	3714      	adds	r7, #20
 8014470:	46bd      	mov	sp, r7
 8014472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014476:	4770      	bx	lr

08014478 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014478:	b480      	push	{r7}
 801447a:	b085      	sub	sp, #20
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801448a:	699b      	ldr	r3, [r3, #24]
 801448c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014494:	69db      	ldr	r3, [r3, #28]
 8014496:	68ba      	ldr	r2, [r7, #8]
 8014498:	4013      	ands	r3, r2
 801449a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	0c1b      	lsrs	r3, r3, #16
}
 80144a0:	4618      	mov	r0, r3
 80144a2:	3714      	adds	r7, #20
 80144a4:	46bd      	mov	sp, r7
 80144a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144aa:	4770      	bx	lr

080144ac <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80144ac:	b480      	push	{r7}
 80144ae:	b085      	sub	sp, #20
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144be:	699b      	ldr	r3, [r3, #24]
 80144c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144c8:	69db      	ldr	r3, [r3, #28]
 80144ca:	68ba      	ldr	r2, [r7, #8]
 80144cc:	4013      	ands	r3, r2
 80144ce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80144d0:	68bb      	ldr	r3, [r7, #8]
 80144d2:	b29b      	uxth	r3, r3
}
 80144d4:	4618      	mov	r0, r3
 80144d6:	3714      	adds	r7, #20
 80144d8:	46bd      	mov	sp, r7
 80144da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144de:	4770      	bx	lr

080144e0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80144e0:	b480      	push	{r7}
 80144e2:	b085      	sub	sp, #20
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
 80144e8:	460b      	mov	r3, r1
 80144ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80144f0:	78fb      	ldrb	r3, [r7, #3]
 80144f2:	015a      	lsls	r2, r3, #5
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	4413      	add	r3, r2
 80144f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144fc:	689b      	ldr	r3, [r3, #8]
 80144fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014506:	695b      	ldr	r3, [r3, #20]
 8014508:	68ba      	ldr	r2, [r7, #8]
 801450a:	4013      	ands	r3, r2
 801450c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801450e:	68bb      	ldr	r3, [r7, #8]
}
 8014510:	4618      	mov	r0, r3
 8014512:	3714      	adds	r7, #20
 8014514:	46bd      	mov	sp, r7
 8014516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451a:	4770      	bx	lr

0801451c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801451c:	b480      	push	{r7}
 801451e:	b087      	sub	sp, #28
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
 8014524:	460b      	mov	r3, r1
 8014526:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801452c:	697b      	ldr	r3, [r7, #20]
 801452e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014532:	691b      	ldr	r3, [r3, #16]
 8014534:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014536:	697b      	ldr	r3, [r7, #20]
 8014538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801453c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801453e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014540:	78fb      	ldrb	r3, [r7, #3]
 8014542:	f003 030f 	and.w	r3, r3, #15
 8014546:	68fa      	ldr	r2, [r7, #12]
 8014548:	fa22 f303 	lsr.w	r3, r2, r3
 801454c:	01db      	lsls	r3, r3, #7
 801454e:	b2db      	uxtb	r3, r3
 8014550:	693a      	ldr	r2, [r7, #16]
 8014552:	4313      	orrs	r3, r2
 8014554:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014556:	78fb      	ldrb	r3, [r7, #3]
 8014558:	015a      	lsls	r2, r3, #5
 801455a:	697b      	ldr	r3, [r7, #20]
 801455c:	4413      	add	r3, r2
 801455e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014562:	689b      	ldr	r3, [r3, #8]
 8014564:	693a      	ldr	r2, [r7, #16]
 8014566:	4013      	ands	r3, r2
 8014568:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801456a:	68bb      	ldr	r3, [r7, #8]
}
 801456c:	4618      	mov	r0, r3
 801456e:	371c      	adds	r7, #28
 8014570:	46bd      	mov	sp, r7
 8014572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014576:	4770      	bx	lr

08014578 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014578:	b480      	push	{r7}
 801457a:	b083      	sub	sp, #12
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	695b      	ldr	r3, [r3, #20]
 8014584:	f003 0301 	and.w	r3, r3, #1
}
 8014588:	4618      	mov	r0, r3
 801458a:	370c      	adds	r7, #12
 801458c:	46bd      	mov	sp, r7
 801458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014592:	4770      	bx	lr

08014594 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014594:	b480      	push	{r7}
 8014596:	b085      	sub	sp, #20
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145a6:	681a      	ldr	r2, [r3, #0]
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145ae:	4619      	mov	r1, r3
 80145b0:	4b09      	ldr	r3, [pc, #36]	; (80145d8 <USB_ActivateSetup+0x44>)
 80145b2:	4013      	ands	r3, r2
 80145b4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80145bc:	685b      	ldr	r3, [r3, #4]
 80145be:	68fa      	ldr	r2, [r7, #12]
 80145c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80145c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80145c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80145ca:	2300      	movs	r3, #0
}
 80145cc:	4618      	mov	r0, r3
 80145ce:	3714      	adds	r7, #20
 80145d0:	46bd      	mov	sp, r7
 80145d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d6:	4770      	bx	lr
 80145d8:	fffff800 	.word	0xfffff800

080145dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80145dc:	b480      	push	{r7}
 80145de:	b087      	sub	sp, #28
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	60f8      	str	r0, [r7, #12]
 80145e4:	460b      	mov	r3, r1
 80145e6:	607a      	str	r2, [r7, #4]
 80145e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	333c      	adds	r3, #60	; 0x3c
 80145f2:	3304      	adds	r3, #4
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80145f8:	693b      	ldr	r3, [r7, #16]
 80145fa:	4a26      	ldr	r2, [pc, #152]	; (8014694 <USB_EP0_OutStart+0xb8>)
 80145fc:	4293      	cmp	r3, r2
 80145fe:	d90a      	bls.n	8014616 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014600:	697b      	ldr	r3, [r7, #20]
 8014602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801460c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014610:	d101      	bne.n	8014616 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014612:	2300      	movs	r3, #0
 8014614:	e037      	b.n	8014686 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014616:	697b      	ldr	r3, [r7, #20]
 8014618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801461c:	461a      	mov	r2, r3
 801461e:	2300      	movs	r3, #0
 8014620:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014622:	697b      	ldr	r3, [r7, #20]
 8014624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014628:	691b      	ldr	r3, [r3, #16]
 801462a:	697a      	ldr	r2, [r7, #20]
 801462c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014630:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014634:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014636:	697b      	ldr	r3, [r7, #20]
 8014638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801463c:	691b      	ldr	r3, [r3, #16]
 801463e:	697a      	ldr	r2, [r7, #20]
 8014640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014644:	f043 0318 	orr.w	r3, r3, #24
 8014648:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801464a:	697b      	ldr	r3, [r7, #20]
 801464c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014650:	691b      	ldr	r3, [r3, #16]
 8014652:	697a      	ldr	r2, [r7, #20]
 8014654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014658:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801465c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801465e:	7afb      	ldrb	r3, [r7, #11]
 8014660:	2b01      	cmp	r3, #1
 8014662:	d10f      	bne.n	8014684 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014664:	697b      	ldr	r3, [r7, #20]
 8014666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801466a:	461a      	mov	r2, r3
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014670:	697b      	ldr	r3, [r7, #20]
 8014672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	697a      	ldr	r2, [r7, #20]
 801467a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801467e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014682:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014684:	2300      	movs	r3, #0
}
 8014686:	4618      	mov	r0, r3
 8014688:	371c      	adds	r7, #28
 801468a:	46bd      	mov	sp, r7
 801468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014690:	4770      	bx	lr
 8014692:	bf00      	nop
 8014694:	4f54300a 	.word	0x4f54300a

08014698 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014698:	b480      	push	{r7}
 801469a:	b085      	sub	sp, #20
 801469c:	af00      	add	r7, sp, #0
 801469e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80146a0:	2300      	movs	r3, #0
 80146a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	3301      	adds	r3, #1
 80146a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	4a13      	ldr	r2, [pc, #76]	; (80146fc <USB_CoreReset+0x64>)
 80146ae:	4293      	cmp	r3, r2
 80146b0:	d901      	bls.n	80146b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80146b2:	2303      	movs	r3, #3
 80146b4:	e01b      	b.n	80146ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	691b      	ldr	r3, [r3, #16]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	daf2      	bge.n	80146a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80146be:	2300      	movs	r3, #0
 80146c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	691b      	ldr	r3, [r3, #16]
 80146c6:	f043 0201 	orr.w	r2, r3, #1
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	3301      	adds	r3, #1
 80146d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	4a09      	ldr	r2, [pc, #36]	; (80146fc <USB_CoreReset+0x64>)
 80146d8:	4293      	cmp	r3, r2
 80146da:	d901      	bls.n	80146e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80146dc:	2303      	movs	r3, #3
 80146de:	e006      	b.n	80146ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	691b      	ldr	r3, [r3, #16]
 80146e4:	f003 0301 	and.w	r3, r3, #1
 80146e8:	2b01      	cmp	r3, #1
 80146ea:	d0f0      	beq.n	80146ce <USB_CoreReset+0x36>

  return HAL_OK;
 80146ec:	2300      	movs	r3, #0
}
 80146ee:	4618      	mov	r0, r3
 80146f0:	3714      	adds	r7, #20
 80146f2:	46bd      	mov	sp, r7
 80146f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f8:	4770      	bx	lr
 80146fa:	bf00      	nop
 80146fc:	00030d40 	.word	0x00030d40

08014700 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014700:	b084      	sub	sp, #16
 8014702:	b580      	push	{r7, lr}
 8014704:	b086      	sub	sp, #24
 8014706:	af00      	add	r7, sp, #0
 8014708:	6078      	str	r0, [r7, #4]
 801470a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801470e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8014712:	2300      	movs	r3, #0
 8014714:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014720:	461a      	mov	r2, r3
 8014722:	2300      	movs	r3, #0
 8014724:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801472a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801473a:	2b00      	cmp	r3, #0
 801473c:	d018      	beq.n	8014770 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 801473e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014740:	2b01      	cmp	r3, #1
 8014742:	d10a      	bne.n	801475a <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	68fa      	ldr	r2, [r7, #12]
 801474e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014752:	f043 0304 	orr.w	r3, r3, #4
 8014756:	6013      	str	r3, [r2, #0]
 8014758:	e014      	b.n	8014784 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	68fa      	ldr	r2, [r7, #12]
 8014764:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014768:	f023 0304 	bic.w	r3, r3, #4
 801476c:	6013      	str	r3, [r2, #0]
 801476e:	e009      	b.n	8014784 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	68fa      	ldr	r2, [r7, #12]
 801477a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801477e:	f023 0304 	bic.w	r3, r3, #4
 8014782:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8014784:	2110      	movs	r1, #16
 8014786:	6878      	ldr	r0, [r7, #4]
 8014788:	f7fe fe14 	bl	80133b4 <USB_FlushTxFifo>
 801478c:	4603      	mov	r3, r0
 801478e:	2b00      	cmp	r3, #0
 8014790:	d001      	beq.n	8014796 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 8014792:	2301      	movs	r3, #1
 8014794:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014796:	6878      	ldr	r0, [r7, #4]
 8014798:	f7fe fe40 	bl	801341c <USB_FlushRxFifo>
 801479c:	4603      	mov	r3, r0
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d001      	beq.n	80147a6 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 80147a2:	2301      	movs	r3, #1
 80147a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80147a6:	2300      	movs	r3, #0
 80147a8:	613b      	str	r3, [r7, #16]
 80147aa:	e015      	b.n	80147d8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80147ac:	693b      	ldr	r3, [r7, #16]
 80147ae:	015a      	lsls	r2, r3, #5
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	4413      	add	r3, r2
 80147b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80147b8:	461a      	mov	r2, r3
 80147ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80147be:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80147c0:	693b      	ldr	r3, [r7, #16]
 80147c2:	015a      	lsls	r2, r3, #5
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	4413      	add	r3, r2
 80147c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80147cc:	461a      	mov	r2, r3
 80147ce:	2300      	movs	r3, #0
 80147d0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80147d2:	693b      	ldr	r3, [r7, #16]
 80147d4:	3301      	adds	r3, #1
 80147d6:	613b      	str	r3, [r7, #16]
 80147d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147da:	693a      	ldr	r2, [r7, #16]
 80147dc:	429a      	cmp	r2, r3
 80147de:	d3e5      	bcc.n	80147ac <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	2200      	movs	r2, #0
 80147e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80147ec:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80147f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d00b      	beq.n	8014812 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014800:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	4a13      	ldr	r2, [pc, #76]	; (8014854 <USB_HostInit+0x154>)
 8014806:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	4a13      	ldr	r2, [pc, #76]	; (8014858 <USB_HostInit+0x158>)
 801480c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8014810:	e009      	b.n	8014826 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	2280      	movs	r2, #128	; 0x80
 8014816:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	4a10      	ldr	r2, [pc, #64]	; (801485c <USB_HostInit+0x15c>)
 801481c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	4a0f      	ldr	r2, [pc, #60]	; (8014860 <USB_HostInit+0x160>)
 8014822:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8014826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014828:	2b00      	cmp	r3, #0
 801482a:	d105      	bne.n	8014838 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	699b      	ldr	r3, [r3, #24]
 8014830:	f043 0210 	orr.w	r2, r3, #16
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	699a      	ldr	r2, [r3, #24]
 801483c:	4b09      	ldr	r3, [pc, #36]	; (8014864 <USB_HostInit+0x164>)
 801483e:	4313      	orrs	r3, r2
 8014840:	687a      	ldr	r2, [r7, #4]
 8014842:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8014844:	7dfb      	ldrb	r3, [r7, #23]
}
 8014846:	4618      	mov	r0, r3
 8014848:	3718      	adds	r7, #24
 801484a:	46bd      	mov	sp, r7
 801484c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014850:	b004      	add	sp, #16
 8014852:	4770      	bx	lr
 8014854:	01000200 	.word	0x01000200
 8014858:	00e00300 	.word	0x00e00300
 801485c:	00600080 	.word	0x00600080
 8014860:	004000e0 	.word	0x004000e0
 8014864:	a3200008 	.word	0xa3200008

08014868 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8014868:	b480      	push	{r7}
 801486a:	b085      	sub	sp, #20
 801486c:	af00      	add	r7, sp, #0
 801486e:	6078      	str	r0, [r7, #4]
 8014870:	460b      	mov	r3, r1
 8014872:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	68fa      	ldr	r2, [r7, #12]
 8014882:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014886:	f023 0303 	bic.w	r3, r3, #3
 801488a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014892:	681a      	ldr	r2, [r3, #0]
 8014894:	78fb      	ldrb	r3, [r7, #3]
 8014896:	f003 0303 	and.w	r3, r3, #3
 801489a:	68f9      	ldr	r1, [r7, #12]
 801489c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80148a0:	4313      	orrs	r3, r2
 80148a2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80148a4:	78fb      	ldrb	r3, [r7, #3]
 80148a6:	2b01      	cmp	r3, #1
 80148a8:	d107      	bne.n	80148ba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80148b0:	461a      	mov	r2, r3
 80148b2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80148b6:	6053      	str	r3, [r2, #4]
 80148b8:	e009      	b.n	80148ce <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80148ba:	78fb      	ldrb	r3, [r7, #3]
 80148bc:	2b02      	cmp	r3, #2
 80148be:	d106      	bne.n	80148ce <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80148c6:	461a      	mov	r2, r3
 80148c8:	f241 7370 	movw	r3, #6000	; 0x1770
 80148cc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80148ce:	2300      	movs	r3, #0
}
 80148d0:	4618      	mov	r0, r3
 80148d2:	3714      	adds	r7, #20
 80148d4:	46bd      	mov	sp, r7
 80148d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148da:	4770      	bx	lr

080148dc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b084      	sub	sp, #16
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80148e8:	2300      	movs	r3, #0
 80148ea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80148f6:	68bb      	ldr	r3, [r7, #8]
 80148f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80148fc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80148fe:	68bb      	ldr	r3, [r7, #8]
 8014900:	68fa      	ldr	r2, [r7, #12]
 8014902:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8014906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801490a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 801490c:	2064      	movs	r0, #100	; 0x64
 801490e:	f7f1 f90b 	bl	8005b28 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8014912:	68bb      	ldr	r3, [r7, #8]
 8014914:	68fa      	ldr	r2, [r7, #12]
 8014916:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801491a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801491e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8014920:	200a      	movs	r0, #10
 8014922:	f7f1 f901 	bl	8005b28 <HAL_Delay>

  return HAL_OK;
 8014926:	2300      	movs	r3, #0
}
 8014928:	4618      	mov	r0, r3
 801492a:	3710      	adds	r7, #16
 801492c:	46bd      	mov	sp, r7
 801492e:	bd80      	pop	{r7, pc}

08014930 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8014930:	b480      	push	{r7}
 8014932:	b085      	sub	sp, #20
 8014934:	af00      	add	r7, sp, #0
 8014936:	6078      	str	r0, [r7, #4]
 8014938:	460b      	mov	r3, r1
 801493a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8014940:	2300      	movs	r3, #0
 8014942:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 801494e:	68bb      	ldr	r3, [r7, #8]
 8014950:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8014954:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8014956:	68bb      	ldr	r3, [r7, #8]
 8014958:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801495c:	2b00      	cmp	r3, #0
 801495e:	d109      	bne.n	8014974 <USB_DriveVbus+0x44>
 8014960:	78fb      	ldrb	r3, [r7, #3]
 8014962:	2b01      	cmp	r3, #1
 8014964:	d106      	bne.n	8014974 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8014966:	68bb      	ldr	r3, [r7, #8]
 8014968:	68fa      	ldr	r2, [r7, #12]
 801496a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801496e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014972:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8014974:	68bb      	ldr	r3, [r7, #8]
 8014976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801497a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801497e:	d109      	bne.n	8014994 <USB_DriveVbus+0x64>
 8014980:	78fb      	ldrb	r3, [r7, #3]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d106      	bne.n	8014994 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8014986:	68bb      	ldr	r3, [r7, #8]
 8014988:	68fa      	ldr	r2, [r7, #12]
 801498a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801498e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014992:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8014994:	2300      	movs	r3, #0
}
 8014996:	4618      	mov	r0, r3
 8014998:	3714      	adds	r7, #20
 801499a:	46bd      	mov	sp, r7
 801499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a0:	4770      	bx	lr

080149a2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80149a2:	b480      	push	{r7}
 80149a4:	b085      	sub	sp, #20
 80149a6:	af00      	add	r7, sp, #0
 80149a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80149ae:	2300      	movs	r3, #0
 80149b0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80149bc:	68bb      	ldr	r3, [r7, #8]
 80149be:	0c5b      	lsrs	r3, r3, #17
 80149c0:	f003 0303 	and.w	r3, r3, #3
}
 80149c4:	4618      	mov	r0, r3
 80149c6:	3714      	adds	r7, #20
 80149c8:	46bd      	mov	sp, r7
 80149ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ce:	4770      	bx	lr

080149d0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80149d0:	b480      	push	{r7}
 80149d2:	b085      	sub	sp, #20
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80149e2:	689b      	ldr	r3, [r3, #8]
 80149e4:	b29b      	uxth	r3, r3
}
 80149e6:	4618      	mov	r0, r3
 80149e8:	3714      	adds	r7, #20
 80149ea:	46bd      	mov	sp, r7
 80149ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f0:	4770      	bx	lr
	...

080149f4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b088      	sub	sp, #32
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
 80149fc:	4608      	mov	r0, r1
 80149fe:	4611      	mov	r1, r2
 8014a00:	461a      	mov	r2, r3
 8014a02:	4603      	mov	r3, r0
 8014a04:	70fb      	strb	r3, [r7, #3]
 8014a06:	460b      	mov	r3, r1
 8014a08:	70bb      	strb	r3, [r7, #2]
 8014a0a:	4613      	mov	r3, r2
 8014a0c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8014a0e:	2300      	movs	r3, #0
 8014a10:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8014a16:	78fb      	ldrb	r3, [r7, #3]
 8014a18:	015a      	lsls	r2, r3, #5
 8014a1a:	693b      	ldr	r3, [r7, #16]
 8014a1c:	4413      	add	r3, r2
 8014a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014a22:	461a      	mov	r2, r3
 8014a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a28:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8014a2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014a2e:	2b03      	cmp	r3, #3
 8014a30:	d87e      	bhi.n	8014b30 <USB_HC_Init+0x13c>
 8014a32:	a201      	add	r2, pc, #4	; (adr r2, 8014a38 <USB_HC_Init+0x44>)
 8014a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a38:	08014a49 	.word	0x08014a49
 8014a3c:	08014af3 	.word	0x08014af3
 8014a40:	08014a49 	.word	0x08014a49
 8014a44:	08014ab5 	.word	0x08014ab5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8014a48:	78fb      	ldrb	r3, [r7, #3]
 8014a4a:	015a      	lsls	r2, r3, #5
 8014a4c:	693b      	ldr	r3, [r7, #16]
 8014a4e:	4413      	add	r3, r2
 8014a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014a54:	461a      	mov	r2, r3
 8014a56:	f240 439d 	movw	r3, #1181	; 0x49d
 8014a5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8014a5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	da10      	bge.n	8014a86 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8014a64:	78fb      	ldrb	r3, [r7, #3]
 8014a66:	015a      	lsls	r2, r3, #5
 8014a68:	693b      	ldr	r3, [r7, #16]
 8014a6a:	4413      	add	r3, r2
 8014a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014a70:	68db      	ldr	r3, [r3, #12]
 8014a72:	78fa      	ldrb	r2, [r7, #3]
 8014a74:	0151      	lsls	r1, r2, #5
 8014a76:	693a      	ldr	r2, [r7, #16]
 8014a78:	440a      	add	r2, r1
 8014a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014a82:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8014a84:	e057      	b.n	8014b36 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d051      	beq.n	8014b36 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8014a92:	78fb      	ldrb	r3, [r7, #3]
 8014a94:	015a      	lsls	r2, r3, #5
 8014a96:	693b      	ldr	r3, [r7, #16]
 8014a98:	4413      	add	r3, r2
 8014a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014a9e:	68db      	ldr	r3, [r3, #12]
 8014aa0:	78fa      	ldrb	r2, [r7, #3]
 8014aa2:	0151      	lsls	r1, r2, #5
 8014aa4:	693a      	ldr	r2, [r7, #16]
 8014aa6:	440a      	add	r2, r1
 8014aa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014aac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8014ab0:	60d3      	str	r3, [r2, #12]
      break;
 8014ab2:	e040      	b.n	8014b36 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8014ab4:	78fb      	ldrb	r3, [r7, #3]
 8014ab6:	015a      	lsls	r2, r3, #5
 8014ab8:	693b      	ldr	r3, [r7, #16]
 8014aba:	4413      	add	r3, r2
 8014abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014ac0:	461a      	mov	r2, r3
 8014ac2:	f240 639d 	movw	r3, #1693	; 0x69d
 8014ac6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8014ac8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	da34      	bge.n	8014b3a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8014ad0:	78fb      	ldrb	r3, [r7, #3]
 8014ad2:	015a      	lsls	r2, r3, #5
 8014ad4:	693b      	ldr	r3, [r7, #16]
 8014ad6:	4413      	add	r3, r2
 8014ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014adc:	68db      	ldr	r3, [r3, #12]
 8014ade:	78fa      	ldrb	r2, [r7, #3]
 8014ae0:	0151      	lsls	r1, r2, #5
 8014ae2:	693a      	ldr	r2, [r7, #16]
 8014ae4:	440a      	add	r2, r1
 8014ae6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014aee:	60d3      	str	r3, [r2, #12]
      }

      break;
 8014af0:	e023      	b.n	8014b3a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8014af2:	78fb      	ldrb	r3, [r7, #3]
 8014af4:	015a      	lsls	r2, r3, #5
 8014af6:	693b      	ldr	r3, [r7, #16]
 8014af8:	4413      	add	r3, r2
 8014afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014afe:	461a      	mov	r2, r3
 8014b00:	f240 2325 	movw	r3, #549	; 0x225
 8014b04:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8014b06:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	da17      	bge.n	8014b3e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8014b0e:	78fb      	ldrb	r3, [r7, #3]
 8014b10:	015a      	lsls	r2, r3, #5
 8014b12:	693b      	ldr	r3, [r7, #16]
 8014b14:	4413      	add	r3, r2
 8014b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014b1a:	68db      	ldr	r3, [r3, #12]
 8014b1c:	78fa      	ldrb	r2, [r7, #3]
 8014b1e:	0151      	lsls	r1, r2, #5
 8014b20:	693a      	ldr	r2, [r7, #16]
 8014b22:	440a      	add	r2, r1
 8014b24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014b28:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8014b2c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8014b2e:	e006      	b.n	8014b3e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8014b30:	2301      	movs	r3, #1
 8014b32:	77fb      	strb	r3, [r7, #31]
      break;
 8014b34:	e004      	b.n	8014b40 <USB_HC_Init+0x14c>
      break;
 8014b36:	bf00      	nop
 8014b38:	e002      	b.n	8014b40 <USB_HC_Init+0x14c>
      break;
 8014b3a:	bf00      	nop
 8014b3c:	e000      	b.n	8014b40 <USB_HC_Init+0x14c>
      break;
 8014b3e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8014b40:	78fb      	ldrb	r3, [r7, #3]
 8014b42:	015a      	lsls	r2, r3, #5
 8014b44:	693b      	ldr	r3, [r7, #16]
 8014b46:	4413      	add	r3, r2
 8014b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014b4c:	68db      	ldr	r3, [r3, #12]
 8014b4e:	78fa      	ldrb	r2, [r7, #3]
 8014b50:	0151      	lsls	r1, r2, #5
 8014b52:	693a      	ldr	r2, [r7, #16]
 8014b54:	440a      	add	r2, r1
 8014b56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014b5a:	f043 0302 	orr.w	r3, r3, #2
 8014b5e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8014b60:	693b      	ldr	r3, [r7, #16]
 8014b62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014b66:	699a      	ldr	r2, [r3, #24]
 8014b68:	78fb      	ldrb	r3, [r7, #3]
 8014b6a:	f003 030f 	and.w	r3, r3, #15
 8014b6e:	2101      	movs	r1, #1
 8014b70:	fa01 f303 	lsl.w	r3, r1, r3
 8014b74:	6939      	ldr	r1, [r7, #16]
 8014b76:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8014b7a:	4313      	orrs	r3, r2
 8014b7c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	699b      	ldr	r3, [r3, #24]
 8014b82:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8014b8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	da03      	bge.n	8014b9a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8014b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014b96:	61bb      	str	r3, [r7, #24]
 8014b98:	e001      	b.n	8014b9e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8014b9e:	6878      	ldr	r0, [r7, #4]
 8014ba0:	f7ff feff 	bl	80149a2 <USB_GetHostSpeed>
 8014ba4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8014ba6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014baa:	2b02      	cmp	r3, #2
 8014bac:	d106      	bne.n	8014bbc <USB_HC_Init+0x1c8>
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	2b02      	cmp	r3, #2
 8014bb2:	d003      	beq.n	8014bbc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8014bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014bb8:	617b      	str	r3, [r7, #20]
 8014bba:	e001      	b.n	8014bc0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8014bc0:	787b      	ldrb	r3, [r7, #1]
 8014bc2:	059b      	lsls	r3, r3, #22
 8014bc4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8014bc8:	78bb      	ldrb	r3, [r7, #2]
 8014bca:	02db      	lsls	r3, r3, #11
 8014bcc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8014bd0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8014bd2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014bd6:	049b      	lsls	r3, r3, #18
 8014bd8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8014bdc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8014bde:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014be0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8014be4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8014be6:	69bb      	ldr	r3, [r7, #24]
 8014be8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8014bea:	78fb      	ldrb	r3, [r7, #3]
 8014bec:	0159      	lsls	r1, r3, #5
 8014bee:	693b      	ldr	r3, [r7, #16]
 8014bf0:	440b      	add	r3, r1
 8014bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014bf6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8014bf8:	697b      	ldr	r3, [r7, #20]
 8014bfa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8014bfc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8014bfe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014c02:	2b03      	cmp	r3, #3
 8014c04:	d003      	beq.n	8014c0e <USB_HC_Init+0x21a>
 8014c06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014c0a:	2b01      	cmp	r3, #1
 8014c0c:	d10f      	bne.n	8014c2e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8014c0e:	78fb      	ldrb	r3, [r7, #3]
 8014c10:	015a      	lsls	r2, r3, #5
 8014c12:	693b      	ldr	r3, [r7, #16]
 8014c14:	4413      	add	r3, r2
 8014c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	78fa      	ldrb	r2, [r7, #3]
 8014c1e:	0151      	lsls	r1, r2, #5
 8014c20:	693a      	ldr	r2, [r7, #16]
 8014c22:	440a      	add	r2, r1
 8014c24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014c28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014c2c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8014c2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8014c30:	4618      	mov	r0, r3
 8014c32:	3720      	adds	r7, #32
 8014c34:	46bd      	mov	sp, r7
 8014c36:	bd80      	pop	{r7, pc}

08014c38 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b08c      	sub	sp, #48	; 0x30
 8014c3c:	af02      	add	r7, sp, #8
 8014c3e:	60f8      	str	r0, [r7, #12]
 8014c40:	60b9      	str	r1, [r7, #8]
 8014c42:	4613      	mov	r3, r2
 8014c44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8014c4a:	68bb      	ldr	r3, [r7, #8]
 8014c4c:	785b      	ldrb	r3, [r3, #1]
 8014c4e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8014c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014c54:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d02d      	beq.n	8014cbe <USB_HC_StartXfer+0x86>
 8014c62:	68bb      	ldr	r3, [r7, #8]
 8014c64:	791b      	ldrb	r3, [r3, #4]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d129      	bne.n	8014cbe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8014c6a:	79fb      	ldrb	r3, [r7, #7]
 8014c6c:	2b01      	cmp	r3, #1
 8014c6e:	d117      	bne.n	8014ca0 <USB_HC_StartXfer+0x68>
 8014c70:	68bb      	ldr	r3, [r7, #8]
 8014c72:	79db      	ldrb	r3, [r3, #7]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d003      	beq.n	8014c80 <USB_HC_StartXfer+0x48>
 8014c78:	68bb      	ldr	r3, [r7, #8]
 8014c7a:	79db      	ldrb	r3, [r3, #7]
 8014c7c:	2b02      	cmp	r3, #2
 8014c7e:	d10f      	bne.n	8014ca0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8014c80:	69fb      	ldr	r3, [r7, #28]
 8014c82:	015a      	lsls	r2, r3, #5
 8014c84:	6a3b      	ldr	r3, [r7, #32]
 8014c86:	4413      	add	r3, r2
 8014c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014c8c:	68db      	ldr	r3, [r3, #12]
 8014c8e:	69fa      	ldr	r2, [r7, #28]
 8014c90:	0151      	lsls	r1, r2, #5
 8014c92:	6a3a      	ldr	r2, [r7, #32]
 8014c94:	440a      	add	r2, r1
 8014c96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014c9e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8014ca0:	79fb      	ldrb	r3, [r7, #7]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d10b      	bne.n	8014cbe <USB_HC_StartXfer+0x86>
 8014ca6:	68bb      	ldr	r3, [r7, #8]
 8014ca8:	795b      	ldrb	r3, [r3, #5]
 8014caa:	2b01      	cmp	r3, #1
 8014cac:	d107      	bne.n	8014cbe <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8014cae:	68bb      	ldr	r3, [r7, #8]
 8014cb0:	785b      	ldrb	r3, [r3, #1]
 8014cb2:	4619      	mov	r1, r3
 8014cb4:	68f8      	ldr	r0, [r7, #12]
 8014cb6:	f000 fa0f 	bl	80150d8 <USB_DoPing>
      return HAL_OK;
 8014cba:	2300      	movs	r3, #0
 8014cbc:	e0f8      	b.n	8014eb0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8014cbe:	68bb      	ldr	r3, [r7, #8]
 8014cc0:	695b      	ldr	r3, [r3, #20]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d018      	beq.n	8014cf8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8014cc6:	68bb      	ldr	r3, [r7, #8]
 8014cc8:	695b      	ldr	r3, [r3, #20]
 8014cca:	68ba      	ldr	r2, [r7, #8]
 8014ccc:	8912      	ldrh	r2, [r2, #8]
 8014cce:	4413      	add	r3, r2
 8014cd0:	3b01      	subs	r3, #1
 8014cd2:	68ba      	ldr	r2, [r7, #8]
 8014cd4:	8912      	ldrh	r2, [r2, #8]
 8014cd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8014cda:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8014cdc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014cde:	8b7b      	ldrh	r3, [r7, #26]
 8014ce0:	429a      	cmp	r2, r3
 8014ce2:	d90b      	bls.n	8014cfc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8014ce4:	8b7b      	ldrh	r3, [r7, #26]
 8014ce6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8014ce8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014cea:	68ba      	ldr	r2, [r7, #8]
 8014cec:	8912      	ldrh	r2, [r2, #8]
 8014cee:	fb03 f202 	mul.w	r2, r3, r2
 8014cf2:	68bb      	ldr	r3, [r7, #8]
 8014cf4:	611a      	str	r2, [r3, #16]
 8014cf6:	e001      	b.n	8014cfc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8014cfc:	68bb      	ldr	r3, [r7, #8]
 8014cfe:	78db      	ldrb	r3, [r3, #3]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d007      	beq.n	8014d14 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8014d04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014d06:	68ba      	ldr	r2, [r7, #8]
 8014d08:	8912      	ldrh	r2, [r2, #8]
 8014d0a:	fb03 f202 	mul.w	r2, r3, r2
 8014d0e:	68bb      	ldr	r3, [r7, #8]
 8014d10:	611a      	str	r2, [r3, #16]
 8014d12:	e003      	b.n	8014d1c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8014d14:	68bb      	ldr	r3, [r7, #8]
 8014d16:	695a      	ldr	r2, [r3, #20]
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8014d1c:	68bb      	ldr	r3, [r7, #8]
 8014d1e:	691b      	ldr	r3, [r3, #16]
 8014d20:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8014d24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014d26:	04d9      	lsls	r1, r3, #19
 8014d28:	4b63      	ldr	r3, [pc, #396]	; (8014eb8 <USB_HC_StartXfer+0x280>)
 8014d2a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8014d2c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8014d2e:	68bb      	ldr	r3, [r7, #8]
 8014d30:	7a9b      	ldrb	r3, [r3, #10]
 8014d32:	075b      	lsls	r3, r3, #29
 8014d34:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8014d38:	69f9      	ldr	r1, [r7, #28]
 8014d3a:	0148      	lsls	r0, r1, #5
 8014d3c:	6a39      	ldr	r1, [r7, #32]
 8014d3e:	4401      	add	r1, r0
 8014d40:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8014d44:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8014d46:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8014d48:	79fb      	ldrb	r3, [r7, #7]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d009      	beq.n	8014d62 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8014d4e:	68bb      	ldr	r3, [r7, #8]
 8014d50:	68d9      	ldr	r1, [r3, #12]
 8014d52:	69fb      	ldr	r3, [r7, #28]
 8014d54:	015a      	lsls	r2, r3, #5
 8014d56:	6a3b      	ldr	r3, [r7, #32]
 8014d58:	4413      	add	r3, r2
 8014d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014d5e:	460a      	mov	r2, r1
 8014d60:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8014d62:	6a3b      	ldr	r3, [r7, #32]
 8014d64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014d68:	689b      	ldr	r3, [r3, #8]
 8014d6a:	f003 0301 	and.w	r3, r3, #1
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	bf0c      	ite	eq
 8014d72:	2301      	moveq	r3, #1
 8014d74:	2300      	movne	r3, #0
 8014d76:	b2db      	uxtb	r3, r3
 8014d78:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8014d7a:	69fb      	ldr	r3, [r7, #28]
 8014d7c:	015a      	lsls	r2, r3, #5
 8014d7e:	6a3b      	ldr	r3, [r7, #32]
 8014d80:	4413      	add	r3, r2
 8014d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	69fa      	ldr	r2, [r7, #28]
 8014d8a:	0151      	lsls	r1, r2, #5
 8014d8c:	6a3a      	ldr	r2, [r7, #32]
 8014d8e:	440a      	add	r2, r1
 8014d90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014d94:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8014d98:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8014d9a:	69fb      	ldr	r3, [r7, #28]
 8014d9c:	015a      	lsls	r2, r3, #5
 8014d9e:	6a3b      	ldr	r3, [r7, #32]
 8014da0:	4413      	add	r3, r2
 8014da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014da6:	681a      	ldr	r2, [r3, #0]
 8014da8:	7e7b      	ldrb	r3, [r7, #25]
 8014daa:	075b      	lsls	r3, r3, #29
 8014dac:	69f9      	ldr	r1, [r7, #28]
 8014dae:	0148      	lsls	r0, r1, #5
 8014db0:	6a39      	ldr	r1, [r7, #32]
 8014db2:	4401      	add	r1, r0
 8014db4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8014db8:	4313      	orrs	r3, r2
 8014dba:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8014dbc:	69fb      	ldr	r3, [r7, #28]
 8014dbe:	015a      	lsls	r2, r3, #5
 8014dc0:	6a3b      	ldr	r3, [r7, #32]
 8014dc2:	4413      	add	r3, r2
 8014dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8014dcc:	693b      	ldr	r3, [r7, #16]
 8014dce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014dd2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8014dd4:	68bb      	ldr	r3, [r7, #8]
 8014dd6:	78db      	ldrb	r3, [r3, #3]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d004      	beq.n	8014de6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8014ddc:	693b      	ldr	r3, [r7, #16]
 8014dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014de2:	613b      	str	r3, [r7, #16]
 8014de4:	e003      	b.n	8014dee <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8014de6:	693b      	ldr	r3, [r7, #16]
 8014de8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8014dec:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8014dee:	693b      	ldr	r3, [r7, #16]
 8014df0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014df4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8014df6:	69fb      	ldr	r3, [r7, #28]
 8014df8:	015a      	lsls	r2, r3, #5
 8014dfa:	6a3b      	ldr	r3, [r7, #32]
 8014dfc:	4413      	add	r3, r2
 8014dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014e02:	461a      	mov	r2, r3
 8014e04:	693b      	ldr	r3, [r7, #16]
 8014e06:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8014e08:	79fb      	ldrb	r3, [r7, #7]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d001      	beq.n	8014e12 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8014e0e:	2300      	movs	r3, #0
 8014e10:	e04e      	b.n	8014eb0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8014e12:	68bb      	ldr	r3, [r7, #8]
 8014e14:	78db      	ldrb	r3, [r3, #3]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d149      	bne.n	8014eae <USB_HC_StartXfer+0x276>
 8014e1a:	68bb      	ldr	r3, [r7, #8]
 8014e1c:	695b      	ldr	r3, [r3, #20]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d045      	beq.n	8014eae <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8014e22:	68bb      	ldr	r3, [r7, #8]
 8014e24:	79db      	ldrb	r3, [r3, #7]
 8014e26:	2b03      	cmp	r3, #3
 8014e28:	d830      	bhi.n	8014e8c <USB_HC_StartXfer+0x254>
 8014e2a:	a201      	add	r2, pc, #4	; (adr r2, 8014e30 <USB_HC_StartXfer+0x1f8>)
 8014e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e30:	08014e41 	.word	0x08014e41
 8014e34:	08014e65 	.word	0x08014e65
 8014e38:	08014e41 	.word	0x08014e41
 8014e3c:	08014e65 	.word	0x08014e65
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8014e40:	68bb      	ldr	r3, [r7, #8]
 8014e42:	695b      	ldr	r3, [r3, #20]
 8014e44:	3303      	adds	r3, #3
 8014e46:	089b      	lsrs	r3, r3, #2
 8014e48:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8014e4a:	8afa      	ldrh	r2, [r7, #22]
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e50:	b29b      	uxth	r3, r3
 8014e52:	429a      	cmp	r2, r3
 8014e54:	d91c      	bls.n	8014e90 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	699b      	ldr	r3, [r3, #24]
 8014e5a:	f043 0220 	orr.w	r2, r3, #32
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	619a      	str	r2, [r3, #24]
        }
        break;
 8014e62:	e015      	b.n	8014e90 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8014e64:	68bb      	ldr	r3, [r7, #8]
 8014e66:	695b      	ldr	r3, [r3, #20]
 8014e68:	3303      	adds	r3, #3
 8014e6a:	089b      	lsrs	r3, r3, #2
 8014e6c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8014e6e:	8afa      	ldrh	r2, [r7, #22]
 8014e70:	6a3b      	ldr	r3, [r7, #32]
 8014e72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014e76:	691b      	ldr	r3, [r3, #16]
 8014e78:	b29b      	uxth	r3, r3
 8014e7a:	429a      	cmp	r2, r3
 8014e7c:	d90a      	bls.n	8014e94 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	699b      	ldr	r3, [r3, #24]
 8014e82:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	619a      	str	r2, [r3, #24]
        }
        break;
 8014e8a:	e003      	b.n	8014e94 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8014e8c:	bf00      	nop
 8014e8e:	e002      	b.n	8014e96 <USB_HC_StartXfer+0x25e>
        break;
 8014e90:	bf00      	nop
 8014e92:	e000      	b.n	8014e96 <USB_HC_StartXfer+0x25e>
        break;
 8014e94:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8014e96:	68bb      	ldr	r3, [r7, #8]
 8014e98:	68d9      	ldr	r1, [r3, #12]
 8014e9a:	68bb      	ldr	r3, [r7, #8]
 8014e9c:	785a      	ldrb	r2, [r3, #1]
 8014e9e:	68bb      	ldr	r3, [r7, #8]
 8014ea0:	695b      	ldr	r3, [r3, #20]
 8014ea2:	b29b      	uxth	r3, r3
 8014ea4:	2000      	movs	r0, #0
 8014ea6:	9000      	str	r0, [sp, #0]
 8014ea8:	68f8      	ldr	r0, [r7, #12]
 8014eaa:	f7ff f8df 	bl	801406c <USB_WritePacket>
  }

  return HAL_OK;
 8014eae:	2300      	movs	r3, #0
}
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	3728      	adds	r7, #40	; 0x28
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	bd80      	pop	{r7, pc}
 8014eb8:	1ff80000 	.word	0x1ff80000

08014ebc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014ebc:	b480      	push	{r7}
 8014ebe:	b085      	sub	sp, #20
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014ece:	695b      	ldr	r3, [r3, #20]
 8014ed0:	b29b      	uxth	r3, r3
}
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	3714      	adds	r7, #20
 8014ed6:	46bd      	mov	sp, r7
 8014ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014edc:	4770      	bx	lr

08014ede <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8014ede:	b480      	push	{r7}
 8014ee0:	b089      	sub	sp, #36	; 0x24
 8014ee2:	af00      	add	r7, sp, #0
 8014ee4:	6078      	str	r0, [r7, #4]
 8014ee6:	460b      	mov	r3, r1
 8014ee8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8014eee:	78fb      	ldrb	r3, [r7, #3]
 8014ef0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8014ef6:	69bb      	ldr	r3, [r7, #24]
 8014ef8:	015a      	lsls	r2, r3, #5
 8014efa:	69fb      	ldr	r3, [r7, #28]
 8014efc:	4413      	add	r3, r2
 8014efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	0c9b      	lsrs	r3, r3, #18
 8014f06:	f003 0303 	and.w	r3, r3, #3
 8014f0a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8014f0c:	69bb      	ldr	r3, [r7, #24]
 8014f0e:	015a      	lsls	r2, r3, #5
 8014f10:	69fb      	ldr	r3, [r7, #28]
 8014f12:	4413      	add	r3, r2
 8014f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	0fdb      	lsrs	r3, r3, #31
 8014f1c:	f003 0301 	and.w	r3, r3, #1
 8014f20:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	689b      	ldr	r3, [r3, #8]
 8014f26:	f003 0320 	and.w	r3, r3, #32
 8014f2a:	2b20      	cmp	r3, #32
 8014f2c:	d104      	bne.n	8014f38 <USB_HC_Halt+0x5a>
 8014f2e:	693b      	ldr	r3, [r7, #16]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d101      	bne.n	8014f38 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8014f34:	2300      	movs	r3, #0
 8014f36:	e0c8      	b.n	80150ca <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8014f38:	697b      	ldr	r3, [r7, #20]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d002      	beq.n	8014f44 <USB_HC_Halt+0x66>
 8014f3e:	697b      	ldr	r3, [r7, #20]
 8014f40:	2b02      	cmp	r3, #2
 8014f42:	d163      	bne.n	801500c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8014f44:	69bb      	ldr	r3, [r7, #24]
 8014f46:	015a      	lsls	r2, r3, #5
 8014f48:	69fb      	ldr	r3, [r7, #28]
 8014f4a:	4413      	add	r3, r2
 8014f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	69ba      	ldr	r2, [r7, #24]
 8014f54:	0151      	lsls	r1, r2, #5
 8014f56:	69fa      	ldr	r2, [r7, #28]
 8014f58:	440a      	add	r2, r1
 8014f5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014f5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014f62:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	689b      	ldr	r3, [r3, #8]
 8014f68:	f003 0320 	and.w	r3, r3, #32
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	f040 80ab 	bne.w	80150c8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d133      	bne.n	8014fe6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8014f7e:	69bb      	ldr	r3, [r7, #24]
 8014f80:	015a      	lsls	r2, r3, #5
 8014f82:	69fb      	ldr	r3, [r7, #28]
 8014f84:	4413      	add	r3, r2
 8014f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	69ba      	ldr	r2, [r7, #24]
 8014f8e:	0151      	lsls	r1, r2, #5
 8014f90:	69fa      	ldr	r2, [r7, #28]
 8014f92:	440a      	add	r2, r1
 8014f94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014f98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014f9c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8014f9e:	69bb      	ldr	r3, [r7, #24]
 8014fa0:	015a      	lsls	r2, r3, #5
 8014fa2:	69fb      	ldr	r3, [r7, #28]
 8014fa4:	4413      	add	r3, r2
 8014fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	69ba      	ldr	r2, [r7, #24]
 8014fae:	0151      	lsls	r1, r2, #5
 8014fb0:	69fa      	ldr	r2, [r7, #28]
 8014fb2:	440a      	add	r2, r1
 8014fb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014fb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014fbc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	3301      	adds	r3, #1
 8014fc2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014fca:	d81d      	bhi.n	8015008 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8014fcc:	69bb      	ldr	r3, [r7, #24]
 8014fce:	015a      	lsls	r2, r3, #5
 8014fd0:	69fb      	ldr	r3, [r7, #28]
 8014fd2:	4413      	add	r3, r2
 8014fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014fde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014fe2:	d0ec      	beq.n	8014fbe <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8014fe4:	e070      	b.n	80150c8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8014fe6:	69bb      	ldr	r3, [r7, #24]
 8014fe8:	015a      	lsls	r2, r3, #5
 8014fea:	69fb      	ldr	r3, [r7, #28]
 8014fec:	4413      	add	r3, r2
 8014fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	69ba      	ldr	r2, [r7, #24]
 8014ff6:	0151      	lsls	r1, r2, #5
 8014ff8:	69fa      	ldr	r2, [r7, #28]
 8014ffa:	440a      	add	r2, r1
 8014ffc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015000:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015004:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8015006:	e05f      	b.n	80150c8 <USB_HC_Halt+0x1ea>
            break;
 8015008:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801500a:	e05d      	b.n	80150c8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801500c:	69bb      	ldr	r3, [r7, #24]
 801500e:	015a      	lsls	r2, r3, #5
 8015010:	69fb      	ldr	r3, [r7, #28]
 8015012:	4413      	add	r3, r2
 8015014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	69ba      	ldr	r2, [r7, #24]
 801501c:	0151      	lsls	r1, r2, #5
 801501e:	69fa      	ldr	r2, [r7, #28]
 8015020:	440a      	add	r2, r1
 8015022:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015026:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801502a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 801502c:	69fb      	ldr	r3, [r7, #28]
 801502e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015032:	691b      	ldr	r3, [r3, #16]
 8015034:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015038:	2b00      	cmp	r3, #0
 801503a:	d133      	bne.n	80150a4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801503c:	69bb      	ldr	r3, [r7, #24]
 801503e:	015a      	lsls	r2, r3, #5
 8015040:	69fb      	ldr	r3, [r7, #28]
 8015042:	4413      	add	r3, r2
 8015044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	69ba      	ldr	r2, [r7, #24]
 801504c:	0151      	lsls	r1, r2, #5
 801504e:	69fa      	ldr	r2, [r7, #28]
 8015050:	440a      	add	r2, r1
 8015052:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015056:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801505a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801505c:	69bb      	ldr	r3, [r7, #24]
 801505e:	015a      	lsls	r2, r3, #5
 8015060:	69fb      	ldr	r3, [r7, #28]
 8015062:	4413      	add	r3, r2
 8015064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	69ba      	ldr	r2, [r7, #24]
 801506c:	0151      	lsls	r1, r2, #5
 801506e:	69fa      	ldr	r2, [r7, #28]
 8015070:	440a      	add	r2, r1
 8015072:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015076:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801507a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	3301      	adds	r3, #1
 8015080:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015088:	d81d      	bhi.n	80150c6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801508a:	69bb      	ldr	r3, [r7, #24]
 801508c:	015a      	lsls	r2, r3, #5
 801508e:	69fb      	ldr	r3, [r7, #28]
 8015090:	4413      	add	r3, r2
 8015092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801509c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80150a0:	d0ec      	beq.n	801507c <USB_HC_Halt+0x19e>
 80150a2:	e011      	b.n	80150c8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80150a4:	69bb      	ldr	r3, [r7, #24]
 80150a6:	015a      	lsls	r2, r3, #5
 80150a8:	69fb      	ldr	r3, [r7, #28]
 80150aa:	4413      	add	r3, r2
 80150ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	69ba      	ldr	r2, [r7, #24]
 80150b4:	0151      	lsls	r1, r2, #5
 80150b6:	69fa      	ldr	r2, [r7, #28]
 80150b8:	440a      	add	r2, r1
 80150ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80150be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80150c2:	6013      	str	r3, [r2, #0]
 80150c4:	e000      	b.n	80150c8 <USB_HC_Halt+0x1ea>
          break;
 80150c6:	bf00      	nop
    }
  }

  return HAL_OK;
 80150c8:	2300      	movs	r3, #0
}
 80150ca:	4618      	mov	r0, r3
 80150cc:	3724      	adds	r7, #36	; 0x24
 80150ce:	46bd      	mov	sp, r7
 80150d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d4:	4770      	bx	lr
	...

080150d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80150d8:	b480      	push	{r7}
 80150da:	b087      	sub	sp, #28
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
 80150e0:	460b      	mov	r3, r1
 80150e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80150e8:	78fb      	ldrb	r3, [r7, #3]
 80150ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80150ec:	2301      	movs	r3, #1
 80150ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	04da      	lsls	r2, r3, #19
 80150f4:	4b15      	ldr	r3, [pc, #84]	; (801514c <USB_DoPing+0x74>)
 80150f6:	4013      	ands	r3, r2
 80150f8:	693a      	ldr	r2, [r7, #16]
 80150fa:	0151      	lsls	r1, r2, #5
 80150fc:	697a      	ldr	r2, [r7, #20]
 80150fe:	440a      	add	r2, r1
 8015100:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015108:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 801510a:	693b      	ldr	r3, [r7, #16]
 801510c:	015a      	lsls	r2, r3, #5
 801510e:	697b      	ldr	r3, [r7, #20]
 8015110:	4413      	add	r3, r2
 8015112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801511a:	68bb      	ldr	r3, [r7, #8]
 801511c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015120:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8015122:	68bb      	ldr	r3, [r7, #8]
 8015124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015128:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 801512a:	693b      	ldr	r3, [r7, #16]
 801512c:	015a      	lsls	r2, r3, #5
 801512e:	697b      	ldr	r3, [r7, #20]
 8015130:	4413      	add	r3, r2
 8015132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015136:	461a      	mov	r2, r3
 8015138:	68bb      	ldr	r3, [r7, #8]
 801513a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 801513c:	2300      	movs	r3, #0
}
 801513e:	4618      	mov	r0, r3
 8015140:	371c      	adds	r7, #28
 8015142:	46bd      	mov	sp, r7
 8015144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015148:	4770      	bx	lr
 801514a:	bf00      	nop
 801514c:	1ff80000 	.word	0x1ff80000

08015150 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8015150:	b580      	push	{r7, lr}
 8015152:	b088      	sub	sp, #32
 8015154:	af00      	add	r7, sp, #0
 8015156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8015158:	2300      	movs	r3, #0
 801515a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8015160:	2300      	movs	r3, #0
 8015162:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8015164:	6878      	ldr	r0, [r7, #4]
 8015166:	f7fd ff6a 	bl	801303e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801516a:	2110      	movs	r1, #16
 801516c:	6878      	ldr	r0, [r7, #4]
 801516e:	f7fe f921 	bl	80133b4 <USB_FlushTxFifo>
 8015172:	4603      	mov	r3, r0
 8015174:	2b00      	cmp	r3, #0
 8015176:	d001      	beq.n	801517c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8015178:	2301      	movs	r3, #1
 801517a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801517c:	6878      	ldr	r0, [r7, #4]
 801517e:	f7fe f94d 	bl	801341c <USB_FlushRxFifo>
 8015182:	4603      	mov	r3, r0
 8015184:	2b00      	cmp	r3, #0
 8015186:	d001      	beq.n	801518c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8015188:	2301      	movs	r3, #1
 801518a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 801518c:	2300      	movs	r3, #0
 801518e:	61bb      	str	r3, [r7, #24]
 8015190:	e01f      	b.n	80151d2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8015192:	69bb      	ldr	r3, [r7, #24]
 8015194:	015a      	lsls	r2, r3, #5
 8015196:	697b      	ldr	r3, [r7, #20]
 8015198:	4413      	add	r3, r2
 801519a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80151a2:	693b      	ldr	r3, [r7, #16]
 80151a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80151a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80151aa:	693b      	ldr	r3, [r7, #16]
 80151ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80151b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80151b2:	693b      	ldr	r3, [r7, #16]
 80151b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80151b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80151ba:	69bb      	ldr	r3, [r7, #24]
 80151bc:	015a      	lsls	r2, r3, #5
 80151be:	697b      	ldr	r3, [r7, #20]
 80151c0:	4413      	add	r3, r2
 80151c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80151c6:	461a      	mov	r2, r3
 80151c8:	693b      	ldr	r3, [r7, #16]
 80151ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80151cc:	69bb      	ldr	r3, [r7, #24]
 80151ce:	3301      	adds	r3, #1
 80151d0:	61bb      	str	r3, [r7, #24]
 80151d2:	69bb      	ldr	r3, [r7, #24]
 80151d4:	2b0f      	cmp	r3, #15
 80151d6:	d9dc      	bls.n	8015192 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80151d8:	2300      	movs	r3, #0
 80151da:	61bb      	str	r3, [r7, #24]
 80151dc:	e034      	b.n	8015248 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80151de:	69bb      	ldr	r3, [r7, #24]
 80151e0:	015a      	lsls	r2, r3, #5
 80151e2:	697b      	ldr	r3, [r7, #20]
 80151e4:	4413      	add	r3, r2
 80151e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80151ee:	693b      	ldr	r3, [r7, #16]
 80151f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80151f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80151f6:	693b      	ldr	r3, [r7, #16]
 80151f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80151fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80151fe:	693b      	ldr	r3, [r7, #16]
 8015200:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015204:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8015206:	69bb      	ldr	r3, [r7, #24]
 8015208:	015a      	lsls	r2, r3, #5
 801520a:	697b      	ldr	r3, [r7, #20]
 801520c:	4413      	add	r3, r2
 801520e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015212:	461a      	mov	r2, r3
 8015214:	693b      	ldr	r3, [r7, #16]
 8015216:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	3301      	adds	r3, #1
 801521c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015224:	d80c      	bhi.n	8015240 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8015226:	69bb      	ldr	r3, [r7, #24]
 8015228:	015a      	lsls	r2, r3, #5
 801522a:	697b      	ldr	r3, [r7, #20]
 801522c:	4413      	add	r3, r2
 801522e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015238:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801523c:	d0ec      	beq.n	8015218 <USB_StopHost+0xc8>
 801523e:	e000      	b.n	8015242 <USB_StopHost+0xf2>
        break;
 8015240:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8015242:	69bb      	ldr	r3, [r7, #24]
 8015244:	3301      	adds	r3, #1
 8015246:	61bb      	str	r3, [r7, #24]
 8015248:	69bb      	ldr	r3, [r7, #24]
 801524a:	2b0f      	cmp	r3, #15
 801524c:	d9c7      	bls.n	80151de <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 801524e:	697b      	ldr	r3, [r7, #20]
 8015250:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015254:	461a      	mov	r2, r3
 8015256:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801525a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015262:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8015264:	6878      	ldr	r0, [r7, #4]
 8015266:	f7fd fed9 	bl	801301c <USB_EnableGlobalInt>

  return ret;
 801526a:	7ffb      	ldrb	r3, [r7, #31]
}
 801526c:	4618      	mov	r0, r3
 801526e:	3720      	adds	r7, #32
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}

08015274 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8015274:	b580      	push	{r7, lr}
 8015276:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8015278:	4904      	ldr	r1, [pc, #16]	; (801528c <MX_FATFS_Init+0x18>)
 801527a:	4805      	ldr	r0, [pc, #20]	; (8015290 <MX_FATFS_Init+0x1c>)
 801527c:	f004 fcce 	bl	8019c1c <FATFS_LinkDriver>
 8015280:	4603      	mov	r3, r0
 8015282:	461a      	mov	r2, r3
 8015284:	4b03      	ldr	r3, [pc, #12]	; (8015294 <MX_FATFS_Init+0x20>)
 8015286:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8015288:	bf00      	nop
 801528a:	bd80      	pop	{r7, pc}
 801528c:	20041e14 	.word	0x20041e14
 8015290:	08020b54 	.word	0x08020b54
 8015294:	20041e10 	.word	0x20041e10

08015298 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8015298:	b580      	push	{r7, lr}
 801529a:	b082      	sub	sp, #8
 801529c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801529e:	2300      	movs	r3, #0
 80152a0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80152a2:	f000 f87b 	bl	801539c <BSP_SD_IsDetected>
 80152a6:	4603      	mov	r3, r0
 80152a8:	2b01      	cmp	r3, #1
 80152aa:	d001      	beq.n	80152b0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80152ac:	2302      	movs	r3, #2
 80152ae:	e012      	b.n	80152d6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80152b0:	480b      	ldr	r0, [pc, #44]	; (80152e0 <BSP_SD_Init+0x48>)
 80152b2:	f7f9 ffde 	bl	800f272 <HAL_SD_Init>
 80152b6:	4603      	mov	r3, r0
 80152b8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80152ba:	79fb      	ldrb	r3, [r7, #7]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d109      	bne.n	80152d4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80152c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80152c4:	4806      	ldr	r0, [pc, #24]	; (80152e0 <BSP_SD_Init+0x48>)
 80152c6:	f7fa fc2f 	bl	800fb28 <HAL_SD_ConfigWideBusOperation>
 80152ca:	4603      	mov	r3, r0
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d001      	beq.n	80152d4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80152d0:	2301      	movs	r3, #1
 80152d2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80152d4:	79fb      	ldrb	r3, [r7, #7]
}
 80152d6:	4618      	mov	r0, r3
 80152d8:	3708      	adds	r7, #8
 80152da:	46bd      	mov	sp, r7
 80152dc:	bd80      	pop	{r7, pc}
 80152de:	bf00      	nop
 80152e0:	20001d3c 	.word	0x20001d3c

080152e4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b086      	sub	sp, #24
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	60f8      	str	r0, [r7, #12]
 80152ec:	60b9      	str	r1, [r7, #8]
 80152ee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80152f0:	2300      	movs	r3, #0
 80152f2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	68ba      	ldr	r2, [r7, #8]
 80152f8:	68f9      	ldr	r1, [r7, #12]
 80152fa:	4806      	ldr	r0, [pc, #24]	; (8015314 <BSP_SD_ReadBlocks_DMA+0x30>)
 80152fc:	f7fa f872 	bl	800f3e4 <HAL_SD_ReadBlocks_DMA>
 8015300:	4603      	mov	r3, r0
 8015302:	2b00      	cmp	r3, #0
 8015304:	d001      	beq.n	801530a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8015306:	2301      	movs	r3, #1
 8015308:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801530a:	7dfb      	ldrb	r3, [r7, #23]
}
 801530c:	4618      	mov	r0, r3
 801530e:	3718      	adds	r7, #24
 8015310:	46bd      	mov	sp, r7
 8015312:	bd80      	pop	{r7, pc}
 8015314:	20001d3c 	.word	0x20001d3c

08015318 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8015318:	b580      	push	{r7, lr}
 801531a:	b086      	sub	sp, #24
 801531c:	af00      	add	r7, sp, #0
 801531e:	60f8      	str	r0, [r7, #12]
 8015320:	60b9      	str	r1, [r7, #8]
 8015322:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8015324:	2300      	movs	r3, #0
 8015326:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	68ba      	ldr	r2, [r7, #8]
 801532c:	68f9      	ldr	r1, [r7, #12]
 801532e:	4806      	ldr	r0, [pc, #24]	; (8015348 <BSP_SD_WriteBlocks_DMA+0x30>)
 8015330:	f7fa f93a 	bl	800f5a8 <HAL_SD_WriteBlocks_DMA>
 8015334:	4603      	mov	r3, r0
 8015336:	2b00      	cmp	r3, #0
 8015338:	d001      	beq.n	801533e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801533a:	2301      	movs	r3, #1
 801533c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801533e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015340:	4618      	mov	r0, r3
 8015342:	3718      	adds	r7, #24
 8015344:	46bd      	mov	sp, r7
 8015346:	bd80      	pop	{r7, pc}
 8015348:	20001d3c 	.word	0x20001d3c

0801534c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8015350:	4805      	ldr	r0, [pc, #20]	; (8015368 <BSP_SD_GetCardState+0x1c>)
 8015352:	f7fa fc83 	bl	800fc5c <HAL_SD_GetCardState>
 8015356:	4603      	mov	r3, r0
 8015358:	2b04      	cmp	r3, #4
 801535a:	bf14      	ite	ne
 801535c:	2301      	movne	r3, #1
 801535e:	2300      	moveq	r3, #0
 8015360:	b2db      	uxtb	r3, r3
}
 8015362:	4618      	mov	r0, r3
 8015364:	bd80      	pop	{r7, pc}
 8015366:	bf00      	nop
 8015368:	20001d3c 	.word	0x20001d3c

0801536c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b082      	sub	sp, #8
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8015374:	6879      	ldr	r1, [r7, #4]
 8015376:	4803      	ldr	r0, [pc, #12]	; (8015384 <BSP_SD_GetCardInfo+0x18>)
 8015378:	f7fa fbaa 	bl	800fad0 <HAL_SD_GetCardInfo>
}
 801537c:	bf00      	nop
 801537e:	3708      	adds	r7, #8
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}
 8015384:	20001d3c 	.word	0x20001d3c

08015388 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b082      	sub	sp, #8
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8015390:	f000 f9b2 	bl	80156f8 <BSP_SD_ReadCpltCallback>
}
 8015394:	bf00      	nop
 8015396:	3708      	adds	r7, #8
 8015398:	46bd      	mov	sp, r7
 801539a:	bd80      	pop	{r7, pc}

0801539c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801539c:	b580      	push	{r7, lr}
 801539e:	b082      	sub	sp, #8
 80153a0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80153a2:	2301      	movs	r3, #1
 80153a4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80153a6:	f000 f80b 	bl	80153c0 <BSP_PlatformIsDetected>
 80153aa:	4603      	mov	r3, r0
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d101      	bne.n	80153b4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80153b0:	2300      	movs	r3, #0
 80153b2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80153b4:	79fb      	ldrb	r3, [r7, #7]
 80153b6:	b2db      	uxtb	r3, r3
}
 80153b8:	4618      	mov	r0, r3
 80153ba:	3708      	adds	r7, #8
 80153bc:	46bd      	mov	sp, r7
 80153be:	bd80      	pop	{r7, pc}

080153c0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b082      	sub	sp, #8
 80153c4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80153c6:	2301      	movs	r3, #1
 80153c8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80153ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80153ce:	4806      	ldr	r0, [pc, #24]	; (80153e8 <BSP_PlatformIsDetected+0x28>)
 80153d0:	f7f2 fc14 	bl	8007bfc <HAL_GPIO_ReadPin>
 80153d4:	4603      	mov	r3, r0
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d001      	beq.n	80153de <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80153da:	2300      	movs	r3, #0
 80153dc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80153de:	79fb      	ldrb	r3, [r7, #7]
}
 80153e0:	4618      	mov	r0, r3
 80153e2:	3708      	adds	r7, #8
 80153e4:	46bd      	mov	sp, r7
 80153e6:	bd80      	pop	{r7, pc}
 80153e8:	40020800 	.word	0x40020800

080153ec <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b084      	sub	sp, #16
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 80153f4:	f004 fc5e 	bl	8019cb4 <osKernelSysTick>
 80153f8:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 80153fa:	e006      	b.n	801540a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80153fc:	f7ff ffa6 	bl	801534c <BSP_SD_GetCardState>
 8015400:	4603      	mov	r3, r0
 8015402:	2b00      	cmp	r3, #0
 8015404:	d101      	bne.n	801540a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8015406:	2300      	movs	r3, #0
 8015408:	e009      	b.n	801541e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 801540a:	f004 fc53 	bl	8019cb4 <osKernelSysTick>
 801540e:	4602      	mov	r2, r0
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	1ad3      	subs	r3, r2, r3
 8015414:	687a      	ldr	r2, [r7, #4]
 8015416:	429a      	cmp	r2, r3
 8015418:	d8f0      	bhi.n	80153fc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801541a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801541e:	4618      	mov	r0, r3
 8015420:	3710      	adds	r7, #16
 8015422:	46bd      	mov	sp, r7
 8015424:	bd80      	pop	{r7, pc}
	...

08015428 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8015428:	b580      	push	{r7, lr}
 801542a:	b082      	sub	sp, #8
 801542c:	af00      	add	r7, sp, #0
 801542e:	4603      	mov	r3, r0
 8015430:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8015432:	4b0b      	ldr	r3, [pc, #44]	; (8015460 <SD_CheckStatus+0x38>)
 8015434:	2201      	movs	r2, #1
 8015436:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015438:	f7ff ff88 	bl	801534c <BSP_SD_GetCardState>
 801543c:	4603      	mov	r3, r0
 801543e:	2b00      	cmp	r3, #0
 8015440:	d107      	bne.n	8015452 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8015442:	4b07      	ldr	r3, [pc, #28]	; (8015460 <SD_CheckStatus+0x38>)
 8015444:	781b      	ldrb	r3, [r3, #0]
 8015446:	b2db      	uxtb	r3, r3
 8015448:	f023 0301 	bic.w	r3, r3, #1
 801544c:	b2da      	uxtb	r2, r3
 801544e:	4b04      	ldr	r3, [pc, #16]	; (8015460 <SD_CheckStatus+0x38>)
 8015450:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8015452:	4b03      	ldr	r3, [pc, #12]	; (8015460 <SD_CheckStatus+0x38>)
 8015454:	781b      	ldrb	r3, [r3, #0]
 8015456:	b2db      	uxtb	r3, r3
}
 8015458:	4618      	mov	r0, r3
 801545a:	3708      	adds	r7, #8
 801545c:	46bd      	mov	sp, r7
 801545e:	bd80      	pop	{r7, pc}
 8015460:	20000029 	.word	0x20000029

08015464 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8015464:	b590      	push	{r4, r7, lr}
 8015466:	b087      	sub	sp, #28
 8015468:	af00      	add	r7, sp, #0
 801546a:	4603      	mov	r3, r0
 801546c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801546e:	4b20      	ldr	r3, [pc, #128]	; (80154f0 <SD_initialize+0x8c>)
 8015470:	2201      	movs	r2, #1
 8015472:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8015474:	f004 fc12 	bl	8019c9c <osKernelRunning>
 8015478:	4603      	mov	r3, r0
 801547a:	2b00      	cmp	r3, #0
 801547c:	d030      	beq.n	80154e0 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 801547e:	f7ff ff0b 	bl	8015298 <BSP_SD_Init>
 8015482:	4603      	mov	r3, r0
 8015484:	2b00      	cmp	r3, #0
 8015486:	d107      	bne.n	8015498 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8015488:	79fb      	ldrb	r3, [r7, #7]
 801548a:	4618      	mov	r0, r3
 801548c:	f7ff ffcc 	bl	8015428 <SD_CheckStatus>
 8015490:	4603      	mov	r3, r0
 8015492:	461a      	mov	r2, r3
 8015494:	4b16      	ldr	r3, [pc, #88]	; (80154f0 <SD_initialize+0x8c>)
 8015496:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8015498:	4b15      	ldr	r3, [pc, #84]	; (80154f0 <SD_initialize+0x8c>)
 801549a:	781b      	ldrb	r3, [r3, #0]
 801549c:	b2db      	uxtb	r3, r3
 801549e:	2b01      	cmp	r3, #1
 80154a0:	d01e      	beq.n	80154e0 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 80154a2:	4b14      	ldr	r3, [pc, #80]	; (80154f4 <SD_initialize+0x90>)
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d10e      	bne.n	80154c8 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80154aa:	4b13      	ldr	r3, [pc, #76]	; (80154f8 <SD_initialize+0x94>)
 80154ac:	f107 0408 	add.w	r4, r7, #8
 80154b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80154b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80154b6:	f107 0308 	add.w	r3, r7, #8
 80154ba:	2100      	movs	r1, #0
 80154bc:	4618      	mov	r0, r3
 80154be:	f004 fcf5 	bl	8019eac <osMessageCreate>
 80154c2:	4603      	mov	r3, r0
 80154c4:	4a0b      	ldr	r2, [pc, #44]	; (80154f4 <SD_initialize+0x90>)
 80154c6:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 80154c8:	4b0a      	ldr	r3, [pc, #40]	; (80154f4 <SD_initialize+0x90>)
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d107      	bne.n	80154e0 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 80154d0:	4b07      	ldr	r3, [pc, #28]	; (80154f0 <SD_initialize+0x8c>)
 80154d2:	781b      	ldrb	r3, [r3, #0]
 80154d4:	b2db      	uxtb	r3, r3
 80154d6:	f043 0301 	orr.w	r3, r3, #1
 80154da:	b2da      	uxtb	r2, r3
 80154dc:	4b04      	ldr	r3, [pc, #16]	; (80154f0 <SD_initialize+0x8c>)
 80154de:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80154e0:	4b03      	ldr	r3, [pc, #12]	; (80154f0 <SD_initialize+0x8c>)
 80154e2:	781b      	ldrb	r3, [r3, #0]
 80154e4:	b2db      	uxtb	r3, r3
}
 80154e6:	4618      	mov	r0, r3
 80154e8:	371c      	adds	r7, #28
 80154ea:	46bd      	mov	sp, r7
 80154ec:	bd90      	pop	{r4, r7, pc}
 80154ee:	bf00      	nop
 80154f0:	20000029 	.word	0x20000029
 80154f4:	20041e18 	.word	0x20041e18
 80154f8:	0801efe0 	.word	0x0801efe0

080154fc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b082      	sub	sp, #8
 8015500:	af00      	add	r7, sp, #0
 8015502:	4603      	mov	r3, r0
 8015504:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8015506:	79fb      	ldrb	r3, [r7, #7]
 8015508:	4618      	mov	r0, r3
 801550a:	f7ff ff8d 	bl	8015428 <SD_CheckStatus>
 801550e:	4603      	mov	r3, r0
}
 8015510:	4618      	mov	r0, r3
 8015512:	3708      	adds	r7, #8
 8015514:	46bd      	mov	sp, r7
 8015516:	bd80      	pop	{r7, pc}

08015518 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b08a      	sub	sp, #40	; 0x28
 801551c:	af00      	add	r7, sp, #0
 801551e:	60b9      	str	r1, [r7, #8]
 8015520:	607a      	str	r2, [r7, #4]
 8015522:	603b      	str	r3, [r7, #0]
 8015524:	4603      	mov	r3, r0
 8015526:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8015528:	2301      	movs	r3, #1
 801552a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801552e:	f247 5030 	movw	r0, #30000	; 0x7530
 8015532:	f7ff ff5b 	bl	80153ec <SD_CheckStatusWithTimeout>
 8015536:	4603      	mov	r3, r0
 8015538:	2b00      	cmp	r3, #0
 801553a:	da02      	bge.n	8015542 <SD_read+0x2a>
  {
    return res;
 801553c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015540:	e032      	b.n	80155a8 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8015542:	683a      	ldr	r2, [r7, #0]
 8015544:	6879      	ldr	r1, [r7, #4]
 8015546:	68b8      	ldr	r0, [r7, #8]
 8015548:	f7ff fecc 	bl	80152e4 <BSP_SD_ReadBlocks_DMA>
 801554c:	4603      	mov	r3, r0
 801554e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 8015552:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015556:	2b00      	cmp	r3, #0
 8015558:	d124      	bne.n	80155a4 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801555a:	4b15      	ldr	r3, [pc, #84]	; (80155b0 <SD_read+0x98>)
 801555c:	6819      	ldr	r1, [r3, #0]
 801555e:	f107 0314 	add.w	r3, r7, #20
 8015562:	f247 5230 	movw	r2, #30000	; 0x7530
 8015566:	4618      	mov	r0, r3
 8015568:	f004 fd08 	bl	8019f7c <osMessageGet>

    if (event.status == osEventMessage)
 801556c:	697b      	ldr	r3, [r7, #20]
 801556e:	2b10      	cmp	r3, #16
 8015570:	d118      	bne.n	80155a4 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8015572:	69bb      	ldr	r3, [r7, #24]
 8015574:	2b01      	cmp	r3, #1
 8015576:	d115      	bne.n	80155a4 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8015578:	f004 fb9c 	bl	8019cb4 <osKernelSysTick>
 801557c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 801557e:	e008      	b.n	8015592 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015580:	f7ff fee4 	bl	801534c <BSP_SD_GetCardState>
 8015584:	4603      	mov	r3, r0
 8015586:	2b00      	cmp	r3, #0
 8015588:	d103      	bne.n	8015592 <SD_read+0x7a>
              {
                res = RES_OK;
 801558a:	2300      	movs	r3, #0
 801558c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8015590:	e008      	b.n	80155a4 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8015592:	f004 fb8f 	bl	8019cb4 <osKernelSysTick>
 8015596:	4602      	mov	r2, r0
 8015598:	6a3b      	ldr	r3, [r7, #32]
 801559a:	1ad3      	subs	r3, r2, r3
 801559c:	f247 522f 	movw	r2, #29999	; 0x752f
 80155a0:	4293      	cmp	r3, r2
 80155a2:	d9ed      	bls.n	8015580 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80155a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80155a8:	4618      	mov	r0, r3
 80155aa:	3728      	adds	r7, #40	; 0x28
 80155ac:	46bd      	mov	sp, r7
 80155ae:	bd80      	pop	{r7, pc}
 80155b0:	20041e18 	.word	0x20041e18

080155b4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b08a      	sub	sp, #40	; 0x28
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	60b9      	str	r1, [r7, #8]
 80155bc:	607a      	str	r2, [r7, #4]
 80155be:	603b      	str	r3, [r7, #0]
 80155c0:	4603      	mov	r3, r0
 80155c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80155c4:	2301      	movs	r3, #1
 80155c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80155ca:	f247 5030 	movw	r0, #30000	; 0x7530
 80155ce:	f7ff ff0d 	bl	80153ec <SD_CheckStatusWithTimeout>
 80155d2:	4603      	mov	r3, r0
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	da02      	bge.n	80155de <SD_write+0x2a>
  {
    return res;
 80155d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80155dc:	e02e      	b.n	801563c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80155de:	683a      	ldr	r2, [r7, #0]
 80155e0:	6879      	ldr	r1, [r7, #4]
 80155e2:	68b8      	ldr	r0, [r7, #8]
 80155e4:	f7ff fe98 	bl	8015318 <BSP_SD_WriteBlocks_DMA>
 80155e8:	4603      	mov	r3, r0
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d124      	bne.n	8015638 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80155ee:	4b15      	ldr	r3, [pc, #84]	; (8015644 <SD_write+0x90>)
 80155f0:	6819      	ldr	r1, [r3, #0]
 80155f2:	f107 0314 	add.w	r3, r7, #20
 80155f6:	f247 5230 	movw	r2, #30000	; 0x7530
 80155fa:	4618      	mov	r0, r3
 80155fc:	f004 fcbe 	bl	8019f7c <osMessageGet>

    if (event.status == osEventMessage)
 8015600:	697b      	ldr	r3, [r7, #20]
 8015602:	2b10      	cmp	r3, #16
 8015604:	d118      	bne.n	8015638 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8015606:	69bb      	ldr	r3, [r7, #24]
 8015608:	2b02      	cmp	r3, #2
 801560a:	d115      	bne.n	8015638 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 801560c:	f004 fb52 	bl	8019cb4 <osKernelSysTick>
 8015610:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8015612:	e008      	b.n	8015626 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015614:	f7ff fe9a 	bl	801534c <BSP_SD_GetCardState>
 8015618:	4603      	mov	r3, r0
 801561a:	2b00      	cmp	r3, #0
 801561c:	d103      	bne.n	8015626 <SD_write+0x72>
          {
            res = RES_OK;
 801561e:	2300      	movs	r3, #0
 8015620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8015624:	e008      	b.n	8015638 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8015626:	f004 fb45 	bl	8019cb4 <osKernelSysTick>
 801562a:	4602      	mov	r2, r0
 801562c:	6a3b      	ldr	r3, [r7, #32]
 801562e:	1ad3      	subs	r3, r2, r3
 8015630:	f247 522f 	movw	r2, #29999	; 0x752f
 8015634:	4293      	cmp	r3, r2
 8015636:	d9ed      	bls.n	8015614 <SD_write+0x60>
    }

  }
#endif

  return res;
 8015638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801563c:	4618      	mov	r0, r3
 801563e:	3728      	adds	r7, #40	; 0x28
 8015640:	46bd      	mov	sp, r7
 8015642:	bd80      	pop	{r7, pc}
 8015644:	20041e18 	.word	0x20041e18

08015648 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015648:	b580      	push	{r7, lr}
 801564a:	b08c      	sub	sp, #48	; 0x30
 801564c:	af00      	add	r7, sp, #0
 801564e:	4603      	mov	r3, r0
 8015650:	603a      	str	r2, [r7, #0]
 8015652:	71fb      	strb	r3, [r7, #7]
 8015654:	460b      	mov	r3, r1
 8015656:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8015658:	2301      	movs	r3, #1
 801565a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801565e:	4b25      	ldr	r3, [pc, #148]	; (80156f4 <SD_ioctl+0xac>)
 8015660:	781b      	ldrb	r3, [r3, #0]
 8015662:	b2db      	uxtb	r3, r3
 8015664:	f003 0301 	and.w	r3, r3, #1
 8015668:	2b00      	cmp	r3, #0
 801566a:	d001      	beq.n	8015670 <SD_ioctl+0x28>
 801566c:	2303      	movs	r3, #3
 801566e:	e03c      	b.n	80156ea <SD_ioctl+0xa2>

  switch (cmd)
 8015670:	79bb      	ldrb	r3, [r7, #6]
 8015672:	2b03      	cmp	r3, #3
 8015674:	d834      	bhi.n	80156e0 <SD_ioctl+0x98>
 8015676:	a201      	add	r2, pc, #4	; (adr r2, 801567c <SD_ioctl+0x34>)
 8015678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801567c:	0801568d 	.word	0x0801568d
 8015680:	08015695 	.word	0x08015695
 8015684:	080156ad 	.word	0x080156ad
 8015688:	080156c7 	.word	0x080156c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801568c:	2300      	movs	r3, #0
 801568e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015692:	e028      	b.n	80156e6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8015694:	f107 030c 	add.w	r3, r7, #12
 8015698:	4618      	mov	r0, r3
 801569a:	f7ff fe67 	bl	801536c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801569e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156a0:	683b      	ldr	r3, [r7, #0]
 80156a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80156a4:	2300      	movs	r3, #0
 80156a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80156aa:	e01c      	b.n	80156e6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80156ac:	f107 030c 	add.w	r3, r7, #12
 80156b0:	4618      	mov	r0, r3
 80156b2:	f7ff fe5b 	bl	801536c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80156b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156b8:	b29a      	uxth	r2, r3
 80156ba:	683b      	ldr	r3, [r7, #0]
 80156bc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80156be:	2300      	movs	r3, #0
 80156c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80156c4:	e00f      	b.n	80156e6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80156c6:	f107 030c 	add.w	r3, r7, #12
 80156ca:	4618      	mov	r0, r3
 80156cc:	f7ff fe4e 	bl	801536c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80156d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156d2:	0a5a      	lsrs	r2, r3, #9
 80156d4:	683b      	ldr	r3, [r7, #0]
 80156d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80156d8:	2300      	movs	r3, #0
 80156da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80156de:	e002      	b.n	80156e6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80156e0:	2304      	movs	r3, #4
 80156e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80156e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80156ea:	4618      	mov	r0, r3
 80156ec:	3730      	adds	r7, #48	; 0x30
 80156ee:	46bd      	mov	sp, r7
 80156f0:	bd80      	pop	{r7, pc}
 80156f2:	bf00      	nop
 80156f4:	20000029 	.word	0x20000029

080156f8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 80156fc:	4b04      	ldr	r3, [pc, #16]	; (8015710 <BSP_SD_ReadCpltCallback+0x18>)
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	2200      	movs	r2, #0
 8015702:	2101      	movs	r1, #1
 8015704:	4618      	mov	r0, r3
 8015706:	f004 fbf9 	bl	8019efc <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 801570a:	bf00      	nop
 801570c:	bd80      	pop	{r7, pc}
 801570e:	bf00      	nop
 8015710:	20041e18 	.word	0x20041e18

08015714 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8015714:	b480      	push	{r7}
 8015716:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8015718:	bf00      	nop
 801571a:	46bd      	mov	sp, r7
 801571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015720:	4770      	bx	lr
	...

08015724 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015724:	b580      	push	{r7, lr}
 8015726:	b084      	sub	sp, #16
 8015728:	af00      	add	r7, sp, #0
 801572a:	6078      	str	r0, [r7, #4]
 801572c:	460b      	mov	r3, r1
 801572e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015730:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8015734:	f008 f906 	bl	801d944 <malloc>
 8015738:	4603      	mov	r3, r0
 801573a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d109      	bne.n	8015756 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	32b0      	adds	r2, #176	; 0xb0
 801574c:	2100      	movs	r1, #0
 801574e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015752:	2302      	movs	r3, #2
 8015754:	e0d4      	b.n	8015900 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015756:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801575a:	2100      	movs	r1, #0
 801575c:	68f8      	ldr	r0, [r7, #12]
 801575e:	f008 f90f 	bl	801d980 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	32b0      	adds	r2, #176	; 0xb0
 801576c:	68f9      	ldr	r1, [r7, #12]
 801576e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	32b0      	adds	r2, #176	; 0xb0
 801577c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	7c1b      	ldrb	r3, [r3, #16]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d138      	bne.n	8015800 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801578e:	4b5e      	ldr	r3, [pc, #376]	; (8015908 <USBD_CDC_Init+0x1e4>)
 8015790:	7819      	ldrb	r1, [r3, #0]
 8015792:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015796:	2202      	movs	r2, #2
 8015798:	6878      	ldr	r0, [r7, #4]
 801579a:	f007 fc10 	bl	801cfbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801579e:	4b5a      	ldr	r3, [pc, #360]	; (8015908 <USBD_CDC_Init+0x1e4>)
 80157a0:	781b      	ldrb	r3, [r3, #0]
 80157a2:	f003 020f 	and.w	r2, r3, #15
 80157a6:	6879      	ldr	r1, [r7, #4]
 80157a8:	4613      	mov	r3, r2
 80157aa:	009b      	lsls	r3, r3, #2
 80157ac:	4413      	add	r3, r2
 80157ae:	009b      	lsls	r3, r3, #2
 80157b0:	440b      	add	r3, r1
 80157b2:	3324      	adds	r3, #36	; 0x24
 80157b4:	2201      	movs	r2, #1
 80157b6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80157b8:	4b54      	ldr	r3, [pc, #336]	; (801590c <USBD_CDC_Init+0x1e8>)
 80157ba:	7819      	ldrb	r1, [r3, #0]
 80157bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80157c0:	2202      	movs	r2, #2
 80157c2:	6878      	ldr	r0, [r7, #4]
 80157c4:	f007 fbfb 	bl	801cfbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80157c8:	4b50      	ldr	r3, [pc, #320]	; (801590c <USBD_CDC_Init+0x1e8>)
 80157ca:	781b      	ldrb	r3, [r3, #0]
 80157cc:	f003 020f 	and.w	r2, r3, #15
 80157d0:	6879      	ldr	r1, [r7, #4]
 80157d2:	4613      	mov	r3, r2
 80157d4:	009b      	lsls	r3, r3, #2
 80157d6:	4413      	add	r3, r2
 80157d8:	009b      	lsls	r3, r3, #2
 80157da:	440b      	add	r3, r1
 80157dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80157e0:	2201      	movs	r2, #1
 80157e2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80157e4:	4b4a      	ldr	r3, [pc, #296]	; (8015910 <USBD_CDC_Init+0x1ec>)
 80157e6:	781b      	ldrb	r3, [r3, #0]
 80157e8:	f003 020f 	and.w	r2, r3, #15
 80157ec:	6879      	ldr	r1, [r7, #4]
 80157ee:	4613      	mov	r3, r2
 80157f0:	009b      	lsls	r3, r3, #2
 80157f2:	4413      	add	r3, r2
 80157f4:	009b      	lsls	r3, r3, #2
 80157f6:	440b      	add	r3, r1
 80157f8:	3326      	adds	r3, #38	; 0x26
 80157fa:	2210      	movs	r2, #16
 80157fc:	801a      	strh	r2, [r3, #0]
 80157fe:	e035      	b.n	801586c <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015800:	4b41      	ldr	r3, [pc, #260]	; (8015908 <USBD_CDC_Init+0x1e4>)
 8015802:	7819      	ldrb	r1, [r3, #0]
 8015804:	2340      	movs	r3, #64	; 0x40
 8015806:	2202      	movs	r2, #2
 8015808:	6878      	ldr	r0, [r7, #4]
 801580a:	f007 fbd8 	bl	801cfbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801580e:	4b3e      	ldr	r3, [pc, #248]	; (8015908 <USBD_CDC_Init+0x1e4>)
 8015810:	781b      	ldrb	r3, [r3, #0]
 8015812:	f003 020f 	and.w	r2, r3, #15
 8015816:	6879      	ldr	r1, [r7, #4]
 8015818:	4613      	mov	r3, r2
 801581a:	009b      	lsls	r3, r3, #2
 801581c:	4413      	add	r3, r2
 801581e:	009b      	lsls	r3, r3, #2
 8015820:	440b      	add	r3, r1
 8015822:	3324      	adds	r3, #36	; 0x24
 8015824:	2201      	movs	r2, #1
 8015826:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015828:	4b38      	ldr	r3, [pc, #224]	; (801590c <USBD_CDC_Init+0x1e8>)
 801582a:	7819      	ldrb	r1, [r3, #0]
 801582c:	2340      	movs	r3, #64	; 0x40
 801582e:	2202      	movs	r2, #2
 8015830:	6878      	ldr	r0, [r7, #4]
 8015832:	f007 fbc4 	bl	801cfbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015836:	4b35      	ldr	r3, [pc, #212]	; (801590c <USBD_CDC_Init+0x1e8>)
 8015838:	781b      	ldrb	r3, [r3, #0]
 801583a:	f003 020f 	and.w	r2, r3, #15
 801583e:	6879      	ldr	r1, [r7, #4]
 8015840:	4613      	mov	r3, r2
 8015842:	009b      	lsls	r3, r3, #2
 8015844:	4413      	add	r3, r2
 8015846:	009b      	lsls	r3, r3, #2
 8015848:	440b      	add	r3, r1
 801584a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801584e:	2201      	movs	r2, #1
 8015850:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015852:	4b2f      	ldr	r3, [pc, #188]	; (8015910 <USBD_CDC_Init+0x1ec>)
 8015854:	781b      	ldrb	r3, [r3, #0]
 8015856:	f003 020f 	and.w	r2, r3, #15
 801585a:	6879      	ldr	r1, [r7, #4]
 801585c:	4613      	mov	r3, r2
 801585e:	009b      	lsls	r3, r3, #2
 8015860:	4413      	add	r3, r2
 8015862:	009b      	lsls	r3, r3, #2
 8015864:	440b      	add	r3, r1
 8015866:	3326      	adds	r3, #38	; 0x26
 8015868:	2210      	movs	r2, #16
 801586a:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801586c:	4b28      	ldr	r3, [pc, #160]	; (8015910 <USBD_CDC_Init+0x1ec>)
 801586e:	7819      	ldrb	r1, [r3, #0]
 8015870:	2308      	movs	r3, #8
 8015872:	2203      	movs	r2, #3
 8015874:	6878      	ldr	r0, [r7, #4]
 8015876:	f007 fba2 	bl	801cfbe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801587a:	4b25      	ldr	r3, [pc, #148]	; (8015910 <USBD_CDC_Init+0x1ec>)
 801587c:	781b      	ldrb	r3, [r3, #0]
 801587e:	f003 020f 	and.w	r2, r3, #15
 8015882:	6879      	ldr	r1, [r7, #4]
 8015884:	4613      	mov	r3, r2
 8015886:	009b      	lsls	r3, r3, #2
 8015888:	4413      	add	r3, r2
 801588a:	009b      	lsls	r3, r3, #2
 801588c:	440b      	add	r3, r1
 801588e:	3324      	adds	r3, #36	; 0x24
 8015890:	2201      	movs	r2, #1
 8015892:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	2200      	movs	r2, #0
 8015898:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80158a2:	687a      	ldr	r2, [r7, #4]
 80158a4:	33b0      	adds	r3, #176	; 0xb0
 80158a6:	009b      	lsls	r3, r3, #2
 80158a8:	4413      	add	r3, r2
 80158aa:	685b      	ldr	r3, [r3, #4]
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	2200      	movs	r2, #0
 80158b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	2200      	movs	r2, #0
 80158bc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d101      	bne.n	80158ce <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 80158ca:	2302      	movs	r3, #2
 80158cc:	e018      	b.n	8015900 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	7c1b      	ldrb	r3, [r3, #16]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d10a      	bne.n	80158ec <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80158d6:	4b0d      	ldr	r3, [pc, #52]	; (801590c <USBD_CDC_Init+0x1e8>)
 80158d8:	7819      	ldrb	r1, [r3, #0]
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80158e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80158e4:	6878      	ldr	r0, [r7, #4]
 80158e6:	f007 fc59 	bl	801d19c <USBD_LL_PrepareReceive>
 80158ea:	e008      	b.n	80158fe <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80158ec:	4b07      	ldr	r3, [pc, #28]	; (801590c <USBD_CDC_Init+0x1e8>)
 80158ee:	7819      	ldrb	r1, [r3, #0]
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80158f6:	2340      	movs	r3, #64	; 0x40
 80158f8:	6878      	ldr	r0, [r7, #4]
 80158fa:	f007 fc4f 	bl	801d19c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80158fe:	2300      	movs	r3, #0
}
 8015900:	4618      	mov	r0, r3
 8015902:	3710      	adds	r7, #16
 8015904:	46bd      	mov	sp, r7
 8015906:	bd80      	pop	{r7, pc}
 8015908:	200000b3 	.word	0x200000b3
 801590c:	200000b4 	.word	0x200000b4
 8015910:	200000b5 	.word	0x200000b5

08015914 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b082      	sub	sp, #8
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
 801591c:	460b      	mov	r3, r1
 801591e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8015920:	4b3a      	ldr	r3, [pc, #232]	; (8015a0c <USBD_CDC_DeInit+0xf8>)
 8015922:	781b      	ldrb	r3, [r3, #0]
 8015924:	4619      	mov	r1, r3
 8015926:	6878      	ldr	r0, [r7, #4]
 8015928:	f007 fb6f 	bl	801d00a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801592c:	4b37      	ldr	r3, [pc, #220]	; (8015a0c <USBD_CDC_DeInit+0xf8>)
 801592e:	781b      	ldrb	r3, [r3, #0]
 8015930:	f003 020f 	and.w	r2, r3, #15
 8015934:	6879      	ldr	r1, [r7, #4]
 8015936:	4613      	mov	r3, r2
 8015938:	009b      	lsls	r3, r3, #2
 801593a:	4413      	add	r3, r2
 801593c:	009b      	lsls	r3, r3, #2
 801593e:	440b      	add	r3, r1
 8015940:	3324      	adds	r3, #36	; 0x24
 8015942:	2200      	movs	r2, #0
 8015944:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8015946:	4b32      	ldr	r3, [pc, #200]	; (8015a10 <USBD_CDC_DeInit+0xfc>)
 8015948:	781b      	ldrb	r3, [r3, #0]
 801594a:	4619      	mov	r1, r3
 801594c:	6878      	ldr	r0, [r7, #4]
 801594e:	f007 fb5c 	bl	801d00a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8015952:	4b2f      	ldr	r3, [pc, #188]	; (8015a10 <USBD_CDC_DeInit+0xfc>)
 8015954:	781b      	ldrb	r3, [r3, #0]
 8015956:	f003 020f 	and.w	r2, r3, #15
 801595a:	6879      	ldr	r1, [r7, #4]
 801595c:	4613      	mov	r3, r2
 801595e:	009b      	lsls	r3, r3, #2
 8015960:	4413      	add	r3, r2
 8015962:	009b      	lsls	r3, r3, #2
 8015964:	440b      	add	r3, r1
 8015966:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801596a:	2200      	movs	r2, #0
 801596c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801596e:	4b29      	ldr	r3, [pc, #164]	; (8015a14 <USBD_CDC_DeInit+0x100>)
 8015970:	781b      	ldrb	r3, [r3, #0]
 8015972:	4619      	mov	r1, r3
 8015974:	6878      	ldr	r0, [r7, #4]
 8015976:	f007 fb48 	bl	801d00a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801597a:	4b26      	ldr	r3, [pc, #152]	; (8015a14 <USBD_CDC_DeInit+0x100>)
 801597c:	781b      	ldrb	r3, [r3, #0]
 801597e:	f003 020f 	and.w	r2, r3, #15
 8015982:	6879      	ldr	r1, [r7, #4]
 8015984:	4613      	mov	r3, r2
 8015986:	009b      	lsls	r3, r3, #2
 8015988:	4413      	add	r3, r2
 801598a:	009b      	lsls	r3, r3, #2
 801598c:	440b      	add	r3, r1
 801598e:	3324      	adds	r3, #36	; 0x24
 8015990:	2200      	movs	r2, #0
 8015992:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8015994:	4b1f      	ldr	r3, [pc, #124]	; (8015a14 <USBD_CDC_DeInit+0x100>)
 8015996:	781b      	ldrb	r3, [r3, #0]
 8015998:	f003 020f 	and.w	r2, r3, #15
 801599c:	6879      	ldr	r1, [r7, #4]
 801599e:	4613      	mov	r3, r2
 80159a0:	009b      	lsls	r3, r3, #2
 80159a2:	4413      	add	r3, r2
 80159a4:	009b      	lsls	r3, r3, #2
 80159a6:	440b      	add	r3, r1
 80159a8:	3326      	adds	r3, #38	; 0x26
 80159aa:	2200      	movs	r2, #0
 80159ac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	32b0      	adds	r2, #176	; 0xb0
 80159b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d01f      	beq.n	8015a00 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80159c6:	687a      	ldr	r2, [r7, #4]
 80159c8:	33b0      	adds	r3, #176	; 0xb0
 80159ca:	009b      	lsls	r3, r3, #2
 80159cc:	4413      	add	r3, r2
 80159ce:	685b      	ldr	r3, [r3, #4]
 80159d0:	685b      	ldr	r3, [r3, #4]
 80159d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	32b0      	adds	r2, #176	; 0xb0
 80159de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159e2:	4618      	mov	r0, r3
 80159e4:	f007 ffb6 	bl	801d954 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	32b0      	adds	r2, #176	; 0xb0
 80159f2:	2100      	movs	r1, #0
 80159f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	2200      	movs	r2, #0
 80159fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015a00:	2300      	movs	r3, #0
}
 8015a02:	4618      	mov	r0, r3
 8015a04:	3708      	adds	r7, #8
 8015a06:	46bd      	mov	sp, r7
 8015a08:	bd80      	pop	{r7, pc}
 8015a0a:	bf00      	nop
 8015a0c:	200000b3 	.word	0x200000b3
 8015a10:	200000b4 	.word	0x200000b4
 8015a14:	200000b5 	.word	0x200000b5

08015a18 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b086      	sub	sp, #24
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
 8015a20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	32b0      	adds	r2, #176	; 0xb0
 8015a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a30:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8015a32:	2300      	movs	r3, #0
 8015a34:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8015a36:	2300      	movs	r3, #0
 8015a38:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8015a3e:	693b      	ldr	r3, [r7, #16]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d101      	bne.n	8015a48 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015a44:	2303      	movs	r3, #3
 8015a46:	e0bf      	b.n	8015bc8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a48:	683b      	ldr	r3, [r7, #0]
 8015a4a:	781b      	ldrb	r3, [r3, #0]
 8015a4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d050      	beq.n	8015af6 <USBD_CDC_Setup+0xde>
 8015a54:	2b20      	cmp	r3, #32
 8015a56:	f040 80af 	bne.w	8015bb8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015a5a:	683b      	ldr	r3, [r7, #0]
 8015a5c:	88db      	ldrh	r3, [r3, #6]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d03a      	beq.n	8015ad8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015a62:	683b      	ldr	r3, [r7, #0]
 8015a64:	781b      	ldrb	r3, [r3, #0]
 8015a66:	b25b      	sxtb	r3, r3
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	da1b      	bge.n	8015aa4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015a72:	687a      	ldr	r2, [r7, #4]
 8015a74:	33b0      	adds	r3, #176	; 0xb0
 8015a76:	009b      	lsls	r3, r3, #2
 8015a78:	4413      	add	r3, r2
 8015a7a:	685b      	ldr	r3, [r3, #4]
 8015a7c:	689b      	ldr	r3, [r3, #8]
 8015a7e:	683a      	ldr	r2, [r7, #0]
 8015a80:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015a82:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015a84:	683a      	ldr	r2, [r7, #0]
 8015a86:	88d2      	ldrh	r2, [r2, #6]
 8015a88:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015a8a:	683b      	ldr	r3, [r7, #0]
 8015a8c:	88db      	ldrh	r3, [r3, #6]
 8015a8e:	2b07      	cmp	r3, #7
 8015a90:	bf28      	it	cs
 8015a92:	2307      	movcs	r3, #7
 8015a94:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8015a96:	693b      	ldr	r3, [r7, #16]
 8015a98:	89fa      	ldrh	r2, [r7, #14]
 8015a9a:	4619      	mov	r1, r3
 8015a9c:	6878      	ldr	r0, [r7, #4]
 8015a9e:	f001 fdad 	bl	80175fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015aa2:	e090      	b.n	8015bc6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015aa4:	683b      	ldr	r3, [r7, #0]
 8015aa6:	785a      	ldrb	r2, [r3, #1]
 8015aa8:	693b      	ldr	r3, [r7, #16]
 8015aaa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015aae:	683b      	ldr	r3, [r7, #0]
 8015ab0:	88db      	ldrh	r3, [r3, #6]
 8015ab2:	2b3f      	cmp	r3, #63	; 0x3f
 8015ab4:	d803      	bhi.n	8015abe <USBD_CDC_Setup+0xa6>
 8015ab6:	683b      	ldr	r3, [r7, #0]
 8015ab8:	88db      	ldrh	r3, [r3, #6]
 8015aba:	b2da      	uxtb	r2, r3
 8015abc:	e000      	b.n	8015ac0 <USBD_CDC_Setup+0xa8>
 8015abe:	2240      	movs	r2, #64	; 0x40
 8015ac0:	693b      	ldr	r3, [r7, #16]
 8015ac2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8015ac6:	6939      	ldr	r1, [r7, #16]
 8015ac8:	693b      	ldr	r3, [r7, #16]
 8015aca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8015ace:	461a      	mov	r2, r3
 8015ad0:	6878      	ldr	r0, [r7, #4]
 8015ad2:	f001 fdbf 	bl	8017654 <USBD_CtlPrepareRx>
      break;
 8015ad6:	e076      	b.n	8015bc6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015ade:	687a      	ldr	r2, [r7, #4]
 8015ae0:	33b0      	adds	r3, #176	; 0xb0
 8015ae2:	009b      	lsls	r3, r3, #2
 8015ae4:	4413      	add	r3, r2
 8015ae6:	685b      	ldr	r3, [r3, #4]
 8015ae8:	689b      	ldr	r3, [r3, #8]
 8015aea:	683a      	ldr	r2, [r7, #0]
 8015aec:	7850      	ldrb	r0, [r2, #1]
 8015aee:	2200      	movs	r2, #0
 8015af0:	6839      	ldr	r1, [r7, #0]
 8015af2:	4798      	blx	r3
      break;
 8015af4:	e067      	b.n	8015bc6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015af6:	683b      	ldr	r3, [r7, #0]
 8015af8:	785b      	ldrb	r3, [r3, #1]
 8015afa:	2b0b      	cmp	r3, #11
 8015afc:	d851      	bhi.n	8015ba2 <USBD_CDC_Setup+0x18a>
 8015afe:	a201      	add	r2, pc, #4	; (adr r2, 8015b04 <USBD_CDC_Setup+0xec>)
 8015b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b04:	08015b35 	.word	0x08015b35
 8015b08:	08015bb1 	.word	0x08015bb1
 8015b0c:	08015ba3 	.word	0x08015ba3
 8015b10:	08015ba3 	.word	0x08015ba3
 8015b14:	08015ba3 	.word	0x08015ba3
 8015b18:	08015ba3 	.word	0x08015ba3
 8015b1c:	08015ba3 	.word	0x08015ba3
 8015b20:	08015ba3 	.word	0x08015ba3
 8015b24:	08015ba3 	.word	0x08015ba3
 8015b28:	08015ba3 	.word	0x08015ba3
 8015b2c:	08015b5f 	.word	0x08015b5f
 8015b30:	08015b89 	.word	0x08015b89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b3a:	b2db      	uxtb	r3, r3
 8015b3c:	2b03      	cmp	r3, #3
 8015b3e:	d107      	bne.n	8015b50 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015b40:	f107 030a 	add.w	r3, r7, #10
 8015b44:	2202      	movs	r2, #2
 8015b46:	4619      	mov	r1, r3
 8015b48:	6878      	ldr	r0, [r7, #4]
 8015b4a:	f001 fd57 	bl	80175fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015b4e:	e032      	b.n	8015bb6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015b50:	6839      	ldr	r1, [r7, #0]
 8015b52:	6878      	ldr	r0, [r7, #4]
 8015b54:	f001 fce1 	bl	801751a <USBD_CtlError>
            ret = USBD_FAIL;
 8015b58:	2303      	movs	r3, #3
 8015b5a:	75fb      	strb	r3, [r7, #23]
          break;
 8015b5c:	e02b      	b.n	8015bb6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b64:	b2db      	uxtb	r3, r3
 8015b66:	2b03      	cmp	r3, #3
 8015b68:	d107      	bne.n	8015b7a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015b6a:	f107 030d 	add.w	r3, r7, #13
 8015b6e:	2201      	movs	r2, #1
 8015b70:	4619      	mov	r1, r3
 8015b72:	6878      	ldr	r0, [r7, #4]
 8015b74:	f001 fd42 	bl	80175fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015b78:	e01d      	b.n	8015bb6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015b7a:	6839      	ldr	r1, [r7, #0]
 8015b7c:	6878      	ldr	r0, [r7, #4]
 8015b7e:	f001 fccc 	bl	801751a <USBD_CtlError>
            ret = USBD_FAIL;
 8015b82:	2303      	movs	r3, #3
 8015b84:	75fb      	strb	r3, [r7, #23]
          break;
 8015b86:	e016      	b.n	8015bb6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b8e:	b2db      	uxtb	r3, r3
 8015b90:	2b03      	cmp	r3, #3
 8015b92:	d00f      	beq.n	8015bb4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015b94:	6839      	ldr	r1, [r7, #0]
 8015b96:	6878      	ldr	r0, [r7, #4]
 8015b98:	f001 fcbf 	bl	801751a <USBD_CtlError>
            ret = USBD_FAIL;
 8015b9c:	2303      	movs	r3, #3
 8015b9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015ba0:	e008      	b.n	8015bb4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015ba2:	6839      	ldr	r1, [r7, #0]
 8015ba4:	6878      	ldr	r0, [r7, #4]
 8015ba6:	f001 fcb8 	bl	801751a <USBD_CtlError>
          ret = USBD_FAIL;
 8015baa:	2303      	movs	r3, #3
 8015bac:	75fb      	strb	r3, [r7, #23]
          break;
 8015bae:	e002      	b.n	8015bb6 <USBD_CDC_Setup+0x19e>
          break;
 8015bb0:	bf00      	nop
 8015bb2:	e008      	b.n	8015bc6 <USBD_CDC_Setup+0x1ae>
          break;
 8015bb4:	bf00      	nop
      }
      break;
 8015bb6:	e006      	b.n	8015bc6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015bb8:	6839      	ldr	r1, [r7, #0]
 8015bba:	6878      	ldr	r0, [r7, #4]
 8015bbc:	f001 fcad 	bl	801751a <USBD_CtlError>
      ret = USBD_FAIL;
 8015bc0:	2303      	movs	r3, #3
 8015bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8015bc4:	bf00      	nop
  }

  return (uint8_t)ret;
 8015bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8015bc8:	4618      	mov	r0, r3
 8015bca:	3718      	adds	r7, #24
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	bd80      	pop	{r7, pc}

08015bd0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b084      	sub	sp, #16
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	6078      	str	r0, [r7, #4]
 8015bd8:	460b      	mov	r3, r1
 8015bda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015be2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	32b0      	adds	r2, #176	; 0xb0
 8015bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d101      	bne.n	8015bfa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015bf6:	2303      	movs	r3, #3
 8015bf8:	e065      	b.n	8015cc6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	32b0      	adds	r2, #176	; 0xb0
 8015c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c08:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015c0a:	78fb      	ldrb	r3, [r7, #3]
 8015c0c:	f003 020f 	and.w	r2, r3, #15
 8015c10:	6879      	ldr	r1, [r7, #4]
 8015c12:	4613      	mov	r3, r2
 8015c14:	009b      	lsls	r3, r3, #2
 8015c16:	4413      	add	r3, r2
 8015c18:	009b      	lsls	r3, r3, #2
 8015c1a:	440b      	add	r3, r1
 8015c1c:	3318      	adds	r3, #24
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d02f      	beq.n	8015c84 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015c24:	78fb      	ldrb	r3, [r7, #3]
 8015c26:	f003 020f 	and.w	r2, r3, #15
 8015c2a:	6879      	ldr	r1, [r7, #4]
 8015c2c:	4613      	mov	r3, r2
 8015c2e:	009b      	lsls	r3, r3, #2
 8015c30:	4413      	add	r3, r2
 8015c32:	009b      	lsls	r3, r3, #2
 8015c34:	440b      	add	r3, r1
 8015c36:	3318      	adds	r3, #24
 8015c38:	681a      	ldr	r2, [r3, #0]
 8015c3a:	78fb      	ldrb	r3, [r7, #3]
 8015c3c:	f003 010f 	and.w	r1, r3, #15
 8015c40:	68f8      	ldr	r0, [r7, #12]
 8015c42:	460b      	mov	r3, r1
 8015c44:	00db      	lsls	r3, r3, #3
 8015c46:	440b      	add	r3, r1
 8015c48:	009b      	lsls	r3, r3, #2
 8015c4a:	4403      	add	r3, r0
 8015c4c:	3348      	adds	r3, #72	; 0x48
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	fbb2 f1f3 	udiv	r1, r2, r3
 8015c54:	fb01 f303 	mul.w	r3, r1, r3
 8015c58:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d112      	bne.n	8015c84 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015c5e:	78fb      	ldrb	r3, [r7, #3]
 8015c60:	f003 020f 	and.w	r2, r3, #15
 8015c64:	6879      	ldr	r1, [r7, #4]
 8015c66:	4613      	mov	r3, r2
 8015c68:	009b      	lsls	r3, r3, #2
 8015c6a:	4413      	add	r3, r2
 8015c6c:	009b      	lsls	r3, r3, #2
 8015c6e:	440b      	add	r3, r1
 8015c70:	3318      	adds	r3, #24
 8015c72:	2200      	movs	r2, #0
 8015c74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015c76:	78f9      	ldrb	r1, [r7, #3]
 8015c78:	2300      	movs	r3, #0
 8015c7a:	2200      	movs	r2, #0
 8015c7c:	6878      	ldr	r0, [r7, #4]
 8015c7e:	f007 fa6c 	bl	801d15a <USBD_LL_Transmit>
 8015c82:	e01f      	b.n	8015cc4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015c84:	68bb      	ldr	r3, [r7, #8]
 8015c86:	2200      	movs	r2, #0
 8015c88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015c92:	687a      	ldr	r2, [r7, #4]
 8015c94:	33b0      	adds	r3, #176	; 0xb0
 8015c96:	009b      	lsls	r3, r3, #2
 8015c98:	4413      	add	r3, r2
 8015c9a:	685b      	ldr	r3, [r3, #4]
 8015c9c:	691b      	ldr	r3, [r3, #16]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d010      	beq.n	8015cc4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015ca8:	687a      	ldr	r2, [r7, #4]
 8015caa:	33b0      	adds	r3, #176	; 0xb0
 8015cac:	009b      	lsls	r3, r3, #2
 8015cae:	4413      	add	r3, r2
 8015cb0:	685b      	ldr	r3, [r3, #4]
 8015cb2:	691b      	ldr	r3, [r3, #16]
 8015cb4:	68ba      	ldr	r2, [r7, #8]
 8015cb6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8015cba:	68ba      	ldr	r2, [r7, #8]
 8015cbc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8015cc0:	78fa      	ldrb	r2, [r7, #3]
 8015cc2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015cc4:	2300      	movs	r3, #0
}
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	3710      	adds	r7, #16
 8015cca:	46bd      	mov	sp, r7
 8015ccc:	bd80      	pop	{r7, pc}

08015cce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015cce:	b580      	push	{r7, lr}
 8015cd0:	b084      	sub	sp, #16
 8015cd2:	af00      	add	r7, sp, #0
 8015cd4:	6078      	str	r0, [r7, #4]
 8015cd6:	460b      	mov	r3, r1
 8015cd8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	32b0      	adds	r2, #176	; 0xb0
 8015ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ce8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	32b0      	adds	r2, #176	; 0xb0
 8015cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d101      	bne.n	8015d00 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015cfc:	2303      	movs	r3, #3
 8015cfe:	e01a      	b.n	8015d36 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015d00:	78fb      	ldrb	r3, [r7, #3]
 8015d02:	4619      	mov	r1, r3
 8015d04:	6878      	ldr	r0, [r7, #4]
 8015d06:	f007 fa6a 	bl	801d1de <USBD_LL_GetRxDataSize>
 8015d0a:	4602      	mov	r2, r0
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015d18:	687a      	ldr	r2, [r7, #4]
 8015d1a:	33b0      	adds	r3, #176	; 0xb0
 8015d1c:	009b      	lsls	r3, r3, #2
 8015d1e:	4413      	add	r3, r2
 8015d20:	685b      	ldr	r3, [r3, #4]
 8015d22:	68db      	ldr	r3, [r3, #12]
 8015d24:	68fa      	ldr	r2, [r7, #12]
 8015d26:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8015d2a:	68fa      	ldr	r2, [r7, #12]
 8015d2c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8015d30:	4611      	mov	r1, r2
 8015d32:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015d34:	2300      	movs	r3, #0
}
 8015d36:	4618      	mov	r0, r3
 8015d38:	3710      	adds	r7, #16
 8015d3a:	46bd      	mov	sp, r7
 8015d3c:	bd80      	pop	{r7, pc}

08015d3e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015d3e:	b580      	push	{r7, lr}
 8015d40:	b084      	sub	sp, #16
 8015d42:	af00      	add	r7, sp, #0
 8015d44:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	32b0      	adds	r2, #176	; 0xb0
 8015d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d54:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d101      	bne.n	8015d60 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015d5c:	2303      	movs	r3, #3
 8015d5e:	e025      	b.n	8015dac <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015d66:	687a      	ldr	r2, [r7, #4]
 8015d68:	33b0      	adds	r3, #176	; 0xb0
 8015d6a:	009b      	lsls	r3, r3, #2
 8015d6c:	4413      	add	r3, r2
 8015d6e:	685b      	ldr	r3, [r3, #4]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d01a      	beq.n	8015daa <USBD_CDC_EP0_RxReady+0x6c>
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8015d7a:	2bff      	cmp	r3, #255	; 0xff
 8015d7c:	d015      	beq.n	8015daa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015d84:	687a      	ldr	r2, [r7, #4]
 8015d86:	33b0      	adds	r3, #176	; 0xb0
 8015d88:	009b      	lsls	r3, r3, #2
 8015d8a:	4413      	add	r3, r2
 8015d8c:	685b      	ldr	r3, [r3, #4]
 8015d8e:	689b      	ldr	r3, [r3, #8]
 8015d90:	68fa      	ldr	r2, [r7, #12]
 8015d92:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8015d96:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015d98:	68fa      	ldr	r2, [r7, #12]
 8015d9a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015d9e:	b292      	uxth	r2, r2
 8015da0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	22ff      	movs	r2, #255	; 0xff
 8015da6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8015daa:	2300      	movs	r3, #0
}
 8015dac:	4618      	mov	r0, r3
 8015dae:	3710      	adds	r7, #16
 8015db0:	46bd      	mov	sp, r7
 8015db2:	bd80      	pop	{r7, pc}

08015db4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b086      	sub	sp, #24
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015dbc:	2182      	movs	r1, #130	; 0x82
 8015dbe:	4818      	ldr	r0, [pc, #96]	; (8015e20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015dc0:	f000 fd49 	bl	8016856 <USBD_GetEpDesc>
 8015dc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015dc6:	2101      	movs	r1, #1
 8015dc8:	4815      	ldr	r0, [pc, #84]	; (8015e20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015dca:	f000 fd44 	bl	8016856 <USBD_GetEpDesc>
 8015dce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015dd0:	2181      	movs	r1, #129	; 0x81
 8015dd2:	4813      	ldr	r0, [pc, #76]	; (8015e20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015dd4:	f000 fd3f 	bl	8016856 <USBD_GetEpDesc>
 8015dd8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015dda:	697b      	ldr	r3, [r7, #20]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d002      	beq.n	8015de6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015de0:	697b      	ldr	r3, [r7, #20]
 8015de2:	2210      	movs	r2, #16
 8015de4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015de6:	693b      	ldr	r3, [r7, #16]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d006      	beq.n	8015dfa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015dec:	693b      	ldr	r3, [r7, #16]
 8015dee:	2200      	movs	r2, #0
 8015df0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015df4:	711a      	strb	r2, [r3, #4]
 8015df6:	2200      	movs	r2, #0
 8015df8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d006      	beq.n	8015e0e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	2200      	movs	r2, #0
 8015e04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015e08:	711a      	strb	r2, [r3, #4]
 8015e0a:	2200      	movs	r2, #0
 8015e0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	2243      	movs	r2, #67	; 0x43
 8015e12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015e14:	4b02      	ldr	r3, [pc, #8]	; (8015e20 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015e16:	4618      	mov	r0, r3
 8015e18:	3718      	adds	r7, #24
 8015e1a:	46bd      	mov	sp, r7
 8015e1c:	bd80      	pop	{r7, pc}
 8015e1e:	bf00      	nop
 8015e20:	20000070 	.word	0x20000070

08015e24 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b086      	sub	sp, #24
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015e2c:	2182      	movs	r1, #130	; 0x82
 8015e2e:	4818      	ldr	r0, [pc, #96]	; (8015e90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015e30:	f000 fd11 	bl	8016856 <USBD_GetEpDesc>
 8015e34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015e36:	2101      	movs	r1, #1
 8015e38:	4815      	ldr	r0, [pc, #84]	; (8015e90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015e3a:	f000 fd0c 	bl	8016856 <USBD_GetEpDesc>
 8015e3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015e40:	2181      	movs	r1, #129	; 0x81
 8015e42:	4813      	ldr	r0, [pc, #76]	; (8015e90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015e44:	f000 fd07 	bl	8016856 <USBD_GetEpDesc>
 8015e48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015e4a:	697b      	ldr	r3, [r7, #20]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d002      	beq.n	8015e56 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015e50:	697b      	ldr	r3, [r7, #20]
 8015e52:	2210      	movs	r2, #16
 8015e54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015e56:	693b      	ldr	r3, [r7, #16]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d006      	beq.n	8015e6a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015e5c:	693b      	ldr	r3, [r7, #16]
 8015e5e:	2200      	movs	r2, #0
 8015e60:	711a      	strb	r2, [r3, #4]
 8015e62:	2200      	movs	r2, #0
 8015e64:	f042 0202 	orr.w	r2, r2, #2
 8015e68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d006      	beq.n	8015e7e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015e70:	68fb      	ldr	r3, [r7, #12]
 8015e72:	2200      	movs	r2, #0
 8015e74:	711a      	strb	r2, [r3, #4]
 8015e76:	2200      	movs	r2, #0
 8015e78:	f042 0202 	orr.w	r2, r2, #2
 8015e7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	2243      	movs	r2, #67	; 0x43
 8015e82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015e84:	4b02      	ldr	r3, [pc, #8]	; (8015e90 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015e86:	4618      	mov	r0, r3
 8015e88:	3718      	adds	r7, #24
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	bd80      	pop	{r7, pc}
 8015e8e:	bf00      	nop
 8015e90:	20000070 	.word	0x20000070

08015e94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015e94:	b580      	push	{r7, lr}
 8015e96:	b086      	sub	sp, #24
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015e9c:	2182      	movs	r1, #130	; 0x82
 8015e9e:	4818      	ldr	r0, [pc, #96]	; (8015f00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015ea0:	f000 fcd9 	bl	8016856 <USBD_GetEpDesc>
 8015ea4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015ea6:	2101      	movs	r1, #1
 8015ea8:	4815      	ldr	r0, [pc, #84]	; (8015f00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015eaa:	f000 fcd4 	bl	8016856 <USBD_GetEpDesc>
 8015eae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015eb0:	2181      	movs	r1, #129	; 0x81
 8015eb2:	4813      	ldr	r0, [pc, #76]	; (8015f00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015eb4:	f000 fccf 	bl	8016856 <USBD_GetEpDesc>
 8015eb8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015eba:	697b      	ldr	r3, [r7, #20]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d002      	beq.n	8015ec6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015ec0:	697b      	ldr	r3, [r7, #20]
 8015ec2:	2210      	movs	r2, #16
 8015ec4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015ec6:	693b      	ldr	r3, [r7, #16]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d006      	beq.n	8015eda <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015ecc:	693b      	ldr	r3, [r7, #16]
 8015ece:	2200      	movs	r2, #0
 8015ed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015ed4:	711a      	strb	r2, [r3, #4]
 8015ed6:	2200      	movs	r2, #0
 8015ed8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d006      	beq.n	8015eee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	2200      	movs	r2, #0
 8015ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015ee8:	711a      	strb	r2, [r3, #4]
 8015eea:	2200      	movs	r2, #0
 8015eec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	2243      	movs	r2, #67	; 0x43
 8015ef2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015ef4:	4b02      	ldr	r3, [pc, #8]	; (8015f00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	3718      	adds	r7, #24
 8015efa:	46bd      	mov	sp, r7
 8015efc:	bd80      	pop	{r7, pc}
 8015efe:	bf00      	nop
 8015f00:	20000070 	.word	0x20000070

08015f04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015f04:	b480      	push	{r7}
 8015f06:	b083      	sub	sp, #12
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	220a      	movs	r2, #10
 8015f10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015f12:	4b03      	ldr	r3, [pc, #12]	; (8015f20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015f14:	4618      	mov	r0, r3
 8015f16:	370c      	adds	r7, #12
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1e:	4770      	bx	lr
 8015f20:	2000002c 	.word	0x2000002c

08015f24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015f24:	b480      	push	{r7}
 8015f26:	b083      	sub	sp, #12
 8015f28:	af00      	add	r7, sp, #0
 8015f2a:	6078      	str	r0, [r7, #4]
 8015f2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015f2e:	683b      	ldr	r3, [r7, #0]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d101      	bne.n	8015f38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015f34:	2303      	movs	r3, #3
 8015f36:	e009      	b.n	8015f4c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015f3e:	687a      	ldr	r2, [r7, #4]
 8015f40:	33b0      	adds	r3, #176	; 0xb0
 8015f42:	009b      	lsls	r3, r3, #2
 8015f44:	4413      	add	r3, r2
 8015f46:	683a      	ldr	r2, [r7, #0]
 8015f48:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015f4a:	2300      	movs	r3, #0
}
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	370c      	adds	r7, #12
 8015f50:	46bd      	mov	sp, r7
 8015f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f56:	4770      	bx	lr

08015f58 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015f58:	b480      	push	{r7}
 8015f5a:	b087      	sub	sp, #28
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	60f8      	str	r0, [r7, #12]
 8015f60:	60b9      	str	r1, [r7, #8]
 8015f62:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	32b0      	adds	r2, #176	; 0xb0
 8015f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f72:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015f74:	697b      	ldr	r3, [r7, #20]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d101      	bne.n	8015f7e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015f7a:	2303      	movs	r3, #3
 8015f7c:	e008      	b.n	8015f90 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015f7e:	697b      	ldr	r3, [r7, #20]
 8015f80:	68ba      	ldr	r2, [r7, #8]
 8015f82:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8015f86:	697b      	ldr	r3, [r7, #20]
 8015f88:	687a      	ldr	r2, [r7, #4]
 8015f8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8015f8e:	2300      	movs	r3, #0
}
 8015f90:	4618      	mov	r0, r3
 8015f92:	371c      	adds	r7, #28
 8015f94:	46bd      	mov	sp, r7
 8015f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f9a:	4770      	bx	lr

08015f9c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015f9c:	b480      	push	{r7}
 8015f9e:	b085      	sub	sp, #20
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
 8015fa4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	32b0      	adds	r2, #176	; 0xb0
 8015fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fb4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d101      	bne.n	8015fc0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015fbc:	2303      	movs	r3, #3
 8015fbe:	e004      	b.n	8015fca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	683a      	ldr	r2, [r7, #0]
 8015fc4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8015fc8:	2300      	movs	r3, #0
}
 8015fca:	4618      	mov	r0, r3
 8015fcc:	3714      	adds	r7, #20
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd4:	4770      	bx	lr
	...

08015fd8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015fd8:	b580      	push	{r7, lr}
 8015fda:	b084      	sub	sp, #16
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	32b0      	adds	r2, #176	; 0xb0
 8015fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fee:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015ff0:	2301      	movs	r3, #1
 8015ff2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015ff4:	68bb      	ldr	r3, [r7, #8]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d101      	bne.n	8015ffe <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015ffa:	2303      	movs	r3, #3
 8015ffc:	e025      	b.n	801604a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8015ffe:	68bb      	ldr	r3, [r7, #8]
 8016000:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016004:	2b00      	cmp	r3, #0
 8016006:	d11f      	bne.n	8016048 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8016008:	68bb      	ldr	r3, [r7, #8]
 801600a:	2201      	movs	r2, #1
 801600c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8016010:	4b10      	ldr	r3, [pc, #64]	; (8016054 <USBD_CDC_TransmitPacket+0x7c>)
 8016012:	781b      	ldrb	r3, [r3, #0]
 8016014:	f003 020f 	and.w	r2, r3, #15
 8016018:	68bb      	ldr	r3, [r7, #8]
 801601a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 801601e:	6878      	ldr	r0, [r7, #4]
 8016020:	4613      	mov	r3, r2
 8016022:	009b      	lsls	r3, r3, #2
 8016024:	4413      	add	r3, r2
 8016026:	009b      	lsls	r3, r3, #2
 8016028:	4403      	add	r3, r0
 801602a:	3318      	adds	r3, #24
 801602c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801602e:	4b09      	ldr	r3, [pc, #36]	; (8016054 <USBD_CDC_TransmitPacket+0x7c>)
 8016030:	7819      	ldrb	r1, [r3, #0]
 8016032:	68bb      	ldr	r3, [r7, #8]
 8016034:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8016038:	68bb      	ldr	r3, [r7, #8]
 801603a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801603e:	6878      	ldr	r0, [r7, #4]
 8016040:	f007 f88b 	bl	801d15a <USBD_LL_Transmit>

    ret = USBD_OK;
 8016044:	2300      	movs	r3, #0
 8016046:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8016048:	7bfb      	ldrb	r3, [r7, #15]
}
 801604a:	4618      	mov	r0, r3
 801604c:	3710      	adds	r7, #16
 801604e:	46bd      	mov	sp, r7
 8016050:	bd80      	pop	{r7, pc}
 8016052:	bf00      	nop
 8016054:	200000b3 	.word	0x200000b3

08016058 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b084      	sub	sp, #16
 801605c:	af00      	add	r7, sp, #0
 801605e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	32b0      	adds	r2, #176	; 0xb0
 801606a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801606e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	32b0      	adds	r2, #176	; 0xb0
 801607a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d101      	bne.n	8016086 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8016082:	2303      	movs	r3, #3
 8016084:	e018      	b.n	80160b8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	7c1b      	ldrb	r3, [r3, #16]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d10a      	bne.n	80160a4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801608e:	4b0c      	ldr	r3, [pc, #48]	; (80160c0 <USBD_CDC_ReceivePacket+0x68>)
 8016090:	7819      	ldrb	r1, [r3, #0]
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016098:	f44f 7300 	mov.w	r3, #512	; 0x200
 801609c:	6878      	ldr	r0, [r7, #4]
 801609e:	f007 f87d 	bl	801d19c <USBD_LL_PrepareReceive>
 80160a2:	e008      	b.n	80160b6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80160a4:	4b06      	ldr	r3, [pc, #24]	; (80160c0 <USBD_CDC_ReceivePacket+0x68>)
 80160a6:	7819      	ldrb	r1, [r3, #0]
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80160ae:	2340      	movs	r3, #64	; 0x40
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f007 f873 	bl	801d19c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80160b6:	2300      	movs	r3, #0
}
 80160b8:	4618      	mov	r0, r3
 80160ba:	3710      	adds	r7, #16
 80160bc:	46bd      	mov	sp, r7
 80160be:	bd80      	pop	{r7, pc}
 80160c0:	200000b4 	.word	0x200000b4

080160c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80160c4:	b580      	push	{r7, lr}
 80160c6:	b086      	sub	sp, #24
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	60f8      	str	r0, [r7, #12]
 80160cc:	60b9      	str	r1, [r7, #8]
 80160ce:	4613      	mov	r3, r2
 80160d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d101      	bne.n	80160dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80160d8:	2303      	movs	r3, #3
 80160da:	e01f      	b.n	801611c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	2200      	movs	r2, #0
 80160e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	2200      	movs	r2, #0
 80160e8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	2200      	movs	r2, #0
 80160f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80160f4:	68bb      	ldr	r3, [r7, #8]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d003      	beq.n	8016102 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	68ba      	ldr	r2, [r7, #8]
 80160fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	2201      	movs	r2, #1
 8016106:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	79fa      	ldrb	r2, [r7, #7]
 801610e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016110:	68f8      	ldr	r0, [r7, #12]
 8016112:	f006 fee7 	bl	801cee4 <USBD_LL_Init>
 8016116:	4603      	mov	r3, r0
 8016118:	75fb      	strb	r3, [r7, #23]

  return ret;
 801611a:	7dfb      	ldrb	r3, [r7, #23]
}
 801611c:	4618      	mov	r0, r3
 801611e:	3718      	adds	r7, #24
 8016120:	46bd      	mov	sp, r7
 8016122:	bd80      	pop	{r7, pc}

08016124 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016124:	b580      	push	{r7, lr}
 8016126:	b084      	sub	sp, #16
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
 801612c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801612e:	2300      	movs	r3, #0
 8016130:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8016132:	683b      	ldr	r3, [r7, #0]
 8016134:	2b00      	cmp	r3, #0
 8016136:	d101      	bne.n	801613c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016138:	2303      	movs	r3, #3
 801613a:	e025      	b.n	8016188 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	683a      	ldr	r2, [r7, #0]
 8016140:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	32ae      	adds	r2, #174	; 0xae
 801614e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016154:	2b00      	cmp	r3, #0
 8016156:	d00f      	beq.n	8016178 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	32ae      	adds	r2, #174	; 0xae
 8016162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016168:	f107 020e 	add.w	r2, r7, #14
 801616c:	4610      	mov	r0, r2
 801616e:	4798      	blx	r3
 8016170:	4602      	mov	r2, r0
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801617e:	1c5a      	adds	r2, r3, #1
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8016186:	2300      	movs	r3, #0
}
 8016188:	4618      	mov	r0, r3
 801618a:	3710      	adds	r7, #16
 801618c:	46bd      	mov	sp, r7
 801618e:	bd80      	pop	{r7, pc}

08016190 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016190:	b580      	push	{r7, lr}
 8016192:	b082      	sub	sp, #8
 8016194:	af00      	add	r7, sp, #0
 8016196:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016198:	6878      	ldr	r0, [r7, #4]
 801619a:	f006 fef5 	bl	801cf88 <USBD_LL_Start>
 801619e:	4603      	mov	r3, r0
}
 80161a0:	4618      	mov	r0, r3
 80161a2:	3708      	adds	r7, #8
 80161a4:	46bd      	mov	sp, r7
 80161a6:	bd80      	pop	{r7, pc}

080161a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80161a8:	b480      	push	{r7}
 80161aa:	b083      	sub	sp, #12
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80161b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80161b2:	4618      	mov	r0, r3
 80161b4:	370c      	adds	r7, #12
 80161b6:	46bd      	mov	sp, r7
 80161b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161bc:	4770      	bx	lr

080161be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80161be:	b580      	push	{r7, lr}
 80161c0:	b084      	sub	sp, #16
 80161c2:	af00      	add	r7, sp, #0
 80161c4:	6078      	str	r0, [r7, #4]
 80161c6:	460b      	mov	r3, r1
 80161c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80161ca:	2300      	movs	r3, #0
 80161cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d009      	beq.n	80161ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	78fa      	ldrb	r2, [r7, #3]
 80161e2:	4611      	mov	r1, r2
 80161e4:	6878      	ldr	r0, [r7, #4]
 80161e6:	4798      	blx	r3
 80161e8:	4603      	mov	r3, r0
 80161ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80161ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80161ee:	4618      	mov	r0, r3
 80161f0:	3710      	adds	r7, #16
 80161f2:	46bd      	mov	sp, r7
 80161f4:	bd80      	pop	{r7, pc}

080161f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80161f6:	b580      	push	{r7, lr}
 80161f8:	b084      	sub	sp, #16
 80161fa:	af00      	add	r7, sp, #0
 80161fc:	6078      	str	r0, [r7, #4]
 80161fe:	460b      	mov	r3, r1
 8016200:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016202:	2300      	movs	r3, #0
 8016204:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801620c:	685b      	ldr	r3, [r3, #4]
 801620e:	78fa      	ldrb	r2, [r7, #3]
 8016210:	4611      	mov	r1, r2
 8016212:	6878      	ldr	r0, [r7, #4]
 8016214:	4798      	blx	r3
 8016216:	4603      	mov	r3, r0
 8016218:	2b00      	cmp	r3, #0
 801621a:	d001      	beq.n	8016220 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801621c:	2303      	movs	r3, #3
 801621e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016220:	7bfb      	ldrb	r3, [r7, #15]
}
 8016222:	4618      	mov	r0, r3
 8016224:	3710      	adds	r7, #16
 8016226:	46bd      	mov	sp, r7
 8016228:	bd80      	pop	{r7, pc}

0801622a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801622a:	b580      	push	{r7, lr}
 801622c:	b084      	sub	sp, #16
 801622e:	af00      	add	r7, sp, #0
 8016230:	6078      	str	r0, [r7, #4]
 8016232:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801623a:	6839      	ldr	r1, [r7, #0]
 801623c:	4618      	mov	r0, r3
 801623e:	f001 f932 	bl	80174a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	2201      	movs	r2, #1
 8016246:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8016250:	461a      	mov	r2, r3
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801625e:	f003 031f 	and.w	r3, r3, #31
 8016262:	2b02      	cmp	r3, #2
 8016264:	d01a      	beq.n	801629c <USBD_LL_SetupStage+0x72>
 8016266:	2b02      	cmp	r3, #2
 8016268:	d822      	bhi.n	80162b0 <USBD_LL_SetupStage+0x86>
 801626a:	2b00      	cmp	r3, #0
 801626c:	d002      	beq.n	8016274 <USBD_LL_SetupStage+0x4a>
 801626e:	2b01      	cmp	r3, #1
 8016270:	d00a      	beq.n	8016288 <USBD_LL_SetupStage+0x5e>
 8016272:	e01d      	b.n	80162b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801627a:	4619      	mov	r1, r3
 801627c:	6878      	ldr	r0, [r7, #4]
 801627e:	f000 fb5f 	bl	8016940 <USBD_StdDevReq>
 8016282:	4603      	mov	r3, r0
 8016284:	73fb      	strb	r3, [r7, #15]
      break;
 8016286:	e020      	b.n	80162ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801628e:	4619      	mov	r1, r3
 8016290:	6878      	ldr	r0, [r7, #4]
 8016292:	f000 fbc7 	bl	8016a24 <USBD_StdItfReq>
 8016296:	4603      	mov	r3, r0
 8016298:	73fb      	strb	r3, [r7, #15]
      break;
 801629a:	e016      	b.n	80162ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80162a2:	4619      	mov	r1, r3
 80162a4:	6878      	ldr	r0, [r7, #4]
 80162a6:	f000 fc29 	bl	8016afc <USBD_StdEPReq>
 80162aa:	4603      	mov	r3, r0
 80162ac:	73fb      	strb	r3, [r7, #15]
      break;
 80162ae:	e00c      	b.n	80162ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80162b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80162ba:	b2db      	uxtb	r3, r3
 80162bc:	4619      	mov	r1, r3
 80162be:	6878      	ldr	r0, [r7, #4]
 80162c0:	f006 fec2 	bl	801d048 <USBD_LL_StallEP>
 80162c4:	4603      	mov	r3, r0
 80162c6:	73fb      	strb	r3, [r7, #15]
      break;
 80162c8:	bf00      	nop
  }

  return ret;
 80162ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80162cc:	4618      	mov	r0, r3
 80162ce:	3710      	adds	r7, #16
 80162d0:	46bd      	mov	sp, r7
 80162d2:	bd80      	pop	{r7, pc}

080162d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80162d4:	b580      	push	{r7, lr}
 80162d6:	b086      	sub	sp, #24
 80162d8:	af00      	add	r7, sp, #0
 80162da:	60f8      	str	r0, [r7, #12]
 80162dc:	460b      	mov	r3, r1
 80162de:	607a      	str	r2, [r7, #4]
 80162e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80162e2:	2300      	movs	r3, #0
 80162e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80162e6:	7afb      	ldrb	r3, [r7, #11]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d16e      	bne.n	80163ca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80162f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80162fa:	2b03      	cmp	r3, #3
 80162fc:	f040 8098 	bne.w	8016430 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8016300:	693b      	ldr	r3, [r7, #16]
 8016302:	689a      	ldr	r2, [r3, #8]
 8016304:	693b      	ldr	r3, [r7, #16]
 8016306:	68db      	ldr	r3, [r3, #12]
 8016308:	429a      	cmp	r2, r3
 801630a:	d913      	bls.n	8016334 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801630c:	693b      	ldr	r3, [r7, #16]
 801630e:	689a      	ldr	r2, [r3, #8]
 8016310:	693b      	ldr	r3, [r7, #16]
 8016312:	68db      	ldr	r3, [r3, #12]
 8016314:	1ad2      	subs	r2, r2, r3
 8016316:	693b      	ldr	r3, [r7, #16]
 8016318:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801631a:	693b      	ldr	r3, [r7, #16]
 801631c:	68da      	ldr	r2, [r3, #12]
 801631e:	693b      	ldr	r3, [r7, #16]
 8016320:	689b      	ldr	r3, [r3, #8]
 8016322:	4293      	cmp	r3, r2
 8016324:	bf28      	it	cs
 8016326:	4613      	movcs	r3, r2
 8016328:	461a      	mov	r2, r3
 801632a:	6879      	ldr	r1, [r7, #4]
 801632c:	68f8      	ldr	r0, [r7, #12]
 801632e:	f001 f9ae 	bl	801768e <USBD_CtlContinueRx>
 8016332:	e07d      	b.n	8016430 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801633a:	f003 031f 	and.w	r3, r3, #31
 801633e:	2b02      	cmp	r3, #2
 8016340:	d014      	beq.n	801636c <USBD_LL_DataOutStage+0x98>
 8016342:	2b02      	cmp	r3, #2
 8016344:	d81d      	bhi.n	8016382 <USBD_LL_DataOutStage+0xae>
 8016346:	2b00      	cmp	r3, #0
 8016348:	d002      	beq.n	8016350 <USBD_LL_DataOutStage+0x7c>
 801634a:	2b01      	cmp	r3, #1
 801634c:	d003      	beq.n	8016356 <USBD_LL_DataOutStage+0x82>
 801634e:	e018      	b.n	8016382 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8016350:	2300      	movs	r3, #0
 8016352:	75bb      	strb	r3, [r7, #22]
            break;
 8016354:	e018      	b.n	8016388 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801635c:	b2db      	uxtb	r3, r3
 801635e:	4619      	mov	r1, r3
 8016360:	68f8      	ldr	r0, [r7, #12]
 8016362:	f000 fa5e 	bl	8016822 <USBD_CoreFindIF>
 8016366:	4603      	mov	r3, r0
 8016368:	75bb      	strb	r3, [r7, #22]
            break;
 801636a:	e00d      	b.n	8016388 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8016372:	b2db      	uxtb	r3, r3
 8016374:	4619      	mov	r1, r3
 8016376:	68f8      	ldr	r0, [r7, #12]
 8016378:	f000 fa60 	bl	801683c <USBD_CoreFindEP>
 801637c:	4603      	mov	r3, r0
 801637e:	75bb      	strb	r3, [r7, #22]
            break;
 8016380:	e002      	b.n	8016388 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8016382:	2300      	movs	r3, #0
 8016384:	75bb      	strb	r3, [r7, #22]
            break;
 8016386:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016388:	7dbb      	ldrb	r3, [r7, #22]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d119      	bne.n	80163c2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016394:	b2db      	uxtb	r3, r3
 8016396:	2b03      	cmp	r3, #3
 8016398:	d113      	bne.n	80163c2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801639a:	7dba      	ldrb	r2, [r7, #22]
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	32ae      	adds	r2, #174	; 0xae
 80163a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163a4:	691b      	ldr	r3, [r3, #16]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d00b      	beq.n	80163c2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80163aa:	7dba      	ldrb	r2, [r7, #22]
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80163b2:	7dba      	ldrb	r2, [r7, #22]
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	32ae      	adds	r2, #174	; 0xae
 80163b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163bc:	691b      	ldr	r3, [r3, #16]
 80163be:	68f8      	ldr	r0, [r7, #12]
 80163c0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80163c2:	68f8      	ldr	r0, [r7, #12]
 80163c4:	f001 f974 	bl	80176b0 <USBD_CtlSendStatus>
 80163c8:	e032      	b.n	8016430 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80163ca:	7afb      	ldrb	r3, [r7, #11]
 80163cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80163d0:	b2db      	uxtb	r3, r3
 80163d2:	4619      	mov	r1, r3
 80163d4:	68f8      	ldr	r0, [r7, #12]
 80163d6:	f000 fa31 	bl	801683c <USBD_CoreFindEP>
 80163da:	4603      	mov	r3, r0
 80163dc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80163de:	7dbb      	ldrb	r3, [r7, #22]
 80163e0:	2bff      	cmp	r3, #255	; 0xff
 80163e2:	d025      	beq.n	8016430 <USBD_LL_DataOutStage+0x15c>
 80163e4:	7dbb      	ldrb	r3, [r7, #22]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d122      	bne.n	8016430 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80163f0:	b2db      	uxtb	r3, r3
 80163f2:	2b03      	cmp	r3, #3
 80163f4:	d117      	bne.n	8016426 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80163f6:	7dba      	ldrb	r2, [r7, #22]
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	32ae      	adds	r2, #174	; 0xae
 80163fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016400:	699b      	ldr	r3, [r3, #24]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d00f      	beq.n	8016426 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8016406:	7dba      	ldrb	r2, [r7, #22]
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801640e:	7dba      	ldrb	r2, [r7, #22]
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	32ae      	adds	r2, #174	; 0xae
 8016414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016418:	699b      	ldr	r3, [r3, #24]
 801641a:	7afa      	ldrb	r2, [r7, #11]
 801641c:	4611      	mov	r1, r2
 801641e:	68f8      	ldr	r0, [r7, #12]
 8016420:	4798      	blx	r3
 8016422:	4603      	mov	r3, r0
 8016424:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8016426:	7dfb      	ldrb	r3, [r7, #23]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d001      	beq.n	8016430 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801642c:	7dfb      	ldrb	r3, [r7, #23]
 801642e:	e000      	b.n	8016432 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016430:	2300      	movs	r3, #0
}
 8016432:	4618      	mov	r0, r3
 8016434:	3718      	adds	r7, #24
 8016436:	46bd      	mov	sp, r7
 8016438:	bd80      	pop	{r7, pc}

0801643a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801643a:	b580      	push	{r7, lr}
 801643c:	b086      	sub	sp, #24
 801643e:	af00      	add	r7, sp, #0
 8016440:	60f8      	str	r0, [r7, #12]
 8016442:	460b      	mov	r3, r1
 8016444:	607a      	str	r2, [r7, #4]
 8016446:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8016448:	7afb      	ldrb	r3, [r7, #11]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d16f      	bne.n	801652e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	3314      	adds	r3, #20
 8016452:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801645a:	2b02      	cmp	r3, #2
 801645c:	d15a      	bne.n	8016514 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801645e:	693b      	ldr	r3, [r7, #16]
 8016460:	689a      	ldr	r2, [r3, #8]
 8016462:	693b      	ldr	r3, [r7, #16]
 8016464:	68db      	ldr	r3, [r3, #12]
 8016466:	429a      	cmp	r2, r3
 8016468:	d914      	bls.n	8016494 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801646a:	693b      	ldr	r3, [r7, #16]
 801646c:	689a      	ldr	r2, [r3, #8]
 801646e:	693b      	ldr	r3, [r7, #16]
 8016470:	68db      	ldr	r3, [r3, #12]
 8016472:	1ad2      	subs	r2, r2, r3
 8016474:	693b      	ldr	r3, [r7, #16]
 8016476:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016478:	693b      	ldr	r3, [r7, #16]
 801647a:	689b      	ldr	r3, [r3, #8]
 801647c:	461a      	mov	r2, r3
 801647e:	6879      	ldr	r1, [r7, #4]
 8016480:	68f8      	ldr	r0, [r7, #12]
 8016482:	f001 f8d6 	bl	8017632 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016486:	2300      	movs	r3, #0
 8016488:	2200      	movs	r2, #0
 801648a:	2100      	movs	r1, #0
 801648c:	68f8      	ldr	r0, [r7, #12]
 801648e:	f006 fe85 	bl	801d19c <USBD_LL_PrepareReceive>
 8016492:	e03f      	b.n	8016514 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016494:	693b      	ldr	r3, [r7, #16]
 8016496:	68da      	ldr	r2, [r3, #12]
 8016498:	693b      	ldr	r3, [r7, #16]
 801649a:	689b      	ldr	r3, [r3, #8]
 801649c:	429a      	cmp	r2, r3
 801649e:	d11c      	bne.n	80164da <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80164a0:	693b      	ldr	r3, [r7, #16]
 80164a2:	685a      	ldr	r2, [r3, #4]
 80164a4:	693b      	ldr	r3, [r7, #16]
 80164a6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80164a8:	429a      	cmp	r2, r3
 80164aa:	d316      	bcc.n	80164da <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80164ac:	693b      	ldr	r3, [r7, #16]
 80164ae:	685a      	ldr	r2, [r3, #4]
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80164b6:	429a      	cmp	r2, r3
 80164b8:	d20f      	bcs.n	80164da <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80164ba:	2200      	movs	r2, #0
 80164bc:	2100      	movs	r1, #0
 80164be:	68f8      	ldr	r0, [r7, #12]
 80164c0:	f001 f8b7 	bl	8017632 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	2200      	movs	r2, #0
 80164c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80164cc:	2300      	movs	r3, #0
 80164ce:	2200      	movs	r2, #0
 80164d0:	2100      	movs	r1, #0
 80164d2:	68f8      	ldr	r0, [r7, #12]
 80164d4:	f006 fe62 	bl	801d19c <USBD_LL_PrepareReceive>
 80164d8:	e01c      	b.n	8016514 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80164e0:	b2db      	uxtb	r3, r3
 80164e2:	2b03      	cmp	r3, #3
 80164e4:	d10f      	bne.n	8016506 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164ec:	68db      	ldr	r3, [r3, #12]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d009      	beq.n	8016506 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	2200      	movs	r2, #0
 80164f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016500:	68db      	ldr	r3, [r3, #12]
 8016502:	68f8      	ldr	r0, [r7, #12]
 8016504:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016506:	2180      	movs	r1, #128	; 0x80
 8016508:	68f8      	ldr	r0, [r7, #12]
 801650a:	f006 fd9d 	bl	801d048 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801650e:	68f8      	ldr	r0, [r7, #12]
 8016510:	f001 f8e1 	bl	80176d6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801651a:	2b00      	cmp	r3, #0
 801651c:	d03a      	beq.n	8016594 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801651e:	68f8      	ldr	r0, [r7, #12]
 8016520:	f7ff fe42 	bl	80161a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	2200      	movs	r2, #0
 8016528:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801652c:	e032      	b.n	8016594 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801652e:	7afb      	ldrb	r3, [r7, #11]
 8016530:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016534:	b2db      	uxtb	r3, r3
 8016536:	4619      	mov	r1, r3
 8016538:	68f8      	ldr	r0, [r7, #12]
 801653a:	f000 f97f 	bl	801683c <USBD_CoreFindEP>
 801653e:	4603      	mov	r3, r0
 8016540:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016542:	7dfb      	ldrb	r3, [r7, #23]
 8016544:	2bff      	cmp	r3, #255	; 0xff
 8016546:	d025      	beq.n	8016594 <USBD_LL_DataInStage+0x15a>
 8016548:	7dfb      	ldrb	r3, [r7, #23]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d122      	bne.n	8016594 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016554:	b2db      	uxtb	r3, r3
 8016556:	2b03      	cmp	r3, #3
 8016558:	d11c      	bne.n	8016594 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801655a:	7dfa      	ldrb	r2, [r7, #23]
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	32ae      	adds	r2, #174	; 0xae
 8016560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016564:	695b      	ldr	r3, [r3, #20]
 8016566:	2b00      	cmp	r3, #0
 8016568:	d014      	beq.n	8016594 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801656a:	7dfa      	ldrb	r2, [r7, #23]
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8016572:	7dfa      	ldrb	r2, [r7, #23]
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	32ae      	adds	r2, #174	; 0xae
 8016578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801657c:	695b      	ldr	r3, [r3, #20]
 801657e:	7afa      	ldrb	r2, [r7, #11]
 8016580:	4611      	mov	r1, r2
 8016582:	68f8      	ldr	r0, [r7, #12]
 8016584:	4798      	blx	r3
 8016586:	4603      	mov	r3, r0
 8016588:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801658a:	7dbb      	ldrb	r3, [r7, #22]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d001      	beq.n	8016594 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016590:	7dbb      	ldrb	r3, [r7, #22]
 8016592:	e000      	b.n	8016596 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8016594:	2300      	movs	r3, #0
}
 8016596:	4618      	mov	r0, r3
 8016598:	3718      	adds	r7, #24
 801659a:	46bd      	mov	sp, r7
 801659c:	bd80      	pop	{r7, pc}

0801659e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801659e:	b580      	push	{r7, lr}
 80165a0:	b084      	sub	sp, #16
 80165a2:	af00      	add	r7, sp, #0
 80165a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80165a6:	2300      	movs	r3, #0
 80165a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	2201      	movs	r2, #1
 80165ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	2200      	movs	r2, #0
 80165b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	2200      	movs	r2, #0
 80165be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	2200      	movs	r2, #0
 80165c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2200      	movs	r2, #0
 80165cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d014      	beq.n	8016604 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80165e0:	685b      	ldr	r3, [r3, #4]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d00e      	beq.n	8016604 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80165ec:	685b      	ldr	r3, [r3, #4]
 80165ee:	687a      	ldr	r2, [r7, #4]
 80165f0:	6852      	ldr	r2, [r2, #4]
 80165f2:	b2d2      	uxtb	r2, r2
 80165f4:	4611      	mov	r1, r2
 80165f6:	6878      	ldr	r0, [r7, #4]
 80165f8:	4798      	blx	r3
 80165fa:	4603      	mov	r3, r0
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d001      	beq.n	8016604 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016600:	2303      	movs	r3, #3
 8016602:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016604:	2340      	movs	r3, #64	; 0x40
 8016606:	2200      	movs	r2, #0
 8016608:	2100      	movs	r1, #0
 801660a:	6878      	ldr	r0, [r7, #4]
 801660c:	f006 fcd7 	bl	801cfbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	2201      	movs	r2, #1
 8016614:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	2240      	movs	r2, #64	; 0x40
 801661c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016620:	2340      	movs	r3, #64	; 0x40
 8016622:	2200      	movs	r2, #0
 8016624:	2180      	movs	r1, #128	; 0x80
 8016626:	6878      	ldr	r0, [r7, #4]
 8016628:	f006 fcc9 	bl	801cfbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	2201      	movs	r2, #1
 8016630:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	2240      	movs	r2, #64	; 0x40
 8016636:	621a      	str	r2, [r3, #32]

  return ret;
 8016638:	7bfb      	ldrb	r3, [r7, #15]
}
 801663a:	4618      	mov	r0, r3
 801663c:	3710      	adds	r7, #16
 801663e:	46bd      	mov	sp, r7
 8016640:	bd80      	pop	{r7, pc}

08016642 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016642:	b480      	push	{r7}
 8016644:	b083      	sub	sp, #12
 8016646:	af00      	add	r7, sp, #0
 8016648:	6078      	str	r0, [r7, #4]
 801664a:	460b      	mov	r3, r1
 801664c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	78fa      	ldrb	r2, [r7, #3]
 8016652:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016654:	2300      	movs	r3, #0
}
 8016656:	4618      	mov	r0, r3
 8016658:	370c      	adds	r7, #12
 801665a:	46bd      	mov	sp, r7
 801665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016660:	4770      	bx	lr

08016662 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016662:	b480      	push	{r7}
 8016664:	b083      	sub	sp, #12
 8016666:	af00      	add	r7, sp, #0
 8016668:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016670:	b2da      	uxtb	r2, r3
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	2204      	movs	r2, #4
 801667c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8016680:	2300      	movs	r3, #0
}
 8016682:	4618      	mov	r0, r3
 8016684:	370c      	adds	r7, #12
 8016686:	46bd      	mov	sp, r7
 8016688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801668c:	4770      	bx	lr

0801668e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801668e:	b480      	push	{r7}
 8016690:	b083      	sub	sp, #12
 8016692:	af00      	add	r7, sp, #0
 8016694:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801669c:	b2db      	uxtb	r3, r3
 801669e:	2b04      	cmp	r3, #4
 80166a0:	d106      	bne.n	80166b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80166a8:	b2da      	uxtb	r2, r3
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80166b0:	2300      	movs	r3, #0
}
 80166b2:	4618      	mov	r0, r3
 80166b4:	370c      	adds	r7, #12
 80166b6:	46bd      	mov	sp, r7
 80166b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166bc:	4770      	bx	lr

080166be <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80166be:	b580      	push	{r7, lr}
 80166c0:	b082      	sub	sp, #8
 80166c2:	af00      	add	r7, sp, #0
 80166c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80166cc:	b2db      	uxtb	r3, r3
 80166ce:	2b03      	cmp	r3, #3
 80166d0:	d110      	bne.n	80166f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d00b      	beq.n	80166f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80166e2:	69db      	ldr	r3, [r3, #28]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d005      	beq.n	80166f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80166ee:	69db      	ldr	r3, [r3, #28]
 80166f0:	6878      	ldr	r0, [r7, #4]
 80166f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80166f4:	2300      	movs	r3, #0
}
 80166f6:	4618      	mov	r0, r3
 80166f8:	3708      	adds	r7, #8
 80166fa:	46bd      	mov	sp, r7
 80166fc:	bd80      	pop	{r7, pc}

080166fe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80166fe:	b580      	push	{r7, lr}
 8016700:	b082      	sub	sp, #8
 8016702:	af00      	add	r7, sp, #0
 8016704:	6078      	str	r0, [r7, #4]
 8016706:	460b      	mov	r3, r1
 8016708:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	32ae      	adds	r2, #174	; 0xae
 8016714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d101      	bne.n	8016720 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801671c:	2303      	movs	r3, #3
 801671e:	e01c      	b.n	801675a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016726:	b2db      	uxtb	r3, r3
 8016728:	2b03      	cmp	r3, #3
 801672a:	d115      	bne.n	8016758 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	32ae      	adds	r2, #174	; 0xae
 8016736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801673a:	6a1b      	ldr	r3, [r3, #32]
 801673c:	2b00      	cmp	r3, #0
 801673e:	d00b      	beq.n	8016758 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	32ae      	adds	r2, #174	; 0xae
 801674a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801674e:	6a1b      	ldr	r3, [r3, #32]
 8016750:	78fa      	ldrb	r2, [r7, #3]
 8016752:	4611      	mov	r1, r2
 8016754:	6878      	ldr	r0, [r7, #4]
 8016756:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016758:	2300      	movs	r3, #0
}
 801675a:	4618      	mov	r0, r3
 801675c:	3708      	adds	r7, #8
 801675e:	46bd      	mov	sp, r7
 8016760:	bd80      	pop	{r7, pc}

08016762 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016762:	b580      	push	{r7, lr}
 8016764:	b082      	sub	sp, #8
 8016766:	af00      	add	r7, sp, #0
 8016768:	6078      	str	r0, [r7, #4]
 801676a:	460b      	mov	r3, r1
 801676c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	32ae      	adds	r2, #174	; 0xae
 8016778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801677c:	2b00      	cmp	r3, #0
 801677e:	d101      	bne.n	8016784 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016780:	2303      	movs	r3, #3
 8016782:	e01c      	b.n	80167be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801678a:	b2db      	uxtb	r3, r3
 801678c:	2b03      	cmp	r3, #3
 801678e:	d115      	bne.n	80167bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	32ae      	adds	r2, #174	; 0xae
 801679a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d00b      	beq.n	80167bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	32ae      	adds	r2, #174	; 0xae
 80167ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167b4:	78fa      	ldrb	r2, [r7, #3]
 80167b6:	4611      	mov	r1, r2
 80167b8:	6878      	ldr	r0, [r7, #4]
 80167ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80167bc:	2300      	movs	r3, #0
}
 80167be:	4618      	mov	r0, r3
 80167c0:	3708      	adds	r7, #8
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}

080167c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80167c6:	b480      	push	{r7}
 80167c8:	b083      	sub	sp, #12
 80167ca:	af00      	add	r7, sp, #0
 80167cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80167ce:	2300      	movs	r3, #0
}
 80167d0:	4618      	mov	r0, r3
 80167d2:	370c      	adds	r7, #12
 80167d4:	46bd      	mov	sp, r7
 80167d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167da:	4770      	bx	lr

080167dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	b084      	sub	sp, #16
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80167e4:	2300      	movs	r3, #0
 80167e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	2201      	movs	r2, #1
 80167ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d00e      	beq.n	8016818 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016800:	685b      	ldr	r3, [r3, #4]
 8016802:	687a      	ldr	r2, [r7, #4]
 8016804:	6852      	ldr	r2, [r2, #4]
 8016806:	b2d2      	uxtb	r2, r2
 8016808:	4611      	mov	r1, r2
 801680a:	6878      	ldr	r0, [r7, #4]
 801680c:	4798      	blx	r3
 801680e:	4603      	mov	r3, r0
 8016810:	2b00      	cmp	r3, #0
 8016812:	d001      	beq.n	8016818 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8016814:	2303      	movs	r3, #3
 8016816:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016818:	7bfb      	ldrb	r3, [r7, #15]
}
 801681a:	4618      	mov	r0, r3
 801681c:	3710      	adds	r7, #16
 801681e:	46bd      	mov	sp, r7
 8016820:	bd80      	pop	{r7, pc}

08016822 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016822:	b480      	push	{r7}
 8016824:	b083      	sub	sp, #12
 8016826:	af00      	add	r7, sp, #0
 8016828:	6078      	str	r0, [r7, #4]
 801682a:	460b      	mov	r3, r1
 801682c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801682e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016830:	4618      	mov	r0, r3
 8016832:	370c      	adds	r7, #12
 8016834:	46bd      	mov	sp, r7
 8016836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801683a:	4770      	bx	lr

0801683c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801683c:	b480      	push	{r7}
 801683e:	b083      	sub	sp, #12
 8016840:	af00      	add	r7, sp, #0
 8016842:	6078      	str	r0, [r7, #4]
 8016844:	460b      	mov	r3, r1
 8016846:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016848:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801684a:	4618      	mov	r0, r3
 801684c:	370c      	adds	r7, #12
 801684e:	46bd      	mov	sp, r7
 8016850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016854:	4770      	bx	lr

08016856 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8016856:	b580      	push	{r7, lr}
 8016858:	b086      	sub	sp, #24
 801685a:	af00      	add	r7, sp, #0
 801685c:	6078      	str	r0, [r7, #4]
 801685e:	460b      	mov	r3, r1
 8016860:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801686a:	2300      	movs	r3, #0
 801686c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	885b      	ldrh	r3, [r3, #2]
 8016872:	b29a      	uxth	r2, r3
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	781b      	ldrb	r3, [r3, #0]
 8016878:	b29b      	uxth	r3, r3
 801687a:	429a      	cmp	r2, r3
 801687c:	d920      	bls.n	80168c0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	781b      	ldrb	r3, [r3, #0]
 8016882:	b29b      	uxth	r3, r3
 8016884:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8016886:	e013      	b.n	80168b0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016888:	f107 030a 	add.w	r3, r7, #10
 801688c:	4619      	mov	r1, r3
 801688e:	6978      	ldr	r0, [r7, #20]
 8016890:	f000 f81b 	bl	80168ca <USBD_GetNextDesc>
 8016894:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016896:	697b      	ldr	r3, [r7, #20]
 8016898:	785b      	ldrb	r3, [r3, #1]
 801689a:	2b05      	cmp	r3, #5
 801689c:	d108      	bne.n	80168b0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801689e:	697b      	ldr	r3, [r7, #20]
 80168a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80168a2:	693b      	ldr	r3, [r7, #16]
 80168a4:	789b      	ldrb	r3, [r3, #2]
 80168a6:	78fa      	ldrb	r2, [r7, #3]
 80168a8:	429a      	cmp	r2, r3
 80168aa:	d008      	beq.n	80168be <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80168ac:	2300      	movs	r3, #0
 80168ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	885b      	ldrh	r3, [r3, #2]
 80168b4:	b29a      	uxth	r2, r3
 80168b6:	897b      	ldrh	r3, [r7, #10]
 80168b8:	429a      	cmp	r2, r3
 80168ba:	d8e5      	bhi.n	8016888 <USBD_GetEpDesc+0x32>
 80168bc:	e000      	b.n	80168c0 <USBD_GetEpDesc+0x6a>
          break;
 80168be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80168c0:	693b      	ldr	r3, [r7, #16]
}
 80168c2:	4618      	mov	r0, r3
 80168c4:	3718      	adds	r7, #24
 80168c6:	46bd      	mov	sp, r7
 80168c8:	bd80      	pop	{r7, pc}

080168ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80168ca:	b480      	push	{r7}
 80168cc:	b085      	sub	sp, #20
 80168ce:	af00      	add	r7, sp, #0
 80168d0:	6078      	str	r0, [r7, #4]
 80168d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80168d8:	683b      	ldr	r3, [r7, #0]
 80168da:	881a      	ldrh	r2, [r3, #0]
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	781b      	ldrb	r3, [r3, #0]
 80168e0:	b29b      	uxth	r3, r3
 80168e2:	4413      	add	r3, r2
 80168e4:	b29a      	uxth	r2, r3
 80168e6:	683b      	ldr	r3, [r7, #0]
 80168e8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	781b      	ldrb	r3, [r3, #0]
 80168ee:	461a      	mov	r2, r3
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	4413      	add	r3, r2
 80168f4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80168f6:	68fb      	ldr	r3, [r7, #12]
}
 80168f8:	4618      	mov	r0, r3
 80168fa:	3714      	adds	r7, #20
 80168fc:	46bd      	mov	sp, r7
 80168fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016902:	4770      	bx	lr

08016904 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016904:	b480      	push	{r7}
 8016906:	b087      	sub	sp, #28
 8016908:	af00      	add	r7, sp, #0
 801690a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016910:	697b      	ldr	r3, [r7, #20]
 8016912:	781b      	ldrb	r3, [r3, #0]
 8016914:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016916:	697b      	ldr	r3, [r7, #20]
 8016918:	3301      	adds	r3, #1
 801691a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801691c:	697b      	ldr	r3, [r7, #20]
 801691e:	781b      	ldrb	r3, [r3, #0]
 8016920:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016922:	8a3b      	ldrh	r3, [r7, #16]
 8016924:	021b      	lsls	r3, r3, #8
 8016926:	b21a      	sxth	r2, r3
 8016928:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801692c:	4313      	orrs	r3, r2
 801692e:	b21b      	sxth	r3, r3
 8016930:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016932:	89fb      	ldrh	r3, [r7, #14]
}
 8016934:	4618      	mov	r0, r3
 8016936:	371c      	adds	r7, #28
 8016938:	46bd      	mov	sp, r7
 801693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801693e:	4770      	bx	lr

08016940 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016940:	b580      	push	{r7, lr}
 8016942:	b084      	sub	sp, #16
 8016944:	af00      	add	r7, sp, #0
 8016946:	6078      	str	r0, [r7, #4]
 8016948:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801694a:	2300      	movs	r3, #0
 801694c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801694e:	683b      	ldr	r3, [r7, #0]
 8016950:	781b      	ldrb	r3, [r3, #0]
 8016952:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016956:	2b40      	cmp	r3, #64	; 0x40
 8016958:	d005      	beq.n	8016966 <USBD_StdDevReq+0x26>
 801695a:	2b40      	cmp	r3, #64	; 0x40
 801695c:	d857      	bhi.n	8016a0e <USBD_StdDevReq+0xce>
 801695e:	2b00      	cmp	r3, #0
 8016960:	d00f      	beq.n	8016982 <USBD_StdDevReq+0x42>
 8016962:	2b20      	cmp	r3, #32
 8016964:	d153      	bne.n	8016a0e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	32ae      	adds	r2, #174	; 0xae
 8016970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016974:	689b      	ldr	r3, [r3, #8]
 8016976:	6839      	ldr	r1, [r7, #0]
 8016978:	6878      	ldr	r0, [r7, #4]
 801697a:	4798      	blx	r3
 801697c:	4603      	mov	r3, r0
 801697e:	73fb      	strb	r3, [r7, #15]
      break;
 8016980:	e04a      	b.n	8016a18 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016982:	683b      	ldr	r3, [r7, #0]
 8016984:	785b      	ldrb	r3, [r3, #1]
 8016986:	2b09      	cmp	r3, #9
 8016988:	d83b      	bhi.n	8016a02 <USBD_StdDevReq+0xc2>
 801698a:	a201      	add	r2, pc, #4	; (adr r2, 8016990 <USBD_StdDevReq+0x50>)
 801698c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016990:	080169e5 	.word	0x080169e5
 8016994:	080169f9 	.word	0x080169f9
 8016998:	08016a03 	.word	0x08016a03
 801699c:	080169ef 	.word	0x080169ef
 80169a0:	08016a03 	.word	0x08016a03
 80169a4:	080169c3 	.word	0x080169c3
 80169a8:	080169b9 	.word	0x080169b9
 80169ac:	08016a03 	.word	0x08016a03
 80169b0:	080169db 	.word	0x080169db
 80169b4:	080169cd 	.word	0x080169cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80169b8:	6839      	ldr	r1, [r7, #0]
 80169ba:	6878      	ldr	r0, [r7, #4]
 80169bc:	f000 fa3c 	bl	8016e38 <USBD_GetDescriptor>
          break;
 80169c0:	e024      	b.n	8016a0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80169c2:	6839      	ldr	r1, [r7, #0]
 80169c4:	6878      	ldr	r0, [r7, #4]
 80169c6:	f000 fbcb 	bl	8017160 <USBD_SetAddress>
          break;
 80169ca:	e01f      	b.n	8016a0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80169cc:	6839      	ldr	r1, [r7, #0]
 80169ce:	6878      	ldr	r0, [r7, #4]
 80169d0:	f000 fc0a 	bl	80171e8 <USBD_SetConfig>
 80169d4:	4603      	mov	r3, r0
 80169d6:	73fb      	strb	r3, [r7, #15]
          break;
 80169d8:	e018      	b.n	8016a0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80169da:	6839      	ldr	r1, [r7, #0]
 80169dc:	6878      	ldr	r0, [r7, #4]
 80169de:	f000 fcad 	bl	801733c <USBD_GetConfig>
          break;
 80169e2:	e013      	b.n	8016a0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80169e4:	6839      	ldr	r1, [r7, #0]
 80169e6:	6878      	ldr	r0, [r7, #4]
 80169e8:	f000 fcde 	bl	80173a8 <USBD_GetStatus>
          break;
 80169ec:	e00e      	b.n	8016a0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80169ee:	6839      	ldr	r1, [r7, #0]
 80169f0:	6878      	ldr	r0, [r7, #4]
 80169f2:	f000 fd0d 	bl	8017410 <USBD_SetFeature>
          break;
 80169f6:	e009      	b.n	8016a0c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80169f8:	6839      	ldr	r1, [r7, #0]
 80169fa:	6878      	ldr	r0, [r7, #4]
 80169fc:	f000 fd31 	bl	8017462 <USBD_ClrFeature>
          break;
 8016a00:	e004      	b.n	8016a0c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8016a02:	6839      	ldr	r1, [r7, #0]
 8016a04:	6878      	ldr	r0, [r7, #4]
 8016a06:	f000 fd88 	bl	801751a <USBD_CtlError>
          break;
 8016a0a:	bf00      	nop
      }
      break;
 8016a0c:	e004      	b.n	8016a18 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016a0e:	6839      	ldr	r1, [r7, #0]
 8016a10:	6878      	ldr	r0, [r7, #4]
 8016a12:	f000 fd82 	bl	801751a <USBD_CtlError>
      break;
 8016a16:	bf00      	nop
  }

  return ret;
 8016a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	3710      	adds	r7, #16
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	bd80      	pop	{r7, pc}
 8016a22:	bf00      	nop

08016a24 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b084      	sub	sp, #16
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	6078      	str	r0, [r7, #4]
 8016a2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016a2e:	2300      	movs	r3, #0
 8016a30:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016a32:	683b      	ldr	r3, [r7, #0]
 8016a34:	781b      	ldrb	r3, [r3, #0]
 8016a36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016a3a:	2b40      	cmp	r3, #64	; 0x40
 8016a3c:	d005      	beq.n	8016a4a <USBD_StdItfReq+0x26>
 8016a3e:	2b40      	cmp	r3, #64	; 0x40
 8016a40:	d852      	bhi.n	8016ae8 <USBD_StdItfReq+0xc4>
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d001      	beq.n	8016a4a <USBD_StdItfReq+0x26>
 8016a46:	2b20      	cmp	r3, #32
 8016a48:	d14e      	bne.n	8016ae8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016a50:	b2db      	uxtb	r3, r3
 8016a52:	3b01      	subs	r3, #1
 8016a54:	2b02      	cmp	r3, #2
 8016a56:	d840      	bhi.n	8016ada <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016a58:	683b      	ldr	r3, [r7, #0]
 8016a5a:	889b      	ldrh	r3, [r3, #4]
 8016a5c:	b2db      	uxtb	r3, r3
 8016a5e:	2b01      	cmp	r3, #1
 8016a60:	d836      	bhi.n	8016ad0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016a62:	683b      	ldr	r3, [r7, #0]
 8016a64:	889b      	ldrh	r3, [r3, #4]
 8016a66:	b2db      	uxtb	r3, r3
 8016a68:	4619      	mov	r1, r3
 8016a6a:	6878      	ldr	r0, [r7, #4]
 8016a6c:	f7ff fed9 	bl	8016822 <USBD_CoreFindIF>
 8016a70:	4603      	mov	r3, r0
 8016a72:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016a74:	7bbb      	ldrb	r3, [r7, #14]
 8016a76:	2bff      	cmp	r3, #255	; 0xff
 8016a78:	d01d      	beq.n	8016ab6 <USBD_StdItfReq+0x92>
 8016a7a:	7bbb      	ldrb	r3, [r7, #14]
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d11a      	bne.n	8016ab6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016a80:	7bba      	ldrb	r2, [r7, #14]
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	32ae      	adds	r2, #174	; 0xae
 8016a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a8a:	689b      	ldr	r3, [r3, #8]
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d00f      	beq.n	8016ab0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016a90:	7bba      	ldrb	r2, [r7, #14]
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016a98:	7bba      	ldrb	r2, [r7, #14]
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	32ae      	adds	r2, #174	; 0xae
 8016a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016aa2:	689b      	ldr	r3, [r3, #8]
 8016aa4:	6839      	ldr	r1, [r7, #0]
 8016aa6:	6878      	ldr	r0, [r7, #4]
 8016aa8:	4798      	blx	r3
 8016aaa:	4603      	mov	r3, r0
 8016aac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016aae:	e004      	b.n	8016aba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016ab0:	2303      	movs	r3, #3
 8016ab2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016ab4:	e001      	b.n	8016aba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016ab6:	2303      	movs	r3, #3
 8016ab8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016aba:	683b      	ldr	r3, [r7, #0]
 8016abc:	88db      	ldrh	r3, [r3, #6]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d110      	bne.n	8016ae4 <USBD_StdItfReq+0xc0>
 8016ac2:	7bfb      	ldrb	r3, [r7, #15]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d10d      	bne.n	8016ae4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016ac8:	6878      	ldr	r0, [r7, #4]
 8016aca:	f000 fdf1 	bl	80176b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016ace:	e009      	b.n	8016ae4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016ad0:	6839      	ldr	r1, [r7, #0]
 8016ad2:	6878      	ldr	r0, [r7, #4]
 8016ad4:	f000 fd21 	bl	801751a <USBD_CtlError>
          break;
 8016ad8:	e004      	b.n	8016ae4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016ada:	6839      	ldr	r1, [r7, #0]
 8016adc:	6878      	ldr	r0, [r7, #4]
 8016ade:	f000 fd1c 	bl	801751a <USBD_CtlError>
          break;
 8016ae2:	e000      	b.n	8016ae6 <USBD_StdItfReq+0xc2>
          break;
 8016ae4:	bf00      	nop
      }
      break;
 8016ae6:	e004      	b.n	8016af2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016ae8:	6839      	ldr	r1, [r7, #0]
 8016aea:	6878      	ldr	r0, [r7, #4]
 8016aec:	f000 fd15 	bl	801751a <USBD_CtlError>
      break;
 8016af0:	bf00      	nop
  }

  return ret;
 8016af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016af4:	4618      	mov	r0, r3
 8016af6:	3710      	adds	r7, #16
 8016af8:	46bd      	mov	sp, r7
 8016afa:	bd80      	pop	{r7, pc}

08016afc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016afc:	b580      	push	{r7, lr}
 8016afe:	b084      	sub	sp, #16
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	6078      	str	r0, [r7, #4]
 8016b04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016b06:	2300      	movs	r3, #0
 8016b08:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016b0a:	683b      	ldr	r3, [r7, #0]
 8016b0c:	889b      	ldrh	r3, [r3, #4]
 8016b0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016b10:	683b      	ldr	r3, [r7, #0]
 8016b12:	781b      	ldrb	r3, [r3, #0]
 8016b14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016b18:	2b40      	cmp	r3, #64	; 0x40
 8016b1a:	d007      	beq.n	8016b2c <USBD_StdEPReq+0x30>
 8016b1c:	2b40      	cmp	r3, #64	; 0x40
 8016b1e:	f200 817f 	bhi.w	8016e20 <USBD_StdEPReq+0x324>
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d02a      	beq.n	8016b7c <USBD_StdEPReq+0x80>
 8016b26:	2b20      	cmp	r3, #32
 8016b28:	f040 817a 	bne.w	8016e20 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016b2c:	7bbb      	ldrb	r3, [r7, #14]
 8016b2e:	4619      	mov	r1, r3
 8016b30:	6878      	ldr	r0, [r7, #4]
 8016b32:	f7ff fe83 	bl	801683c <USBD_CoreFindEP>
 8016b36:	4603      	mov	r3, r0
 8016b38:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016b3a:	7b7b      	ldrb	r3, [r7, #13]
 8016b3c:	2bff      	cmp	r3, #255	; 0xff
 8016b3e:	f000 8174 	beq.w	8016e2a <USBD_StdEPReq+0x32e>
 8016b42:	7b7b      	ldrb	r3, [r7, #13]
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	f040 8170 	bne.w	8016e2a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016b4a:	7b7a      	ldrb	r2, [r7, #13]
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016b52:	7b7a      	ldrb	r2, [r7, #13]
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	32ae      	adds	r2, #174	; 0xae
 8016b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b5c:	689b      	ldr	r3, [r3, #8]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	f000 8163 	beq.w	8016e2a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016b64:	7b7a      	ldrb	r2, [r7, #13]
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	32ae      	adds	r2, #174	; 0xae
 8016b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b6e:	689b      	ldr	r3, [r3, #8]
 8016b70:	6839      	ldr	r1, [r7, #0]
 8016b72:	6878      	ldr	r0, [r7, #4]
 8016b74:	4798      	blx	r3
 8016b76:	4603      	mov	r3, r0
 8016b78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016b7a:	e156      	b.n	8016e2a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016b7c:	683b      	ldr	r3, [r7, #0]
 8016b7e:	785b      	ldrb	r3, [r3, #1]
 8016b80:	2b03      	cmp	r3, #3
 8016b82:	d008      	beq.n	8016b96 <USBD_StdEPReq+0x9a>
 8016b84:	2b03      	cmp	r3, #3
 8016b86:	f300 8145 	bgt.w	8016e14 <USBD_StdEPReq+0x318>
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	f000 809b 	beq.w	8016cc6 <USBD_StdEPReq+0x1ca>
 8016b90:	2b01      	cmp	r3, #1
 8016b92:	d03c      	beq.n	8016c0e <USBD_StdEPReq+0x112>
 8016b94:	e13e      	b.n	8016e14 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016b9c:	b2db      	uxtb	r3, r3
 8016b9e:	2b02      	cmp	r3, #2
 8016ba0:	d002      	beq.n	8016ba8 <USBD_StdEPReq+0xac>
 8016ba2:	2b03      	cmp	r3, #3
 8016ba4:	d016      	beq.n	8016bd4 <USBD_StdEPReq+0xd8>
 8016ba6:	e02c      	b.n	8016c02 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016ba8:	7bbb      	ldrb	r3, [r7, #14]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d00d      	beq.n	8016bca <USBD_StdEPReq+0xce>
 8016bae:	7bbb      	ldrb	r3, [r7, #14]
 8016bb0:	2b80      	cmp	r3, #128	; 0x80
 8016bb2:	d00a      	beq.n	8016bca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016bb4:	7bbb      	ldrb	r3, [r7, #14]
 8016bb6:	4619      	mov	r1, r3
 8016bb8:	6878      	ldr	r0, [r7, #4]
 8016bba:	f006 fa45 	bl	801d048 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016bbe:	2180      	movs	r1, #128	; 0x80
 8016bc0:	6878      	ldr	r0, [r7, #4]
 8016bc2:	f006 fa41 	bl	801d048 <USBD_LL_StallEP>
 8016bc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016bc8:	e020      	b.n	8016c0c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016bca:	6839      	ldr	r1, [r7, #0]
 8016bcc:	6878      	ldr	r0, [r7, #4]
 8016bce:	f000 fca4 	bl	801751a <USBD_CtlError>
              break;
 8016bd2:	e01b      	b.n	8016c0c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016bd4:	683b      	ldr	r3, [r7, #0]
 8016bd6:	885b      	ldrh	r3, [r3, #2]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d10e      	bne.n	8016bfa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016bdc:	7bbb      	ldrb	r3, [r7, #14]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d00b      	beq.n	8016bfa <USBD_StdEPReq+0xfe>
 8016be2:	7bbb      	ldrb	r3, [r7, #14]
 8016be4:	2b80      	cmp	r3, #128	; 0x80
 8016be6:	d008      	beq.n	8016bfa <USBD_StdEPReq+0xfe>
 8016be8:	683b      	ldr	r3, [r7, #0]
 8016bea:	88db      	ldrh	r3, [r3, #6]
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d104      	bne.n	8016bfa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016bf0:	7bbb      	ldrb	r3, [r7, #14]
 8016bf2:	4619      	mov	r1, r3
 8016bf4:	6878      	ldr	r0, [r7, #4]
 8016bf6:	f006 fa27 	bl	801d048 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016bfa:	6878      	ldr	r0, [r7, #4]
 8016bfc:	f000 fd58 	bl	80176b0 <USBD_CtlSendStatus>

              break;
 8016c00:	e004      	b.n	8016c0c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016c02:	6839      	ldr	r1, [r7, #0]
 8016c04:	6878      	ldr	r0, [r7, #4]
 8016c06:	f000 fc88 	bl	801751a <USBD_CtlError>
              break;
 8016c0a:	bf00      	nop
          }
          break;
 8016c0c:	e107      	b.n	8016e1e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016c14:	b2db      	uxtb	r3, r3
 8016c16:	2b02      	cmp	r3, #2
 8016c18:	d002      	beq.n	8016c20 <USBD_StdEPReq+0x124>
 8016c1a:	2b03      	cmp	r3, #3
 8016c1c:	d016      	beq.n	8016c4c <USBD_StdEPReq+0x150>
 8016c1e:	e04b      	b.n	8016cb8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016c20:	7bbb      	ldrb	r3, [r7, #14]
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d00d      	beq.n	8016c42 <USBD_StdEPReq+0x146>
 8016c26:	7bbb      	ldrb	r3, [r7, #14]
 8016c28:	2b80      	cmp	r3, #128	; 0x80
 8016c2a:	d00a      	beq.n	8016c42 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016c2c:	7bbb      	ldrb	r3, [r7, #14]
 8016c2e:	4619      	mov	r1, r3
 8016c30:	6878      	ldr	r0, [r7, #4]
 8016c32:	f006 fa09 	bl	801d048 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016c36:	2180      	movs	r1, #128	; 0x80
 8016c38:	6878      	ldr	r0, [r7, #4]
 8016c3a:	f006 fa05 	bl	801d048 <USBD_LL_StallEP>
 8016c3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016c40:	e040      	b.n	8016cc4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016c42:	6839      	ldr	r1, [r7, #0]
 8016c44:	6878      	ldr	r0, [r7, #4]
 8016c46:	f000 fc68 	bl	801751a <USBD_CtlError>
              break;
 8016c4a:	e03b      	b.n	8016cc4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016c4c:	683b      	ldr	r3, [r7, #0]
 8016c4e:	885b      	ldrh	r3, [r3, #2]
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d136      	bne.n	8016cc2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016c54:	7bbb      	ldrb	r3, [r7, #14]
 8016c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d004      	beq.n	8016c68 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016c5e:	7bbb      	ldrb	r3, [r7, #14]
 8016c60:	4619      	mov	r1, r3
 8016c62:	6878      	ldr	r0, [r7, #4]
 8016c64:	f006 fa0f 	bl	801d086 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016c68:	6878      	ldr	r0, [r7, #4]
 8016c6a:	f000 fd21 	bl	80176b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016c6e:	7bbb      	ldrb	r3, [r7, #14]
 8016c70:	4619      	mov	r1, r3
 8016c72:	6878      	ldr	r0, [r7, #4]
 8016c74:	f7ff fde2 	bl	801683c <USBD_CoreFindEP>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016c7c:	7b7b      	ldrb	r3, [r7, #13]
 8016c7e:	2bff      	cmp	r3, #255	; 0xff
 8016c80:	d01f      	beq.n	8016cc2 <USBD_StdEPReq+0x1c6>
 8016c82:	7b7b      	ldrb	r3, [r7, #13]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d11c      	bne.n	8016cc2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016c88:	7b7a      	ldrb	r2, [r7, #13]
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016c90:	7b7a      	ldrb	r2, [r7, #13]
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	32ae      	adds	r2, #174	; 0xae
 8016c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c9a:	689b      	ldr	r3, [r3, #8]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d010      	beq.n	8016cc2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016ca0:	7b7a      	ldrb	r2, [r7, #13]
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	32ae      	adds	r2, #174	; 0xae
 8016ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016caa:	689b      	ldr	r3, [r3, #8]
 8016cac:	6839      	ldr	r1, [r7, #0]
 8016cae:	6878      	ldr	r0, [r7, #4]
 8016cb0:	4798      	blx	r3
 8016cb2:	4603      	mov	r3, r0
 8016cb4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016cb6:	e004      	b.n	8016cc2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016cb8:	6839      	ldr	r1, [r7, #0]
 8016cba:	6878      	ldr	r0, [r7, #4]
 8016cbc:	f000 fc2d 	bl	801751a <USBD_CtlError>
              break;
 8016cc0:	e000      	b.n	8016cc4 <USBD_StdEPReq+0x1c8>
              break;
 8016cc2:	bf00      	nop
          }
          break;
 8016cc4:	e0ab      	b.n	8016e1e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016ccc:	b2db      	uxtb	r3, r3
 8016cce:	2b02      	cmp	r3, #2
 8016cd0:	d002      	beq.n	8016cd8 <USBD_StdEPReq+0x1dc>
 8016cd2:	2b03      	cmp	r3, #3
 8016cd4:	d032      	beq.n	8016d3c <USBD_StdEPReq+0x240>
 8016cd6:	e097      	b.n	8016e08 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016cd8:	7bbb      	ldrb	r3, [r7, #14]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d007      	beq.n	8016cee <USBD_StdEPReq+0x1f2>
 8016cde:	7bbb      	ldrb	r3, [r7, #14]
 8016ce0:	2b80      	cmp	r3, #128	; 0x80
 8016ce2:	d004      	beq.n	8016cee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016ce4:	6839      	ldr	r1, [r7, #0]
 8016ce6:	6878      	ldr	r0, [r7, #4]
 8016ce8:	f000 fc17 	bl	801751a <USBD_CtlError>
                break;
 8016cec:	e091      	b.n	8016e12 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016cee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	da0b      	bge.n	8016d0e <USBD_StdEPReq+0x212>
 8016cf6:	7bbb      	ldrb	r3, [r7, #14]
 8016cf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016cfc:	4613      	mov	r3, r2
 8016cfe:	009b      	lsls	r3, r3, #2
 8016d00:	4413      	add	r3, r2
 8016d02:	009b      	lsls	r3, r3, #2
 8016d04:	3310      	adds	r3, #16
 8016d06:	687a      	ldr	r2, [r7, #4]
 8016d08:	4413      	add	r3, r2
 8016d0a:	3304      	adds	r3, #4
 8016d0c:	e00b      	b.n	8016d26 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016d0e:	7bbb      	ldrb	r3, [r7, #14]
 8016d10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016d14:	4613      	mov	r3, r2
 8016d16:	009b      	lsls	r3, r3, #2
 8016d18:	4413      	add	r3, r2
 8016d1a:	009b      	lsls	r3, r3, #2
 8016d1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016d20:	687a      	ldr	r2, [r7, #4]
 8016d22:	4413      	add	r3, r2
 8016d24:	3304      	adds	r3, #4
 8016d26:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016d28:	68bb      	ldr	r3, [r7, #8]
 8016d2a:	2200      	movs	r2, #0
 8016d2c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016d2e:	68bb      	ldr	r3, [r7, #8]
 8016d30:	2202      	movs	r2, #2
 8016d32:	4619      	mov	r1, r3
 8016d34:	6878      	ldr	r0, [r7, #4]
 8016d36:	f000 fc61 	bl	80175fc <USBD_CtlSendData>
              break;
 8016d3a:	e06a      	b.n	8016e12 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016d3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	da11      	bge.n	8016d68 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016d44:	7bbb      	ldrb	r3, [r7, #14]
 8016d46:	f003 020f 	and.w	r2, r3, #15
 8016d4a:	6879      	ldr	r1, [r7, #4]
 8016d4c:	4613      	mov	r3, r2
 8016d4e:	009b      	lsls	r3, r3, #2
 8016d50:	4413      	add	r3, r2
 8016d52:	009b      	lsls	r3, r3, #2
 8016d54:	440b      	add	r3, r1
 8016d56:	3324      	adds	r3, #36	; 0x24
 8016d58:	881b      	ldrh	r3, [r3, #0]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d117      	bne.n	8016d8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016d5e:	6839      	ldr	r1, [r7, #0]
 8016d60:	6878      	ldr	r0, [r7, #4]
 8016d62:	f000 fbda 	bl	801751a <USBD_CtlError>
                  break;
 8016d66:	e054      	b.n	8016e12 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016d68:	7bbb      	ldrb	r3, [r7, #14]
 8016d6a:	f003 020f 	and.w	r2, r3, #15
 8016d6e:	6879      	ldr	r1, [r7, #4]
 8016d70:	4613      	mov	r3, r2
 8016d72:	009b      	lsls	r3, r3, #2
 8016d74:	4413      	add	r3, r2
 8016d76:	009b      	lsls	r3, r3, #2
 8016d78:	440b      	add	r3, r1
 8016d7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016d7e:	881b      	ldrh	r3, [r3, #0]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d104      	bne.n	8016d8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016d84:	6839      	ldr	r1, [r7, #0]
 8016d86:	6878      	ldr	r0, [r7, #4]
 8016d88:	f000 fbc7 	bl	801751a <USBD_CtlError>
                  break;
 8016d8c:	e041      	b.n	8016e12 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016d8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	da0b      	bge.n	8016dae <USBD_StdEPReq+0x2b2>
 8016d96:	7bbb      	ldrb	r3, [r7, #14]
 8016d98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016d9c:	4613      	mov	r3, r2
 8016d9e:	009b      	lsls	r3, r3, #2
 8016da0:	4413      	add	r3, r2
 8016da2:	009b      	lsls	r3, r3, #2
 8016da4:	3310      	adds	r3, #16
 8016da6:	687a      	ldr	r2, [r7, #4]
 8016da8:	4413      	add	r3, r2
 8016daa:	3304      	adds	r3, #4
 8016dac:	e00b      	b.n	8016dc6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016dae:	7bbb      	ldrb	r3, [r7, #14]
 8016db0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016db4:	4613      	mov	r3, r2
 8016db6:	009b      	lsls	r3, r3, #2
 8016db8:	4413      	add	r3, r2
 8016dba:	009b      	lsls	r3, r3, #2
 8016dbc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016dc0:	687a      	ldr	r2, [r7, #4]
 8016dc2:	4413      	add	r3, r2
 8016dc4:	3304      	adds	r3, #4
 8016dc6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016dc8:	7bbb      	ldrb	r3, [r7, #14]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d002      	beq.n	8016dd4 <USBD_StdEPReq+0x2d8>
 8016dce:	7bbb      	ldrb	r3, [r7, #14]
 8016dd0:	2b80      	cmp	r3, #128	; 0x80
 8016dd2:	d103      	bne.n	8016ddc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016dd4:	68bb      	ldr	r3, [r7, #8]
 8016dd6:	2200      	movs	r2, #0
 8016dd8:	601a      	str	r2, [r3, #0]
 8016dda:	e00e      	b.n	8016dfa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016ddc:	7bbb      	ldrb	r3, [r7, #14]
 8016dde:	4619      	mov	r1, r3
 8016de0:	6878      	ldr	r0, [r7, #4]
 8016de2:	f006 f96f 	bl	801d0c4 <USBD_LL_IsStallEP>
 8016de6:	4603      	mov	r3, r0
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d003      	beq.n	8016df4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016dec:	68bb      	ldr	r3, [r7, #8]
 8016dee:	2201      	movs	r2, #1
 8016df0:	601a      	str	r2, [r3, #0]
 8016df2:	e002      	b.n	8016dfa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016df4:	68bb      	ldr	r3, [r7, #8]
 8016df6:	2200      	movs	r2, #0
 8016df8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016dfa:	68bb      	ldr	r3, [r7, #8]
 8016dfc:	2202      	movs	r2, #2
 8016dfe:	4619      	mov	r1, r3
 8016e00:	6878      	ldr	r0, [r7, #4]
 8016e02:	f000 fbfb 	bl	80175fc <USBD_CtlSendData>
              break;
 8016e06:	e004      	b.n	8016e12 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016e08:	6839      	ldr	r1, [r7, #0]
 8016e0a:	6878      	ldr	r0, [r7, #4]
 8016e0c:	f000 fb85 	bl	801751a <USBD_CtlError>
              break;
 8016e10:	bf00      	nop
          }
          break;
 8016e12:	e004      	b.n	8016e1e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016e14:	6839      	ldr	r1, [r7, #0]
 8016e16:	6878      	ldr	r0, [r7, #4]
 8016e18:	f000 fb7f 	bl	801751a <USBD_CtlError>
          break;
 8016e1c:	bf00      	nop
      }
      break;
 8016e1e:	e005      	b.n	8016e2c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016e20:	6839      	ldr	r1, [r7, #0]
 8016e22:	6878      	ldr	r0, [r7, #4]
 8016e24:	f000 fb79 	bl	801751a <USBD_CtlError>
      break;
 8016e28:	e000      	b.n	8016e2c <USBD_StdEPReq+0x330>
      break;
 8016e2a:	bf00      	nop
  }

  return ret;
 8016e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e2e:	4618      	mov	r0, r3
 8016e30:	3710      	adds	r7, #16
 8016e32:	46bd      	mov	sp, r7
 8016e34:	bd80      	pop	{r7, pc}
	...

08016e38 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016e38:	b580      	push	{r7, lr}
 8016e3a:	b084      	sub	sp, #16
 8016e3c:	af00      	add	r7, sp, #0
 8016e3e:	6078      	str	r0, [r7, #4]
 8016e40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016e42:	2300      	movs	r3, #0
 8016e44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016e46:	2300      	movs	r3, #0
 8016e48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016e4e:	683b      	ldr	r3, [r7, #0]
 8016e50:	885b      	ldrh	r3, [r3, #2]
 8016e52:	0a1b      	lsrs	r3, r3, #8
 8016e54:	b29b      	uxth	r3, r3
 8016e56:	3b01      	subs	r3, #1
 8016e58:	2b0e      	cmp	r3, #14
 8016e5a:	f200 8152 	bhi.w	8017102 <USBD_GetDescriptor+0x2ca>
 8016e5e:	a201      	add	r2, pc, #4	; (adr r2, 8016e64 <USBD_GetDescriptor+0x2c>)
 8016e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e64:	08016ed5 	.word	0x08016ed5
 8016e68:	08016eed 	.word	0x08016eed
 8016e6c:	08016f2d 	.word	0x08016f2d
 8016e70:	08017103 	.word	0x08017103
 8016e74:	08017103 	.word	0x08017103
 8016e78:	080170a3 	.word	0x080170a3
 8016e7c:	080170cf 	.word	0x080170cf
 8016e80:	08017103 	.word	0x08017103
 8016e84:	08017103 	.word	0x08017103
 8016e88:	08017103 	.word	0x08017103
 8016e8c:	08017103 	.word	0x08017103
 8016e90:	08017103 	.word	0x08017103
 8016e94:	08017103 	.word	0x08017103
 8016e98:	08017103 	.word	0x08017103
 8016e9c:	08016ea1 	.word	0x08016ea1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016ea6:	69db      	ldr	r3, [r3, #28]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d00b      	beq.n	8016ec4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016eb2:	69db      	ldr	r3, [r3, #28]
 8016eb4:	687a      	ldr	r2, [r7, #4]
 8016eb6:	7c12      	ldrb	r2, [r2, #16]
 8016eb8:	f107 0108 	add.w	r1, r7, #8
 8016ebc:	4610      	mov	r0, r2
 8016ebe:	4798      	blx	r3
 8016ec0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016ec2:	e126      	b.n	8017112 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8016ec4:	6839      	ldr	r1, [r7, #0]
 8016ec6:	6878      	ldr	r0, [r7, #4]
 8016ec8:	f000 fb27 	bl	801751a <USBD_CtlError>
        err++;
 8016ecc:	7afb      	ldrb	r3, [r7, #11]
 8016ece:	3301      	adds	r3, #1
 8016ed0:	72fb      	strb	r3, [r7, #11]
      break;
 8016ed2:	e11e      	b.n	8017112 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	687a      	ldr	r2, [r7, #4]
 8016ede:	7c12      	ldrb	r2, [r2, #16]
 8016ee0:	f107 0108 	add.w	r1, r7, #8
 8016ee4:	4610      	mov	r0, r2
 8016ee6:	4798      	blx	r3
 8016ee8:	60f8      	str	r0, [r7, #12]
      break;
 8016eea:	e112      	b.n	8017112 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	7c1b      	ldrb	r3, [r3, #16]
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d10d      	bne.n	8016f10 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016efc:	f107 0208 	add.w	r2, r7, #8
 8016f00:	4610      	mov	r0, r2
 8016f02:	4798      	blx	r3
 8016f04:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	3301      	adds	r3, #1
 8016f0a:	2202      	movs	r2, #2
 8016f0c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016f0e:	e100      	b.n	8017112 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f18:	f107 0208 	add.w	r2, r7, #8
 8016f1c:	4610      	mov	r0, r2
 8016f1e:	4798      	blx	r3
 8016f20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	3301      	adds	r3, #1
 8016f26:	2202      	movs	r2, #2
 8016f28:	701a      	strb	r2, [r3, #0]
      break;
 8016f2a:	e0f2      	b.n	8017112 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016f2c:	683b      	ldr	r3, [r7, #0]
 8016f2e:	885b      	ldrh	r3, [r3, #2]
 8016f30:	b2db      	uxtb	r3, r3
 8016f32:	2b05      	cmp	r3, #5
 8016f34:	f200 80ac 	bhi.w	8017090 <USBD_GetDescriptor+0x258>
 8016f38:	a201      	add	r2, pc, #4	; (adr r2, 8016f40 <USBD_GetDescriptor+0x108>)
 8016f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f3e:	bf00      	nop
 8016f40:	08016f59 	.word	0x08016f59
 8016f44:	08016f8d 	.word	0x08016f8d
 8016f48:	08016fc1 	.word	0x08016fc1
 8016f4c:	08016ff5 	.word	0x08016ff5
 8016f50:	08017029 	.word	0x08017029
 8016f54:	0801705d 	.word	0x0801705d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016f5e:	685b      	ldr	r3, [r3, #4]
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d00b      	beq.n	8016f7c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016f6a:	685b      	ldr	r3, [r3, #4]
 8016f6c:	687a      	ldr	r2, [r7, #4]
 8016f6e:	7c12      	ldrb	r2, [r2, #16]
 8016f70:	f107 0108 	add.w	r1, r7, #8
 8016f74:	4610      	mov	r0, r2
 8016f76:	4798      	blx	r3
 8016f78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016f7a:	e091      	b.n	80170a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016f7c:	6839      	ldr	r1, [r7, #0]
 8016f7e:	6878      	ldr	r0, [r7, #4]
 8016f80:	f000 facb 	bl	801751a <USBD_CtlError>
            err++;
 8016f84:	7afb      	ldrb	r3, [r7, #11]
 8016f86:	3301      	adds	r3, #1
 8016f88:	72fb      	strb	r3, [r7, #11]
          break;
 8016f8a:	e089      	b.n	80170a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016f92:	689b      	ldr	r3, [r3, #8]
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d00b      	beq.n	8016fb0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016f9e:	689b      	ldr	r3, [r3, #8]
 8016fa0:	687a      	ldr	r2, [r7, #4]
 8016fa2:	7c12      	ldrb	r2, [r2, #16]
 8016fa4:	f107 0108 	add.w	r1, r7, #8
 8016fa8:	4610      	mov	r0, r2
 8016faa:	4798      	blx	r3
 8016fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016fae:	e077      	b.n	80170a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016fb0:	6839      	ldr	r1, [r7, #0]
 8016fb2:	6878      	ldr	r0, [r7, #4]
 8016fb4:	f000 fab1 	bl	801751a <USBD_CtlError>
            err++;
 8016fb8:	7afb      	ldrb	r3, [r7, #11]
 8016fba:	3301      	adds	r3, #1
 8016fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8016fbe:	e06f      	b.n	80170a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016fc6:	68db      	ldr	r3, [r3, #12]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d00b      	beq.n	8016fe4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016fd2:	68db      	ldr	r3, [r3, #12]
 8016fd4:	687a      	ldr	r2, [r7, #4]
 8016fd6:	7c12      	ldrb	r2, [r2, #16]
 8016fd8:	f107 0108 	add.w	r1, r7, #8
 8016fdc:	4610      	mov	r0, r2
 8016fde:	4798      	blx	r3
 8016fe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016fe2:	e05d      	b.n	80170a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016fe4:	6839      	ldr	r1, [r7, #0]
 8016fe6:	6878      	ldr	r0, [r7, #4]
 8016fe8:	f000 fa97 	bl	801751a <USBD_CtlError>
            err++;
 8016fec:	7afb      	ldrb	r3, [r7, #11]
 8016fee:	3301      	adds	r3, #1
 8016ff0:	72fb      	strb	r3, [r7, #11]
          break;
 8016ff2:	e055      	b.n	80170a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016ffa:	691b      	ldr	r3, [r3, #16]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d00b      	beq.n	8017018 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017006:	691b      	ldr	r3, [r3, #16]
 8017008:	687a      	ldr	r2, [r7, #4]
 801700a:	7c12      	ldrb	r2, [r2, #16]
 801700c:	f107 0108 	add.w	r1, r7, #8
 8017010:	4610      	mov	r0, r2
 8017012:	4798      	blx	r3
 8017014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017016:	e043      	b.n	80170a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017018:	6839      	ldr	r1, [r7, #0]
 801701a:	6878      	ldr	r0, [r7, #4]
 801701c:	f000 fa7d 	bl	801751a <USBD_CtlError>
            err++;
 8017020:	7afb      	ldrb	r3, [r7, #11]
 8017022:	3301      	adds	r3, #1
 8017024:	72fb      	strb	r3, [r7, #11]
          break;
 8017026:	e03b      	b.n	80170a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801702e:	695b      	ldr	r3, [r3, #20]
 8017030:	2b00      	cmp	r3, #0
 8017032:	d00b      	beq.n	801704c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801703a:	695b      	ldr	r3, [r3, #20]
 801703c:	687a      	ldr	r2, [r7, #4]
 801703e:	7c12      	ldrb	r2, [r2, #16]
 8017040:	f107 0108 	add.w	r1, r7, #8
 8017044:	4610      	mov	r0, r2
 8017046:	4798      	blx	r3
 8017048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801704a:	e029      	b.n	80170a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801704c:	6839      	ldr	r1, [r7, #0]
 801704e:	6878      	ldr	r0, [r7, #4]
 8017050:	f000 fa63 	bl	801751a <USBD_CtlError>
            err++;
 8017054:	7afb      	ldrb	r3, [r7, #11]
 8017056:	3301      	adds	r3, #1
 8017058:	72fb      	strb	r3, [r7, #11]
          break;
 801705a:	e021      	b.n	80170a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017062:	699b      	ldr	r3, [r3, #24]
 8017064:	2b00      	cmp	r3, #0
 8017066:	d00b      	beq.n	8017080 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801706e:	699b      	ldr	r3, [r3, #24]
 8017070:	687a      	ldr	r2, [r7, #4]
 8017072:	7c12      	ldrb	r2, [r2, #16]
 8017074:	f107 0108 	add.w	r1, r7, #8
 8017078:	4610      	mov	r0, r2
 801707a:	4798      	blx	r3
 801707c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801707e:	e00f      	b.n	80170a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017080:	6839      	ldr	r1, [r7, #0]
 8017082:	6878      	ldr	r0, [r7, #4]
 8017084:	f000 fa49 	bl	801751a <USBD_CtlError>
            err++;
 8017088:	7afb      	ldrb	r3, [r7, #11]
 801708a:	3301      	adds	r3, #1
 801708c:	72fb      	strb	r3, [r7, #11]
          break;
 801708e:	e007      	b.n	80170a0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017090:	6839      	ldr	r1, [r7, #0]
 8017092:	6878      	ldr	r0, [r7, #4]
 8017094:	f000 fa41 	bl	801751a <USBD_CtlError>
          err++;
 8017098:	7afb      	ldrb	r3, [r7, #11]
 801709a:	3301      	adds	r3, #1
 801709c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801709e:	bf00      	nop
      }
      break;
 80170a0:	e037      	b.n	8017112 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	7c1b      	ldrb	r3, [r3, #16]
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d109      	bne.n	80170be <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80170b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80170b2:	f107 0208 	add.w	r2, r7, #8
 80170b6:	4610      	mov	r0, r2
 80170b8:	4798      	blx	r3
 80170ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80170bc:	e029      	b.n	8017112 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80170be:	6839      	ldr	r1, [r7, #0]
 80170c0:	6878      	ldr	r0, [r7, #4]
 80170c2:	f000 fa2a 	bl	801751a <USBD_CtlError>
        err++;
 80170c6:	7afb      	ldrb	r3, [r7, #11]
 80170c8:	3301      	adds	r3, #1
 80170ca:	72fb      	strb	r3, [r7, #11]
      break;
 80170cc:	e021      	b.n	8017112 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	7c1b      	ldrb	r3, [r3, #16]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d10d      	bne.n	80170f2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80170dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170de:	f107 0208 	add.w	r2, r7, #8
 80170e2:	4610      	mov	r0, r2
 80170e4:	4798      	blx	r3
 80170e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	3301      	adds	r3, #1
 80170ec:	2207      	movs	r2, #7
 80170ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80170f0:	e00f      	b.n	8017112 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80170f2:	6839      	ldr	r1, [r7, #0]
 80170f4:	6878      	ldr	r0, [r7, #4]
 80170f6:	f000 fa10 	bl	801751a <USBD_CtlError>
        err++;
 80170fa:	7afb      	ldrb	r3, [r7, #11]
 80170fc:	3301      	adds	r3, #1
 80170fe:	72fb      	strb	r3, [r7, #11]
      break;
 8017100:	e007      	b.n	8017112 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8017102:	6839      	ldr	r1, [r7, #0]
 8017104:	6878      	ldr	r0, [r7, #4]
 8017106:	f000 fa08 	bl	801751a <USBD_CtlError>
      err++;
 801710a:	7afb      	ldrb	r3, [r7, #11]
 801710c:	3301      	adds	r3, #1
 801710e:	72fb      	strb	r3, [r7, #11]
      break;
 8017110:	bf00      	nop
  }

  if (err != 0U)
 8017112:	7afb      	ldrb	r3, [r7, #11]
 8017114:	2b00      	cmp	r3, #0
 8017116:	d11e      	bne.n	8017156 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8017118:	683b      	ldr	r3, [r7, #0]
 801711a:	88db      	ldrh	r3, [r3, #6]
 801711c:	2b00      	cmp	r3, #0
 801711e:	d016      	beq.n	801714e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8017120:	893b      	ldrh	r3, [r7, #8]
 8017122:	2b00      	cmp	r3, #0
 8017124:	d00e      	beq.n	8017144 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8017126:	683b      	ldr	r3, [r7, #0]
 8017128:	88da      	ldrh	r2, [r3, #6]
 801712a:	893b      	ldrh	r3, [r7, #8]
 801712c:	4293      	cmp	r3, r2
 801712e:	bf28      	it	cs
 8017130:	4613      	movcs	r3, r2
 8017132:	b29b      	uxth	r3, r3
 8017134:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8017136:	893b      	ldrh	r3, [r7, #8]
 8017138:	461a      	mov	r2, r3
 801713a:	68f9      	ldr	r1, [r7, #12]
 801713c:	6878      	ldr	r0, [r7, #4]
 801713e:	f000 fa5d 	bl	80175fc <USBD_CtlSendData>
 8017142:	e009      	b.n	8017158 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8017144:	6839      	ldr	r1, [r7, #0]
 8017146:	6878      	ldr	r0, [r7, #4]
 8017148:	f000 f9e7 	bl	801751a <USBD_CtlError>
 801714c:	e004      	b.n	8017158 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801714e:	6878      	ldr	r0, [r7, #4]
 8017150:	f000 faae 	bl	80176b0 <USBD_CtlSendStatus>
 8017154:	e000      	b.n	8017158 <USBD_GetDescriptor+0x320>
    return;
 8017156:	bf00      	nop
  }
}
 8017158:	3710      	adds	r7, #16
 801715a:	46bd      	mov	sp, r7
 801715c:	bd80      	pop	{r7, pc}
 801715e:	bf00      	nop

08017160 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017160:	b580      	push	{r7, lr}
 8017162:	b084      	sub	sp, #16
 8017164:	af00      	add	r7, sp, #0
 8017166:	6078      	str	r0, [r7, #4]
 8017168:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801716a:	683b      	ldr	r3, [r7, #0]
 801716c:	889b      	ldrh	r3, [r3, #4]
 801716e:	2b00      	cmp	r3, #0
 8017170:	d131      	bne.n	80171d6 <USBD_SetAddress+0x76>
 8017172:	683b      	ldr	r3, [r7, #0]
 8017174:	88db      	ldrh	r3, [r3, #6]
 8017176:	2b00      	cmp	r3, #0
 8017178:	d12d      	bne.n	80171d6 <USBD_SetAddress+0x76>
 801717a:	683b      	ldr	r3, [r7, #0]
 801717c:	885b      	ldrh	r3, [r3, #2]
 801717e:	2b7f      	cmp	r3, #127	; 0x7f
 8017180:	d829      	bhi.n	80171d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8017182:	683b      	ldr	r3, [r7, #0]
 8017184:	885b      	ldrh	r3, [r3, #2]
 8017186:	b2db      	uxtb	r3, r3
 8017188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801718c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017194:	b2db      	uxtb	r3, r3
 8017196:	2b03      	cmp	r3, #3
 8017198:	d104      	bne.n	80171a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801719a:	6839      	ldr	r1, [r7, #0]
 801719c:	6878      	ldr	r0, [r7, #4]
 801719e:	f000 f9bc 	bl	801751a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80171a2:	e01d      	b.n	80171e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	7bfa      	ldrb	r2, [r7, #15]
 80171a8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80171ac:	7bfb      	ldrb	r3, [r7, #15]
 80171ae:	4619      	mov	r1, r3
 80171b0:	6878      	ldr	r0, [r7, #4]
 80171b2:	f005 ffb3 	bl	801d11c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80171b6:	6878      	ldr	r0, [r7, #4]
 80171b8:	f000 fa7a 	bl	80176b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80171bc:	7bfb      	ldrb	r3, [r7, #15]
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d004      	beq.n	80171cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	2202      	movs	r2, #2
 80171c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80171ca:	e009      	b.n	80171e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	2201      	movs	r2, #1
 80171d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80171d4:	e004      	b.n	80171e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80171d6:	6839      	ldr	r1, [r7, #0]
 80171d8:	6878      	ldr	r0, [r7, #4]
 80171da:	f000 f99e 	bl	801751a <USBD_CtlError>
  }
}
 80171de:	bf00      	nop
 80171e0:	bf00      	nop
 80171e2:	3710      	adds	r7, #16
 80171e4:	46bd      	mov	sp, r7
 80171e6:	bd80      	pop	{r7, pc}

080171e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80171e8:	b580      	push	{r7, lr}
 80171ea:	b084      	sub	sp, #16
 80171ec:	af00      	add	r7, sp, #0
 80171ee:	6078      	str	r0, [r7, #4]
 80171f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80171f2:	2300      	movs	r3, #0
 80171f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80171f6:	683b      	ldr	r3, [r7, #0]
 80171f8:	885b      	ldrh	r3, [r3, #2]
 80171fa:	b2da      	uxtb	r2, r3
 80171fc:	4b4e      	ldr	r3, [pc, #312]	; (8017338 <USBD_SetConfig+0x150>)
 80171fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017200:	4b4d      	ldr	r3, [pc, #308]	; (8017338 <USBD_SetConfig+0x150>)
 8017202:	781b      	ldrb	r3, [r3, #0]
 8017204:	2b01      	cmp	r3, #1
 8017206:	d905      	bls.n	8017214 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8017208:	6839      	ldr	r1, [r7, #0]
 801720a:	6878      	ldr	r0, [r7, #4]
 801720c:	f000 f985 	bl	801751a <USBD_CtlError>
    return USBD_FAIL;
 8017210:	2303      	movs	r3, #3
 8017212:	e08c      	b.n	801732e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801721a:	b2db      	uxtb	r3, r3
 801721c:	2b02      	cmp	r3, #2
 801721e:	d002      	beq.n	8017226 <USBD_SetConfig+0x3e>
 8017220:	2b03      	cmp	r3, #3
 8017222:	d029      	beq.n	8017278 <USBD_SetConfig+0x90>
 8017224:	e075      	b.n	8017312 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8017226:	4b44      	ldr	r3, [pc, #272]	; (8017338 <USBD_SetConfig+0x150>)
 8017228:	781b      	ldrb	r3, [r3, #0]
 801722a:	2b00      	cmp	r3, #0
 801722c:	d020      	beq.n	8017270 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801722e:	4b42      	ldr	r3, [pc, #264]	; (8017338 <USBD_SetConfig+0x150>)
 8017230:	781b      	ldrb	r3, [r3, #0]
 8017232:	461a      	mov	r2, r3
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017238:	4b3f      	ldr	r3, [pc, #252]	; (8017338 <USBD_SetConfig+0x150>)
 801723a:	781b      	ldrb	r3, [r3, #0]
 801723c:	4619      	mov	r1, r3
 801723e:	6878      	ldr	r0, [r7, #4]
 8017240:	f7fe ffbd 	bl	80161be <USBD_SetClassConfig>
 8017244:	4603      	mov	r3, r0
 8017246:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017248:	7bfb      	ldrb	r3, [r7, #15]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d008      	beq.n	8017260 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801724e:	6839      	ldr	r1, [r7, #0]
 8017250:	6878      	ldr	r0, [r7, #4]
 8017252:	f000 f962 	bl	801751a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	2202      	movs	r2, #2
 801725a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801725e:	e065      	b.n	801732c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017260:	6878      	ldr	r0, [r7, #4]
 8017262:	f000 fa25 	bl	80176b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	2203      	movs	r2, #3
 801726a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801726e:	e05d      	b.n	801732c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017270:	6878      	ldr	r0, [r7, #4]
 8017272:	f000 fa1d 	bl	80176b0 <USBD_CtlSendStatus>
      break;
 8017276:	e059      	b.n	801732c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017278:	4b2f      	ldr	r3, [pc, #188]	; (8017338 <USBD_SetConfig+0x150>)
 801727a:	781b      	ldrb	r3, [r3, #0]
 801727c:	2b00      	cmp	r3, #0
 801727e:	d112      	bne.n	80172a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	2202      	movs	r2, #2
 8017284:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8017288:	4b2b      	ldr	r3, [pc, #172]	; (8017338 <USBD_SetConfig+0x150>)
 801728a:	781b      	ldrb	r3, [r3, #0]
 801728c:	461a      	mov	r2, r3
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017292:	4b29      	ldr	r3, [pc, #164]	; (8017338 <USBD_SetConfig+0x150>)
 8017294:	781b      	ldrb	r3, [r3, #0]
 8017296:	4619      	mov	r1, r3
 8017298:	6878      	ldr	r0, [r7, #4]
 801729a:	f7fe ffac 	bl	80161f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801729e:	6878      	ldr	r0, [r7, #4]
 80172a0:	f000 fa06 	bl	80176b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80172a4:	e042      	b.n	801732c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80172a6:	4b24      	ldr	r3, [pc, #144]	; (8017338 <USBD_SetConfig+0x150>)
 80172a8:	781b      	ldrb	r3, [r3, #0]
 80172aa:	461a      	mov	r2, r3
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	685b      	ldr	r3, [r3, #4]
 80172b0:	429a      	cmp	r2, r3
 80172b2:	d02a      	beq.n	801730a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	685b      	ldr	r3, [r3, #4]
 80172b8:	b2db      	uxtb	r3, r3
 80172ba:	4619      	mov	r1, r3
 80172bc:	6878      	ldr	r0, [r7, #4]
 80172be:	f7fe ff9a 	bl	80161f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80172c2:	4b1d      	ldr	r3, [pc, #116]	; (8017338 <USBD_SetConfig+0x150>)
 80172c4:	781b      	ldrb	r3, [r3, #0]
 80172c6:	461a      	mov	r2, r3
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80172cc:	4b1a      	ldr	r3, [pc, #104]	; (8017338 <USBD_SetConfig+0x150>)
 80172ce:	781b      	ldrb	r3, [r3, #0]
 80172d0:	4619      	mov	r1, r3
 80172d2:	6878      	ldr	r0, [r7, #4]
 80172d4:	f7fe ff73 	bl	80161be <USBD_SetClassConfig>
 80172d8:	4603      	mov	r3, r0
 80172da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80172dc:	7bfb      	ldrb	r3, [r7, #15]
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d00f      	beq.n	8017302 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80172e2:	6839      	ldr	r1, [r7, #0]
 80172e4:	6878      	ldr	r0, [r7, #4]
 80172e6:	f000 f918 	bl	801751a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	685b      	ldr	r3, [r3, #4]
 80172ee:	b2db      	uxtb	r3, r3
 80172f0:	4619      	mov	r1, r3
 80172f2:	6878      	ldr	r0, [r7, #4]
 80172f4:	f7fe ff7f 	bl	80161f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	2202      	movs	r2, #2
 80172fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8017300:	e014      	b.n	801732c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017302:	6878      	ldr	r0, [r7, #4]
 8017304:	f000 f9d4 	bl	80176b0 <USBD_CtlSendStatus>
      break;
 8017308:	e010      	b.n	801732c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801730a:	6878      	ldr	r0, [r7, #4]
 801730c:	f000 f9d0 	bl	80176b0 <USBD_CtlSendStatus>
      break;
 8017310:	e00c      	b.n	801732c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8017312:	6839      	ldr	r1, [r7, #0]
 8017314:	6878      	ldr	r0, [r7, #4]
 8017316:	f000 f900 	bl	801751a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801731a:	4b07      	ldr	r3, [pc, #28]	; (8017338 <USBD_SetConfig+0x150>)
 801731c:	781b      	ldrb	r3, [r3, #0]
 801731e:	4619      	mov	r1, r3
 8017320:	6878      	ldr	r0, [r7, #4]
 8017322:	f7fe ff68 	bl	80161f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8017326:	2303      	movs	r3, #3
 8017328:	73fb      	strb	r3, [r7, #15]
      break;
 801732a:	bf00      	nop
  }

  return ret;
 801732c:	7bfb      	ldrb	r3, [r7, #15]
}
 801732e:	4618      	mov	r0, r3
 8017330:	3710      	adds	r7, #16
 8017332:	46bd      	mov	sp, r7
 8017334:	bd80      	pop	{r7, pc}
 8017336:	bf00      	nop
 8017338:	20041e1c 	.word	0x20041e1c

0801733c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801733c:	b580      	push	{r7, lr}
 801733e:	b082      	sub	sp, #8
 8017340:	af00      	add	r7, sp, #0
 8017342:	6078      	str	r0, [r7, #4]
 8017344:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017346:	683b      	ldr	r3, [r7, #0]
 8017348:	88db      	ldrh	r3, [r3, #6]
 801734a:	2b01      	cmp	r3, #1
 801734c:	d004      	beq.n	8017358 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801734e:	6839      	ldr	r1, [r7, #0]
 8017350:	6878      	ldr	r0, [r7, #4]
 8017352:	f000 f8e2 	bl	801751a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017356:	e023      	b.n	80173a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801735e:	b2db      	uxtb	r3, r3
 8017360:	2b02      	cmp	r3, #2
 8017362:	dc02      	bgt.n	801736a <USBD_GetConfig+0x2e>
 8017364:	2b00      	cmp	r3, #0
 8017366:	dc03      	bgt.n	8017370 <USBD_GetConfig+0x34>
 8017368:	e015      	b.n	8017396 <USBD_GetConfig+0x5a>
 801736a:	2b03      	cmp	r3, #3
 801736c:	d00b      	beq.n	8017386 <USBD_GetConfig+0x4a>
 801736e:	e012      	b.n	8017396 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	2200      	movs	r2, #0
 8017374:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	3308      	adds	r3, #8
 801737a:	2201      	movs	r2, #1
 801737c:	4619      	mov	r1, r3
 801737e:	6878      	ldr	r0, [r7, #4]
 8017380:	f000 f93c 	bl	80175fc <USBD_CtlSendData>
        break;
 8017384:	e00c      	b.n	80173a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	3304      	adds	r3, #4
 801738a:	2201      	movs	r2, #1
 801738c:	4619      	mov	r1, r3
 801738e:	6878      	ldr	r0, [r7, #4]
 8017390:	f000 f934 	bl	80175fc <USBD_CtlSendData>
        break;
 8017394:	e004      	b.n	80173a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017396:	6839      	ldr	r1, [r7, #0]
 8017398:	6878      	ldr	r0, [r7, #4]
 801739a:	f000 f8be 	bl	801751a <USBD_CtlError>
        break;
 801739e:	bf00      	nop
}
 80173a0:	bf00      	nop
 80173a2:	3708      	adds	r7, #8
 80173a4:	46bd      	mov	sp, r7
 80173a6:	bd80      	pop	{r7, pc}

080173a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b082      	sub	sp, #8
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	6078      	str	r0, [r7, #4]
 80173b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80173b8:	b2db      	uxtb	r3, r3
 80173ba:	3b01      	subs	r3, #1
 80173bc:	2b02      	cmp	r3, #2
 80173be:	d81e      	bhi.n	80173fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80173c0:	683b      	ldr	r3, [r7, #0]
 80173c2:	88db      	ldrh	r3, [r3, #6]
 80173c4:	2b02      	cmp	r3, #2
 80173c6:	d004      	beq.n	80173d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80173c8:	6839      	ldr	r1, [r7, #0]
 80173ca:	6878      	ldr	r0, [r7, #4]
 80173cc:	f000 f8a5 	bl	801751a <USBD_CtlError>
        break;
 80173d0:	e01a      	b.n	8017408 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	2201      	movs	r2, #1
 80173d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d005      	beq.n	80173ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	68db      	ldr	r3, [r3, #12]
 80173e6:	f043 0202 	orr.w	r2, r3, #2
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	330c      	adds	r3, #12
 80173f2:	2202      	movs	r2, #2
 80173f4:	4619      	mov	r1, r3
 80173f6:	6878      	ldr	r0, [r7, #4]
 80173f8:	f000 f900 	bl	80175fc <USBD_CtlSendData>
      break;
 80173fc:	e004      	b.n	8017408 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80173fe:	6839      	ldr	r1, [r7, #0]
 8017400:	6878      	ldr	r0, [r7, #4]
 8017402:	f000 f88a 	bl	801751a <USBD_CtlError>
      break;
 8017406:	bf00      	nop
  }
}
 8017408:	bf00      	nop
 801740a:	3708      	adds	r7, #8
 801740c:	46bd      	mov	sp, r7
 801740e:	bd80      	pop	{r7, pc}

08017410 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017410:	b580      	push	{r7, lr}
 8017412:	b082      	sub	sp, #8
 8017414:	af00      	add	r7, sp, #0
 8017416:	6078      	str	r0, [r7, #4]
 8017418:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801741a:	683b      	ldr	r3, [r7, #0]
 801741c:	885b      	ldrh	r3, [r3, #2]
 801741e:	2b01      	cmp	r3, #1
 8017420:	d107      	bne.n	8017432 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	2201      	movs	r2, #1
 8017426:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801742a:	6878      	ldr	r0, [r7, #4]
 801742c:	f000 f940 	bl	80176b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8017430:	e013      	b.n	801745a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8017432:	683b      	ldr	r3, [r7, #0]
 8017434:	885b      	ldrh	r3, [r3, #2]
 8017436:	2b02      	cmp	r3, #2
 8017438:	d10b      	bne.n	8017452 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801743a:	683b      	ldr	r3, [r7, #0]
 801743c:	889b      	ldrh	r3, [r3, #4]
 801743e:	0a1b      	lsrs	r3, r3, #8
 8017440:	b29b      	uxth	r3, r3
 8017442:	b2da      	uxtb	r2, r3
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801744a:	6878      	ldr	r0, [r7, #4]
 801744c:	f000 f930 	bl	80176b0 <USBD_CtlSendStatus>
}
 8017450:	e003      	b.n	801745a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8017452:	6839      	ldr	r1, [r7, #0]
 8017454:	6878      	ldr	r0, [r7, #4]
 8017456:	f000 f860 	bl	801751a <USBD_CtlError>
}
 801745a:	bf00      	nop
 801745c:	3708      	adds	r7, #8
 801745e:	46bd      	mov	sp, r7
 8017460:	bd80      	pop	{r7, pc}

08017462 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017462:	b580      	push	{r7, lr}
 8017464:	b082      	sub	sp, #8
 8017466:	af00      	add	r7, sp, #0
 8017468:	6078      	str	r0, [r7, #4]
 801746a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017472:	b2db      	uxtb	r3, r3
 8017474:	3b01      	subs	r3, #1
 8017476:	2b02      	cmp	r3, #2
 8017478:	d80b      	bhi.n	8017492 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801747a:	683b      	ldr	r3, [r7, #0]
 801747c:	885b      	ldrh	r3, [r3, #2]
 801747e:	2b01      	cmp	r3, #1
 8017480:	d10c      	bne.n	801749c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	2200      	movs	r2, #0
 8017486:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801748a:	6878      	ldr	r0, [r7, #4]
 801748c:	f000 f910 	bl	80176b0 <USBD_CtlSendStatus>
      }
      break;
 8017490:	e004      	b.n	801749c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017492:	6839      	ldr	r1, [r7, #0]
 8017494:	6878      	ldr	r0, [r7, #4]
 8017496:	f000 f840 	bl	801751a <USBD_CtlError>
      break;
 801749a:	e000      	b.n	801749e <USBD_ClrFeature+0x3c>
      break;
 801749c:	bf00      	nop
  }
}
 801749e:	bf00      	nop
 80174a0:	3708      	adds	r7, #8
 80174a2:	46bd      	mov	sp, r7
 80174a4:	bd80      	pop	{r7, pc}

080174a6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80174a6:	b580      	push	{r7, lr}
 80174a8:	b084      	sub	sp, #16
 80174aa:	af00      	add	r7, sp, #0
 80174ac:	6078      	str	r0, [r7, #4]
 80174ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80174b0:	683b      	ldr	r3, [r7, #0]
 80174b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	781a      	ldrb	r2, [r3, #0]
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	3301      	adds	r3, #1
 80174c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	781a      	ldrb	r2, [r3, #0]
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80174ca:	68fb      	ldr	r3, [r7, #12]
 80174cc:	3301      	adds	r3, #1
 80174ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80174d0:	68f8      	ldr	r0, [r7, #12]
 80174d2:	f7ff fa17 	bl	8016904 <SWAPBYTE>
 80174d6:	4603      	mov	r3, r0
 80174d8:	461a      	mov	r2, r3
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80174de:	68fb      	ldr	r3, [r7, #12]
 80174e0:	3301      	adds	r3, #1
 80174e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80174e4:	68fb      	ldr	r3, [r7, #12]
 80174e6:	3301      	adds	r3, #1
 80174e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80174ea:	68f8      	ldr	r0, [r7, #12]
 80174ec:	f7ff fa0a 	bl	8016904 <SWAPBYTE>
 80174f0:	4603      	mov	r3, r0
 80174f2:	461a      	mov	r2, r3
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	3301      	adds	r3, #1
 80174fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	3301      	adds	r3, #1
 8017502:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017504:	68f8      	ldr	r0, [r7, #12]
 8017506:	f7ff f9fd 	bl	8016904 <SWAPBYTE>
 801750a:	4603      	mov	r3, r0
 801750c:	461a      	mov	r2, r3
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	80da      	strh	r2, [r3, #6]
}
 8017512:	bf00      	nop
 8017514:	3710      	adds	r7, #16
 8017516:	46bd      	mov	sp, r7
 8017518:	bd80      	pop	{r7, pc}

0801751a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801751a:	b580      	push	{r7, lr}
 801751c:	b082      	sub	sp, #8
 801751e:	af00      	add	r7, sp, #0
 8017520:	6078      	str	r0, [r7, #4]
 8017522:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8017524:	2180      	movs	r1, #128	; 0x80
 8017526:	6878      	ldr	r0, [r7, #4]
 8017528:	f005 fd8e 	bl	801d048 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801752c:	2100      	movs	r1, #0
 801752e:	6878      	ldr	r0, [r7, #4]
 8017530:	f005 fd8a 	bl	801d048 <USBD_LL_StallEP>
}
 8017534:	bf00      	nop
 8017536:	3708      	adds	r7, #8
 8017538:	46bd      	mov	sp, r7
 801753a:	bd80      	pop	{r7, pc}

0801753c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801753c:	b580      	push	{r7, lr}
 801753e:	b086      	sub	sp, #24
 8017540:	af00      	add	r7, sp, #0
 8017542:	60f8      	str	r0, [r7, #12]
 8017544:	60b9      	str	r1, [r7, #8]
 8017546:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017548:	2300      	movs	r3, #0
 801754a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d036      	beq.n	80175c0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8017556:	6938      	ldr	r0, [r7, #16]
 8017558:	f000 f836 	bl	80175c8 <USBD_GetLen>
 801755c:	4603      	mov	r3, r0
 801755e:	3301      	adds	r3, #1
 8017560:	b29b      	uxth	r3, r3
 8017562:	005b      	lsls	r3, r3, #1
 8017564:	b29a      	uxth	r2, r3
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801756a:	7dfb      	ldrb	r3, [r7, #23]
 801756c:	68ba      	ldr	r2, [r7, #8]
 801756e:	4413      	add	r3, r2
 8017570:	687a      	ldr	r2, [r7, #4]
 8017572:	7812      	ldrb	r2, [r2, #0]
 8017574:	701a      	strb	r2, [r3, #0]
  idx++;
 8017576:	7dfb      	ldrb	r3, [r7, #23]
 8017578:	3301      	adds	r3, #1
 801757a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801757c:	7dfb      	ldrb	r3, [r7, #23]
 801757e:	68ba      	ldr	r2, [r7, #8]
 8017580:	4413      	add	r3, r2
 8017582:	2203      	movs	r2, #3
 8017584:	701a      	strb	r2, [r3, #0]
  idx++;
 8017586:	7dfb      	ldrb	r3, [r7, #23]
 8017588:	3301      	adds	r3, #1
 801758a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801758c:	e013      	b.n	80175b6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801758e:	7dfb      	ldrb	r3, [r7, #23]
 8017590:	68ba      	ldr	r2, [r7, #8]
 8017592:	4413      	add	r3, r2
 8017594:	693a      	ldr	r2, [r7, #16]
 8017596:	7812      	ldrb	r2, [r2, #0]
 8017598:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801759a:	693b      	ldr	r3, [r7, #16]
 801759c:	3301      	adds	r3, #1
 801759e:	613b      	str	r3, [r7, #16]
    idx++;
 80175a0:	7dfb      	ldrb	r3, [r7, #23]
 80175a2:	3301      	adds	r3, #1
 80175a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80175a6:	7dfb      	ldrb	r3, [r7, #23]
 80175a8:	68ba      	ldr	r2, [r7, #8]
 80175aa:	4413      	add	r3, r2
 80175ac:	2200      	movs	r2, #0
 80175ae:	701a      	strb	r2, [r3, #0]
    idx++;
 80175b0:	7dfb      	ldrb	r3, [r7, #23]
 80175b2:	3301      	adds	r3, #1
 80175b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80175b6:	693b      	ldr	r3, [r7, #16]
 80175b8:	781b      	ldrb	r3, [r3, #0]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d1e7      	bne.n	801758e <USBD_GetString+0x52>
 80175be:	e000      	b.n	80175c2 <USBD_GetString+0x86>
    return;
 80175c0:	bf00      	nop
  }
}
 80175c2:	3718      	adds	r7, #24
 80175c4:	46bd      	mov	sp, r7
 80175c6:	bd80      	pop	{r7, pc}

080175c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80175c8:	b480      	push	{r7}
 80175ca:	b085      	sub	sp, #20
 80175cc:	af00      	add	r7, sp, #0
 80175ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80175d0:	2300      	movs	r3, #0
 80175d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80175d8:	e005      	b.n	80175e6 <USBD_GetLen+0x1e>
  {
    len++;
 80175da:	7bfb      	ldrb	r3, [r7, #15]
 80175dc:	3301      	adds	r3, #1
 80175de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80175e0:	68bb      	ldr	r3, [r7, #8]
 80175e2:	3301      	adds	r3, #1
 80175e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80175e6:	68bb      	ldr	r3, [r7, #8]
 80175e8:	781b      	ldrb	r3, [r3, #0]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d1f5      	bne.n	80175da <USBD_GetLen+0x12>
  }

  return len;
 80175ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80175f0:	4618      	mov	r0, r3
 80175f2:	3714      	adds	r7, #20
 80175f4:	46bd      	mov	sp, r7
 80175f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175fa:	4770      	bx	lr

080175fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b084      	sub	sp, #16
 8017600:	af00      	add	r7, sp, #0
 8017602:	60f8      	str	r0, [r7, #12]
 8017604:	60b9      	str	r1, [r7, #8]
 8017606:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	2202      	movs	r2, #2
 801760c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	687a      	ldr	r2, [r7, #4]
 8017614:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8017616:	68fb      	ldr	r3, [r7, #12]
 8017618:	687a      	ldr	r2, [r7, #4]
 801761a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	68ba      	ldr	r2, [r7, #8]
 8017620:	2100      	movs	r1, #0
 8017622:	68f8      	ldr	r0, [r7, #12]
 8017624:	f005 fd99 	bl	801d15a <USBD_LL_Transmit>

  return USBD_OK;
 8017628:	2300      	movs	r3, #0
}
 801762a:	4618      	mov	r0, r3
 801762c:	3710      	adds	r7, #16
 801762e:	46bd      	mov	sp, r7
 8017630:	bd80      	pop	{r7, pc}

08017632 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017632:	b580      	push	{r7, lr}
 8017634:	b084      	sub	sp, #16
 8017636:	af00      	add	r7, sp, #0
 8017638:	60f8      	str	r0, [r7, #12]
 801763a:	60b9      	str	r1, [r7, #8]
 801763c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	68ba      	ldr	r2, [r7, #8]
 8017642:	2100      	movs	r1, #0
 8017644:	68f8      	ldr	r0, [r7, #12]
 8017646:	f005 fd88 	bl	801d15a <USBD_LL_Transmit>

  return USBD_OK;
 801764a:	2300      	movs	r3, #0
}
 801764c:	4618      	mov	r0, r3
 801764e:	3710      	adds	r7, #16
 8017650:	46bd      	mov	sp, r7
 8017652:	bd80      	pop	{r7, pc}

08017654 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017654:	b580      	push	{r7, lr}
 8017656:	b084      	sub	sp, #16
 8017658:	af00      	add	r7, sp, #0
 801765a:	60f8      	str	r0, [r7, #12]
 801765c:	60b9      	str	r1, [r7, #8]
 801765e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	2203      	movs	r2, #3
 8017664:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	687a      	ldr	r2, [r7, #4]
 801766c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	687a      	ldr	r2, [r7, #4]
 8017674:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	68ba      	ldr	r2, [r7, #8]
 801767c:	2100      	movs	r1, #0
 801767e:	68f8      	ldr	r0, [r7, #12]
 8017680:	f005 fd8c 	bl	801d19c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017684:	2300      	movs	r3, #0
}
 8017686:	4618      	mov	r0, r3
 8017688:	3710      	adds	r7, #16
 801768a:	46bd      	mov	sp, r7
 801768c:	bd80      	pop	{r7, pc}

0801768e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801768e:	b580      	push	{r7, lr}
 8017690:	b084      	sub	sp, #16
 8017692:	af00      	add	r7, sp, #0
 8017694:	60f8      	str	r0, [r7, #12]
 8017696:	60b9      	str	r1, [r7, #8]
 8017698:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	68ba      	ldr	r2, [r7, #8]
 801769e:	2100      	movs	r1, #0
 80176a0:	68f8      	ldr	r0, [r7, #12]
 80176a2:	f005 fd7b 	bl	801d19c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80176a6:	2300      	movs	r3, #0
}
 80176a8:	4618      	mov	r0, r3
 80176aa:	3710      	adds	r7, #16
 80176ac:	46bd      	mov	sp, r7
 80176ae:	bd80      	pop	{r7, pc}

080176b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b082      	sub	sp, #8
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	2204      	movs	r2, #4
 80176bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80176c0:	2300      	movs	r3, #0
 80176c2:	2200      	movs	r2, #0
 80176c4:	2100      	movs	r1, #0
 80176c6:	6878      	ldr	r0, [r7, #4]
 80176c8:	f005 fd47 	bl	801d15a <USBD_LL_Transmit>

  return USBD_OK;
 80176cc:	2300      	movs	r3, #0
}
 80176ce:	4618      	mov	r0, r3
 80176d0:	3708      	adds	r7, #8
 80176d2:	46bd      	mov	sp, r7
 80176d4:	bd80      	pop	{r7, pc}

080176d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80176d6:	b580      	push	{r7, lr}
 80176d8:	b082      	sub	sp, #8
 80176da:	af00      	add	r7, sp, #0
 80176dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	2205      	movs	r2, #5
 80176e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80176e6:	2300      	movs	r3, #0
 80176e8:	2200      	movs	r2, #0
 80176ea:	2100      	movs	r1, #0
 80176ec:	6878      	ldr	r0, [r7, #4]
 80176ee:	f005 fd55 	bl	801d19c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80176f2:	2300      	movs	r3, #0
}
 80176f4:	4618      	mov	r0, r3
 80176f6:	3708      	adds	r7, #8
 80176f8:	46bd      	mov	sp, r7
 80176fa:	bd80      	pop	{r7, pc}

080176fc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80176fc:	b590      	push	{r4, r7, lr}
 80176fe:	b089      	sub	sp, #36	; 0x24
 8017700:	af04      	add	r7, sp, #16
 8017702:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8017704:	2301      	movs	r3, #1
 8017706:	2202      	movs	r2, #2
 8017708:	2102      	movs	r1, #2
 801770a:	6878      	ldr	r0, [r7, #4]
 801770c:	f000 fcd7 	bl	80180be <USBH_FindInterface>
 8017710:	4603      	mov	r3, r0
 8017712:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8017714:	7bfb      	ldrb	r3, [r7, #15]
 8017716:	2bff      	cmp	r3, #255	; 0xff
 8017718:	d002      	beq.n	8017720 <USBH_CDC_InterfaceInit+0x24>
 801771a:	7bfb      	ldrb	r3, [r7, #15]
 801771c:	2b01      	cmp	r3, #1
 801771e:	d901      	bls.n	8017724 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8017720:	2302      	movs	r3, #2
 8017722:	e13d      	b.n	80179a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8017724:	7bfb      	ldrb	r3, [r7, #15]
 8017726:	4619      	mov	r1, r3
 8017728:	6878      	ldr	r0, [r7, #4]
 801772a:	f000 fcac 	bl	8018086 <USBH_SelectInterface>
 801772e:	4603      	mov	r3, r0
 8017730:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8017732:	7bbb      	ldrb	r3, [r7, #14]
 8017734:	2b00      	cmp	r3, #0
 8017736:	d001      	beq.n	801773c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8017738:	2302      	movs	r3, #2
 801773a:	e131      	b.n	80179a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8017742:	2050      	movs	r0, #80	; 0x50
 8017744:	f006 f8fe 	bl	801d944 <malloc>
 8017748:	4603      	mov	r3, r0
 801774a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017752:	69db      	ldr	r3, [r3, #28]
 8017754:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8017756:	68bb      	ldr	r3, [r7, #8]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d101      	bne.n	8017760 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 801775c:	2302      	movs	r3, #2
 801775e:	e11f      	b.n	80179a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8017760:	2250      	movs	r2, #80	; 0x50
 8017762:	2100      	movs	r1, #0
 8017764:	68b8      	ldr	r0, [r7, #8]
 8017766:	f006 f90b 	bl	801d980 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 801776a:	7bfb      	ldrb	r3, [r7, #15]
 801776c:	687a      	ldr	r2, [r7, #4]
 801776e:	211a      	movs	r1, #26
 8017770:	fb01 f303 	mul.w	r3, r1, r3
 8017774:	4413      	add	r3, r2
 8017776:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801777a:	781b      	ldrb	r3, [r3, #0]
 801777c:	b25b      	sxtb	r3, r3
 801777e:	2b00      	cmp	r3, #0
 8017780:	da15      	bge.n	80177ae <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8017782:	7bfb      	ldrb	r3, [r7, #15]
 8017784:	687a      	ldr	r2, [r7, #4]
 8017786:	211a      	movs	r1, #26
 8017788:	fb01 f303 	mul.w	r3, r1, r3
 801778c:	4413      	add	r3, r2
 801778e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8017792:	781a      	ldrb	r2, [r3, #0]
 8017794:	68bb      	ldr	r3, [r7, #8]
 8017796:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8017798:	7bfb      	ldrb	r3, [r7, #15]
 801779a:	687a      	ldr	r2, [r7, #4]
 801779c:	211a      	movs	r1, #26
 801779e:	fb01 f303 	mul.w	r3, r1, r3
 80177a2:	4413      	add	r3, r2
 80177a4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80177a8:	881a      	ldrh	r2, [r3, #0]
 80177aa:	68bb      	ldr	r3, [r7, #8]
 80177ac:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80177ae:	68bb      	ldr	r3, [r7, #8]
 80177b0:	785b      	ldrb	r3, [r3, #1]
 80177b2:	4619      	mov	r1, r3
 80177b4:	6878      	ldr	r0, [r7, #4]
 80177b6:	f002 f982 	bl	8019abe <USBH_AllocPipe>
 80177ba:	4603      	mov	r3, r0
 80177bc:	461a      	mov	r2, r3
 80177be:	68bb      	ldr	r3, [r7, #8]
 80177c0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80177c2:	68bb      	ldr	r3, [r7, #8]
 80177c4:	7819      	ldrb	r1, [r3, #0]
 80177c6:	68bb      	ldr	r3, [r7, #8]
 80177c8:	7858      	ldrb	r0, [r3, #1]
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80177d6:	68ba      	ldr	r2, [r7, #8]
 80177d8:	8952      	ldrh	r2, [r2, #10]
 80177da:	9202      	str	r2, [sp, #8]
 80177dc:	2203      	movs	r2, #3
 80177de:	9201      	str	r2, [sp, #4]
 80177e0:	9300      	str	r3, [sp, #0]
 80177e2:	4623      	mov	r3, r4
 80177e4:	4602      	mov	r2, r0
 80177e6:	6878      	ldr	r0, [r7, #4]
 80177e8:	f002 f93a 	bl	8019a60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80177ec:	68bb      	ldr	r3, [r7, #8]
 80177ee:	781b      	ldrb	r3, [r3, #0]
 80177f0:	2200      	movs	r2, #0
 80177f2:	4619      	mov	r1, r3
 80177f4:	6878      	ldr	r0, [r7, #4]
 80177f6:	f005 fff7 	bl	801d7e8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80177fa:	2300      	movs	r3, #0
 80177fc:	2200      	movs	r2, #0
 80177fe:	210a      	movs	r1, #10
 8017800:	6878      	ldr	r0, [r7, #4]
 8017802:	f000 fc5c 	bl	80180be <USBH_FindInterface>
 8017806:	4603      	mov	r3, r0
 8017808:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 801780a:	7bfb      	ldrb	r3, [r7, #15]
 801780c:	2bff      	cmp	r3, #255	; 0xff
 801780e:	d002      	beq.n	8017816 <USBH_CDC_InterfaceInit+0x11a>
 8017810:	7bfb      	ldrb	r3, [r7, #15]
 8017812:	2b01      	cmp	r3, #1
 8017814:	d901      	bls.n	801781a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8017816:	2302      	movs	r3, #2
 8017818:	e0c2      	b.n	80179a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 801781a:	7bfb      	ldrb	r3, [r7, #15]
 801781c:	687a      	ldr	r2, [r7, #4]
 801781e:	211a      	movs	r1, #26
 8017820:	fb01 f303 	mul.w	r3, r1, r3
 8017824:	4413      	add	r3, r2
 8017826:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801782a:	781b      	ldrb	r3, [r3, #0]
 801782c:	b25b      	sxtb	r3, r3
 801782e:	2b00      	cmp	r3, #0
 8017830:	da16      	bge.n	8017860 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8017832:	7bfb      	ldrb	r3, [r7, #15]
 8017834:	687a      	ldr	r2, [r7, #4]
 8017836:	211a      	movs	r1, #26
 8017838:	fb01 f303 	mul.w	r3, r1, r3
 801783c:	4413      	add	r3, r2
 801783e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8017842:	781a      	ldrb	r2, [r3, #0]
 8017844:	68bb      	ldr	r3, [r7, #8]
 8017846:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8017848:	7bfb      	ldrb	r3, [r7, #15]
 801784a:	687a      	ldr	r2, [r7, #4]
 801784c:	211a      	movs	r1, #26
 801784e:	fb01 f303 	mul.w	r3, r1, r3
 8017852:	4413      	add	r3, r2
 8017854:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8017858:	881a      	ldrh	r2, [r3, #0]
 801785a:	68bb      	ldr	r3, [r7, #8]
 801785c:	835a      	strh	r2, [r3, #26]
 801785e:	e015      	b.n	801788c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8017860:	7bfb      	ldrb	r3, [r7, #15]
 8017862:	687a      	ldr	r2, [r7, #4]
 8017864:	211a      	movs	r1, #26
 8017866:	fb01 f303 	mul.w	r3, r1, r3
 801786a:	4413      	add	r3, r2
 801786c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8017870:	781a      	ldrb	r2, [r3, #0]
 8017872:	68bb      	ldr	r3, [r7, #8]
 8017874:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8017876:	7bfb      	ldrb	r3, [r7, #15]
 8017878:	687a      	ldr	r2, [r7, #4]
 801787a:	211a      	movs	r1, #26
 801787c:	fb01 f303 	mul.w	r3, r1, r3
 8017880:	4413      	add	r3, r2
 8017882:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8017886:	881a      	ldrh	r2, [r3, #0]
 8017888:	68bb      	ldr	r3, [r7, #8]
 801788a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 801788c:	7bfb      	ldrb	r3, [r7, #15]
 801788e:	687a      	ldr	r2, [r7, #4]
 8017890:	211a      	movs	r1, #26
 8017892:	fb01 f303 	mul.w	r3, r1, r3
 8017896:	4413      	add	r3, r2
 8017898:	f203 3356 	addw	r3, r3, #854	; 0x356
 801789c:	781b      	ldrb	r3, [r3, #0]
 801789e:	b25b      	sxtb	r3, r3
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	da16      	bge.n	80178d2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80178a4:	7bfb      	ldrb	r3, [r7, #15]
 80178a6:	687a      	ldr	r2, [r7, #4]
 80178a8:	211a      	movs	r1, #26
 80178aa:	fb01 f303 	mul.w	r3, r1, r3
 80178ae:	4413      	add	r3, r2
 80178b0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80178b4:	781a      	ldrb	r2, [r3, #0]
 80178b6:	68bb      	ldr	r3, [r7, #8]
 80178b8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80178ba:	7bfb      	ldrb	r3, [r7, #15]
 80178bc:	687a      	ldr	r2, [r7, #4]
 80178be:	211a      	movs	r1, #26
 80178c0:	fb01 f303 	mul.w	r3, r1, r3
 80178c4:	4413      	add	r3, r2
 80178c6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80178ca:	881a      	ldrh	r2, [r3, #0]
 80178cc:	68bb      	ldr	r3, [r7, #8]
 80178ce:	835a      	strh	r2, [r3, #26]
 80178d0:	e015      	b.n	80178fe <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80178d2:	7bfb      	ldrb	r3, [r7, #15]
 80178d4:	687a      	ldr	r2, [r7, #4]
 80178d6:	211a      	movs	r1, #26
 80178d8:	fb01 f303 	mul.w	r3, r1, r3
 80178dc:	4413      	add	r3, r2
 80178de:	f203 3356 	addw	r3, r3, #854	; 0x356
 80178e2:	781a      	ldrb	r2, [r3, #0]
 80178e4:	68bb      	ldr	r3, [r7, #8]
 80178e6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80178e8:	7bfb      	ldrb	r3, [r7, #15]
 80178ea:	687a      	ldr	r2, [r7, #4]
 80178ec:	211a      	movs	r1, #26
 80178ee:	fb01 f303 	mul.w	r3, r1, r3
 80178f2:	4413      	add	r3, r2
 80178f4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80178f8:	881a      	ldrh	r2, [r3, #0]
 80178fa:	68bb      	ldr	r3, [r7, #8]
 80178fc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80178fe:	68bb      	ldr	r3, [r7, #8]
 8017900:	7b9b      	ldrb	r3, [r3, #14]
 8017902:	4619      	mov	r1, r3
 8017904:	6878      	ldr	r0, [r7, #4]
 8017906:	f002 f8da 	bl	8019abe <USBH_AllocPipe>
 801790a:	4603      	mov	r3, r0
 801790c:	461a      	mov	r2, r3
 801790e:	68bb      	ldr	r3, [r7, #8]
 8017910:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8017912:	68bb      	ldr	r3, [r7, #8]
 8017914:	7bdb      	ldrb	r3, [r3, #15]
 8017916:	4619      	mov	r1, r3
 8017918:	6878      	ldr	r0, [r7, #4]
 801791a:	f002 f8d0 	bl	8019abe <USBH_AllocPipe>
 801791e:	4603      	mov	r3, r0
 8017920:	461a      	mov	r2, r3
 8017922:	68bb      	ldr	r3, [r7, #8]
 8017924:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8017926:	68bb      	ldr	r3, [r7, #8]
 8017928:	7b59      	ldrb	r1, [r3, #13]
 801792a:	68bb      	ldr	r3, [r7, #8]
 801792c:	7b98      	ldrb	r0, [r3, #14]
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801793a:	68ba      	ldr	r2, [r7, #8]
 801793c:	8b12      	ldrh	r2, [r2, #24]
 801793e:	9202      	str	r2, [sp, #8]
 8017940:	2202      	movs	r2, #2
 8017942:	9201      	str	r2, [sp, #4]
 8017944:	9300      	str	r3, [sp, #0]
 8017946:	4623      	mov	r3, r4
 8017948:	4602      	mov	r2, r0
 801794a:	6878      	ldr	r0, [r7, #4]
 801794c:	f002 f888 	bl	8019a60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8017950:	68bb      	ldr	r3, [r7, #8]
 8017952:	7b19      	ldrb	r1, [r3, #12]
 8017954:	68bb      	ldr	r3, [r7, #8]
 8017956:	7bd8      	ldrb	r0, [r3, #15]
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8017964:	68ba      	ldr	r2, [r7, #8]
 8017966:	8b52      	ldrh	r2, [r2, #26]
 8017968:	9202      	str	r2, [sp, #8]
 801796a:	2202      	movs	r2, #2
 801796c:	9201      	str	r2, [sp, #4]
 801796e:	9300      	str	r3, [sp, #0]
 8017970:	4623      	mov	r3, r4
 8017972:	4602      	mov	r2, r0
 8017974:	6878      	ldr	r0, [r7, #4]
 8017976:	f002 f873 	bl	8019a60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 801797a:	68bb      	ldr	r3, [r7, #8]
 801797c:	2200      	movs	r2, #0
 801797e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8017982:	68bb      	ldr	r3, [r7, #8]
 8017984:	7b5b      	ldrb	r3, [r3, #13]
 8017986:	2200      	movs	r2, #0
 8017988:	4619      	mov	r1, r3
 801798a:	6878      	ldr	r0, [r7, #4]
 801798c:	f005 ff2c 	bl	801d7e8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8017990:	68bb      	ldr	r3, [r7, #8]
 8017992:	7b1b      	ldrb	r3, [r3, #12]
 8017994:	2200      	movs	r2, #0
 8017996:	4619      	mov	r1, r3
 8017998:	6878      	ldr	r0, [r7, #4]
 801799a:	f005 ff25 	bl	801d7e8 <USBH_LL_SetToggle>

  return USBH_OK;
 801799e:	2300      	movs	r3, #0
}
 80179a0:	4618      	mov	r0, r3
 80179a2:	3714      	adds	r7, #20
 80179a4:	46bd      	mov	sp, r7
 80179a6:	bd90      	pop	{r4, r7, pc}

080179a8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b084      	sub	sp, #16
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80179b6:	69db      	ldr	r3, [r3, #28]
 80179b8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	781b      	ldrb	r3, [r3, #0]
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d00e      	beq.n	80179e0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	781b      	ldrb	r3, [r3, #0]
 80179c6:	4619      	mov	r1, r3
 80179c8:	6878      	ldr	r0, [r7, #4]
 80179ca:	f002 f868 	bl	8019a9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	781b      	ldrb	r3, [r3, #0]
 80179d2:	4619      	mov	r1, r3
 80179d4:	6878      	ldr	r0, [r7, #4]
 80179d6:	f002 f893 	bl	8019b00 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	2200      	movs	r2, #0
 80179de:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80179e0:	68fb      	ldr	r3, [r7, #12]
 80179e2:	7b1b      	ldrb	r3, [r3, #12]
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d00e      	beq.n	8017a06 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80179e8:	68fb      	ldr	r3, [r7, #12]
 80179ea:	7b1b      	ldrb	r3, [r3, #12]
 80179ec:	4619      	mov	r1, r3
 80179ee:	6878      	ldr	r0, [r7, #4]
 80179f0:	f002 f855 	bl	8019a9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	7b1b      	ldrb	r3, [r3, #12]
 80179f8:	4619      	mov	r1, r3
 80179fa:	6878      	ldr	r0, [r7, #4]
 80179fc:	f002 f880 	bl	8019b00 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	2200      	movs	r2, #0
 8017a04:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	7b5b      	ldrb	r3, [r3, #13]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d00e      	beq.n	8017a2c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	7b5b      	ldrb	r3, [r3, #13]
 8017a12:	4619      	mov	r1, r3
 8017a14:	6878      	ldr	r0, [r7, #4]
 8017a16:	f002 f842 	bl	8019a9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	7b5b      	ldrb	r3, [r3, #13]
 8017a1e:	4619      	mov	r1, r3
 8017a20:	6878      	ldr	r0, [r7, #4]
 8017a22:	f002 f86d 	bl	8019b00 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	2200      	movs	r2, #0
 8017a2a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017a32:	69db      	ldr	r3, [r3, #28]
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d00b      	beq.n	8017a50 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017a3e:	69db      	ldr	r3, [r3, #28]
 8017a40:	4618      	mov	r0, r3
 8017a42:	f005 ff87 	bl	801d954 <free>
    phost->pActiveClass->pData = 0U;
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017a4c:	2200      	movs	r2, #0
 8017a4e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8017a50:	2300      	movs	r3, #0
}
 8017a52:	4618      	mov	r0, r3
 8017a54:	3710      	adds	r7, #16
 8017a56:	46bd      	mov	sp, r7
 8017a58:	bd80      	pop	{r7, pc}

08017a5a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8017a5a:	b580      	push	{r7, lr}
 8017a5c:	b084      	sub	sp, #16
 8017a5e:	af00      	add	r7, sp, #0
 8017a60:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017a68:	69db      	ldr	r3, [r3, #28]
 8017a6a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	3340      	adds	r3, #64	; 0x40
 8017a70:	4619      	mov	r1, r3
 8017a72:	6878      	ldr	r0, [r7, #4]
 8017a74:	f000 f8b1 	bl	8017bda <GetLineCoding>
 8017a78:	4603      	mov	r3, r0
 8017a7a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8017a7c:	7afb      	ldrb	r3, [r7, #11]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d105      	bne.n	8017a8e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8017a88:	2102      	movs	r1, #2
 8017a8a:	6878      	ldr	r0, [r7, #4]
 8017a8c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8017a8e:	7afb      	ldrb	r3, [r7, #11]
}
 8017a90:	4618      	mov	r0, r3
 8017a92:	3710      	adds	r7, #16
 8017a94:	46bd      	mov	sp, r7
 8017a96:	bd80      	pop	{r7, pc}

08017a98 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	b084      	sub	sp, #16
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8017aa0:	2301      	movs	r3, #1
 8017aa2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017aae:	69db      	ldr	r3, [r3, #28]
 8017ab0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8017ab2:	68bb      	ldr	r3, [r7, #8]
 8017ab4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8017ab8:	2b04      	cmp	r3, #4
 8017aba:	d877      	bhi.n	8017bac <USBH_CDC_Process+0x114>
 8017abc:	a201      	add	r2, pc, #4	; (adr r2, 8017ac4 <USBH_CDC_Process+0x2c>)
 8017abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017ac2:	bf00      	nop
 8017ac4:	08017ad9 	.word	0x08017ad9
 8017ac8:	08017adf 	.word	0x08017adf
 8017acc:	08017b0f 	.word	0x08017b0f
 8017ad0:	08017b83 	.word	0x08017b83
 8017ad4:	08017b91 	.word	0x08017b91
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8017ad8:	2300      	movs	r3, #0
 8017ada:	73fb      	strb	r3, [r7, #15]
      break;
 8017adc:	e06d      	b.n	8017bba <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8017ade:	68bb      	ldr	r3, [r7, #8]
 8017ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017ae2:	4619      	mov	r1, r3
 8017ae4:	6878      	ldr	r0, [r7, #4]
 8017ae6:	f000 f897 	bl	8017c18 <SetLineCoding>
 8017aea:	4603      	mov	r3, r0
 8017aec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8017aee:	7bbb      	ldrb	r3, [r7, #14]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d104      	bne.n	8017afe <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8017af4:	68bb      	ldr	r3, [r7, #8]
 8017af6:	2202      	movs	r2, #2
 8017af8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8017afc:	e058      	b.n	8017bb0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8017afe:	7bbb      	ldrb	r3, [r7, #14]
 8017b00:	2b01      	cmp	r3, #1
 8017b02:	d055      	beq.n	8017bb0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8017b04:	68bb      	ldr	r3, [r7, #8]
 8017b06:	2204      	movs	r2, #4
 8017b08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8017b0c:	e050      	b.n	8017bb0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8017b0e:	68bb      	ldr	r3, [r7, #8]
 8017b10:	3340      	adds	r3, #64	; 0x40
 8017b12:	4619      	mov	r1, r3
 8017b14:	6878      	ldr	r0, [r7, #4]
 8017b16:	f000 f860 	bl	8017bda <GetLineCoding>
 8017b1a:	4603      	mov	r3, r0
 8017b1c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8017b1e:	7bbb      	ldrb	r3, [r7, #14]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d126      	bne.n	8017b72 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8017b24:	68bb      	ldr	r3, [r7, #8]
 8017b26:	2200      	movs	r2, #0
 8017b28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8017b2c:	68bb      	ldr	r3, [r7, #8]
 8017b2e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8017b32:	68bb      	ldr	r3, [r7, #8]
 8017b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017b36:	791b      	ldrb	r3, [r3, #4]
 8017b38:	429a      	cmp	r2, r3
 8017b3a:	d13b      	bne.n	8017bb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8017b3c:	68bb      	ldr	r3, [r7, #8]
 8017b3e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8017b42:	68bb      	ldr	r3, [r7, #8]
 8017b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017b46:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8017b48:	429a      	cmp	r2, r3
 8017b4a:	d133      	bne.n	8017bb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8017b4c:	68bb      	ldr	r3, [r7, #8]
 8017b4e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8017b52:	68bb      	ldr	r3, [r7, #8]
 8017b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017b56:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8017b58:	429a      	cmp	r2, r3
 8017b5a:	d12b      	bne.n	8017bb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8017b5c:	68bb      	ldr	r3, [r7, #8]
 8017b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017b60:	68bb      	ldr	r3, [r7, #8]
 8017b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017b64:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8017b66:	429a      	cmp	r2, r3
 8017b68:	d124      	bne.n	8017bb4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8017b6a:	6878      	ldr	r0, [r7, #4]
 8017b6c:	f000 f982 	bl	8017e74 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8017b70:	e020      	b.n	8017bb4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8017b72:	7bbb      	ldrb	r3, [r7, #14]
 8017b74:	2b01      	cmp	r3, #1
 8017b76:	d01d      	beq.n	8017bb4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8017b78:	68bb      	ldr	r3, [r7, #8]
 8017b7a:	2204      	movs	r2, #4
 8017b7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8017b80:	e018      	b.n	8017bb4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8017b82:	6878      	ldr	r0, [r7, #4]
 8017b84:	f000 f867 	bl	8017c56 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8017b88:	6878      	ldr	r0, [r7, #4]
 8017b8a:	f000 f8f6 	bl	8017d7a <CDC_ProcessReception>
      break;
 8017b8e:	e014      	b.n	8017bba <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8017b90:	2100      	movs	r1, #0
 8017b92:	6878      	ldr	r0, [r7, #4]
 8017b94:	f001 f97b 	bl	8018e8e <USBH_ClrFeature>
 8017b98:	4603      	mov	r3, r0
 8017b9a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8017b9c:	7bbb      	ldrb	r3, [r7, #14]
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d10a      	bne.n	8017bb8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8017ba2:	68bb      	ldr	r3, [r7, #8]
 8017ba4:	2200      	movs	r2, #0
 8017ba6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8017baa:	e005      	b.n	8017bb8 <USBH_CDC_Process+0x120>

    default:
      break;
 8017bac:	bf00      	nop
 8017bae:	e004      	b.n	8017bba <USBH_CDC_Process+0x122>
      break;
 8017bb0:	bf00      	nop
 8017bb2:	e002      	b.n	8017bba <USBH_CDC_Process+0x122>
      break;
 8017bb4:	bf00      	nop
 8017bb6:	e000      	b.n	8017bba <USBH_CDC_Process+0x122>
      break;
 8017bb8:	bf00      	nop

  }

  return status;
 8017bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	3710      	adds	r7, #16
 8017bc0:	46bd      	mov	sp, r7
 8017bc2:	bd80      	pop	{r7, pc}

08017bc4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8017bc4:	b480      	push	{r7}
 8017bc6:	b083      	sub	sp, #12
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8017bcc:	2300      	movs	r3, #0
}
 8017bce:	4618      	mov	r0, r3
 8017bd0:	370c      	adds	r7, #12
 8017bd2:	46bd      	mov	sp, r7
 8017bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bd8:	4770      	bx	lr

08017bda <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8017bda:	b580      	push	{r7, lr}
 8017bdc:	b082      	sub	sp, #8
 8017bde:	af00      	add	r7, sp, #0
 8017be0:	6078      	str	r0, [r7, #4]
 8017be2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	22a1      	movs	r2, #161	; 0xa1
 8017be8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	2221      	movs	r2, #33	; 0x21
 8017bee:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	2200      	movs	r2, #0
 8017bf4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	2200      	movs	r2, #0
 8017bfa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	2207      	movs	r2, #7
 8017c00:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8017c02:	683b      	ldr	r3, [r7, #0]
 8017c04:	2207      	movs	r2, #7
 8017c06:	4619      	mov	r1, r3
 8017c08:	6878      	ldr	r0, [r7, #4]
 8017c0a:	f001 fbe7 	bl	80193dc <USBH_CtlReq>
 8017c0e:	4603      	mov	r3, r0
}
 8017c10:	4618      	mov	r0, r3
 8017c12:	3708      	adds	r7, #8
 8017c14:	46bd      	mov	sp, r7
 8017c16:	bd80      	pop	{r7, pc}

08017c18 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b082      	sub	sp, #8
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	6078      	str	r0, [r7, #4]
 8017c20:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	2221      	movs	r2, #33	; 0x21
 8017c26:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	2220      	movs	r2, #32
 8017c2c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	2200      	movs	r2, #0
 8017c32:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	2200      	movs	r2, #0
 8017c38:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	2207      	movs	r2, #7
 8017c3e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8017c40:	683b      	ldr	r3, [r7, #0]
 8017c42:	2207      	movs	r2, #7
 8017c44:	4619      	mov	r1, r3
 8017c46:	6878      	ldr	r0, [r7, #4]
 8017c48:	f001 fbc8 	bl	80193dc <USBH_CtlReq>
 8017c4c:	4603      	mov	r3, r0
}
 8017c4e:	4618      	mov	r0, r3
 8017c50:	3708      	adds	r7, #8
 8017c52:	46bd      	mov	sp, r7
 8017c54:	bd80      	pop	{r7, pc}

08017c56 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8017c56:	b580      	push	{r7, lr}
 8017c58:	b086      	sub	sp, #24
 8017c5a:	af02      	add	r7, sp, #8
 8017c5c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017c64:	69db      	ldr	r3, [r3, #28]
 8017c66:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8017c68:	2300      	movs	r3, #0
 8017c6a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8017c6c:	68fb      	ldr	r3, [r7, #12]
 8017c6e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8017c72:	2b01      	cmp	r3, #1
 8017c74:	d002      	beq.n	8017c7c <CDC_ProcessTransmission+0x26>
 8017c76:	2b02      	cmp	r3, #2
 8017c78:	d023      	beq.n	8017cc2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8017c7a:	e07a      	b.n	8017d72 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8017c7c:	68fb      	ldr	r3, [r7, #12]
 8017c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c80:	68fa      	ldr	r2, [r7, #12]
 8017c82:	8b12      	ldrh	r2, [r2, #24]
 8017c84:	4293      	cmp	r3, r2
 8017c86:	d90b      	bls.n	8017ca0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8017c88:	68fb      	ldr	r3, [r7, #12]
 8017c8a:	69d9      	ldr	r1, [r3, #28]
 8017c8c:	68fb      	ldr	r3, [r7, #12]
 8017c8e:	8b1a      	ldrh	r2, [r3, #24]
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	7b5b      	ldrb	r3, [r3, #13]
 8017c94:	2001      	movs	r0, #1
 8017c96:	9000      	str	r0, [sp, #0]
 8017c98:	6878      	ldr	r0, [r7, #4]
 8017c9a:	f001 fe9e 	bl	80199da <USBH_BulkSendData>
 8017c9e:	e00b      	b.n	8017cb8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8017ca4:	68fb      	ldr	r3, [r7, #12]
 8017ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8017ca8:	b29a      	uxth	r2, r3
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	7b5b      	ldrb	r3, [r3, #13]
 8017cae:	2001      	movs	r0, #1
 8017cb0:	9000      	str	r0, [sp, #0]
 8017cb2:	6878      	ldr	r0, [r7, #4]
 8017cb4:	f001 fe91 	bl	80199da <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	2202      	movs	r2, #2
 8017cbc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8017cc0:	e057      	b.n	8017d72 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8017cc2:	68fb      	ldr	r3, [r7, #12]
 8017cc4:	7b5b      	ldrb	r3, [r3, #13]
 8017cc6:	4619      	mov	r1, r3
 8017cc8:	6878      	ldr	r0, [r7, #4]
 8017cca:	f005 fd63 	bl	801d794 <USBH_LL_GetURBState>
 8017cce:	4603      	mov	r3, r0
 8017cd0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8017cd2:	7afb      	ldrb	r3, [r7, #11]
 8017cd4:	2b01      	cmp	r3, #1
 8017cd6:	d136      	bne.n	8017d46 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cdc:	68fa      	ldr	r2, [r7, #12]
 8017cde:	8b12      	ldrh	r2, [r2, #24]
 8017ce0:	4293      	cmp	r3, r2
 8017ce2:	d90e      	bls.n	8017d02 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8017ce4:	68fb      	ldr	r3, [r7, #12]
 8017ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ce8:	68fa      	ldr	r2, [r7, #12]
 8017cea:	8b12      	ldrh	r2, [r2, #24]
 8017cec:	1a9a      	subs	r2, r3, r2
 8017cee:	68fb      	ldr	r3, [r7, #12]
 8017cf0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8017cf2:	68fb      	ldr	r3, [r7, #12]
 8017cf4:	69db      	ldr	r3, [r3, #28]
 8017cf6:	68fa      	ldr	r2, [r7, #12]
 8017cf8:	8b12      	ldrh	r2, [r2, #24]
 8017cfa:	441a      	add	r2, r3
 8017cfc:	68fb      	ldr	r3, [r7, #12]
 8017cfe:	61da      	str	r2, [r3, #28]
 8017d00:	e002      	b.n	8017d08 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	2200      	movs	r2, #0
 8017d06:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d004      	beq.n	8017d1a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	2201      	movs	r2, #1
 8017d14:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8017d18:	e006      	b.n	8017d28 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	2200      	movs	r2, #0
 8017d1e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8017d22:	6878      	ldr	r0, [r7, #4]
 8017d24:	f000 f892 	bl	8017e4c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	2204      	movs	r2, #4
 8017d2c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8017d3c:	2200      	movs	r2, #0
 8017d3e:	4619      	mov	r1, r3
 8017d40:	f002 f8dc 	bl	8019efc <osMessagePut>
      break;
 8017d44:	e014      	b.n	8017d70 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8017d46:	7afb      	ldrb	r3, [r7, #11]
 8017d48:	2b02      	cmp	r3, #2
 8017d4a:	d111      	bne.n	8017d70 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	2201      	movs	r2, #1
 8017d50:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	2204      	movs	r2, #4
 8017d58:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8017d68:	2200      	movs	r2, #0
 8017d6a:	4619      	mov	r1, r3
 8017d6c:	f002 f8c6 	bl	8019efc <osMessagePut>
      break;
 8017d70:	bf00      	nop
  }
}
 8017d72:	bf00      	nop
 8017d74:	3710      	adds	r7, #16
 8017d76:	46bd      	mov	sp, r7
 8017d78:	bd80      	pop	{r7, pc}

08017d7a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8017d7a:	b580      	push	{r7, lr}
 8017d7c:	b086      	sub	sp, #24
 8017d7e:	af00      	add	r7, sp, #0
 8017d80:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017d88:	69db      	ldr	r3, [r3, #28]
 8017d8a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8017d8c:	2300      	movs	r3, #0
 8017d8e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8017d90:	697b      	ldr	r3, [r7, #20]
 8017d92:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8017d96:	2b03      	cmp	r3, #3
 8017d98:	d002      	beq.n	8017da0 <CDC_ProcessReception+0x26>
 8017d9a:	2b04      	cmp	r3, #4
 8017d9c:	d00e      	beq.n	8017dbc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8017d9e:	e051      	b.n	8017e44 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8017da0:	697b      	ldr	r3, [r7, #20]
 8017da2:	6a19      	ldr	r1, [r3, #32]
 8017da4:	697b      	ldr	r3, [r7, #20]
 8017da6:	8b5a      	ldrh	r2, [r3, #26]
 8017da8:	697b      	ldr	r3, [r7, #20]
 8017daa:	7b1b      	ldrb	r3, [r3, #12]
 8017dac:	6878      	ldr	r0, [r7, #4]
 8017dae:	f001 fe39 	bl	8019a24 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8017db2:	697b      	ldr	r3, [r7, #20]
 8017db4:	2204      	movs	r2, #4
 8017db6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8017dba:	e043      	b.n	8017e44 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8017dbc:	697b      	ldr	r3, [r7, #20]
 8017dbe:	7b1b      	ldrb	r3, [r3, #12]
 8017dc0:	4619      	mov	r1, r3
 8017dc2:	6878      	ldr	r0, [r7, #4]
 8017dc4:	f005 fce6 	bl	801d794 <USBH_LL_GetURBState>
 8017dc8:	4603      	mov	r3, r0
 8017dca:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8017dcc:	7cfb      	ldrb	r3, [r7, #19]
 8017dce:	2b01      	cmp	r3, #1
 8017dd0:	d137      	bne.n	8017e42 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8017dd2:	697b      	ldr	r3, [r7, #20]
 8017dd4:	7b1b      	ldrb	r3, [r3, #12]
 8017dd6:	4619      	mov	r1, r3
 8017dd8:	6878      	ldr	r0, [r7, #4]
 8017dda:	f005 fc49 	bl	801d670 <USBH_LL_GetLastXferSize>
 8017dde:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8017de0:	697b      	ldr	r3, [r7, #20]
 8017de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017de4:	68fa      	ldr	r2, [r7, #12]
 8017de6:	429a      	cmp	r2, r3
 8017de8:	d016      	beq.n	8017e18 <CDC_ProcessReception+0x9e>
 8017dea:	697b      	ldr	r3, [r7, #20]
 8017dec:	8b5b      	ldrh	r3, [r3, #26]
 8017dee:	461a      	mov	r2, r3
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	4293      	cmp	r3, r2
 8017df4:	d910      	bls.n	8017e18 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8017df6:	697b      	ldr	r3, [r7, #20]
 8017df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017dfa:	68fb      	ldr	r3, [r7, #12]
 8017dfc:	1ad2      	subs	r2, r2, r3
 8017dfe:	697b      	ldr	r3, [r7, #20]
 8017e00:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8017e02:	697b      	ldr	r3, [r7, #20]
 8017e04:	6a1a      	ldr	r2, [r3, #32]
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	441a      	add	r2, r3
 8017e0a:	697b      	ldr	r3, [r7, #20]
 8017e0c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8017e0e:	697b      	ldr	r3, [r7, #20]
 8017e10:	2203      	movs	r2, #3
 8017e12:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8017e16:	e006      	b.n	8017e26 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8017e18:	697b      	ldr	r3, [r7, #20]
 8017e1a:	2200      	movs	r2, #0
 8017e1c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8017e20:	6878      	ldr	r0, [r7, #4]
 8017e22:	f000 f81d 	bl	8017e60 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	2204      	movs	r2, #4
 8017e2a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8017e3a:	2200      	movs	r2, #0
 8017e3c:	4619      	mov	r1, r3
 8017e3e:	f002 f85d 	bl	8019efc <osMessagePut>
      break;
 8017e42:	bf00      	nop
  }
}
 8017e44:	bf00      	nop
 8017e46:	3718      	adds	r7, #24
 8017e48:	46bd      	mov	sp, r7
 8017e4a:	bd80      	pop	{r7, pc}

08017e4c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8017e4c:	b480      	push	{r7}
 8017e4e:	b083      	sub	sp, #12
 8017e50:	af00      	add	r7, sp, #0
 8017e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8017e54:	bf00      	nop
 8017e56:	370c      	adds	r7, #12
 8017e58:	46bd      	mov	sp, r7
 8017e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e5e:	4770      	bx	lr

08017e60 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8017e60:	b480      	push	{r7}
 8017e62:	b083      	sub	sp, #12
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8017e68:	bf00      	nop
 8017e6a:	370c      	adds	r7, #12
 8017e6c:	46bd      	mov	sp, r7
 8017e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e72:	4770      	bx	lr

08017e74 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8017e74:	b480      	push	{r7}
 8017e76:	b083      	sub	sp, #12
 8017e78:	af00      	add	r7, sp, #0
 8017e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8017e7c:	bf00      	nop
 8017e7e:	370c      	adds	r7, #12
 8017e80:	46bd      	mov	sp, r7
 8017e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e86:	4770      	bx	lr

08017e88 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8017e88:	b5b0      	push	{r4, r5, r7, lr}
 8017e8a:	b090      	sub	sp, #64	; 0x40
 8017e8c:	af00      	add	r7, sp, #0
 8017e8e:	60f8      	str	r0, [r7, #12]
 8017e90:	60b9      	str	r1, [r7, #8]
 8017e92:	4613      	mov	r3, r2
 8017e94:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8017e96:	68fb      	ldr	r3, [r7, #12]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d101      	bne.n	8017ea0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8017e9c:	2302      	movs	r3, #2
 8017e9e:	e04d      	b.n	8017f3c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	79fa      	ldrb	r2, [r7, #7]
 8017ea4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	2200      	movs	r2, #0
 8017eac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	2200      	movs	r2, #0
 8017eb4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8017eb8:	68f8      	ldr	r0, [r7, #12]
 8017eba:	f000 f847 	bl	8017f4c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8017ebe:	68fb      	ldr	r3, [r7, #12]
 8017ec0:	2200      	movs	r2, #0
 8017ec2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	2200      	movs	r2, #0
 8017eca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8017ece:	68fb      	ldr	r3, [r7, #12]
 8017ed0:	2200      	movs	r2, #0
 8017ed2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	2200      	movs	r2, #0
 8017eda:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8017ede:	68bb      	ldr	r3, [r7, #8]
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d003      	beq.n	8017eec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8017ee4:	68fb      	ldr	r3, [r7, #12]
 8017ee6:	68ba      	ldr	r2, [r7, #8]
 8017ee8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8017eec:	4b15      	ldr	r3, [pc, #84]	; (8017f44 <USBH_Init+0xbc>)
 8017eee:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8017ef2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017ef4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8017ef8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017efc:	2100      	movs	r1, #0
 8017efe:	4618      	mov	r0, r3
 8017f00:	f001 ffd4 	bl	8019eac <osMessageCreate>
 8017f04:	4602      	mov	r2, r0
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8017f0c:	4b0e      	ldr	r3, [pc, #56]	; (8017f48 <USBH_Init+0xc0>)
 8017f0e:	f107 0414 	add.w	r4, r7, #20
 8017f12:	461d      	mov	r5, r3
 8017f14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017f18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017f1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8017f20:	f107 0314 	add.w	r3, r7, #20
 8017f24:	68f9      	ldr	r1, [r7, #12]
 8017f26:	4618      	mov	r0, r3
 8017f28:	f001 fed4 	bl	8019cd4 <osThreadCreate>
 8017f2c:	4602      	mov	r2, r0
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8017f34:	68f8      	ldr	r0, [r7, #12]
 8017f36:	f005 fae7 	bl	801d508 <USBH_LL_Init>

  return USBH_OK;
 8017f3a:	2300      	movs	r3, #0
}
 8017f3c:	4618      	mov	r0, r3
 8017f3e:	3740      	adds	r7, #64	; 0x40
 8017f40:	46bd      	mov	sp, r7
 8017f42:	bdb0      	pop	{r4, r5, r7, pc}
 8017f44:	0801f000 	.word	0x0801f000
 8017f48:	0801f010 	.word	0x0801f010

08017f4c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8017f4c:	b580      	push	{r7, lr}
 8017f4e:	b084      	sub	sp, #16
 8017f50:	af00      	add	r7, sp, #0
 8017f52:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8017f54:	2300      	movs	r3, #0
 8017f56:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8017f58:	2300      	movs	r3, #0
 8017f5a:	60fb      	str	r3, [r7, #12]
 8017f5c:	e009      	b.n	8017f72 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8017f5e:	687a      	ldr	r2, [r7, #4]
 8017f60:	68fb      	ldr	r3, [r7, #12]
 8017f62:	33e0      	adds	r3, #224	; 0xe0
 8017f64:	009b      	lsls	r3, r3, #2
 8017f66:	4413      	add	r3, r2
 8017f68:	2200      	movs	r2, #0
 8017f6a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	3301      	adds	r3, #1
 8017f70:	60fb      	str	r3, [r7, #12]
 8017f72:	68fb      	ldr	r3, [r7, #12]
 8017f74:	2b0f      	cmp	r3, #15
 8017f76:	d9f2      	bls.n	8017f5e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8017f78:	2300      	movs	r3, #0
 8017f7a:	60fb      	str	r3, [r7, #12]
 8017f7c:	e009      	b.n	8017f92 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8017f7e:	687a      	ldr	r2, [r7, #4]
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	4413      	add	r3, r2
 8017f84:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8017f88:	2200      	movs	r2, #0
 8017f8a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8017f8c:	68fb      	ldr	r3, [r7, #12]
 8017f8e:	3301      	adds	r3, #1
 8017f90:	60fb      	str	r3, [r7, #12]
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017f98:	d3f1      	bcc.n	8017f7e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	2200      	movs	r2, #0
 8017f9e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	2200      	movs	r2, #0
 8017fa4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	2201      	movs	r2, #1
 8017faa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	2200      	movs	r2, #0
 8017fb0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	2201      	movs	r2, #1
 8017fb8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	2240      	movs	r2, #64	; 0x40
 8017fbe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	2200      	movs	r2, #0
 8017fc4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	2200      	movs	r2, #0
 8017fca:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	2201      	movs	r2, #1
 8017fd2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	2200      	movs	r2, #0
 8017fda:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	2200      	movs	r2, #0
 8017fe2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	331c      	adds	r3, #28
 8017fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017fee:	2100      	movs	r1, #0
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	f005 fcc5 	bl	801d980 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8017ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018000:	2100      	movs	r1, #0
 8018002:	4618      	mov	r0, r3
 8018004:	f005 fcbc 	bl	801d980 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	f203 3326 	addw	r3, r3, #806	; 0x326
 801800e:	2212      	movs	r2, #18
 8018010:	2100      	movs	r1, #0
 8018012:	4618      	mov	r0, r3
 8018014:	f005 fcb4 	bl	801d980 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 801801e:	223e      	movs	r2, #62	; 0x3e
 8018020:	2100      	movs	r1, #0
 8018022:	4618      	mov	r0, r3
 8018024:	f005 fcac 	bl	801d980 <memset>

  return USBH_OK;
 8018028:	2300      	movs	r3, #0
}
 801802a:	4618      	mov	r0, r3
 801802c:	3710      	adds	r7, #16
 801802e:	46bd      	mov	sp, r7
 8018030:	bd80      	pop	{r7, pc}

08018032 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8018032:	b480      	push	{r7}
 8018034:	b085      	sub	sp, #20
 8018036:	af00      	add	r7, sp, #0
 8018038:	6078      	str	r0, [r7, #4]
 801803a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 801803c:	2300      	movs	r3, #0
 801803e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8018040:	683b      	ldr	r3, [r7, #0]
 8018042:	2b00      	cmp	r3, #0
 8018044:	d016      	beq.n	8018074 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 801804c:	2b00      	cmp	r3, #0
 801804e:	d10e      	bne.n	801806e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8018056:	1c59      	adds	r1, r3, #1
 8018058:	687a      	ldr	r2, [r7, #4]
 801805a:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 801805e:	687a      	ldr	r2, [r7, #4]
 8018060:	33de      	adds	r3, #222	; 0xde
 8018062:	6839      	ldr	r1, [r7, #0]
 8018064:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8018068:	2300      	movs	r3, #0
 801806a:	73fb      	strb	r3, [r7, #15]
 801806c:	e004      	b.n	8018078 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 801806e:	2302      	movs	r3, #2
 8018070:	73fb      	strb	r3, [r7, #15]
 8018072:	e001      	b.n	8018078 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8018074:	2302      	movs	r3, #2
 8018076:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8018078:	7bfb      	ldrb	r3, [r7, #15]
}
 801807a:	4618      	mov	r0, r3
 801807c:	3714      	adds	r7, #20
 801807e:	46bd      	mov	sp, r7
 8018080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018084:	4770      	bx	lr

08018086 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8018086:	b480      	push	{r7}
 8018088:	b085      	sub	sp, #20
 801808a:	af00      	add	r7, sp, #0
 801808c:	6078      	str	r0, [r7, #4]
 801808e:	460b      	mov	r3, r1
 8018090:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8018092:	2300      	movs	r3, #0
 8018094:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 801809c:	78fa      	ldrb	r2, [r7, #3]
 801809e:	429a      	cmp	r2, r3
 80180a0:	d204      	bcs.n	80180ac <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	78fa      	ldrb	r2, [r7, #3]
 80180a6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80180aa:	e001      	b.n	80180b0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80180ac:	2302      	movs	r3, #2
 80180ae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80180b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80180b2:	4618      	mov	r0, r3
 80180b4:	3714      	adds	r7, #20
 80180b6:	46bd      	mov	sp, r7
 80180b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180bc:	4770      	bx	lr

080180be <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80180be:	b480      	push	{r7}
 80180c0:	b087      	sub	sp, #28
 80180c2:	af00      	add	r7, sp, #0
 80180c4:	6078      	str	r0, [r7, #4]
 80180c6:	4608      	mov	r0, r1
 80180c8:	4611      	mov	r1, r2
 80180ca:	461a      	mov	r2, r3
 80180cc:	4603      	mov	r3, r0
 80180ce:	70fb      	strb	r3, [r7, #3]
 80180d0:	460b      	mov	r3, r1
 80180d2:	70bb      	strb	r3, [r7, #2]
 80180d4:	4613      	mov	r3, r2
 80180d6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80180d8:	2300      	movs	r3, #0
 80180da:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80180dc:	2300      	movs	r3, #0
 80180de:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80180e6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80180e8:	e025      	b.n	8018136 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80180ea:	7dfb      	ldrb	r3, [r7, #23]
 80180ec:	221a      	movs	r2, #26
 80180ee:	fb02 f303 	mul.w	r3, r2, r3
 80180f2:	3308      	adds	r3, #8
 80180f4:	68fa      	ldr	r2, [r7, #12]
 80180f6:	4413      	add	r3, r2
 80180f8:	3302      	adds	r3, #2
 80180fa:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80180fc:	693b      	ldr	r3, [r7, #16]
 80180fe:	795b      	ldrb	r3, [r3, #5]
 8018100:	78fa      	ldrb	r2, [r7, #3]
 8018102:	429a      	cmp	r2, r3
 8018104:	d002      	beq.n	801810c <USBH_FindInterface+0x4e>
 8018106:	78fb      	ldrb	r3, [r7, #3]
 8018108:	2bff      	cmp	r3, #255	; 0xff
 801810a:	d111      	bne.n	8018130 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801810c:	693b      	ldr	r3, [r7, #16]
 801810e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8018110:	78ba      	ldrb	r2, [r7, #2]
 8018112:	429a      	cmp	r2, r3
 8018114:	d002      	beq.n	801811c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8018116:	78bb      	ldrb	r3, [r7, #2]
 8018118:	2bff      	cmp	r3, #255	; 0xff
 801811a:	d109      	bne.n	8018130 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801811c:	693b      	ldr	r3, [r7, #16]
 801811e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8018120:	787a      	ldrb	r2, [r7, #1]
 8018122:	429a      	cmp	r2, r3
 8018124:	d002      	beq.n	801812c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8018126:	787b      	ldrb	r3, [r7, #1]
 8018128:	2bff      	cmp	r3, #255	; 0xff
 801812a:	d101      	bne.n	8018130 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 801812c:	7dfb      	ldrb	r3, [r7, #23]
 801812e:	e006      	b.n	801813e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8018130:	7dfb      	ldrb	r3, [r7, #23]
 8018132:	3301      	adds	r3, #1
 8018134:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8018136:	7dfb      	ldrb	r3, [r7, #23]
 8018138:	2b01      	cmp	r3, #1
 801813a:	d9d6      	bls.n	80180ea <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 801813c:	23ff      	movs	r3, #255	; 0xff
}
 801813e:	4618      	mov	r0, r3
 8018140:	371c      	adds	r7, #28
 8018142:	46bd      	mov	sp, r7
 8018144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018148:	4770      	bx	lr

0801814a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 801814a:	b580      	push	{r7, lr}
 801814c:	b082      	sub	sp, #8
 801814e:	af00      	add	r7, sp, #0
 8018150:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8018152:	6878      	ldr	r0, [r7, #4]
 8018154:	f005 fa14 	bl	801d580 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8018158:	2101      	movs	r1, #1
 801815a:	6878      	ldr	r0, [r7, #4]
 801815c:	f005 fb2d 	bl	801d7ba <USBH_LL_DriverVBUS>

  return USBH_OK;
 8018160:	2300      	movs	r3, #0
}
 8018162:	4618      	mov	r0, r3
 8018164:	3708      	adds	r7, #8
 8018166:	46bd      	mov	sp, r7
 8018168:	bd80      	pop	{r7, pc}
	...

0801816c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 801816c:	b580      	push	{r7, lr}
 801816e:	b088      	sub	sp, #32
 8018170:	af04      	add	r7, sp, #16
 8018172:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8018174:	2302      	movs	r3, #2
 8018176:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8018178:	2300      	movs	r3, #0
 801817a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8018182:	b2db      	uxtb	r3, r3
 8018184:	2b01      	cmp	r3, #1
 8018186:	d102      	bne.n	801818e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	2203      	movs	r2, #3
 801818c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	781b      	ldrb	r3, [r3, #0]
 8018192:	b2db      	uxtb	r3, r3
 8018194:	2b0b      	cmp	r3, #11
 8018196:	f200 8247 	bhi.w	8018628 <USBH_Process+0x4bc>
 801819a:	a201      	add	r2, pc, #4	; (adr r2, 80181a0 <USBH_Process+0x34>)
 801819c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181a0:	080181d1 	.word	0x080181d1
 80181a4:	0801821f 	.word	0x0801821f
 80181a8:	080182a3 	.word	0x080182a3
 80181ac:	080185a7 	.word	0x080185a7
 80181b0:	08018629 	.word	0x08018629
 80181b4:	08018363 	.word	0x08018363
 80181b8:	08018531 	.word	0x08018531
 80181bc:	080183b5 	.word	0x080183b5
 80181c0:	080183f1 	.word	0x080183f1
 80181c4:	0801842b 	.word	0x0801842b
 80181c8:	08018489 	.word	0x08018489
 80181cc:	0801858f 	.word	0x0801858f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80181d6:	b2db      	uxtb	r3, r3
 80181d8:	2b00      	cmp	r3, #0
 80181da:	f000 8227 	beq.w	801862c <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	2201      	movs	r2, #1
 80181e2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80181e4:	20c8      	movs	r0, #200	; 0xc8
 80181e6:	f005 fb2f 	bl	801d848 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80181ea:	6878      	ldr	r0, [r7, #4]
 80181ec:	f005 fa25 	bl	801d63a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	2200      	movs	r2, #0
 80181f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	2200      	movs	r2, #0
 80181fc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	2201      	movs	r2, #1
 8018204:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018214:	2200      	movs	r2, #0
 8018216:	4619      	mov	r1, r3
 8018218:	f001 fe70 	bl	8019efc <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801821c:	e206      	b.n	801862c <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8018224:	2b01      	cmp	r3, #1
 8018226:	d107      	bne.n	8018238 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	2200      	movs	r2, #0
 801822c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	2202      	movs	r2, #2
 8018234:	701a      	strb	r2, [r3, #0]
 8018236:	e025      	b.n	8018284 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801823e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018242:	d914      	bls.n	801826e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 801824a:	3301      	adds	r3, #1
 801824c:	b2da      	uxtb	r2, r3
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 801825a:	2b03      	cmp	r3, #3
 801825c:	d903      	bls.n	8018266 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	220d      	movs	r2, #13
 8018262:	701a      	strb	r2, [r3, #0]
 8018264:	e00e      	b.n	8018284 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	2200      	movs	r2, #0
 801826a:	701a      	strb	r2, [r3, #0]
 801826c:	e00a      	b.n	8018284 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8018274:	f103 020a 	add.w	r2, r3, #10
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 801827e:	200a      	movs	r0, #10
 8018280:	f005 fae2 	bl	801d848 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	2201      	movs	r2, #1
 8018288:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018298:	2200      	movs	r2, #0
 801829a:	4619      	mov	r1, r3
 801829c:	f001 fe2e 	bl	8019efc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80182a0:	e1cb      	b.n	801863a <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d005      	beq.n	80182b8 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80182b2:	2104      	movs	r1, #4
 80182b4:	6878      	ldr	r0, [r7, #4]
 80182b6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80182b8:	2064      	movs	r0, #100	; 0x64
 80182ba:	f005 fac5 	bl	801d848 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80182be:	6878      	ldr	r0, [r7, #4]
 80182c0:	f005 f994 	bl	801d5ec <USBH_LL_GetSpeed>
 80182c4:	4603      	mov	r3, r0
 80182c6:	461a      	mov	r2, r3
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	2205      	movs	r2, #5
 80182d2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80182d4:	2100      	movs	r1, #0
 80182d6:	6878      	ldr	r0, [r7, #4]
 80182d8:	f001 fbf1 	bl	8019abe <USBH_AllocPipe>
 80182dc:	4603      	mov	r3, r0
 80182de:	461a      	mov	r2, r3
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80182e4:	2180      	movs	r1, #128	; 0x80
 80182e6:	6878      	ldr	r0, [r7, #4]
 80182e8:	f001 fbe9 	bl	8019abe <USBH_AllocPipe>
 80182ec:	4603      	mov	r3, r0
 80182ee:	461a      	mov	r2, r3
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	7919      	ldrb	r1, [r3, #4]
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8018304:	687a      	ldr	r2, [r7, #4]
 8018306:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8018308:	b292      	uxth	r2, r2
 801830a:	9202      	str	r2, [sp, #8]
 801830c:	2200      	movs	r2, #0
 801830e:	9201      	str	r2, [sp, #4]
 8018310:	9300      	str	r3, [sp, #0]
 8018312:	4603      	mov	r3, r0
 8018314:	2280      	movs	r2, #128	; 0x80
 8018316:	6878      	ldr	r0, [r7, #4]
 8018318:	f001 fba2 	bl	8019a60 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	7959      	ldrb	r1, [r3, #5]
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 801832c:	687a      	ldr	r2, [r7, #4]
 801832e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8018330:	b292      	uxth	r2, r2
 8018332:	9202      	str	r2, [sp, #8]
 8018334:	2200      	movs	r2, #0
 8018336:	9201      	str	r2, [sp, #4]
 8018338:	9300      	str	r3, [sp, #0]
 801833a:	4603      	mov	r3, r0
 801833c:	2200      	movs	r2, #0
 801833e:	6878      	ldr	r0, [r7, #4]
 8018340:	f001 fb8e 	bl	8019a60 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	2201      	movs	r2, #1
 8018348:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018358:	2200      	movs	r2, #0
 801835a:	4619      	mov	r1, r3
 801835c:	f001 fdce 	bl	8019efc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8018360:	e16b      	b.n	801863a <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8018362:	6878      	ldr	r0, [r7, #4]
 8018364:	f000 f96e 	bl	8018644 <USBH_HandleEnum>
 8018368:	4603      	mov	r3, r0
 801836a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 801836c:	7bbb      	ldrb	r3, [r7, #14]
 801836e:	b2db      	uxtb	r3, r3
 8018370:	2b00      	cmp	r3, #0
 8018372:	f040 815d 	bne.w	8018630 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	2200      	movs	r2, #0
 801837a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8018384:	2b01      	cmp	r3, #1
 8018386:	d103      	bne.n	8018390 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	2208      	movs	r2, #8
 801838c:	701a      	strb	r2, [r3, #0]
 801838e:	e002      	b.n	8018396 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	2207      	movs	r2, #7
 8018394:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	2205      	movs	r2, #5
 801839a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80183aa:	2200      	movs	r2, #0
 80183ac:	4619      	mov	r1, r3
 80183ae:	f001 fda5 	bl	8019efc <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80183b2:	e13d      	b.n	8018630 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	f000 813a 	beq.w	8018634 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80183c6:	2101      	movs	r1, #1
 80183c8:	6878      	ldr	r0, [r7, #4]
 80183ca:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	2208      	movs	r2, #8
 80183d0:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	2205      	movs	r2, #5
 80183d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80183e6:	2200      	movs	r2, #0
 80183e8:	4619      	mov	r1, r3
 80183ea:	f001 fd87 	bl	8019efc <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80183ee:	e121      	b.n	8018634 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80183f6:	b29b      	uxth	r3, r3
 80183f8:	4619      	mov	r1, r3
 80183fa:	6878      	ldr	r0, [r7, #4]
 80183fc:	f000 fd00 	bl	8018e00 <USBH_SetCfg>
 8018400:	4603      	mov	r3, r0
 8018402:	2b00      	cmp	r3, #0
 8018404:	d102      	bne.n	801840c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	2209      	movs	r2, #9
 801840a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	2201      	movs	r2, #1
 8018410:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018420:	2200      	movs	r2, #0
 8018422:	4619      	mov	r1, r3
 8018424:	f001 fd6a 	bl	8019efc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8018428:	e107      	b.n	801863a <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8018430:	f003 0320 	and.w	r3, r3, #32
 8018434:	2b00      	cmp	r3, #0
 8018436:	d015      	beq.n	8018464 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8018438:	2101      	movs	r1, #1
 801843a:	6878      	ldr	r0, [r7, #4]
 801843c:	f000 fd03 	bl	8018e46 <USBH_SetFeature>
 8018440:	4603      	mov	r3, r0
 8018442:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8018444:	7bbb      	ldrb	r3, [r7, #14]
 8018446:	b2db      	uxtb	r3, r3
 8018448:	2b00      	cmp	r3, #0
 801844a:	d103      	bne.n	8018454 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	220a      	movs	r2, #10
 8018450:	701a      	strb	r2, [r3, #0]
 8018452:	e00a      	b.n	801846a <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8018454:	7bbb      	ldrb	r3, [r7, #14]
 8018456:	b2db      	uxtb	r3, r3
 8018458:	2b03      	cmp	r3, #3
 801845a:	d106      	bne.n	801846a <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	220a      	movs	r2, #10
 8018460:	701a      	strb	r2, [r3, #0]
 8018462:	e002      	b.n	801846a <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	220a      	movs	r2, #10
 8018468:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	2201      	movs	r2, #1
 801846e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801847e:	2200      	movs	r2, #0
 8018480:	4619      	mov	r1, r3
 8018482:	f001 fd3b 	bl	8019efc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8018486:	e0d8      	b.n	801863a <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 801848e:	2b00      	cmp	r3, #0
 8018490:	d03f      	beq.n	8018512 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	2200      	movs	r2, #0
 8018496:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 801849a:	2300      	movs	r3, #0
 801849c:	73fb      	strb	r3, [r7, #15]
 801849e:	e016      	b.n	80184ce <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80184a0:	7bfa      	ldrb	r2, [r7, #15]
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	32de      	adds	r2, #222	; 0xde
 80184a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80184aa:	791a      	ldrb	r2, [r3, #4]
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80184b2:	429a      	cmp	r2, r3
 80184b4:	d108      	bne.n	80184c8 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 80184b6:	7bfa      	ldrb	r2, [r7, #15]
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	32de      	adds	r2, #222	; 0xde
 80184bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80184c6:	e005      	b.n	80184d4 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80184c8:	7bfb      	ldrb	r3, [r7, #15]
 80184ca:	3301      	adds	r3, #1
 80184cc:	73fb      	strb	r3, [r7, #15]
 80184ce:	7bfb      	ldrb	r3, [r7, #15]
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d0e5      	beq.n	80184a0 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d016      	beq.n	801850c <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80184e4:	689b      	ldr	r3, [r3, #8]
 80184e6:	6878      	ldr	r0, [r7, #4]
 80184e8:	4798      	blx	r3
 80184ea:	4603      	mov	r3, r0
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d109      	bne.n	8018504 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	2206      	movs	r2, #6
 80184f4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80184fc:	2103      	movs	r1, #3
 80184fe:	6878      	ldr	r0, [r7, #4]
 8018500:	4798      	blx	r3
 8018502:	e006      	b.n	8018512 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	220d      	movs	r2, #13
 8018508:	701a      	strb	r2, [r3, #0]
 801850a:	e002      	b.n	8018512 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	220d      	movs	r2, #13
 8018510:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	2205      	movs	r2, #5
 8018516:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018526:	2200      	movs	r2, #0
 8018528:	4619      	mov	r1, r3
 801852a:	f001 fce7 	bl	8019efc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801852e:	e084      	b.n	801863a <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018536:	2b00      	cmp	r3, #0
 8018538:	d017      	beq.n	801856a <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018540:	691b      	ldr	r3, [r3, #16]
 8018542:	6878      	ldr	r0, [r7, #4]
 8018544:	4798      	blx	r3
 8018546:	4603      	mov	r3, r0
 8018548:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 801854a:	7bbb      	ldrb	r3, [r7, #14]
 801854c:	b2db      	uxtb	r3, r3
 801854e:	2b00      	cmp	r3, #0
 8018550:	d103      	bne.n	801855a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	220b      	movs	r2, #11
 8018556:	701a      	strb	r2, [r3, #0]
 8018558:	e00a      	b.n	8018570 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 801855a:	7bbb      	ldrb	r3, [r7, #14]
 801855c:	b2db      	uxtb	r3, r3
 801855e:	2b02      	cmp	r3, #2
 8018560:	d106      	bne.n	8018570 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	220d      	movs	r2, #13
 8018566:	701a      	strb	r2, [r3, #0]
 8018568:	e002      	b.n	8018570 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	220d      	movs	r2, #13
 801856e:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	2205      	movs	r2, #5
 8018574:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018584:	2200      	movs	r2, #0
 8018586:	4619      	mov	r1, r3
 8018588:	f001 fcb8 	bl	8019efc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801858c:	e055      	b.n	801863a <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018594:	2b00      	cmp	r3, #0
 8018596:	d04f      	beq.n	8018638 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801859e:	695b      	ldr	r3, [r3, #20]
 80185a0:	6878      	ldr	r0, [r7, #4]
 80185a2:	4798      	blx	r3
      }
      break;
 80185a4:	e048      	b.n	8018638 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	2200      	movs	r2, #0
 80185aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80185ae:	6878      	ldr	r0, [r7, #4]
 80185b0:	f7ff fccc 	bl	8017f4c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d009      	beq.n	80185d2 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80185c4:	68db      	ldr	r3, [r3, #12]
 80185c6:	6878      	ldr	r0, [r7, #4]
 80185c8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	2200      	movs	r2, #0
 80185ce:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d005      	beq.n	80185e8 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80185e2:	2105      	movs	r1, #5
 80185e4:	6878      	ldr	r0, [r7, #4]
 80185e6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80185ee:	b2db      	uxtb	r3, r3
 80185f0:	2b01      	cmp	r3, #1
 80185f2:	d107      	bne.n	8018604 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	2200      	movs	r2, #0
 80185f8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80185fc:	6878      	ldr	r0, [r7, #4]
 80185fe:	f7ff fda4 	bl	801814a <USBH_Start>
 8018602:	e002      	b.n	801860a <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8018604:	6878      	ldr	r0, [r7, #4]
 8018606:	f004 ffbb 	bl	801d580 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	2201      	movs	r2, #1
 801860e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801861e:	2200      	movs	r2, #0
 8018620:	4619      	mov	r1, r3
 8018622:	f001 fc6b 	bl	8019efc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8018626:	e008      	b.n	801863a <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8018628:	bf00      	nop
 801862a:	e006      	b.n	801863a <USBH_Process+0x4ce>
      break;
 801862c:	bf00      	nop
 801862e:	e004      	b.n	801863a <USBH_Process+0x4ce>
      break;
 8018630:	bf00      	nop
 8018632:	e002      	b.n	801863a <USBH_Process+0x4ce>
    break;
 8018634:	bf00      	nop
 8018636:	e000      	b.n	801863a <USBH_Process+0x4ce>
      break;
 8018638:	bf00      	nop
  }
  return USBH_OK;
 801863a:	2300      	movs	r3, #0
}
 801863c:	4618      	mov	r0, r3
 801863e:	3710      	adds	r7, #16
 8018640:	46bd      	mov	sp, r7
 8018642:	bd80      	pop	{r7, pc}

08018644 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8018644:	b580      	push	{r7, lr}
 8018646:	b088      	sub	sp, #32
 8018648:	af04      	add	r7, sp, #16
 801864a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 801864c:	2301      	movs	r3, #1
 801864e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8018650:	2301      	movs	r3, #1
 8018652:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	785b      	ldrb	r3, [r3, #1]
 8018658:	2b07      	cmp	r3, #7
 801865a:	f200 8208 	bhi.w	8018a6e <USBH_HandleEnum+0x42a>
 801865e:	a201      	add	r2, pc, #4	; (adr r2, 8018664 <USBH_HandleEnum+0x20>)
 8018660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018664:	08018685 	.word	0x08018685
 8018668:	08018743 	.word	0x08018743
 801866c:	080187ad 	.word	0x080187ad
 8018670:	0801883b 	.word	0x0801883b
 8018674:	080188a5 	.word	0x080188a5
 8018678:	08018915 	.word	0x08018915
 801867c:	080189b1 	.word	0x080189b1
 8018680:	08018a2f 	.word	0x08018a2f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8018684:	2108      	movs	r1, #8
 8018686:	6878      	ldr	r0, [r7, #4]
 8018688:	f000 faea 	bl	8018c60 <USBH_Get_DevDesc>
 801868c:	4603      	mov	r3, r0
 801868e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8018690:	7bbb      	ldrb	r3, [r7, #14]
 8018692:	2b00      	cmp	r3, #0
 8018694:	d130      	bne.n	80186f8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	2201      	movs	r2, #1
 80186a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	7919      	ldrb	r1, [r3, #4]
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80186b6:	687a      	ldr	r2, [r7, #4]
 80186b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80186ba:	b292      	uxth	r2, r2
 80186bc:	9202      	str	r2, [sp, #8]
 80186be:	2200      	movs	r2, #0
 80186c0:	9201      	str	r2, [sp, #4]
 80186c2:	9300      	str	r3, [sp, #0]
 80186c4:	4603      	mov	r3, r0
 80186c6:	2280      	movs	r2, #128	; 0x80
 80186c8:	6878      	ldr	r0, [r7, #4]
 80186ca:	f001 f9c9 	bl	8019a60 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	7959      	ldrb	r1, [r3, #5]
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80186de:	687a      	ldr	r2, [r7, #4]
 80186e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80186e2:	b292      	uxth	r2, r2
 80186e4:	9202      	str	r2, [sp, #8]
 80186e6:	2200      	movs	r2, #0
 80186e8:	9201      	str	r2, [sp, #4]
 80186ea:	9300      	str	r3, [sp, #0]
 80186ec:	4603      	mov	r3, r0
 80186ee:	2200      	movs	r2, #0
 80186f0:	6878      	ldr	r0, [r7, #4]
 80186f2:	f001 f9b5 	bl	8019a60 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80186f6:	e1bc      	b.n	8018a72 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80186f8:	7bbb      	ldrb	r3, [r7, #14]
 80186fa:	2b03      	cmp	r3, #3
 80186fc:	f040 81b9 	bne.w	8018a72 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018706:	3301      	adds	r3, #1
 8018708:	b2da      	uxtb	r2, r3
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018716:	2b03      	cmp	r3, #3
 8018718:	d903      	bls.n	8018722 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	220d      	movs	r2, #13
 801871e:	701a      	strb	r2, [r3, #0]
      break;
 8018720:	e1a7      	b.n	8018a72 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	795b      	ldrb	r3, [r3, #5]
 8018726:	4619      	mov	r1, r3
 8018728:	6878      	ldr	r0, [r7, #4]
 801872a:	f001 f9e9 	bl	8019b00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	791b      	ldrb	r3, [r3, #4]
 8018732:	4619      	mov	r1, r3
 8018734:	6878      	ldr	r0, [r7, #4]
 8018736:	f001 f9e3 	bl	8019b00 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	2200      	movs	r2, #0
 801873e:	701a      	strb	r2, [r3, #0]
      break;
 8018740:	e197      	b.n	8018a72 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8018742:	2112      	movs	r1, #18
 8018744:	6878      	ldr	r0, [r7, #4]
 8018746:	f000 fa8b 	bl	8018c60 <USBH_Get_DevDesc>
 801874a:	4603      	mov	r3, r0
 801874c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801874e:	7bbb      	ldrb	r3, [r7, #14]
 8018750:	2b00      	cmp	r3, #0
 8018752:	d103      	bne.n	801875c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	2202      	movs	r2, #2
 8018758:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801875a:	e18c      	b.n	8018a76 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801875c:	7bbb      	ldrb	r3, [r7, #14]
 801875e:	2b03      	cmp	r3, #3
 8018760:	f040 8189 	bne.w	8018a76 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801876a:	3301      	adds	r3, #1
 801876c:	b2da      	uxtb	r2, r3
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801877a:	2b03      	cmp	r3, #3
 801877c:	d903      	bls.n	8018786 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	220d      	movs	r2, #13
 8018782:	701a      	strb	r2, [r3, #0]
      break;
 8018784:	e177      	b.n	8018a76 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	795b      	ldrb	r3, [r3, #5]
 801878a:	4619      	mov	r1, r3
 801878c:	6878      	ldr	r0, [r7, #4]
 801878e:	f001 f9b7 	bl	8019b00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	791b      	ldrb	r3, [r3, #4]
 8018796:	4619      	mov	r1, r3
 8018798:	6878      	ldr	r0, [r7, #4]
 801879a:	f001 f9b1 	bl	8019b00 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	2200      	movs	r2, #0
 80187a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	2200      	movs	r2, #0
 80187a8:	701a      	strb	r2, [r3, #0]
      break;
 80187aa:	e164      	b.n	8018a76 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80187ac:	2101      	movs	r1, #1
 80187ae:	6878      	ldr	r0, [r7, #4]
 80187b0:	f000 fb02 	bl	8018db8 <USBH_SetAddress>
 80187b4:	4603      	mov	r3, r0
 80187b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80187b8:	7bbb      	ldrb	r3, [r7, #14]
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d132      	bne.n	8018824 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80187be:	2002      	movs	r0, #2
 80187c0:	f005 f842 	bl	801d848 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	2201      	movs	r2, #1
 80187c8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	2203      	movs	r2, #3
 80187d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	7919      	ldrb	r1, [r3, #4]
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80187e2:	687a      	ldr	r2, [r7, #4]
 80187e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80187e6:	b292      	uxth	r2, r2
 80187e8:	9202      	str	r2, [sp, #8]
 80187ea:	2200      	movs	r2, #0
 80187ec:	9201      	str	r2, [sp, #4]
 80187ee:	9300      	str	r3, [sp, #0]
 80187f0:	4603      	mov	r3, r0
 80187f2:	2280      	movs	r2, #128	; 0x80
 80187f4:	6878      	ldr	r0, [r7, #4]
 80187f6:	f001 f933 	bl	8019a60 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	7959      	ldrb	r1, [r3, #5]
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801880a:	687a      	ldr	r2, [r7, #4]
 801880c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801880e:	b292      	uxth	r2, r2
 8018810:	9202      	str	r2, [sp, #8]
 8018812:	2200      	movs	r2, #0
 8018814:	9201      	str	r2, [sp, #4]
 8018816:	9300      	str	r3, [sp, #0]
 8018818:	4603      	mov	r3, r0
 801881a:	2200      	movs	r2, #0
 801881c:	6878      	ldr	r0, [r7, #4]
 801881e:	f001 f91f 	bl	8019a60 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8018822:	e12a      	b.n	8018a7a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8018824:	7bbb      	ldrb	r3, [r7, #14]
 8018826:	2b03      	cmp	r3, #3
 8018828:	f040 8127 	bne.w	8018a7a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	220d      	movs	r2, #13
 8018830:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	2200      	movs	r2, #0
 8018836:	705a      	strb	r2, [r3, #1]
      break;
 8018838:	e11f      	b.n	8018a7a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 801883a:	2109      	movs	r1, #9
 801883c:	6878      	ldr	r0, [r7, #4]
 801883e:	f000 fa37 	bl	8018cb0 <USBH_Get_CfgDesc>
 8018842:	4603      	mov	r3, r0
 8018844:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8018846:	7bbb      	ldrb	r3, [r7, #14]
 8018848:	2b00      	cmp	r3, #0
 801884a:	d103      	bne.n	8018854 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	2204      	movs	r2, #4
 8018850:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8018852:	e114      	b.n	8018a7e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8018854:	7bbb      	ldrb	r3, [r7, #14]
 8018856:	2b03      	cmp	r3, #3
 8018858:	f040 8111 	bne.w	8018a7e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018862:	3301      	adds	r3, #1
 8018864:	b2da      	uxtb	r2, r3
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018872:	2b03      	cmp	r3, #3
 8018874:	d903      	bls.n	801887e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	220d      	movs	r2, #13
 801887a:	701a      	strb	r2, [r3, #0]
      break;
 801887c:	e0ff      	b.n	8018a7e <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	795b      	ldrb	r3, [r3, #5]
 8018882:	4619      	mov	r1, r3
 8018884:	6878      	ldr	r0, [r7, #4]
 8018886:	f001 f93b 	bl	8019b00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	791b      	ldrb	r3, [r3, #4]
 801888e:	4619      	mov	r1, r3
 8018890:	6878      	ldr	r0, [r7, #4]
 8018892:	f001 f935 	bl	8019b00 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	2200      	movs	r2, #0
 801889a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	2200      	movs	r2, #0
 80188a0:	701a      	strb	r2, [r3, #0]
      break;
 80188a2:	e0ec      	b.n	8018a7e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80188aa:	4619      	mov	r1, r3
 80188ac:	6878      	ldr	r0, [r7, #4]
 80188ae:	f000 f9ff 	bl	8018cb0 <USBH_Get_CfgDesc>
 80188b2:	4603      	mov	r3, r0
 80188b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80188b6:	7bbb      	ldrb	r3, [r7, #14]
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d103      	bne.n	80188c4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	2205      	movs	r2, #5
 80188c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80188c2:	e0de      	b.n	8018a82 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80188c4:	7bbb      	ldrb	r3, [r7, #14]
 80188c6:	2b03      	cmp	r3, #3
 80188c8:	f040 80db 	bne.w	8018a82 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80188d2:	3301      	adds	r3, #1
 80188d4:	b2da      	uxtb	r2, r3
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80188e2:	2b03      	cmp	r3, #3
 80188e4:	d903      	bls.n	80188ee <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	220d      	movs	r2, #13
 80188ea:	701a      	strb	r2, [r3, #0]
      break;
 80188ec:	e0c9      	b.n	8018a82 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	795b      	ldrb	r3, [r3, #5]
 80188f2:	4619      	mov	r1, r3
 80188f4:	6878      	ldr	r0, [r7, #4]
 80188f6:	f001 f903 	bl	8019b00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	791b      	ldrb	r3, [r3, #4]
 80188fe:	4619      	mov	r1, r3
 8018900:	6878      	ldr	r0, [r7, #4]
 8018902:	f001 f8fd 	bl	8019b00 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	2200      	movs	r2, #0
 801890a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	2200      	movs	r2, #0
 8018910:	701a      	strb	r2, [r3, #0]
      break;
 8018912:	e0b6      	b.n	8018a82 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 801891a:	2b00      	cmp	r3, #0
 801891c:	d036      	beq.n	801898c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801892a:	23ff      	movs	r3, #255	; 0xff
 801892c:	6878      	ldr	r0, [r7, #4]
 801892e:	f000 f9e3 	bl	8018cf8 <USBH_Get_StringDesc>
 8018932:	4603      	mov	r3, r0
 8018934:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8018936:	7bbb      	ldrb	r3, [r7, #14]
 8018938:	2b00      	cmp	r3, #0
 801893a:	d111      	bne.n	8018960 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	2206      	movs	r2, #6
 8018940:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	2205      	movs	r2, #5
 8018946:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018956:	2200      	movs	r2, #0
 8018958:	4619      	mov	r1, r3
 801895a:	f001 facf 	bl	8019efc <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801895e:	e092      	b.n	8018a86 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8018960:	7bbb      	ldrb	r3, [r7, #14]
 8018962:	2b03      	cmp	r3, #3
 8018964:	f040 808f 	bne.w	8018a86 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	2206      	movs	r2, #6
 801896c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	2205      	movs	r2, #5
 8018972:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018982:	2200      	movs	r2, #0
 8018984:	4619      	mov	r1, r3
 8018986:	f001 fab9 	bl	8019efc <osMessagePut>
      break;
 801898a:	e07c      	b.n	8018a86 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	2206      	movs	r2, #6
 8018990:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	2205      	movs	r2, #5
 8018996:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80189a6:	2200      	movs	r2, #0
 80189a8:	4619      	mov	r1, r3
 80189aa:	f001 faa7 	bl	8019efc <osMessagePut>
      break;
 80189ae:	e06a      	b.n	8018a86 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d027      	beq.n	8018a0a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80189c6:	23ff      	movs	r3, #255	; 0xff
 80189c8:	6878      	ldr	r0, [r7, #4]
 80189ca:	f000 f995 	bl	8018cf8 <USBH_Get_StringDesc>
 80189ce:	4603      	mov	r3, r0
 80189d0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80189d2:	7bbb      	ldrb	r3, [r7, #14]
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d103      	bne.n	80189e0 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	2207      	movs	r2, #7
 80189dc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80189de:	e054      	b.n	8018a8a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80189e0:	7bbb      	ldrb	r3, [r7, #14]
 80189e2:	2b03      	cmp	r3, #3
 80189e4:	d151      	bne.n	8018a8a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	2207      	movs	r2, #7
 80189ea:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	2205      	movs	r2, #5
 80189f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018a00:	2200      	movs	r2, #0
 8018a02:	4619      	mov	r1, r3
 8018a04:	f001 fa7a 	bl	8019efc <osMessagePut>
      break;
 8018a08:	e03f      	b.n	8018a8a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	2207      	movs	r2, #7
 8018a0e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	2205      	movs	r2, #5
 8018a14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018a24:	2200      	movs	r2, #0
 8018a26:	4619      	mov	r1, r3
 8018a28:	f001 fa68 	bl	8019efc <osMessagePut>
      break;
 8018a2c:	e02d      	b.n	8018a8a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d017      	beq.n	8018a68 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8018a44:	23ff      	movs	r3, #255	; 0xff
 8018a46:	6878      	ldr	r0, [r7, #4]
 8018a48:	f000 f956 	bl	8018cf8 <USBH_Get_StringDesc>
 8018a4c:	4603      	mov	r3, r0
 8018a4e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8018a50:	7bbb      	ldrb	r3, [r7, #14]
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d102      	bne.n	8018a5c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8018a56:	2300      	movs	r3, #0
 8018a58:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8018a5a:	e018      	b.n	8018a8e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8018a5c:	7bbb      	ldrb	r3, [r7, #14]
 8018a5e:	2b03      	cmp	r3, #3
 8018a60:	d115      	bne.n	8018a8e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8018a62:	2300      	movs	r3, #0
 8018a64:	73fb      	strb	r3, [r7, #15]
      break;
 8018a66:	e012      	b.n	8018a8e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8018a68:	2300      	movs	r3, #0
 8018a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8018a6c:	e00f      	b.n	8018a8e <USBH_HandleEnum+0x44a>

    default:
      break;
 8018a6e:	bf00      	nop
 8018a70:	e00e      	b.n	8018a90 <USBH_HandleEnum+0x44c>
      break;
 8018a72:	bf00      	nop
 8018a74:	e00c      	b.n	8018a90 <USBH_HandleEnum+0x44c>
      break;
 8018a76:	bf00      	nop
 8018a78:	e00a      	b.n	8018a90 <USBH_HandleEnum+0x44c>
      break;
 8018a7a:	bf00      	nop
 8018a7c:	e008      	b.n	8018a90 <USBH_HandleEnum+0x44c>
      break;
 8018a7e:	bf00      	nop
 8018a80:	e006      	b.n	8018a90 <USBH_HandleEnum+0x44c>
      break;
 8018a82:	bf00      	nop
 8018a84:	e004      	b.n	8018a90 <USBH_HandleEnum+0x44c>
      break;
 8018a86:	bf00      	nop
 8018a88:	e002      	b.n	8018a90 <USBH_HandleEnum+0x44c>
      break;
 8018a8a:	bf00      	nop
 8018a8c:	e000      	b.n	8018a90 <USBH_HandleEnum+0x44c>
      break;
 8018a8e:	bf00      	nop
  }
  return Status;
 8018a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8018a92:	4618      	mov	r0, r3
 8018a94:	3710      	adds	r7, #16
 8018a96:	46bd      	mov	sp, r7
 8018a98:	bd80      	pop	{r7, pc}
 8018a9a:	bf00      	nop

08018a9c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8018a9c:	b480      	push	{r7}
 8018a9e:	b083      	sub	sp, #12
 8018aa0:	af00      	add	r7, sp, #0
 8018aa2:	6078      	str	r0, [r7, #4]
 8018aa4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	683a      	ldr	r2, [r7, #0]
 8018aaa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8018aae:	bf00      	nop
 8018ab0:	370c      	adds	r7, #12
 8018ab2:	46bd      	mov	sp, r7
 8018ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ab8:	4770      	bx	lr

08018aba <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8018aba:	b580      	push	{r7, lr}
 8018abc:	b082      	sub	sp, #8
 8018abe:	af00      	add	r7, sp, #0
 8018ac0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8018ac8:	1c5a      	adds	r2, r3, #1
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8018ad0:	6878      	ldr	r0, [r7, #4]
 8018ad2:	f000 f804 	bl	8018ade <USBH_HandleSof>
}
 8018ad6:	bf00      	nop
 8018ad8:	3708      	adds	r7, #8
 8018ada:	46bd      	mov	sp, r7
 8018adc:	bd80      	pop	{r7, pc}

08018ade <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8018ade:	b580      	push	{r7, lr}
 8018ae0:	b082      	sub	sp, #8
 8018ae2:	af00      	add	r7, sp, #0
 8018ae4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	781b      	ldrb	r3, [r3, #0]
 8018aea:	b2db      	uxtb	r3, r3
 8018aec:	2b0b      	cmp	r3, #11
 8018aee:	d10a      	bne.n	8018b06 <USBH_HandleSof+0x28>
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d005      	beq.n	8018b06 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018b00:	699b      	ldr	r3, [r3, #24]
 8018b02:	6878      	ldr	r0, [r7, #4]
 8018b04:	4798      	blx	r3
  }
}
 8018b06:	bf00      	nop
 8018b08:	3708      	adds	r7, #8
 8018b0a:	46bd      	mov	sp, r7
 8018b0c:	bd80      	pop	{r7, pc}

08018b0e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8018b0e:	b580      	push	{r7, lr}
 8018b10:	b082      	sub	sp, #8
 8018b12:	af00      	add	r7, sp, #0
 8018b14:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	2201      	movs	r2, #1
 8018b1a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	2201      	movs	r2, #1
 8018b22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018b32:	2200      	movs	r2, #0
 8018b34:	4619      	mov	r1, r3
 8018b36:	f001 f9e1 	bl	8019efc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8018b3a:	bf00      	nop
}
 8018b3c:	3708      	adds	r7, #8
 8018b3e:	46bd      	mov	sp, r7
 8018b40:	bd80      	pop	{r7, pc}

08018b42 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8018b42:	b480      	push	{r7}
 8018b44:	b083      	sub	sp, #12
 8018b46:	af00      	add	r7, sp, #0
 8018b48:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	2200      	movs	r2, #0
 8018b4e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8018b52:	bf00      	nop
}
 8018b54:	370c      	adds	r7, #12
 8018b56:	46bd      	mov	sp, r7
 8018b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b5c:	4770      	bx	lr

08018b5e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8018b5e:	b580      	push	{r7, lr}
 8018b60:	b082      	sub	sp, #8
 8018b62:	af00      	add	r7, sp, #0
 8018b64:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	2201      	movs	r2, #1
 8018b6a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	2200      	movs	r2, #0
 8018b72:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	2200      	movs	r2, #0
 8018b7a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	2201      	movs	r2, #1
 8018b82:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018b92:	2200      	movs	r2, #0
 8018b94:	4619      	mov	r1, r3
 8018b96:	f001 f9b1 	bl	8019efc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8018b9a:	2300      	movs	r3, #0
}
 8018b9c:	4618      	mov	r0, r3
 8018b9e:	3708      	adds	r7, #8
 8018ba0:	46bd      	mov	sp, r7
 8018ba2:	bd80      	pop	{r7, pc}

08018ba4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8018ba4:	b580      	push	{r7, lr}
 8018ba6:	b082      	sub	sp, #8
 8018ba8:	af00      	add	r7, sp, #0
 8018baa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	2201      	movs	r2, #1
 8018bb0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	2200      	movs	r2, #0
 8018bb8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	2200      	movs	r2, #0
 8018bc0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8018bc4:	6878      	ldr	r0, [r7, #4]
 8018bc6:	f004 fcf6 	bl	801d5b6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	791b      	ldrb	r3, [r3, #4]
 8018bce:	4619      	mov	r1, r3
 8018bd0:	6878      	ldr	r0, [r7, #4]
 8018bd2:	f000 ff95 	bl	8019b00 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	795b      	ldrb	r3, [r3, #5]
 8018bda:	4619      	mov	r1, r3
 8018bdc:	6878      	ldr	r0, [r7, #4]
 8018bde:	f000 ff8f 	bl	8019b00 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	2201      	movs	r2, #1
 8018be6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018bf6:	2200      	movs	r2, #0
 8018bf8:	4619      	mov	r1, r3
 8018bfa:	f001 f97f 	bl	8019efc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8018bfe:	2300      	movs	r3, #0
}
 8018c00:	4618      	mov	r0, r3
 8018c02:	3708      	adds	r7, #8
 8018c04:	46bd      	mov	sp, r7
 8018c06:	bd80      	pop	{r7, pc}

08018c08 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8018c08:	b580      	push	{r7, lr}
 8018c0a:	b086      	sub	sp, #24
 8018c0c:	af00      	add	r7, sp, #0
 8018c0e:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8018c16:	f107 030c 	add.w	r3, r7, #12
 8018c1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018c1e:	4618      	mov	r0, r3
 8018c20:	f001 f9ac 	bl	8019f7c <osMessageGet>
    if (event.status == osEventMessage)
 8018c24:	68fb      	ldr	r3, [r7, #12]
 8018c26:	2b10      	cmp	r3, #16
 8018c28:	d1f2      	bne.n	8018c10 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8018c2a:	6878      	ldr	r0, [r7, #4]
 8018c2c:	f7ff fa9e 	bl	801816c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8018c30:	e7ee      	b.n	8018c10 <USBH_Process_OS+0x8>

08018c32 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8018c32:	b580      	push	{r7, lr}
 8018c34:	b082      	sub	sp, #8
 8018c36:	af00      	add	r7, sp, #0
 8018c38:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	2201      	movs	r2, #1
 8018c3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8018c4e:	2200      	movs	r2, #0
 8018c50:	4619      	mov	r1, r3
 8018c52:	f001 f953 	bl	8019efc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8018c56:	2300      	movs	r3, #0
}
 8018c58:	4618      	mov	r0, r3
 8018c5a:	3708      	adds	r7, #8
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	bd80      	pop	{r7, pc}

08018c60 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8018c60:	b580      	push	{r7, lr}
 8018c62:	b086      	sub	sp, #24
 8018c64:	af02      	add	r7, sp, #8
 8018c66:	6078      	str	r0, [r7, #4]
 8018c68:	460b      	mov	r3, r1
 8018c6a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8018c72:	78fb      	ldrb	r3, [r7, #3]
 8018c74:	b29b      	uxth	r3, r3
 8018c76:	9300      	str	r3, [sp, #0]
 8018c78:	4613      	mov	r3, r2
 8018c7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018c7e:	2100      	movs	r1, #0
 8018c80:	6878      	ldr	r0, [r7, #4]
 8018c82:	f000 f864 	bl	8018d4e <USBH_GetDescriptor>
 8018c86:	4603      	mov	r3, r0
 8018c88:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8018c8a:	7bfb      	ldrb	r3, [r7, #15]
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d10a      	bne.n	8018ca6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	f203 3026 	addw	r0, r3, #806	; 0x326
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8018c9c:	78fa      	ldrb	r2, [r7, #3]
 8018c9e:	b292      	uxth	r2, r2
 8018ca0:	4619      	mov	r1, r3
 8018ca2:	f000 f919 	bl	8018ed8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8018ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8018ca8:	4618      	mov	r0, r3
 8018caa:	3710      	adds	r7, #16
 8018cac:	46bd      	mov	sp, r7
 8018cae:	bd80      	pop	{r7, pc}

08018cb0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8018cb0:	b580      	push	{r7, lr}
 8018cb2:	b086      	sub	sp, #24
 8018cb4:	af02      	add	r7, sp, #8
 8018cb6:	6078      	str	r0, [r7, #4]
 8018cb8:	460b      	mov	r3, r1
 8018cba:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	331c      	adds	r3, #28
 8018cc0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8018cc2:	887b      	ldrh	r3, [r7, #2]
 8018cc4:	9300      	str	r3, [sp, #0]
 8018cc6:	68bb      	ldr	r3, [r7, #8]
 8018cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018ccc:	2100      	movs	r1, #0
 8018cce:	6878      	ldr	r0, [r7, #4]
 8018cd0:	f000 f83d 	bl	8018d4e <USBH_GetDescriptor>
 8018cd4:	4603      	mov	r3, r0
 8018cd6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8018cd8:	7bfb      	ldrb	r3, [r7, #15]
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d107      	bne.n	8018cee <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8018cde:	887b      	ldrh	r3, [r7, #2]
 8018ce0:	461a      	mov	r2, r3
 8018ce2:	68b9      	ldr	r1, [r7, #8]
 8018ce4:	6878      	ldr	r0, [r7, #4]
 8018ce6:	f000 f987 	bl	8018ff8 <USBH_ParseCfgDesc>
 8018cea:	4603      	mov	r3, r0
 8018cec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8018cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8018cf0:	4618      	mov	r0, r3
 8018cf2:	3710      	adds	r7, #16
 8018cf4:	46bd      	mov	sp, r7
 8018cf6:	bd80      	pop	{r7, pc}

08018cf8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8018cf8:	b580      	push	{r7, lr}
 8018cfa:	b088      	sub	sp, #32
 8018cfc:	af02      	add	r7, sp, #8
 8018cfe:	60f8      	str	r0, [r7, #12]
 8018d00:	607a      	str	r2, [r7, #4]
 8018d02:	461a      	mov	r2, r3
 8018d04:	460b      	mov	r3, r1
 8018d06:	72fb      	strb	r3, [r7, #11]
 8018d08:	4613      	mov	r3, r2
 8018d0a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8018d0c:	7afb      	ldrb	r3, [r7, #11]
 8018d0e:	b29b      	uxth	r3, r3
 8018d10:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8018d14:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8018d16:	68fb      	ldr	r3, [r7, #12]
 8018d18:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8018d1c:	893b      	ldrh	r3, [r7, #8]
 8018d1e:	9300      	str	r3, [sp, #0]
 8018d20:	460b      	mov	r3, r1
 8018d22:	2100      	movs	r1, #0
 8018d24:	68f8      	ldr	r0, [r7, #12]
 8018d26:	f000 f812 	bl	8018d4e <USBH_GetDescriptor>
 8018d2a:	4603      	mov	r3, r0
 8018d2c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8018d2e:	7dfb      	ldrb	r3, [r7, #23]
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d107      	bne.n	8018d44 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8018d34:	68fb      	ldr	r3, [r7, #12]
 8018d36:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8018d3a:	893a      	ldrh	r2, [r7, #8]
 8018d3c:	6879      	ldr	r1, [r7, #4]
 8018d3e:	4618      	mov	r0, r3
 8018d40:	f000 fafe 	bl	8019340 <USBH_ParseStringDesc>
  }

  return status;
 8018d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8018d46:	4618      	mov	r0, r3
 8018d48:	3718      	adds	r7, #24
 8018d4a:	46bd      	mov	sp, r7
 8018d4c:	bd80      	pop	{r7, pc}

08018d4e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8018d4e:	b580      	push	{r7, lr}
 8018d50:	b084      	sub	sp, #16
 8018d52:	af00      	add	r7, sp, #0
 8018d54:	60f8      	str	r0, [r7, #12]
 8018d56:	607b      	str	r3, [r7, #4]
 8018d58:	460b      	mov	r3, r1
 8018d5a:	72fb      	strb	r3, [r7, #11]
 8018d5c:	4613      	mov	r3, r2
 8018d5e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	789b      	ldrb	r3, [r3, #2]
 8018d64:	2b01      	cmp	r3, #1
 8018d66:	d11c      	bne.n	8018da2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8018d68:	7afb      	ldrb	r3, [r7, #11]
 8018d6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018d6e:	b2da      	uxtb	r2, r3
 8018d70:	68fb      	ldr	r3, [r7, #12]
 8018d72:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8018d74:	68fb      	ldr	r3, [r7, #12]
 8018d76:	2206      	movs	r2, #6
 8018d78:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8018d7a:	68fb      	ldr	r3, [r7, #12]
 8018d7c:	893a      	ldrh	r2, [r7, #8]
 8018d7e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8018d80:	893b      	ldrh	r3, [r7, #8]
 8018d82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018d86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018d8a:	d104      	bne.n	8018d96 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	f240 4209 	movw	r2, #1033	; 0x409
 8018d92:	829a      	strh	r2, [r3, #20]
 8018d94:	e002      	b.n	8018d9c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8018d96:	68fb      	ldr	r3, [r7, #12]
 8018d98:	2200      	movs	r2, #0
 8018d9a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8018d9c:	68fb      	ldr	r3, [r7, #12]
 8018d9e:	8b3a      	ldrh	r2, [r7, #24]
 8018da0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8018da2:	8b3b      	ldrh	r3, [r7, #24]
 8018da4:	461a      	mov	r2, r3
 8018da6:	6879      	ldr	r1, [r7, #4]
 8018da8:	68f8      	ldr	r0, [r7, #12]
 8018daa:	f000 fb17 	bl	80193dc <USBH_CtlReq>
 8018dae:	4603      	mov	r3, r0
}
 8018db0:	4618      	mov	r0, r3
 8018db2:	3710      	adds	r7, #16
 8018db4:	46bd      	mov	sp, r7
 8018db6:	bd80      	pop	{r7, pc}

08018db8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8018db8:	b580      	push	{r7, lr}
 8018dba:	b082      	sub	sp, #8
 8018dbc:	af00      	add	r7, sp, #0
 8018dbe:	6078      	str	r0, [r7, #4]
 8018dc0:	460b      	mov	r3, r1
 8018dc2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	789b      	ldrb	r3, [r3, #2]
 8018dc8:	2b01      	cmp	r3, #1
 8018dca:	d10f      	bne.n	8018dec <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	2200      	movs	r2, #0
 8018dd0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	2205      	movs	r2, #5
 8018dd6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8018dd8:	78fb      	ldrb	r3, [r7, #3]
 8018dda:	b29a      	uxth	r2, r3
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	2200      	movs	r2, #0
 8018de4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	2200      	movs	r2, #0
 8018dea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8018dec:	2200      	movs	r2, #0
 8018dee:	2100      	movs	r1, #0
 8018df0:	6878      	ldr	r0, [r7, #4]
 8018df2:	f000 faf3 	bl	80193dc <USBH_CtlReq>
 8018df6:	4603      	mov	r3, r0
}
 8018df8:	4618      	mov	r0, r3
 8018dfa:	3708      	adds	r7, #8
 8018dfc:	46bd      	mov	sp, r7
 8018dfe:	bd80      	pop	{r7, pc}

08018e00 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8018e00:	b580      	push	{r7, lr}
 8018e02:	b082      	sub	sp, #8
 8018e04:	af00      	add	r7, sp, #0
 8018e06:	6078      	str	r0, [r7, #4]
 8018e08:	460b      	mov	r3, r1
 8018e0a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	789b      	ldrb	r3, [r3, #2]
 8018e10:	2b01      	cmp	r3, #1
 8018e12:	d10e      	bne.n	8018e32 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	2200      	movs	r2, #0
 8018e18:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	2209      	movs	r2, #9
 8018e1e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	887a      	ldrh	r2, [r7, #2]
 8018e24:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	2200      	movs	r2, #0
 8018e2a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	2200      	movs	r2, #0
 8018e30:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8018e32:	2200      	movs	r2, #0
 8018e34:	2100      	movs	r1, #0
 8018e36:	6878      	ldr	r0, [r7, #4]
 8018e38:	f000 fad0 	bl	80193dc <USBH_CtlReq>
 8018e3c:	4603      	mov	r3, r0
}
 8018e3e:	4618      	mov	r0, r3
 8018e40:	3708      	adds	r7, #8
 8018e42:	46bd      	mov	sp, r7
 8018e44:	bd80      	pop	{r7, pc}

08018e46 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8018e46:	b580      	push	{r7, lr}
 8018e48:	b082      	sub	sp, #8
 8018e4a:	af00      	add	r7, sp, #0
 8018e4c:	6078      	str	r0, [r7, #4]
 8018e4e:	460b      	mov	r3, r1
 8018e50:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	789b      	ldrb	r3, [r3, #2]
 8018e56:	2b01      	cmp	r3, #1
 8018e58:	d10f      	bne.n	8018e7a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	2200      	movs	r2, #0
 8018e5e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	2203      	movs	r2, #3
 8018e64:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8018e66:	78fb      	ldrb	r3, [r7, #3]
 8018e68:	b29a      	uxth	r2, r3
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	2200      	movs	r2, #0
 8018e72:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	2200      	movs	r2, #0
 8018e78:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8018e7a:	2200      	movs	r2, #0
 8018e7c:	2100      	movs	r1, #0
 8018e7e:	6878      	ldr	r0, [r7, #4]
 8018e80:	f000 faac 	bl	80193dc <USBH_CtlReq>
 8018e84:	4603      	mov	r3, r0
}
 8018e86:	4618      	mov	r0, r3
 8018e88:	3708      	adds	r7, #8
 8018e8a:	46bd      	mov	sp, r7
 8018e8c:	bd80      	pop	{r7, pc}

08018e8e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8018e8e:	b580      	push	{r7, lr}
 8018e90:	b082      	sub	sp, #8
 8018e92:	af00      	add	r7, sp, #0
 8018e94:	6078      	str	r0, [r7, #4]
 8018e96:	460b      	mov	r3, r1
 8018e98:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	789b      	ldrb	r3, [r3, #2]
 8018e9e:	2b01      	cmp	r3, #1
 8018ea0:	d10f      	bne.n	8018ec2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	2202      	movs	r2, #2
 8018ea6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	2201      	movs	r2, #1
 8018eac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	2200      	movs	r2, #0
 8018eb2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8018eb4:	78fb      	ldrb	r3, [r7, #3]
 8018eb6:	b29a      	uxth	r2, r3
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	2200      	movs	r2, #0
 8018ec0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8018ec2:	2200      	movs	r2, #0
 8018ec4:	2100      	movs	r1, #0
 8018ec6:	6878      	ldr	r0, [r7, #4]
 8018ec8:	f000 fa88 	bl	80193dc <USBH_CtlReq>
 8018ecc:	4603      	mov	r3, r0
}
 8018ece:	4618      	mov	r0, r3
 8018ed0:	3708      	adds	r7, #8
 8018ed2:	46bd      	mov	sp, r7
 8018ed4:	bd80      	pop	{r7, pc}
	...

08018ed8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                              uint16_t length)
{
 8018ed8:	b480      	push	{r7}
 8018eda:	b085      	sub	sp, #20
 8018edc:	af00      	add	r7, sp, #0
 8018ede:	60f8      	str	r0, [r7, #12]
 8018ee0:	60b9      	str	r1, [r7, #8]
 8018ee2:	4613      	mov	r3, r2
 8018ee4:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8018ee6:	68bb      	ldr	r3, [r7, #8]
 8018ee8:	781a      	ldrb	r2, [r3, #0]
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8018eee:	68bb      	ldr	r3, [r7, #8]
 8018ef0:	785a      	ldrb	r2, [r3, #1]
 8018ef2:	68fb      	ldr	r3, [r7, #12]
 8018ef4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8018ef6:	68bb      	ldr	r3, [r7, #8]
 8018ef8:	3302      	adds	r3, #2
 8018efa:	781b      	ldrb	r3, [r3, #0]
 8018efc:	b29a      	uxth	r2, r3
 8018efe:	68bb      	ldr	r3, [r7, #8]
 8018f00:	3303      	adds	r3, #3
 8018f02:	781b      	ldrb	r3, [r3, #0]
 8018f04:	b29b      	uxth	r3, r3
 8018f06:	021b      	lsls	r3, r3, #8
 8018f08:	b29b      	uxth	r3, r3
 8018f0a:	4313      	orrs	r3, r2
 8018f0c:	b29a      	uxth	r2, r3
 8018f0e:	68fb      	ldr	r3, [r7, #12]
 8018f10:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8018f12:	68bb      	ldr	r3, [r7, #8]
 8018f14:	791a      	ldrb	r2, [r3, #4]
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8018f1a:	68bb      	ldr	r3, [r7, #8]
 8018f1c:	795a      	ldrb	r2, [r3, #5]
 8018f1e:	68fb      	ldr	r3, [r7, #12]
 8018f20:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8018f22:	68bb      	ldr	r3, [r7, #8]
 8018f24:	799a      	ldrb	r2, [r3, #6]
 8018f26:	68fb      	ldr	r3, [r7, #12]
 8018f28:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8018f2a:	68bb      	ldr	r3, [r7, #8]
 8018f2c:	79da      	ldrb	r2, [r3, #7]
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8018f32:	68fb      	ldr	r3, [r7, #12]
 8018f34:	79db      	ldrb	r3, [r3, #7]
 8018f36:	2b20      	cmp	r3, #32
 8018f38:	dc0e      	bgt.n	8018f58 <USBH_ParseDevDesc+0x80>
 8018f3a:	2b08      	cmp	r3, #8
 8018f3c:	db13      	blt.n	8018f66 <USBH_ParseDevDesc+0x8e>
 8018f3e:	3b08      	subs	r3, #8
 8018f40:	2201      	movs	r2, #1
 8018f42:	409a      	lsls	r2, r3
 8018f44:	4b2b      	ldr	r3, [pc, #172]	; (8018ff4 <USBH_ParseDevDesc+0x11c>)
 8018f46:	4013      	ands	r3, r2
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	bf14      	ite	ne
 8018f4c:	2301      	movne	r3, #1
 8018f4e:	2300      	moveq	r3, #0
 8018f50:	b2db      	uxtb	r3, r3
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	d102      	bne.n	8018f5c <USBH_ParseDevDesc+0x84>
 8018f56:	e006      	b.n	8018f66 <USBH_ParseDevDesc+0x8e>
 8018f58:	2b40      	cmp	r3, #64	; 0x40
 8018f5a:	d104      	bne.n	8018f66 <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8018f5c:	68fb      	ldr	r3, [r7, #12]
 8018f5e:	79da      	ldrb	r2, [r3, #7]
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	71da      	strb	r2, [r3, #7]
      break;
 8018f64:	e003      	b.n	8018f6e <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	2240      	movs	r2, #64	; 0x40
 8018f6a:	71da      	strb	r2, [r3, #7]
      break;
 8018f6c:	bf00      	nop
  }

  if (length > 8U)
 8018f6e:	88fb      	ldrh	r3, [r7, #6]
 8018f70:	2b08      	cmp	r3, #8
 8018f72:	d939      	bls.n	8018fe8 <USBH_ParseDevDesc+0x110>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8018f74:	68bb      	ldr	r3, [r7, #8]
 8018f76:	3308      	adds	r3, #8
 8018f78:	781b      	ldrb	r3, [r3, #0]
 8018f7a:	b29a      	uxth	r2, r3
 8018f7c:	68bb      	ldr	r3, [r7, #8]
 8018f7e:	3309      	adds	r3, #9
 8018f80:	781b      	ldrb	r3, [r3, #0]
 8018f82:	b29b      	uxth	r3, r3
 8018f84:	021b      	lsls	r3, r3, #8
 8018f86:	b29b      	uxth	r3, r3
 8018f88:	4313      	orrs	r3, r2
 8018f8a:	b29a      	uxth	r2, r3
 8018f8c:	68fb      	ldr	r3, [r7, #12]
 8018f8e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8018f90:	68bb      	ldr	r3, [r7, #8]
 8018f92:	330a      	adds	r3, #10
 8018f94:	781b      	ldrb	r3, [r3, #0]
 8018f96:	b29a      	uxth	r2, r3
 8018f98:	68bb      	ldr	r3, [r7, #8]
 8018f9a:	330b      	adds	r3, #11
 8018f9c:	781b      	ldrb	r3, [r3, #0]
 8018f9e:	b29b      	uxth	r3, r3
 8018fa0:	021b      	lsls	r3, r3, #8
 8018fa2:	b29b      	uxth	r3, r3
 8018fa4:	4313      	orrs	r3, r2
 8018fa6:	b29a      	uxth	r2, r3
 8018fa8:	68fb      	ldr	r3, [r7, #12]
 8018faa:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8018fac:	68bb      	ldr	r3, [r7, #8]
 8018fae:	330c      	adds	r3, #12
 8018fb0:	781b      	ldrb	r3, [r3, #0]
 8018fb2:	b29a      	uxth	r2, r3
 8018fb4:	68bb      	ldr	r3, [r7, #8]
 8018fb6:	330d      	adds	r3, #13
 8018fb8:	781b      	ldrb	r3, [r3, #0]
 8018fba:	b29b      	uxth	r3, r3
 8018fbc:	021b      	lsls	r3, r3, #8
 8018fbe:	b29b      	uxth	r3, r3
 8018fc0:	4313      	orrs	r3, r2
 8018fc2:	b29a      	uxth	r2, r3
 8018fc4:	68fb      	ldr	r3, [r7, #12]
 8018fc6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8018fc8:	68bb      	ldr	r3, [r7, #8]
 8018fca:	7b9a      	ldrb	r2, [r3, #14]
 8018fcc:	68fb      	ldr	r3, [r7, #12]
 8018fce:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8018fd0:	68bb      	ldr	r3, [r7, #8]
 8018fd2:	7bda      	ldrb	r2, [r3, #15]
 8018fd4:	68fb      	ldr	r3, [r7, #12]
 8018fd6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8018fd8:	68bb      	ldr	r3, [r7, #8]
 8018fda:	7c1a      	ldrb	r2, [r3, #16]
 8018fdc:	68fb      	ldr	r3, [r7, #12]
 8018fde:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8018fe0:	68bb      	ldr	r3, [r7, #8]
 8018fe2:	7c5a      	ldrb	r2, [r3, #17]
 8018fe4:	68fb      	ldr	r3, [r7, #12]
 8018fe6:	745a      	strb	r2, [r3, #17]
  }
}
 8018fe8:	bf00      	nop
 8018fea:	3714      	adds	r7, #20
 8018fec:	46bd      	mov	sp, r7
 8018fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ff2:	4770      	bx	lr
 8018ff4:	01000101 	.word	0x01000101

08018ff8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8018ff8:	b580      	push	{r7, lr}
 8018ffa:	b08c      	sub	sp, #48	; 0x30
 8018ffc:	af00      	add	r7, sp, #0
 8018ffe:	60f8      	str	r0, [r7, #12]
 8019000:	60b9      	str	r1, [r7, #8]
 8019002:	4613      	mov	r3, r2
 8019004:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8019006:	68fb      	ldr	r3, [r7, #12]
 8019008:	f503 734e 	add.w	r3, r3, #824	; 0x338
 801900c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 801900e:	2300      	movs	r3, #0
 8019010:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8019014:	68bb      	ldr	r3, [r7, #8]
 8019016:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8019018:	2300      	movs	r3, #0
 801901a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 801901e:	2300      	movs	r3, #0
 8019020:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8019024:	68bb      	ldr	r3, [r7, #8]
 8019026:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8019028:	68bb      	ldr	r3, [r7, #8]
 801902a:	781a      	ldrb	r2, [r3, #0]
 801902c:	6a3b      	ldr	r3, [r7, #32]
 801902e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8019030:	68bb      	ldr	r3, [r7, #8]
 8019032:	785a      	ldrb	r2, [r3, #1]
 8019034:	6a3b      	ldr	r3, [r7, #32]
 8019036:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8019038:	68bb      	ldr	r3, [r7, #8]
 801903a:	3302      	adds	r3, #2
 801903c:	781b      	ldrb	r3, [r3, #0]
 801903e:	b29a      	uxth	r2, r3
 8019040:	68bb      	ldr	r3, [r7, #8]
 8019042:	3303      	adds	r3, #3
 8019044:	781b      	ldrb	r3, [r3, #0]
 8019046:	b29b      	uxth	r3, r3
 8019048:	021b      	lsls	r3, r3, #8
 801904a:	b29b      	uxth	r3, r3
 801904c:	4313      	orrs	r3, r2
 801904e:	b29b      	uxth	r3, r3
 8019050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019054:	bf28      	it	cs
 8019056:	f44f 7380 	movcs.w	r3, #256	; 0x100
 801905a:	b29a      	uxth	r2, r3
 801905c:	6a3b      	ldr	r3, [r7, #32]
 801905e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8019060:	68bb      	ldr	r3, [r7, #8]
 8019062:	791a      	ldrb	r2, [r3, #4]
 8019064:	6a3b      	ldr	r3, [r7, #32]
 8019066:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8019068:	68bb      	ldr	r3, [r7, #8]
 801906a:	795a      	ldrb	r2, [r3, #5]
 801906c:	6a3b      	ldr	r3, [r7, #32]
 801906e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8019070:	68bb      	ldr	r3, [r7, #8]
 8019072:	799a      	ldrb	r2, [r3, #6]
 8019074:	6a3b      	ldr	r3, [r7, #32]
 8019076:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8019078:	68bb      	ldr	r3, [r7, #8]
 801907a:	79da      	ldrb	r2, [r3, #7]
 801907c:	6a3b      	ldr	r3, [r7, #32]
 801907e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8019080:	68bb      	ldr	r3, [r7, #8]
 8019082:	7a1a      	ldrb	r2, [r3, #8]
 8019084:	6a3b      	ldr	r3, [r7, #32]
 8019086:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8019088:	6a3b      	ldr	r3, [r7, #32]
 801908a:	781b      	ldrb	r3, [r3, #0]
 801908c:	2b09      	cmp	r3, #9
 801908e:	d002      	beq.n	8019096 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8019090:	6a3b      	ldr	r3, [r7, #32]
 8019092:	2209      	movs	r2, #9
 8019094:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8019096:	88fb      	ldrh	r3, [r7, #6]
 8019098:	2b09      	cmp	r3, #9
 801909a:	f240 8099 	bls.w	80191d0 <USBH_ParseCfgDesc+0x1d8>
  {
    ptr = USB_LEN_CFG_DESC;
 801909e:	2309      	movs	r3, #9
 80190a0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80190a2:	2300      	movs	r3, #0
 80190a4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80190a6:	e07d      	b.n	80191a4 <USBH_ParseCfgDesc+0x1ac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80190a8:	f107 0316 	add.w	r3, r7, #22
 80190ac:	4619      	mov	r1, r3
 80190ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80190b0:	f000 f979 	bl	80193a6 <USBH_GetNextDesc>
 80190b4:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80190b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190b8:	785b      	ldrb	r3, [r3, #1]
 80190ba:	2b04      	cmp	r3, #4
 80190bc:	d172      	bne.n	80191a4 <USBH_ParseCfgDesc+0x1ac>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80190be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190c0:	781b      	ldrb	r3, [r3, #0]
 80190c2:	2b09      	cmp	r3, #9
 80190c4:	d002      	beq.n	80190cc <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80190c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190c8:	2209      	movs	r2, #9
 80190ca:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80190cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80190d0:	221a      	movs	r2, #26
 80190d2:	fb02 f303 	mul.w	r3, r2, r3
 80190d6:	3308      	adds	r3, #8
 80190d8:	6a3a      	ldr	r2, [r7, #32]
 80190da:	4413      	add	r3, r2
 80190dc:	3302      	adds	r3, #2
 80190de:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80190e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80190e2:	69f8      	ldr	r0, [r7, #28]
 80190e4:	f000 f87a 	bl	80191dc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80190e8:	2300      	movs	r3, #0
 80190ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80190ee:	2300      	movs	r3, #0
 80190f0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80190f2:	e03f      	b.n	8019174 <USBH_ParseCfgDesc+0x17c>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80190f4:	f107 0316 	add.w	r3, r7, #22
 80190f8:	4619      	mov	r1, r3
 80190fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80190fc:	f000 f953 	bl	80193a6 <USBH_GetNextDesc>
 8019100:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8019102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019104:	785b      	ldrb	r3, [r3, #1]
 8019106:	2b05      	cmp	r3, #5
 8019108:	d134      	bne.n	8019174 <USBH_ParseCfgDesc+0x17c>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 801910a:	69fb      	ldr	r3, [r7, #28]
 801910c:	795b      	ldrb	r3, [r3, #5]
 801910e:	2b01      	cmp	r3, #1
 8019110:	d10f      	bne.n	8019132 <USBH_ParseCfgDesc+0x13a>
 8019112:	69fb      	ldr	r3, [r7, #28]
 8019114:	799b      	ldrb	r3, [r3, #6]
 8019116:	2b02      	cmp	r3, #2
 8019118:	d10b      	bne.n	8019132 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801911a:	69fb      	ldr	r3, [r7, #28]
 801911c:	79db      	ldrb	r3, [r3, #7]
 801911e:	2b00      	cmp	r3, #0
 8019120:	d10b      	bne.n	801913a <USBH_ParseCfgDesc+0x142>
 8019122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019124:	781b      	ldrb	r3, [r3, #0]
 8019126:	2b09      	cmp	r3, #9
 8019128:	d007      	beq.n	801913a <USBH_ParseCfgDesc+0x142>
              {
                pdesc->bLength = 0x09U;
 801912a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801912c:	2209      	movs	r2, #9
 801912e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8019130:	e003      	b.n	801913a <USBH_ParseCfgDesc+0x142>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8019132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019134:	2207      	movs	r2, #7
 8019136:	701a      	strb	r2, [r3, #0]
 8019138:	e000      	b.n	801913c <USBH_ParseCfgDesc+0x144>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801913a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 801913c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019140:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8019144:	3201      	adds	r2, #1
 8019146:	00d2      	lsls	r2, r2, #3
 8019148:	211a      	movs	r1, #26
 801914a:	fb01 f303 	mul.w	r3, r1, r3
 801914e:	4413      	add	r3, r2
 8019150:	3308      	adds	r3, #8
 8019152:	6a3a      	ldr	r2, [r7, #32]
 8019154:	4413      	add	r3, r2
 8019156:	3304      	adds	r3, #4
 8019158:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 801915a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801915c:	69b9      	ldr	r1, [r7, #24]
 801915e:	68f8      	ldr	r0, [r7, #12]
 8019160:	f000 f86c 	bl	801923c <USBH_ParseEPDesc>
 8019164:	4603      	mov	r3, r0
 8019166:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 801916a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801916e:	3301      	adds	r3, #1
 8019170:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8019174:	69fb      	ldr	r3, [r7, #28]
 8019176:	791b      	ldrb	r3, [r3, #4]
 8019178:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801917c:	429a      	cmp	r2, r3
 801917e:	d204      	bcs.n	801918a <USBH_ParseCfgDesc+0x192>
 8019180:	6a3b      	ldr	r3, [r7, #32]
 8019182:	885a      	ldrh	r2, [r3, #2]
 8019184:	8afb      	ldrh	r3, [r7, #22]
 8019186:	429a      	cmp	r2, r3
 8019188:	d8b4      	bhi.n	80190f4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 801918a:	69fb      	ldr	r3, [r7, #28]
 801918c:	791b      	ldrb	r3, [r3, #4]
 801918e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8019192:	429a      	cmp	r2, r3
 8019194:	d201      	bcs.n	801919a <USBH_ParseCfgDesc+0x1a2>
        {
          return USBH_NOT_SUPPORTED;
 8019196:	2303      	movs	r3, #3
 8019198:	e01c      	b.n	80191d4 <USBH_ParseCfgDesc+0x1dc>
        }

        if_ix++;
 801919a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801919e:	3301      	adds	r3, #1
 80191a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80191a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80191a8:	2b01      	cmp	r3, #1
 80191aa:	d805      	bhi.n	80191b8 <USBH_ParseCfgDesc+0x1c0>
 80191ac:	6a3b      	ldr	r3, [r7, #32]
 80191ae:	885a      	ldrh	r2, [r3, #2]
 80191b0:	8afb      	ldrh	r3, [r7, #22]
 80191b2:	429a      	cmp	r2, r3
 80191b4:	f63f af78 	bhi.w	80190a8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80191b8:	6a3b      	ldr	r3, [r7, #32]
 80191ba:	791b      	ldrb	r3, [r3, #4]
 80191bc:	2b02      	cmp	r3, #2
 80191be:	bf28      	it	cs
 80191c0:	2302      	movcs	r3, #2
 80191c2:	b2db      	uxtb	r3, r3
 80191c4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80191c8:	429a      	cmp	r2, r3
 80191ca:	d201      	bcs.n	80191d0 <USBH_ParseCfgDesc+0x1d8>
    {
      return USBH_NOT_SUPPORTED;
 80191cc:	2303      	movs	r3, #3
 80191ce:	e001      	b.n	80191d4 <USBH_ParseCfgDesc+0x1dc>
    }
  }

  return status;
 80191d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80191d4:	4618      	mov	r0, r3
 80191d6:	3730      	adds	r7, #48	; 0x30
 80191d8:	46bd      	mov	sp, r7
 80191da:	bd80      	pop	{r7, pc}

080191dc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                    uint8_t *buf)
{
 80191dc:	b480      	push	{r7}
 80191de:	b083      	sub	sp, #12
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	6078      	str	r0, [r7, #4]
 80191e4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80191e6:	683b      	ldr	r3, [r7, #0]
 80191e8:	781a      	ldrb	r2, [r3, #0]
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80191ee:	683b      	ldr	r3, [r7, #0]
 80191f0:	785a      	ldrb	r2, [r3, #1]
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80191f6:	683b      	ldr	r3, [r7, #0]
 80191f8:	789a      	ldrb	r2, [r3, #2]
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80191fe:	683b      	ldr	r3, [r7, #0]
 8019200:	78da      	ldrb	r2, [r3, #3]
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8019206:	683b      	ldr	r3, [r7, #0]
 8019208:	791a      	ldrb	r2, [r3, #4]
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 801920e:	683b      	ldr	r3, [r7, #0]
 8019210:	795a      	ldrb	r2, [r3, #5]
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8019216:	683b      	ldr	r3, [r7, #0]
 8019218:	799a      	ldrb	r2, [r3, #6]
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 801921e:	683b      	ldr	r3, [r7, #0]
 8019220:	79da      	ldrb	r2, [r3, #7]
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8019226:	683b      	ldr	r3, [r7, #0]
 8019228:	7a1a      	ldrb	r2, [r3, #8]
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	721a      	strb	r2, [r3, #8]
}
 801922e:	bf00      	nop
 8019230:	370c      	adds	r7, #12
 8019232:	46bd      	mov	sp, r7
 8019234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019238:	4770      	bx	lr
	...

0801923c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                           uint8_t *buf)
{
 801923c:	b480      	push	{r7}
 801923e:	b087      	sub	sp, #28
 8019240:	af00      	add	r7, sp, #0
 8019242:	60f8      	str	r0, [r7, #12]
 8019244:	60b9      	str	r1, [r7, #8]
 8019246:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8019248:	2300      	movs	r3, #0
 801924a:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	781a      	ldrb	r2, [r3, #0]
 8019250:	68bb      	ldr	r3, [r7, #8]
 8019252:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	785a      	ldrb	r2, [r3, #1]
 8019258:	68bb      	ldr	r3, [r7, #8]
 801925a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	789a      	ldrb	r2, [r3, #2]
 8019260:	68bb      	ldr	r3, [r7, #8]
 8019262:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	78da      	ldrb	r2, [r3, #3]
 8019268:	68bb      	ldr	r3, [r7, #8]
 801926a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	3304      	adds	r3, #4
 8019270:	781b      	ldrb	r3, [r3, #0]
 8019272:	b29a      	uxth	r2, r3
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	3305      	adds	r3, #5
 8019278:	781b      	ldrb	r3, [r3, #0]
 801927a:	b29b      	uxth	r3, r3
 801927c:	021b      	lsls	r3, r3, #8
 801927e:	b29b      	uxth	r3, r3
 8019280:	4313      	orrs	r3, r2
 8019282:	b29a      	uxth	r2, r3
 8019284:	68bb      	ldr	r3, [r7, #8]
 8019286:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	799a      	ldrb	r2, [r3, #6]
 801928c:	68bb      	ldr	r3, [r7, #8]
 801928e:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8019290:	68bb      	ldr	r3, [r7, #8]
 8019292:	889b      	ldrh	r3, [r3, #4]
 8019294:	2b00      	cmp	r3, #0
 8019296:	d102      	bne.n	801929e <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8019298:	2303      	movs	r3, #3
 801929a:	75fb      	strb	r3, [r7, #23]
 801929c:	e00d      	b.n	80192ba <USBH_ParseEPDesc+0x7e>
      ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_EP_PACKET_SIZE);
    }
    else
    {
      /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
      ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 801929e:	68bb      	ldr	r3, [r7, #8]
 80192a0:	889a      	ldrh	r2, [r3, #4]
 80192a2:	4b26      	ldr	r3, [pc, #152]	; (801933c <USBH_ParseEPDesc+0x100>)
 80192a4:	4013      	ands	r3, r2
 80192a6:	b29a      	uxth	r2, r3
 80192a8:	68bb      	ldr	r3, [r7, #8]
 80192aa:	809a      	strh	r2, [r3, #4]
      ep_descriptor->wMaxPacketSize |= USBH_MAX_EP_PACKET_SIZE;
 80192ac:	68bb      	ldr	r3, [r7, #8]
 80192ae:	889b      	ldrh	r3, [r3, #4]
 80192b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80192b4:	b29a      	uxth	r2, r3
 80192b6:	68bb      	ldr	r3, [r7, #8]
 80192b8:	809a      	strh	r2, [r3, #4]
    }
  }
  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80192ba:	68fb      	ldr	r3, [r7, #12]
 80192bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	d116      	bne.n	80192f2 <USBH_ParseEPDesc+0xb6>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80192c4:	68bb      	ldr	r3, [r7, #8]
 80192c6:	78db      	ldrb	r3, [r3, #3]
 80192c8:	f003 0303 	and.w	r3, r3, #3
 80192cc:	2b01      	cmp	r3, #1
 80192ce:	d005      	beq.n	80192dc <USBH_ParseEPDesc+0xa0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80192d0:	68bb      	ldr	r3, [r7, #8]
 80192d2:	78db      	ldrb	r3, [r3, #3]
 80192d4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80192d8:	2b03      	cmp	r3, #3
 80192da:	d127      	bne.n	801932c <USBH_ParseEPDesc+0xf0>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80192dc:	68bb      	ldr	r3, [r7, #8]
 80192de:	799b      	ldrb	r3, [r3, #6]
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d003      	beq.n	80192ec <USBH_ParseEPDesc+0xb0>
 80192e4:	68bb      	ldr	r3, [r7, #8]
 80192e6:	799b      	ldrb	r3, [r3, #6]
 80192e8:	2b10      	cmp	r3, #16
 80192ea:	d91f      	bls.n	801932c <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 80192ec:	2303      	movs	r3, #3
 80192ee:	75fb      	strb	r3, [r7, #23]
 80192f0:	e01c      	b.n	801932c <USBH_ParseEPDesc+0xf0>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80192f2:	68bb      	ldr	r3, [r7, #8]
 80192f4:	78db      	ldrb	r3, [r3, #3]
 80192f6:	f003 0303 	and.w	r3, r3, #3
 80192fa:	2b01      	cmp	r3, #1
 80192fc:	d10a      	bne.n	8019314 <USBH_ParseEPDesc+0xd8>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80192fe:	68bb      	ldr	r3, [r7, #8]
 8019300:	799b      	ldrb	r3, [r3, #6]
 8019302:	2b00      	cmp	r3, #0
 8019304:	d003      	beq.n	801930e <USBH_ParseEPDesc+0xd2>
 8019306:	68bb      	ldr	r3, [r7, #8]
 8019308:	799b      	ldrb	r3, [r3, #6]
 801930a:	2b10      	cmp	r3, #16
 801930c:	d90e      	bls.n	801932c <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 801930e:	2303      	movs	r3, #3
 8019310:	75fb      	strb	r3, [r7, #23]
 8019312:	e00b      	b.n	801932c <USBH_ParseEPDesc+0xf0>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8019314:	68bb      	ldr	r3, [r7, #8]
 8019316:	78db      	ldrb	r3, [r3, #3]
 8019318:	f003 0303 	and.w	r3, r3, #3
 801931c:	2b03      	cmp	r3, #3
 801931e:	d105      	bne.n	801932c <USBH_ParseEPDesc+0xf0>
    {
      if (ep_descriptor->bInterval == 0U)
 8019320:	68bb      	ldr	r3, [r7, #8]
 8019322:	799b      	ldrb	r3, [r3, #6]
 8019324:	2b00      	cmp	r3, #0
 8019326:	d101      	bne.n	801932c <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8019328:	2303      	movs	r3, #3
 801932a:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 801932c:	7dfb      	ldrb	r3, [r7, #23]
}
 801932e:	4618      	mov	r0, r3
 8019330:	371c      	adds	r7, #28
 8019332:	46bd      	mov	sp, r7
 8019334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019338:	4770      	bx	lr
 801933a:	bf00      	nop
 801933c:	fffff800 	.word	0xfffff800

08019340 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8019340:	b480      	push	{r7}
 8019342:	b087      	sub	sp, #28
 8019344:	af00      	add	r7, sp, #0
 8019346:	60f8      	str	r0, [r7, #12]
 8019348:	60b9      	str	r1, [r7, #8]
 801934a:	4613      	mov	r3, r2
 801934c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 801934e:	68fb      	ldr	r3, [r7, #12]
 8019350:	3301      	adds	r3, #1
 8019352:	781b      	ldrb	r3, [r3, #0]
 8019354:	2b03      	cmp	r3, #3
 8019356:	d120      	bne.n	801939a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	781b      	ldrb	r3, [r3, #0]
 801935c:	1e9a      	subs	r2, r3, #2
 801935e:	88fb      	ldrh	r3, [r7, #6]
 8019360:	4293      	cmp	r3, r2
 8019362:	bf28      	it	cs
 8019364:	4613      	movcs	r3, r2
 8019366:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8019368:	68fb      	ldr	r3, [r7, #12]
 801936a:	3302      	adds	r3, #2
 801936c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 801936e:	2300      	movs	r3, #0
 8019370:	82fb      	strh	r3, [r7, #22]
 8019372:	e00b      	b.n	801938c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8019374:	8afb      	ldrh	r3, [r7, #22]
 8019376:	68fa      	ldr	r2, [r7, #12]
 8019378:	4413      	add	r3, r2
 801937a:	781a      	ldrb	r2, [r3, #0]
 801937c:	68bb      	ldr	r3, [r7, #8]
 801937e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8019380:	68bb      	ldr	r3, [r7, #8]
 8019382:	3301      	adds	r3, #1
 8019384:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8019386:	8afb      	ldrh	r3, [r7, #22]
 8019388:	3302      	adds	r3, #2
 801938a:	82fb      	strh	r3, [r7, #22]
 801938c:	8afa      	ldrh	r2, [r7, #22]
 801938e:	8abb      	ldrh	r3, [r7, #20]
 8019390:	429a      	cmp	r2, r3
 8019392:	d3ef      	bcc.n	8019374 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8019394:	68bb      	ldr	r3, [r7, #8]
 8019396:	2200      	movs	r2, #0
 8019398:	701a      	strb	r2, [r3, #0]
  }
}
 801939a:	bf00      	nop
 801939c:	371c      	adds	r7, #28
 801939e:	46bd      	mov	sp, r7
 80193a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193a4:	4770      	bx	lr

080193a6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80193a6:	b480      	push	{r7}
 80193a8:	b085      	sub	sp, #20
 80193aa:	af00      	add	r7, sp, #0
 80193ac:	6078      	str	r0, [r7, #4]
 80193ae:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80193b0:	683b      	ldr	r3, [r7, #0]
 80193b2:	881a      	ldrh	r2, [r3, #0]
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	781b      	ldrb	r3, [r3, #0]
 80193b8:	b29b      	uxth	r3, r3
 80193ba:	4413      	add	r3, r2
 80193bc:	b29a      	uxth	r2, r3
 80193be:	683b      	ldr	r3, [r7, #0]
 80193c0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	781b      	ldrb	r3, [r3, #0]
 80193c6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	4413      	add	r3, r2
 80193cc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80193ce:	68fb      	ldr	r3, [r7, #12]
}
 80193d0:	4618      	mov	r0, r3
 80193d2:	3714      	adds	r7, #20
 80193d4:	46bd      	mov	sp, r7
 80193d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193da:	4770      	bx	lr

080193dc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80193dc:	b580      	push	{r7, lr}
 80193de:	b086      	sub	sp, #24
 80193e0:	af00      	add	r7, sp, #0
 80193e2:	60f8      	str	r0, [r7, #12]
 80193e4:	60b9      	str	r1, [r7, #8]
 80193e6:	4613      	mov	r3, r2
 80193e8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80193ea:	2301      	movs	r3, #1
 80193ec:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80193ee:	68fb      	ldr	r3, [r7, #12]
 80193f0:	789b      	ldrb	r3, [r3, #2]
 80193f2:	2b01      	cmp	r3, #1
 80193f4:	d002      	beq.n	80193fc <USBH_CtlReq+0x20>
 80193f6:	2b02      	cmp	r3, #2
 80193f8:	d01d      	beq.n	8019436 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80193fa:	e043      	b.n	8019484 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80193fc:	68fb      	ldr	r3, [r7, #12]
 80193fe:	68ba      	ldr	r2, [r7, #8]
 8019400:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8019402:	68fb      	ldr	r3, [r7, #12]
 8019404:	88fa      	ldrh	r2, [r7, #6]
 8019406:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8019408:	68fb      	ldr	r3, [r7, #12]
 801940a:	2201      	movs	r2, #1
 801940c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 801940e:	68fb      	ldr	r3, [r7, #12]
 8019410:	2202      	movs	r2, #2
 8019412:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8019414:	2301      	movs	r3, #1
 8019416:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	2203      	movs	r2, #3
 801941c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8019420:	68fb      	ldr	r3, [r7, #12]
 8019422:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8019426:	68fb      	ldr	r3, [r7, #12]
 8019428:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801942c:	2200      	movs	r2, #0
 801942e:	4619      	mov	r1, r3
 8019430:	f000 fd64 	bl	8019efc <osMessagePut>
      break;
 8019434:	e026      	b.n	8019484 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8019436:	68f8      	ldr	r0, [r7, #12]
 8019438:	f000 f82a 	bl	8019490 <USBH_HandleControl>
 801943c:	4603      	mov	r3, r0
 801943e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8019440:	7dfb      	ldrb	r3, [r7, #23]
 8019442:	2b00      	cmp	r3, #0
 8019444:	d002      	beq.n	801944c <USBH_CtlReq+0x70>
 8019446:	7dfb      	ldrb	r3, [r7, #23]
 8019448:	2b03      	cmp	r3, #3
 801944a:	d106      	bne.n	801945a <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 801944c:	68fb      	ldr	r3, [r7, #12]
 801944e:	2201      	movs	r2, #1
 8019450:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8019452:	68fb      	ldr	r3, [r7, #12]
 8019454:	2200      	movs	r2, #0
 8019456:	761a      	strb	r2, [r3, #24]
 8019458:	e005      	b.n	8019466 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 801945a:	7dfb      	ldrb	r3, [r7, #23]
 801945c:	2b02      	cmp	r3, #2
 801945e:	d102      	bne.n	8019466 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8019460:	68fb      	ldr	r3, [r7, #12]
 8019462:	2201      	movs	r2, #1
 8019464:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8019466:	68fb      	ldr	r3, [r7, #12]
 8019468:	2203      	movs	r2, #3
 801946a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801946e:	68fb      	ldr	r3, [r7, #12]
 8019470:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8019474:	68fb      	ldr	r3, [r7, #12]
 8019476:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801947a:	2200      	movs	r2, #0
 801947c:	4619      	mov	r1, r3
 801947e:	f000 fd3d 	bl	8019efc <osMessagePut>
      break;
 8019482:	bf00      	nop
  }
  return status;
 8019484:	7dfb      	ldrb	r3, [r7, #23]
}
 8019486:	4618      	mov	r0, r3
 8019488:	3718      	adds	r7, #24
 801948a:	46bd      	mov	sp, r7
 801948c:	bd80      	pop	{r7, pc}
	...

08019490 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8019490:	b580      	push	{r7, lr}
 8019492:	b086      	sub	sp, #24
 8019494:	af02      	add	r7, sp, #8
 8019496:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8019498:	2301      	movs	r3, #1
 801949a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 801949c:	2300      	movs	r3, #0
 801949e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	7e1b      	ldrb	r3, [r3, #24]
 80194a4:	3b01      	subs	r3, #1
 80194a6:	2b0a      	cmp	r3, #10
 80194a8:	f200 8229 	bhi.w	80198fe <USBH_HandleControl+0x46e>
 80194ac:	a201      	add	r2, pc, #4	; (adr r2, 80194b4 <USBH_HandleControl+0x24>)
 80194ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194b2:	bf00      	nop
 80194b4:	080194e1 	.word	0x080194e1
 80194b8:	080194fb 	.word	0x080194fb
 80194bc:	0801959d 	.word	0x0801959d
 80194c0:	080195c3 	.word	0x080195c3
 80194c4:	0801964f 	.word	0x0801964f
 80194c8:	08019679 	.word	0x08019679
 80194cc:	0801973b 	.word	0x0801973b
 80194d0:	0801975d 	.word	0x0801975d
 80194d4:	080197ef 	.word	0x080197ef
 80194d8:	08019815 	.word	0x08019815
 80194dc:	080198a7 	.word	0x080198a7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	f103 0110 	add.w	r1, r3, #16
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	795b      	ldrb	r3, [r3, #5]
 80194ea:	461a      	mov	r2, r3
 80194ec:	6878      	ldr	r0, [r7, #4]
 80194ee:	f000 fa17 	bl	8019920 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	2202      	movs	r2, #2
 80194f6:	761a      	strb	r2, [r3, #24]
      break;
 80194f8:	e20c      	b.n	8019914 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	795b      	ldrb	r3, [r3, #5]
 80194fe:	4619      	mov	r1, r3
 8019500:	6878      	ldr	r0, [r7, #4]
 8019502:	f004 f947 	bl	801d794 <USBH_LL_GetURBState>
 8019506:	4603      	mov	r3, r0
 8019508:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 801950a:	7bbb      	ldrb	r3, [r7, #14]
 801950c:	2b01      	cmp	r3, #1
 801950e:	d12c      	bne.n	801956a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	7c1b      	ldrb	r3, [r3, #16]
 8019514:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8019518:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	8adb      	ldrh	r3, [r3, #22]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d00a      	beq.n	8019538 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8019522:	7b7b      	ldrb	r3, [r7, #13]
 8019524:	2b80      	cmp	r3, #128	; 0x80
 8019526:	d103      	bne.n	8019530 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	2203      	movs	r2, #3
 801952c:	761a      	strb	r2, [r3, #24]
 801952e:	e00d      	b.n	801954c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	2205      	movs	r2, #5
 8019534:	761a      	strb	r2, [r3, #24]
 8019536:	e009      	b.n	801954c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8019538:	7b7b      	ldrb	r3, [r7, #13]
 801953a:	2b80      	cmp	r3, #128	; 0x80
 801953c:	d103      	bne.n	8019546 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	2209      	movs	r2, #9
 8019542:	761a      	strb	r2, [r3, #24]
 8019544:	e002      	b.n	801954c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	2207      	movs	r2, #7
 801954a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	2203      	movs	r2, #3
 8019550:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8019560:	2200      	movs	r2, #0
 8019562:	4619      	mov	r1, r3
 8019564:	f000 fcca 	bl	8019efc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8019568:	e1cb      	b.n	8019902 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 801956a:	7bbb      	ldrb	r3, [r7, #14]
 801956c:	2b04      	cmp	r3, #4
 801956e:	d003      	beq.n	8019578 <USBH_HandleControl+0xe8>
 8019570:	7bbb      	ldrb	r3, [r7, #14]
 8019572:	2b02      	cmp	r3, #2
 8019574:	f040 81c5 	bne.w	8019902 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	220b      	movs	r2, #11
 801957c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	2203      	movs	r2, #3
 8019582:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8019592:	2200      	movs	r2, #0
 8019594:	4619      	mov	r1, r3
 8019596:	f000 fcb1 	bl	8019efc <osMessagePut>
      break;
 801959a:	e1b2      	b.n	8019902 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80195a2:	b29a      	uxth	r2, r3
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	6899      	ldr	r1, [r3, #8]
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	899a      	ldrh	r2, [r3, #12]
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	791b      	ldrb	r3, [r3, #4]
 80195b4:	6878      	ldr	r0, [r7, #4]
 80195b6:	f000 f9f2 	bl	801999e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	2204      	movs	r2, #4
 80195be:	761a      	strb	r2, [r3, #24]
      break;
 80195c0:	e1a8      	b.n	8019914 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	791b      	ldrb	r3, [r3, #4]
 80195c6:	4619      	mov	r1, r3
 80195c8:	6878      	ldr	r0, [r7, #4]
 80195ca:	f004 f8e3 	bl	801d794 <USBH_LL_GetURBState>
 80195ce:	4603      	mov	r3, r0
 80195d0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80195d2:	7bbb      	ldrb	r3, [r7, #14]
 80195d4:	2b01      	cmp	r3, #1
 80195d6:	d110      	bne.n	80195fa <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	2209      	movs	r2, #9
 80195dc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	2203      	movs	r2, #3
 80195e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80195f2:	2200      	movs	r2, #0
 80195f4:	4619      	mov	r1, r3
 80195f6:	f000 fc81 	bl	8019efc <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80195fa:	7bbb      	ldrb	r3, [r7, #14]
 80195fc:	2b05      	cmp	r3, #5
 80195fe:	d110      	bne.n	8019622 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8019600:	2303      	movs	r3, #3
 8019602:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	2203      	movs	r2, #3
 8019608:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8019618:	2200      	movs	r2, #0
 801961a:	4619      	mov	r1, r3
 801961c:	f000 fc6e 	bl	8019efc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8019620:	e171      	b.n	8019906 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8019622:	7bbb      	ldrb	r3, [r7, #14]
 8019624:	2b04      	cmp	r3, #4
 8019626:	f040 816e 	bne.w	8019906 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	220b      	movs	r2, #11
 801962e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	2203      	movs	r2, #3
 8019634:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8019644:	2200      	movs	r2, #0
 8019646:	4619      	mov	r1, r3
 8019648:	f000 fc58 	bl	8019efc <osMessagePut>
      break;
 801964c:	e15b      	b.n	8019906 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	6899      	ldr	r1, [r3, #8]
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	899a      	ldrh	r2, [r3, #12]
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	795b      	ldrb	r3, [r3, #5]
 801965a:	2001      	movs	r0, #1
 801965c:	9000      	str	r0, [sp, #0]
 801965e:	6878      	ldr	r0, [r7, #4]
 8019660:	f000 f978 	bl	8019954 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801966a:	b29a      	uxth	r2, r3
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	2206      	movs	r2, #6
 8019674:	761a      	strb	r2, [r3, #24]
      break;
 8019676:	e14d      	b.n	8019914 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	795b      	ldrb	r3, [r3, #5]
 801967c:	4619      	mov	r1, r3
 801967e:	6878      	ldr	r0, [r7, #4]
 8019680:	f004 f888 	bl	801d794 <USBH_LL_GetURBState>
 8019684:	4603      	mov	r3, r0
 8019686:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8019688:	7bbb      	ldrb	r3, [r7, #14]
 801968a:	2b01      	cmp	r3, #1
 801968c:	d111      	bne.n	80196b2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	2207      	movs	r2, #7
 8019692:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	2203      	movs	r2, #3
 8019698:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80196a8:	2200      	movs	r2, #0
 80196aa:	4619      	mov	r1, r3
 80196ac:	f000 fc26 	bl	8019efc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80196b0:	e12b      	b.n	801990a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 80196b2:	7bbb      	ldrb	r3, [r7, #14]
 80196b4:	2b05      	cmp	r3, #5
 80196b6:	d113      	bne.n	80196e0 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	220c      	movs	r2, #12
 80196bc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80196be:	2303      	movs	r3, #3
 80196c0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	2203      	movs	r2, #3
 80196c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80196d6:	2200      	movs	r2, #0
 80196d8:	4619      	mov	r1, r3
 80196da:	f000 fc0f 	bl	8019efc <osMessagePut>
      break;
 80196de:	e114      	b.n	801990a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80196e0:	7bbb      	ldrb	r3, [r7, #14]
 80196e2:	2b02      	cmp	r3, #2
 80196e4:	d111      	bne.n	801970a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	2205      	movs	r2, #5
 80196ea:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	2203      	movs	r2, #3
 80196f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8019700:	2200      	movs	r2, #0
 8019702:	4619      	mov	r1, r3
 8019704:	f000 fbfa 	bl	8019efc <osMessagePut>
      break;
 8019708:	e0ff      	b.n	801990a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 801970a:	7bbb      	ldrb	r3, [r7, #14]
 801970c:	2b04      	cmp	r3, #4
 801970e:	f040 80fc 	bne.w	801990a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	220b      	movs	r2, #11
 8019716:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8019718:	2302      	movs	r3, #2
 801971a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	2203      	movs	r2, #3
 8019720:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8019730:	2200      	movs	r2, #0
 8019732:	4619      	mov	r1, r3
 8019734:	f000 fbe2 	bl	8019efc <osMessagePut>
      break;
 8019738:	e0e7      	b.n	801990a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	791b      	ldrb	r3, [r3, #4]
 801973e:	2200      	movs	r2, #0
 8019740:	2100      	movs	r1, #0
 8019742:	6878      	ldr	r0, [r7, #4]
 8019744:	f000 f92b 	bl	801999e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801974e:	b29a      	uxth	r2, r3
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	2208      	movs	r2, #8
 8019758:	761a      	strb	r2, [r3, #24]

      break;
 801975a:	e0db      	b.n	8019914 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	791b      	ldrb	r3, [r3, #4]
 8019760:	4619      	mov	r1, r3
 8019762:	6878      	ldr	r0, [r7, #4]
 8019764:	f004 f816 	bl	801d794 <USBH_LL_GetURBState>
 8019768:	4603      	mov	r3, r0
 801976a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801976c:	7bbb      	ldrb	r3, [r7, #14]
 801976e:	2b01      	cmp	r3, #1
 8019770:	d113      	bne.n	801979a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	220d      	movs	r2, #13
 8019776:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8019778:	2300      	movs	r3, #0
 801977a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	2203      	movs	r2, #3
 8019780:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8019790:	2200      	movs	r2, #0
 8019792:	4619      	mov	r1, r3
 8019794:	f000 fbb2 	bl	8019efc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8019798:	e0b9      	b.n	801990e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 801979a:	7bbb      	ldrb	r3, [r7, #14]
 801979c:	2b04      	cmp	r3, #4
 801979e:	d111      	bne.n	80197c4 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	220b      	movs	r2, #11
 80197a4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	2203      	movs	r2, #3
 80197aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80197ba:	2200      	movs	r2, #0
 80197bc:	4619      	mov	r1, r3
 80197be:	f000 fb9d 	bl	8019efc <osMessagePut>
      break;
 80197c2:	e0a4      	b.n	801990e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 80197c4:	7bbb      	ldrb	r3, [r7, #14]
 80197c6:	2b05      	cmp	r3, #5
 80197c8:	f040 80a1 	bne.w	801990e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80197cc:	2303      	movs	r3, #3
 80197ce:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	2203      	movs	r2, #3
 80197d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80197e4:	2200      	movs	r2, #0
 80197e6:	4619      	mov	r1, r3
 80197e8:	f000 fb88 	bl	8019efc <osMessagePut>
      break;
 80197ec:	e08f      	b.n	801990e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	795b      	ldrb	r3, [r3, #5]
 80197f2:	2201      	movs	r2, #1
 80197f4:	9200      	str	r2, [sp, #0]
 80197f6:	2200      	movs	r2, #0
 80197f8:	2100      	movs	r1, #0
 80197fa:	6878      	ldr	r0, [r7, #4]
 80197fc:	f000 f8aa 	bl	8019954 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019806:	b29a      	uxth	r2, r3
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	220a      	movs	r2, #10
 8019810:	761a      	strb	r2, [r3, #24]
      break;
 8019812:	e07f      	b.n	8019914 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	795b      	ldrb	r3, [r3, #5]
 8019818:	4619      	mov	r1, r3
 801981a:	6878      	ldr	r0, [r7, #4]
 801981c:	f003 ffba 	bl	801d794 <USBH_LL_GetURBState>
 8019820:	4603      	mov	r3, r0
 8019822:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8019824:	7bbb      	ldrb	r3, [r7, #14]
 8019826:	2b01      	cmp	r3, #1
 8019828:	d113      	bne.n	8019852 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 801982a:	2300      	movs	r3, #0
 801982c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	220d      	movs	r2, #13
 8019832:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	2203      	movs	r2, #3
 8019838:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8019848:	2200      	movs	r2, #0
 801984a:	4619      	mov	r1, r3
 801984c:	f000 fb56 	bl	8019efc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8019850:	e05f      	b.n	8019912 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8019852:	7bbb      	ldrb	r3, [r7, #14]
 8019854:	2b02      	cmp	r3, #2
 8019856:	d111      	bne.n	801987c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	2209      	movs	r2, #9
 801985c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	2203      	movs	r2, #3
 8019862:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8019872:	2200      	movs	r2, #0
 8019874:	4619      	mov	r1, r3
 8019876:	f000 fb41 	bl	8019efc <osMessagePut>
      break;
 801987a:	e04a      	b.n	8019912 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 801987c:	7bbb      	ldrb	r3, [r7, #14]
 801987e:	2b04      	cmp	r3, #4
 8019880:	d147      	bne.n	8019912 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	220b      	movs	r2, #11
 8019886:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	2203      	movs	r2, #3
 801988c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801989c:	2200      	movs	r2, #0
 801989e:	4619      	mov	r1, r3
 80198a0:	f000 fb2c 	bl	8019efc <osMessagePut>
      break;
 80198a4:	e035      	b.n	8019912 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	7e5b      	ldrb	r3, [r3, #25]
 80198aa:	3301      	adds	r3, #1
 80198ac:	b2da      	uxtb	r2, r3
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	765a      	strb	r2, [r3, #25]
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	7e5b      	ldrb	r3, [r3, #25]
 80198b6:	2b02      	cmp	r3, #2
 80198b8:	d806      	bhi.n	80198c8 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	2201      	movs	r2, #1
 80198be:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	2201      	movs	r2, #1
 80198c4:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80198c6:	e025      	b.n	8019914 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80198ce:	2106      	movs	r1, #6
 80198d0:	6878      	ldr	r0, [r7, #4]
 80198d2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	2200      	movs	r2, #0
 80198d8:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	795b      	ldrb	r3, [r3, #5]
 80198de:	4619      	mov	r1, r3
 80198e0:	6878      	ldr	r0, [r7, #4]
 80198e2:	f000 f90d 	bl	8019b00 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	791b      	ldrb	r3, [r3, #4]
 80198ea:	4619      	mov	r1, r3
 80198ec:	6878      	ldr	r0, [r7, #4]
 80198ee:	f000 f907 	bl	8019b00 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	2200      	movs	r2, #0
 80198f6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80198f8:	2302      	movs	r3, #2
 80198fa:	73fb      	strb	r3, [r7, #15]
      break;
 80198fc:	e00a      	b.n	8019914 <USBH_HandleControl+0x484>

    default:
      break;
 80198fe:	bf00      	nop
 8019900:	e008      	b.n	8019914 <USBH_HandleControl+0x484>
      break;
 8019902:	bf00      	nop
 8019904:	e006      	b.n	8019914 <USBH_HandleControl+0x484>
      break;
 8019906:	bf00      	nop
 8019908:	e004      	b.n	8019914 <USBH_HandleControl+0x484>
      break;
 801990a:	bf00      	nop
 801990c:	e002      	b.n	8019914 <USBH_HandleControl+0x484>
      break;
 801990e:	bf00      	nop
 8019910:	e000      	b.n	8019914 <USBH_HandleControl+0x484>
      break;
 8019912:	bf00      	nop
  }

  return status;
 8019914:	7bfb      	ldrb	r3, [r7, #15]
}
 8019916:	4618      	mov	r0, r3
 8019918:	3710      	adds	r7, #16
 801991a:	46bd      	mov	sp, r7
 801991c:	bd80      	pop	{r7, pc}
 801991e:	bf00      	nop

08019920 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8019920:	b580      	push	{r7, lr}
 8019922:	b088      	sub	sp, #32
 8019924:	af04      	add	r7, sp, #16
 8019926:	60f8      	str	r0, [r7, #12]
 8019928:	60b9      	str	r1, [r7, #8]
 801992a:	4613      	mov	r3, r2
 801992c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801992e:	79f9      	ldrb	r1, [r7, #7]
 8019930:	2300      	movs	r3, #0
 8019932:	9303      	str	r3, [sp, #12]
 8019934:	2308      	movs	r3, #8
 8019936:	9302      	str	r3, [sp, #8]
 8019938:	68bb      	ldr	r3, [r7, #8]
 801993a:	9301      	str	r3, [sp, #4]
 801993c:	2300      	movs	r3, #0
 801993e:	9300      	str	r3, [sp, #0]
 8019940:	2300      	movs	r3, #0
 8019942:	2200      	movs	r2, #0
 8019944:	68f8      	ldr	r0, [r7, #12]
 8019946:	f003 fef4 	bl	801d732 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 801994a:	2300      	movs	r3, #0
}
 801994c:	4618      	mov	r0, r3
 801994e:	3710      	adds	r7, #16
 8019950:	46bd      	mov	sp, r7
 8019952:	bd80      	pop	{r7, pc}

08019954 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8019954:	b580      	push	{r7, lr}
 8019956:	b088      	sub	sp, #32
 8019958:	af04      	add	r7, sp, #16
 801995a:	60f8      	str	r0, [r7, #12]
 801995c:	60b9      	str	r1, [r7, #8]
 801995e:	4611      	mov	r1, r2
 8019960:	461a      	mov	r2, r3
 8019962:	460b      	mov	r3, r1
 8019964:	80fb      	strh	r3, [r7, #6]
 8019966:	4613      	mov	r3, r2
 8019968:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801996a:	68fb      	ldr	r3, [r7, #12]
 801996c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8019970:	2b00      	cmp	r3, #0
 8019972:	d001      	beq.n	8019978 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8019974:	2300      	movs	r3, #0
 8019976:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8019978:	7979      	ldrb	r1, [r7, #5]
 801997a:	7e3b      	ldrb	r3, [r7, #24]
 801997c:	9303      	str	r3, [sp, #12]
 801997e:	88fb      	ldrh	r3, [r7, #6]
 8019980:	9302      	str	r3, [sp, #8]
 8019982:	68bb      	ldr	r3, [r7, #8]
 8019984:	9301      	str	r3, [sp, #4]
 8019986:	2301      	movs	r3, #1
 8019988:	9300      	str	r3, [sp, #0]
 801998a:	2300      	movs	r3, #0
 801998c:	2200      	movs	r2, #0
 801998e:	68f8      	ldr	r0, [r7, #12]
 8019990:	f003 fecf 	bl	801d732 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8019994:	2300      	movs	r3, #0
}
 8019996:	4618      	mov	r0, r3
 8019998:	3710      	adds	r7, #16
 801999a:	46bd      	mov	sp, r7
 801999c:	bd80      	pop	{r7, pc}

0801999e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801999e:	b580      	push	{r7, lr}
 80199a0:	b088      	sub	sp, #32
 80199a2:	af04      	add	r7, sp, #16
 80199a4:	60f8      	str	r0, [r7, #12]
 80199a6:	60b9      	str	r1, [r7, #8]
 80199a8:	4611      	mov	r1, r2
 80199aa:	461a      	mov	r2, r3
 80199ac:	460b      	mov	r3, r1
 80199ae:	80fb      	strh	r3, [r7, #6]
 80199b0:	4613      	mov	r3, r2
 80199b2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80199b4:	7979      	ldrb	r1, [r7, #5]
 80199b6:	2300      	movs	r3, #0
 80199b8:	9303      	str	r3, [sp, #12]
 80199ba:	88fb      	ldrh	r3, [r7, #6]
 80199bc:	9302      	str	r3, [sp, #8]
 80199be:	68bb      	ldr	r3, [r7, #8]
 80199c0:	9301      	str	r3, [sp, #4]
 80199c2:	2301      	movs	r3, #1
 80199c4:	9300      	str	r3, [sp, #0]
 80199c6:	2300      	movs	r3, #0
 80199c8:	2201      	movs	r2, #1
 80199ca:	68f8      	ldr	r0, [r7, #12]
 80199cc:	f003 feb1 	bl	801d732 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80199d0:	2300      	movs	r3, #0

}
 80199d2:	4618      	mov	r0, r3
 80199d4:	3710      	adds	r7, #16
 80199d6:	46bd      	mov	sp, r7
 80199d8:	bd80      	pop	{r7, pc}

080199da <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80199da:	b580      	push	{r7, lr}
 80199dc:	b088      	sub	sp, #32
 80199de:	af04      	add	r7, sp, #16
 80199e0:	60f8      	str	r0, [r7, #12]
 80199e2:	60b9      	str	r1, [r7, #8]
 80199e4:	4611      	mov	r1, r2
 80199e6:	461a      	mov	r2, r3
 80199e8:	460b      	mov	r3, r1
 80199ea:	80fb      	strh	r3, [r7, #6]
 80199ec:	4613      	mov	r3, r2
 80199ee:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80199f0:	68fb      	ldr	r3, [r7, #12]
 80199f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d001      	beq.n	80199fe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80199fa:	2300      	movs	r3, #0
 80199fc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80199fe:	7979      	ldrb	r1, [r7, #5]
 8019a00:	7e3b      	ldrb	r3, [r7, #24]
 8019a02:	9303      	str	r3, [sp, #12]
 8019a04:	88fb      	ldrh	r3, [r7, #6]
 8019a06:	9302      	str	r3, [sp, #8]
 8019a08:	68bb      	ldr	r3, [r7, #8]
 8019a0a:	9301      	str	r3, [sp, #4]
 8019a0c:	2301      	movs	r3, #1
 8019a0e:	9300      	str	r3, [sp, #0]
 8019a10:	2302      	movs	r3, #2
 8019a12:	2200      	movs	r2, #0
 8019a14:	68f8      	ldr	r0, [r7, #12]
 8019a16:	f003 fe8c 	bl	801d732 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8019a1a:	2300      	movs	r3, #0
}
 8019a1c:	4618      	mov	r0, r3
 8019a1e:	3710      	adds	r7, #16
 8019a20:	46bd      	mov	sp, r7
 8019a22:	bd80      	pop	{r7, pc}

08019a24 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8019a24:	b580      	push	{r7, lr}
 8019a26:	b088      	sub	sp, #32
 8019a28:	af04      	add	r7, sp, #16
 8019a2a:	60f8      	str	r0, [r7, #12]
 8019a2c:	60b9      	str	r1, [r7, #8]
 8019a2e:	4611      	mov	r1, r2
 8019a30:	461a      	mov	r2, r3
 8019a32:	460b      	mov	r3, r1
 8019a34:	80fb      	strh	r3, [r7, #6]
 8019a36:	4613      	mov	r3, r2
 8019a38:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8019a3a:	7979      	ldrb	r1, [r7, #5]
 8019a3c:	2300      	movs	r3, #0
 8019a3e:	9303      	str	r3, [sp, #12]
 8019a40:	88fb      	ldrh	r3, [r7, #6]
 8019a42:	9302      	str	r3, [sp, #8]
 8019a44:	68bb      	ldr	r3, [r7, #8]
 8019a46:	9301      	str	r3, [sp, #4]
 8019a48:	2301      	movs	r3, #1
 8019a4a:	9300      	str	r3, [sp, #0]
 8019a4c:	2302      	movs	r3, #2
 8019a4e:	2201      	movs	r2, #1
 8019a50:	68f8      	ldr	r0, [r7, #12]
 8019a52:	f003 fe6e 	bl	801d732 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8019a56:	2300      	movs	r3, #0
}
 8019a58:	4618      	mov	r0, r3
 8019a5a:	3710      	adds	r7, #16
 8019a5c:	46bd      	mov	sp, r7
 8019a5e:	bd80      	pop	{r7, pc}

08019a60 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8019a60:	b580      	push	{r7, lr}
 8019a62:	b086      	sub	sp, #24
 8019a64:	af04      	add	r7, sp, #16
 8019a66:	6078      	str	r0, [r7, #4]
 8019a68:	4608      	mov	r0, r1
 8019a6a:	4611      	mov	r1, r2
 8019a6c:	461a      	mov	r2, r3
 8019a6e:	4603      	mov	r3, r0
 8019a70:	70fb      	strb	r3, [r7, #3]
 8019a72:	460b      	mov	r3, r1
 8019a74:	70bb      	strb	r3, [r7, #2]
 8019a76:	4613      	mov	r3, r2
 8019a78:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8019a7a:	7878      	ldrb	r0, [r7, #1]
 8019a7c:	78ba      	ldrb	r2, [r7, #2]
 8019a7e:	78f9      	ldrb	r1, [r7, #3]
 8019a80:	8b3b      	ldrh	r3, [r7, #24]
 8019a82:	9302      	str	r3, [sp, #8]
 8019a84:	7d3b      	ldrb	r3, [r7, #20]
 8019a86:	9301      	str	r3, [sp, #4]
 8019a88:	7c3b      	ldrb	r3, [r7, #16]
 8019a8a:	9300      	str	r3, [sp, #0]
 8019a8c:	4603      	mov	r3, r0
 8019a8e:	6878      	ldr	r0, [r7, #4]
 8019a90:	f003 fe01 	bl	801d696 <USBH_LL_OpenPipe>

  return USBH_OK;
 8019a94:	2300      	movs	r3, #0
}
 8019a96:	4618      	mov	r0, r3
 8019a98:	3708      	adds	r7, #8
 8019a9a:	46bd      	mov	sp, r7
 8019a9c:	bd80      	pop	{r7, pc}

08019a9e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8019a9e:	b580      	push	{r7, lr}
 8019aa0:	b082      	sub	sp, #8
 8019aa2:	af00      	add	r7, sp, #0
 8019aa4:	6078      	str	r0, [r7, #4]
 8019aa6:	460b      	mov	r3, r1
 8019aa8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8019aaa:	78fb      	ldrb	r3, [r7, #3]
 8019aac:	4619      	mov	r1, r3
 8019aae:	6878      	ldr	r0, [r7, #4]
 8019ab0:	f003 fe20 	bl	801d6f4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8019ab4:	2300      	movs	r3, #0
}
 8019ab6:	4618      	mov	r0, r3
 8019ab8:	3708      	adds	r7, #8
 8019aba:	46bd      	mov	sp, r7
 8019abc:	bd80      	pop	{r7, pc}

08019abe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8019abe:	b580      	push	{r7, lr}
 8019ac0:	b084      	sub	sp, #16
 8019ac2:	af00      	add	r7, sp, #0
 8019ac4:	6078      	str	r0, [r7, #4]
 8019ac6:	460b      	mov	r3, r1
 8019ac8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8019aca:	6878      	ldr	r0, [r7, #4]
 8019acc:	f000 f836 	bl	8019b3c <USBH_GetFreePipe>
 8019ad0:	4603      	mov	r3, r0
 8019ad2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8019ad4:	89fb      	ldrh	r3, [r7, #14]
 8019ad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019ada:	4293      	cmp	r3, r2
 8019adc:	d00a      	beq.n	8019af4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8019ade:	78fa      	ldrb	r2, [r7, #3]
 8019ae0:	89fb      	ldrh	r3, [r7, #14]
 8019ae2:	f003 030f 	and.w	r3, r3, #15
 8019ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8019aea:	6879      	ldr	r1, [r7, #4]
 8019aec:	33e0      	adds	r3, #224	; 0xe0
 8019aee:	009b      	lsls	r3, r3, #2
 8019af0:	440b      	add	r3, r1
 8019af2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8019af4:	89fb      	ldrh	r3, [r7, #14]
 8019af6:	b2db      	uxtb	r3, r3
}
 8019af8:	4618      	mov	r0, r3
 8019afa:	3710      	adds	r7, #16
 8019afc:	46bd      	mov	sp, r7
 8019afe:	bd80      	pop	{r7, pc}

08019b00 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8019b00:	b480      	push	{r7}
 8019b02:	b083      	sub	sp, #12
 8019b04:	af00      	add	r7, sp, #0
 8019b06:	6078      	str	r0, [r7, #4]
 8019b08:	460b      	mov	r3, r1
 8019b0a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8019b0c:	78fb      	ldrb	r3, [r7, #3]
 8019b0e:	2b0f      	cmp	r3, #15
 8019b10:	d80d      	bhi.n	8019b2e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8019b12:	78fb      	ldrb	r3, [r7, #3]
 8019b14:	687a      	ldr	r2, [r7, #4]
 8019b16:	33e0      	adds	r3, #224	; 0xe0
 8019b18:	009b      	lsls	r3, r3, #2
 8019b1a:	4413      	add	r3, r2
 8019b1c:	685a      	ldr	r2, [r3, #4]
 8019b1e:	78fb      	ldrb	r3, [r7, #3]
 8019b20:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8019b24:	6879      	ldr	r1, [r7, #4]
 8019b26:	33e0      	adds	r3, #224	; 0xe0
 8019b28:	009b      	lsls	r3, r3, #2
 8019b2a:	440b      	add	r3, r1
 8019b2c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8019b2e:	2300      	movs	r3, #0
}
 8019b30:	4618      	mov	r0, r3
 8019b32:	370c      	adds	r7, #12
 8019b34:	46bd      	mov	sp, r7
 8019b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b3a:	4770      	bx	lr

08019b3c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8019b3c:	b480      	push	{r7}
 8019b3e:	b085      	sub	sp, #20
 8019b40:	af00      	add	r7, sp, #0
 8019b42:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8019b44:	2300      	movs	r3, #0
 8019b46:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8019b48:	2300      	movs	r3, #0
 8019b4a:	73fb      	strb	r3, [r7, #15]
 8019b4c:	e00f      	b.n	8019b6e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8019b4e:	7bfb      	ldrb	r3, [r7, #15]
 8019b50:	687a      	ldr	r2, [r7, #4]
 8019b52:	33e0      	adds	r3, #224	; 0xe0
 8019b54:	009b      	lsls	r3, r3, #2
 8019b56:	4413      	add	r3, r2
 8019b58:	685b      	ldr	r3, [r3, #4]
 8019b5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d102      	bne.n	8019b68 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8019b62:	7bfb      	ldrb	r3, [r7, #15]
 8019b64:	b29b      	uxth	r3, r3
 8019b66:	e007      	b.n	8019b78 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8019b68:	7bfb      	ldrb	r3, [r7, #15]
 8019b6a:	3301      	adds	r3, #1
 8019b6c:	73fb      	strb	r3, [r7, #15]
 8019b6e:	7bfb      	ldrb	r3, [r7, #15]
 8019b70:	2b0f      	cmp	r3, #15
 8019b72:	d9ec      	bls.n	8019b4e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8019b74:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8019b78:	4618      	mov	r0, r3
 8019b7a:	3714      	adds	r7, #20
 8019b7c:	46bd      	mov	sp, r7
 8019b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b82:	4770      	bx	lr

08019b84 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8019b84:	b480      	push	{r7}
 8019b86:	b087      	sub	sp, #28
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	60f8      	str	r0, [r7, #12]
 8019b8c:	60b9      	str	r1, [r7, #8]
 8019b8e:	4613      	mov	r3, r2
 8019b90:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8019b92:	2301      	movs	r3, #1
 8019b94:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8019b96:	2300      	movs	r3, #0
 8019b98:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8019b9a:	4b1f      	ldr	r3, [pc, #124]	; (8019c18 <FATFS_LinkDriverEx+0x94>)
 8019b9c:	7a5b      	ldrb	r3, [r3, #9]
 8019b9e:	b2db      	uxtb	r3, r3
 8019ba0:	2b00      	cmp	r3, #0
 8019ba2:	d131      	bne.n	8019c08 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8019ba4:	4b1c      	ldr	r3, [pc, #112]	; (8019c18 <FATFS_LinkDriverEx+0x94>)
 8019ba6:	7a5b      	ldrb	r3, [r3, #9]
 8019ba8:	b2db      	uxtb	r3, r3
 8019baa:	461a      	mov	r2, r3
 8019bac:	4b1a      	ldr	r3, [pc, #104]	; (8019c18 <FATFS_LinkDriverEx+0x94>)
 8019bae:	2100      	movs	r1, #0
 8019bb0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8019bb2:	4b19      	ldr	r3, [pc, #100]	; (8019c18 <FATFS_LinkDriverEx+0x94>)
 8019bb4:	7a5b      	ldrb	r3, [r3, #9]
 8019bb6:	b2db      	uxtb	r3, r3
 8019bb8:	4a17      	ldr	r2, [pc, #92]	; (8019c18 <FATFS_LinkDriverEx+0x94>)
 8019bba:	009b      	lsls	r3, r3, #2
 8019bbc:	4413      	add	r3, r2
 8019bbe:	68fa      	ldr	r2, [r7, #12]
 8019bc0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8019bc2:	4b15      	ldr	r3, [pc, #84]	; (8019c18 <FATFS_LinkDriverEx+0x94>)
 8019bc4:	7a5b      	ldrb	r3, [r3, #9]
 8019bc6:	b2db      	uxtb	r3, r3
 8019bc8:	461a      	mov	r2, r3
 8019bca:	4b13      	ldr	r3, [pc, #76]	; (8019c18 <FATFS_LinkDriverEx+0x94>)
 8019bcc:	4413      	add	r3, r2
 8019bce:	79fa      	ldrb	r2, [r7, #7]
 8019bd0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8019bd2:	4b11      	ldr	r3, [pc, #68]	; (8019c18 <FATFS_LinkDriverEx+0x94>)
 8019bd4:	7a5b      	ldrb	r3, [r3, #9]
 8019bd6:	b2db      	uxtb	r3, r3
 8019bd8:	1c5a      	adds	r2, r3, #1
 8019bda:	b2d1      	uxtb	r1, r2
 8019bdc:	4a0e      	ldr	r2, [pc, #56]	; (8019c18 <FATFS_LinkDriverEx+0x94>)
 8019bde:	7251      	strb	r1, [r2, #9]
 8019be0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8019be2:	7dbb      	ldrb	r3, [r7, #22]
 8019be4:	3330      	adds	r3, #48	; 0x30
 8019be6:	b2da      	uxtb	r2, r3
 8019be8:	68bb      	ldr	r3, [r7, #8]
 8019bea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8019bec:	68bb      	ldr	r3, [r7, #8]
 8019bee:	3301      	adds	r3, #1
 8019bf0:	223a      	movs	r2, #58	; 0x3a
 8019bf2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8019bf4:	68bb      	ldr	r3, [r7, #8]
 8019bf6:	3302      	adds	r3, #2
 8019bf8:	222f      	movs	r2, #47	; 0x2f
 8019bfa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8019bfc:	68bb      	ldr	r3, [r7, #8]
 8019bfe:	3303      	adds	r3, #3
 8019c00:	2200      	movs	r2, #0
 8019c02:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8019c04:	2300      	movs	r3, #0
 8019c06:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8019c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8019c0a:	4618      	mov	r0, r3
 8019c0c:	371c      	adds	r7, #28
 8019c0e:	46bd      	mov	sp, r7
 8019c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c14:	4770      	bx	lr
 8019c16:	bf00      	nop
 8019c18:	20041e20 	.word	0x20041e20

08019c1c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8019c1c:	b580      	push	{r7, lr}
 8019c1e:	b082      	sub	sp, #8
 8019c20:	af00      	add	r7, sp, #0
 8019c22:	6078      	str	r0, [r7, #4]
 8019c24:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8019c26:	2200      	movs	r2, #0
 8019c28:	6839      	ldr	r1, [r7, #0]
 8019c2a:	6878      	ldr	r0, [r7, #4]
 8019c2c:	f7ff ffaa 	bl	8019b84 <FATFS_LinkDriverEx>
 8019c30:	4603      	mov	r3, r0
}
 8019c32:	4618      	mov	r0, r3
 8019c34:	3708      	adds	r7, #8
 8019c36:	46bd      	mov	sp, r7
 8019c38:	bd80      	pop	{r7, pc}

08019c3a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8019c3a:	b480      	push	{r7}
 8019c3c:	b085      	sub	sp, #20
 8019c3e:	af00      	add	r7, sp, #0
 8019c40:	4603      	mov	r3, r0
 8019c42:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8019c44:	2300      	movs	r3, #0
 8019c46:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8019c48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019c4c:	2b84      	cmp	r3, #132	; 0x84
 8019c4e:	d005      	beq.n	8019c5c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8019c50:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8019c54:	68fb      	ldr	r3, [r7, #12]
 8019c56:	4413      	add	r3, r2
 8019c58:	3303      	adds	r3, #3
 8019c5a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8019c5c:	68fb      	ldr	r3, [r7, #12]
}
 8019c5e:	4618      	mov	r0, r3
 8019c60:	3714      	adds	r7, #20
 8019c62:	46bd      	mov	sp, r7
 8019c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c68:	4770      	bx	lr

08019c6a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8019c6a:	b480      	push	{r7}
 8019c6c:	b083      	sub	sp, #12
 8019c6e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019c70:	f3ef 8305 	mrs	r3, IPSR
 8019c74:	607b      	str	r3, [r7, #4]
  return(result);
 8019c76:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	bf14      	ite	ne
 8019c7c:	2301      	movne	r3, #1
 8019c7e:	2300      	moveq	r3, #0
 8019c80:	b2db      	uxtb	r3, r3
}
 8019c82:	4618      	mov	r0, r3
 8019c84:	370c      	adds	r7, #12
 8019c86:	46bd      	mov	sp, r7
 8019c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c8c:	4770      	bx	lr

08019c8e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8019c8e:	b580      	push	{r7, lr}
 8019c90:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8019c92:	f001 f9e7 	bl	801b064 <vTaskStartScheduler>
  
  return osOK;
 8019c96:	2300      	movs	r3, #0
}
 8019c98:	4618      	mov	r0, r3
 8019c9a:	bd80      	pop	{r7, pc}

08019c9c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8019c9c:	b580      	push	{r7, lr}
 8019c9e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8019ca0:	f001 fe3a 	bl	801b918 <xTaskGetSchedulerState>
 8019ca4:	4603      	mov	r3, r0
 8019ca6:	2b01      	cmp	r3, #1
 8019ca8:	d101      	bne.n	8019cae <osKernelRunning+0x12>
    return 0;
 8019caa:	2300      	movs	r3, #0
 8019cac:	e000      	b.n	8019cb0 <osKernelRunning+0x14>
  else
    return 1;
 8019cae:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8019cb0:	4618      	mov	r0, r3
 8019cb2:	bd80      	pop	{r7, pc}

08019cb4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8019cb4:	b580      	push	{r7, lr}
 8019cb6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8019cb8:	f7ff ffd7 	bl	8019c6a <inHandlerMode>
 8019cbc:	4603      	mov	r3, r0
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d003      	beq.n	8019cca <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8019cc2:	f001 faef 	bl	801b2a4 <xTaskGetTickCountFromISR>
 8019cc6:	4603      	mov	r3, r0
 8019cc8:	e002      	b.n	8019cd0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8019cca:	f001 fadb 	bl	801b284 <xTaskGetTickCount>
 8019cce:	4603      	mov	r3, r0
  }
}
 8019cd0:	4618      	mov	r0, r3
 8019cd2:	bd80      	pop	{r7, pc}

08019cd4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8019cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019cd6:	b089      	sub	sp, #36	; 0x24
 8019cd8:	af04      	add	r7, sp, #16
 8019cda:	6078      	str	r0, [r7, #4]
 8019cdc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	695b      	ldr	r3, [r3, #20]
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d020      	beq.n	8019d28 <osThreadCreate+0x54>
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	699b      	ldr	r3, [r3, #24]
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d01c      	beq.n	8019d28 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	685c      	ldr	r4, [r3, #4]
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	681d      	ldr	r5, [r3, #0]
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	691e      	ldr	r6, [r3, #16]
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8019d00:	4618      	mov	r0, r3
 8019d02:	f7ff ff9a 	bl	8019c3a <makeFreeRtosPriority>
 8019d06:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	695b      	ldr	r3, [r3, #20]
 8019d0c:	687a      	ldr	r2, [r7, #4]
 8019d0e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8019d10:	9202      	str	r2, [sp, #8]
 8019d12:	9301      	str	r3, [sp, #4]
 8019d14:	9100      	str	r1, [sp, #0]
 8019d16:	683b      	ldr	r3, [r7, #0]
 8019d18:	4632      	mov	r2, r6
 8019d1a:	4629      	mov	r1, r5
 8019d1c:	4620      	mov	r0, r4
 8019d1e:	f000 ffc5 	bl	801acac <xTaskCreateStatic>
 8019d22:	4603      	mov	r3, r0
 8019d24:	60fb      	str	r3, [r7, #12]
 8019d26:	e01c      	b.n	8019d62 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	685c      	ldr	r4, [r3, #4]
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8019d34:	b29e      	uxth	r6, r3
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8019d3c:	4618      	mov	r0, r3
 8019d3e:	f7ff ff7c 	bl	8019c3a <makeFreeRtosPriority>
 8019d42:	4602      	mov	r2, r0
 8019d44:	f107 030c 	add.w	r3, r7, #12
 8019d48:	9301      	str	r3, [sp, #4]
 8019d4a:	9200      	str	r2, [sp, #0]
 8019d4c:	683b      	ldr	r3, [r7, #0]
 8019d4e:	4632      	mov	r2, r6
 8019d50:	4629      	mov	r1, r5
 8019d52:	4620      	mov	r0, r4
 8019d54:	f001 f80d 	bl	801ad72 <xTaskCreate>
 8019d58:	4603      	mov	r3, r0
 8019d5a:	2b01      	cmp	r3, #1
 8019d5c:	d001      	beq.n	8019d62 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8019d5e:	2300      	movs	r3, #0
 8019d60:	e000      	b.n	8019d64 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8019d62:	68fb      	ldr	r3, [r7, #12]
}
 8019d64:	4618      	mov	r0, r3
 8019d66:	3714      	adds	r7, #20
 8019d68:	46bd      	mov	sp, r7
 8019d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019d6c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8019d6c:	b580      	push	{r7, lr}
 8019d6e:	b084      	sub	sp, #16
 8019d70:	af00      	add	r7, sp, #0
 8019d72:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8019d78:	68fb      	ldr	r3, [r7, #12]
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d001      	beq.n	8019d82 <osDelay+0x16>
 8019d7e:	68fb      	ldr	r3, [r7, #12]
 8019d80:	e000      	b.n	8019d84 <osDelay+0x18>
 8019d82:	2301      	movs	r3, #1
 8019d84:	4618      	mov	r0, r3
 8019d86:	f001 f937 	bl	801aff8 <vTaskDelay>
  
  return osOK;
 8019d8a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8019d8c:	4618      	mov	r0, r3
 8019d8e:	3710      	adds	r7, #16
 8019d90:	46bd      	mov	sp, r7
 8019d92:	bd80      	pop	{r7, pc}

08019d94 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8019d94:	b580      	push	{r7, lr}
 8019d96:	b086      	sub	sp, #24
 8019d98:	af02      	add	r7, sp, #8
 8019d9a:	6078      	str	r0, [r7, #4]
 8019d9c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8019d9e:	2300      	movs	r3, #0
 8019da0:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8019da2:	2300      	movs	r3, #0
 8019da4:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8019da6:	f7ff ff60 	bl	8019c6a <inHandlerMode>
 8019daa:	4603      	mov	r3, r0
 8019dac:	2b00      	cmp	r3, #0
 8019dae:	d01c      	beq.n	8019dea <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8019db0:	6839      	ldr	r1, [r7, #0]
 8019db2:	f107 0208 	add.w	r2, r7, #8
 8019db6:	f107 030c 	add.w	r3, r7, #12
 8019dba:	9300      	str	r3, [sp, #0]
 8019dbc:	4613      	mov	r3, r2
 8019dbe:	2201      	movs	r2, #1
 8019dc0:	6878      	ldr	r0, [r7, #4]
 8019dc2:	f001 ff67 	bl	801bc94 <xTaskGenericNotifyFromISR>
 8019dc6:	4603      	mov	r3, r0
 8019dc8:	2b01      	cmp	r3, #1
 8019dca:	d002      	beq.n	8019dd2 <osSignalSet+0x3e>
      return 0x80000000;
 8019dcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8019dd0:	e019      	b.n	8019e06 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8019dd2:	68fb      	ldr	r3, [r7, #12]
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d015      	beq.n	8019e04 <osSignalSet+0x70>
 8019dd8:	4b0d      	ldr	r3, [pc, #52]	; (8019e10 <osSignalSet+0x7c>)
 8019dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019dde:	601a      	str	r2, [r3, #0]
 8019de0:	f3bf 8f4f 	dsb	sy
 8019de4:	f3bf 8f6f 	isb	sy
 8019de8:	e00c      	b.n	8019e04 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8019dea:	6839      	ldr	r1, [r7, #0]
 8019dec:	f107 0308 	add.w	r3, r7, #8
 8019df0:	2201      	movs	r2, #1
 8019df2:	6878      	ldr	r0, [r7, #4]
 8019df4:	f001 fe92 	bl	801bb1c <xTaskGenericNotify>
 8019df8:	4603      	mov	r3, r0
 8019dfa:	2b01      	cmp	r3, #1
 8019dfc:	d002      	beq.n	8019e04 <osSignalSet+0x70>
    return 0x80000000;
 8019dfe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8019e02:	e000      	b.n	8019e06 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8019e04:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8019e06:	4618      	mov	r0, r3
 8019e08:	3710      	adds	r7, #16
 8019e0a:	46bd      	mov	sp, r7
 8019e0c:	bd80      	pop	{r7, pc}
 8019e0e:	bf00      	nop
 8019e10:	e000ed04 	.word	0xe000ed04

08019e14 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8019e14:	b590      	push	{r4, r7, lr}
 8019e16:	b089      	sub	sp, #36	; 0x24
 8019e18:	af00      	add	r7, sp, #0
 8019e1a:	60f8      	str	r0, [r7, #12]
 8019e1c:	60b9      	str	r1, [r7, #8]
 8019e1e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8019e20:	2300      	movs	r3, #0
 8019e22:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8019e24:	2300      	movs	r3, #0
 8019e26:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019e2e:	d103      	bne.n	8019e38 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8019e30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019e34:	61fb      	str	r3, [r7, #28]
 8019e36:	e009      	b.n	8019e4c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d006      	beq.n	8019e4c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8019e42:	69fb      	ldr	r3, [r7, #28]
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d101      	bne.n	8019e4c <osSignalWait+0x38>
      ticks = 1;
 8019e48:	2301      	movs	r3, #1
 8019e4a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8019e4c:	f7ff ff0d 	bl	8019c6a <inHandlerMode>
 8019e50:	4603      	mov	r3, r0
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d002      	beq.n	8019e5c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8019e56:	2382      	movs	r3, #130	; 0x82
 8019e58:	613b      	str	r3, [r7, #16]
 8019e5a:	e01b      	b.n	8019e94 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8019e5c:	68b9      	ldr	r1, [r7, #8]
 8019e5e:	f107 0310 	add.w	r3, r7, #16
 8019e62:	1d1a      	adds	r2, r3, #4
 8019e64:	69fb      	ldr	r3, [r7, #28]
 8019e66:	2000      	movs	r0, #0
 8019e68:	f001 fdfe 	bl	801ba68 <xTaskNotifyWait>
 8019e6c:	4603      	mov	r3, r0
 8019e6e:	2b01      	cmp	r3, #1
 8019e70:	d008      	beq.n	8019e84 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8019e72:	69fb      	ldr	r3, [r7, #28]
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d102      	bne.n	8019e7e <osSignalWait+0x6a>
 8019e78:	2300      	movs	r3, #0
 8019e7a:	613b      	str	r3, [r7, #16]
 8019e7c:	e00a      	b.n	8019e94 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8019e7e:	2340      	movs	r3, #64	; 0x40
 8019e80:	613b      	str	r3, [r7, #16]
 8019e82:	e007      	b.n	8019e94 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8019e84:	697b      	ldr	r3, [r7, #20]
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	da02      	bge.n	8019e90 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8019e8a:	2386      	movs	r3, #134	; 0x86
 8019e8c:	613b      	str	r3, [r7, #16]
 8019e8e:	e001      	b.n	8019e94 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8019e90:	2308      	movs	r3, #8
 8019e92:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8019e94:	68fb      	ldr	r3, [r7, #12]
 8019e96:	461c      	mov	r4, r3
 8019e98:	f107 0310 	add.w	r3, r7, #16
 8019e9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019ea0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8019ea4:	68f8      	ldr	r0, [r7, #12]
 8019ea6:	3724      	adds	r7, #36	; 0x24
 8019ea8:	46bd      	mov	sp, r7
 8019eaa:	bd90      	pop	{r4, r7, pc}

08019eac <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8019eac:	b590      	push	{r4, r7, lr}
 8019eae:	b085      	sub	sp, #20
 8019eb0:	af02      	add	r7, sp, #8
 8019eb2:	6078      	str	r0, [r7, #4]
 8019eb4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	689b      	ldr	r3, [r3, #8]
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	d011      	beq.n	8019ee2 <osMessageCreate+0x36>
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	68db      	ldr	r3, [r3, #12]
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d00d      	beq.n	8019ee2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	6818      	ldr	r0, [r3, #0]
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	6859      	ldr	r1, [r3, #4]
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	689a      	ldr	r2, [r3, #8]
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	68db      	ldr	r3, [r3, #12]
 8019ed6:	2400      	movs	r4, #0
 8019ed8:	9400      	str	r4, [sp, #0]
 8019eda:	f000 f9e1 	bl	801a2a0 <xQueueGenericCreateStatic>
 8019ede:	4603      	mov	r3, r0
 8019ee0:	e008      	b.n	8019ef4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	6818      	ldr	r0, [r3, #0]
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	685b      	ldr	r3, [r3, #4]
 8019eea:	2200      	movs	r2, #0
 8019eec:	4619      	mov	r1, r3
 8019eee:	f000 fa59 	bl	801a3a4 <xQueueGenericCreate>
 8019ef2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8019ef4:	4618      	mov	r0, r3
 8019ef6:	370c      	adds	r7, #12
 8019ef8:	46bd      	mov	sp, r7
 8019efa:	bd90      	pop	{r4, r7, pc}

08019efc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8019efc:	b580      	push	{r7, lr}
 8019efe:	b086      	sub	sp, #24
 8019f00:	af00      	add	r7, sp, #0
 8019f02:	60f8      	str	r0, [r7, #12]
 8019f04:	60b9      	str	r1, [r7, #8]
 8019f06:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8019f08:	2300      	movs	r3, #0
 8019f0a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8019f10:	697b      	ldr	r3, [r7, #20]
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d101      	bne.n	8019f1a <osMessagePut+0x1e>
    ticks = 1;
 8019f16:	2301      	movs	r3, #1
 8019f18:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8019f1a:	f7ff fea6 	bl	8019c6a <inHandlerMode>
 8019f1e:	4603      	mov	r3, r0
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	d018      	beq.n	8019f56 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8019f24:	f107 0210 	add.w	r2, r7, #16
 8019f28:	f107 0108 	add.w	r1, r7, #8
 8019f2c:	2300      	movs	r3, #0
 8019f2e:	68f8      	ldr	r0, [r7, #12]
 8019f30:	f000 fba0 	bl	801a674 <xQueueGenericSendFromISR>
 8019f34:	4603      	mov	r3, r0
 8019f36:	2b01      	cmp	r3, #1
 8019f38:	d001      	beq.n	8019f3e <osMessagePut+0x42>
      return osErrorOS;
 8019f3a:	23ff      	movs	r3, #255	; 0xff
 8019f3c:	e018      	b.n	8019f70 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8019f3e:	693b      	ldr	r3, [r7, #16]
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d014      	beq.n	8019f6e <osMessagePut+0x72>
 8019f44:	4b0c      	ldr	r3, [pc, #48]	; (8019f78 <osMessagePut+0x7c>)
 8019f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019f4a:	601a      	str	r2, [r3, #0]
 8019f4c:	f3bf 8f4f 	dsb	sy
 8019f50:	f3bf 8f6f 	isb	sy
 8019f54:	e00b      	b.n	8019f6e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8019f56:	f107 0108 	add.w	r1, r7, #8
 8019f5a:	2300      	movs	r3, #0
 8019f5c:	697a      	ldr	r2, [r7, #20]
 8019f5e:	68f8      	ldr	r0, [r7, #12]
 8019f60:	f000 fa82 	bl	801a468 <xQueueGenericSend>
 8019f64:	4603      	mov	r3, r0
 8019f66:	2b01      	cmp	r3, #1
 8019f68:	d001      	beq.n	8019f6e <osMessagePut+0x72>
      return osErrorOS;
 8019f6a:	23ff      	movs	r3, #255	; 0xff
 8019f6c:	e000      	b.n	8019f70 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8019f6e:	2300      	movs	r3, #0
}
 8019f70:	4618      	mov	r0, r3
 8019f72:	3718      	adds	r7, #24
 8019f74:	46bd      	mov	sp, r7
 8019f76:	bd80      	pop	{r7, pc}
 8019f78:	e000ed04 	.word	0xe000ed04

08019f7c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8019f7c:	b590      	push	{r4, r7, lr}
 8019f7e:	b08b      	sub	sp, #44	; 0x2c
 8019f80:	af00      	add	r7, sp, #0
 8019f82:	60f8      	str	r0, [r7, #12]
 8019f84:	60b9      	str	r1, [r7, #8]
 8019f86:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8019f88:	68bb      	ldr	r3, [r7, #8]
 8019f8a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8019f8c:	2300      	movs	r3, #0
 8019f8e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8019f90:	68bb      	ldr	r3, [r7, #8]
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d10a      	bne.n	8019fac <osMessageGet+0x30>
    event.status = osErrorParameter;
 8019f96:	2380      	movs	r3, #128	; 0x80
 8019f98:	617b      	str	r3, [r7, #20]
    return event;
 8019f9a:	68fb      	ldr	r3, [r7, #12]
 8019f9c:	461c      	mov	r4, r3
 8019f9e:	f107 0314 	add.w	r3, r7, #20
 8019fa2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019fa6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019faa:	e054      	b.n	801a056 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8019fac:	2300      	movs	r3, #0
 8019fae:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8019fb0:	2300      	movs	r3, #0
 8019fb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019fba:	d103      	bne.n	8019fc4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8019fbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8019fc2:	e009      	b.n	8019fd8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	d006      	beq.n	8019fd8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8019fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d101      	bne.n	8019fd8 <osMessageGet+0x5c>
      ticks = 1;
 8019fd4:	2301      	movs	r3, #1
 8019fd6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8019fd8:	f7ff fe47 	bl	8019c6a <inHandlerMode>
 8019fdc:	4603      	mov	r3, r0
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d01c      	beq.n	801a01c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8019fe2:	f107 0220 	add.w	r2, r7, #32
 8019fe6:	f107 0314 	add.w	r3, r7, #20
 8019fea:	3304      	adds	r3, #4
 8019fec:	4619      	mov	r1, r3
 8019fee:	68b8      	ldr	r0, [r7, #8]
 8019ff0:	f000 fcc6 	bl	801a980 <xQueueReceiveFromISR>
 8019ff4:	4603      	mov	r3, r0
 8019ff6:	2b01      	cmp	r3, #1
 8019ff8:	d102      	bne.n	801a000 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8019ffa:	2310      	movs	r3, #16
 8019ffc:	617b      	str	r3, [r7, #20]
 8019ffe:	e001      	b.n	801a004 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 801a000:	2300      	movs	r3, #0
 801a002:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 801a004:	6a3b      	ldr	r3, [r7, #32]
 801a006:	2b00      	cmp	r3, #0
 801a008:	d01d      	beq.n	801a046 <osMessageGet+0xca>
 801a00a:	4b15      	ldr	r3, [pc, #84]	; (801a060 <osMessageGet+0xe4>)
 801a00c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a010:	601a      	str	r2, [r3, #0]
 801a012:	f3bf 8f4f 	dsb	sy
 801a016:	f3bf 8f6f 	isb	sy
 801a01a:	e014      	b.n	801a046 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801a01c:	f107 0314 	add.w	r3, r7, #20
 801a020:	3304      	adds	r3, #4
 801a022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a024:	4619      	mov	r1, r3
 801a026:	68b8      	ldr	r0, [r7, #8]
 801a028:	f000 fbc4 	bl	801a7b4 <xQueueReceive>
 801a02c:	4603      	mov	r3, r0
 801a02e:	2b01      	cmp	r3, #1
 801a030:	d102      	bne.n	801a038 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801a032:	2310      	movs	r3, #16
 801a034:	617b      	str	r3, [r7, #20]
 801a036:	e006      	b.n	801a046 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 801a038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d101      	bne.n	801a042 <osMessageGet+0xc6>
 801a03e:	2300      	movs	r3, #0
 801a040:	e000      	b.n	801a044 <osMessageGet+0xc8>
 801a042:	2340      	movs	r3, #64	; 0x40
 801a044:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801a046:	68fb      	ldr	r3, [r7, #12]
 801a048:	461c      	mov	r4, r3
 801a04a:	f107 0314 	add.w	r3, r7, #20
 801a04e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a052:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801a056:	68f8      	ldr	r0, [r7, #12]
 801a058:	372c      	adds	r7, #44	; 0x2c
 801a05a:	46bd      	mov	sp, r7
 801a05c:	bd90      	pop	{r4, r7, pc}
 801a05e:	bf00      	nop
 801a060:	e000ed04 	.word	0xe000ed04

0801a064 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801a064:	b480      	push	{r7}
 801a066:	b083      	sub	sp, #12
 801a068:	af00      	add	r7, sp, #0
 801a06a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	f103 0208 	add.w	r2, r3, #8
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a07c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	f103 0208 	add.w	r2, r3, #8
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	f103 0208 	add.w	r2, r3, #8
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	2200      	movs	r2, #0
 801a096:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801a098:	bf00      	nop
 801a09a:	370c      	adds	r7, #12
 801a09c:	46bd      	mov	sp, r7
 801a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0a2:	4770      	bx	lr

0801a0a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801a0a4:	b480      	push	{r7}
 801a0a6:	b083      	sub	sp, #12
 801a0a8:	af00      	add	r7, sp, #0
 801a0aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	2200      	movs	r2, #0
 801a0b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801a0b2:	bf00      	nop
 801a0b4:	370c      	adds	r7, #12
 801a0b6:	46bd      	mov	sp, r7
 801a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0bc:	4770      	bx	lr

0801a0be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801a0be:	b480      	push	{r7}
 801a0c0:	b085      	sub	sp, #20
 801a0c2:	af00      	add	r7, sp, #0
 801a0c4:	6078      	str	r0, [r7, #4]
 801a0c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	685b      	ldr	r3, [r3, #4]
 801a0cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801a0ce:	683b      	ldr	r3, [r7, #0]
 801a0d0:	68fa      	ldr	r2, [r7, #12]
 801a0d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801a0d4:	68fb      	ldr	r3, [r7, #12]
 801a0d6:	689a      	ldr	r2, [r3, #8]
 801a0d8:	683b      	ldr	r3, [r7, #0]
 801a0da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801a0dc:	68fb      	ldr	r3, [r7, #12]
 801a0de:	689b      	ldr	r3, [r3, #8]
 801a0e0:	683a      	ldr	r2, [r7, #0]
 801a0e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801a0e4:	68fb      	ldr	r3, [r7, #12]
 801a0e6:	683a      	ldr	r2, [r7, #0]
 801a0e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801a0ea:	683b      	ldr	r3, [r7, #0]
 801a0ec:	687a      	ldr	r2, [r7, #4]
 801a0ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	1c5a      	adds	r2, r3, #1
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	601a      	str	r2, [r3, #0]
}
 801a0fa:	bf00      	nop
 801a0fc:	3714      	adds	r7, #20
 801a0fe:	46bd      	mov	sp, r7
 801a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a104:	4770      	bx	lr

0801a106 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801a106:	b480      	push	{r7}
 801a108:	b085      	sub	sp, #20
 801a10a:	af00      	add	r7, sp, #0
 801a10c:	6078      	str	r0, [r7, #4]
 801a10e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801a110:	683b      	ldr	r3, [r7, #0]
 801a112:	681b      	ldr	r3, [r3, #0]
 801a114:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801a116:	68bb      	ldr	r3, [r7, #8]
 801a118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a11c:	d103      	bne.n	801a126 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	691b      	ldr	r3, [r3, #16]
 801a122:	60fb      	str	r3, [r7, #12]
 801a124:	e00c      	b.n	801a140 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	3308      	adds	r3, #8
 801a12a:	60fb      	str	r3, [r7, #12]
 801a12c:	e002      	b.n	801a134 <vListInsert+0x2e>
 801a12e:	68fb      	ldr	r3, [r7, #12]
 801a130:	685b      	ldr	r3, [r3, #4]
 801a132:	60fb      	str	r3, [r7, #12]
 801a134:	68fb      	ldr	r3, [r7, #12]
 801a136:	685b      	ldr	r3, [r3, #4]
 801a138:	681b      	ldr	r3, [r3, #0]
 801a13a:	68ba      	ldr	r2, [r7, #8]
 801a13c:	429a      	cmp	r2, r3
 801a13e:	d2f6      	bcs.n	801a12e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	685a      	ldr	r2, [r3, #4]
 801a144:	683b      	ldr	r3, [r7, #0]
 801a146:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801a148:	683b      	ldr	r3, [r7, #0]
 801a14a:	685b      	ldr	r3, [r3, #4]
 801a14c:	683a      	ldr	r2, [r7, #0]
 801a14e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801a150:	683b      	ldr	r3, [r7, #0]
 801a152:	68fa      	ldr	r2, [r7, #12]
 801a154:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801a156:	68fb      	ldr	r3, [r7, #12]
 801a158:	683a      	ldr	r2, [r7, #0]
 801a15a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801a15c:	683b      	ldr	r3, [r7, #0]
 801a15e:	687a      	ldr	r2, [r7, #4]
 801a160:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	1c5a      	adds	r2, r3, #1
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	601a      	str	r2, [r3, #0]
}
 801a16c:	bf00      	nop
 801a16e:	3714      	adds	r7, #20
 801a170:	46bd      	mov	sp, r7
 801a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a176:	4770      	bx	lr

0801a178 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801a178:	b480      	push	{r7}
 801a17a:	b085      	sub	sp, #20
 801a17c:	af00      	add	r7, sp, #0
 801a17e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	691b      	ldr	r3, [r3, #16]
 801a184:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	685b      	ldr	r3, [r3, #4]
 801a18a:	687a      	ldr	r2, [r7, #4]
 801a18c:	6892      	ldr	r2, [r2, #8]
 801a18e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	689b      	ldr	r3, [r3, #8]
 801a194:	687a      	ldr	r2, [r7, #4]
 801a196:	6852      	ldr	r2, [r2, #4]
 801a198:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801a19a:	68fb      	ldr	r3, [r7, #12]
 801a19c:	685b      	ldr	r3, [r3, #4]
 801a19e:	687a      	ldr	r2, [r7, #4]
 801a1a0:	429a      	cmp	r2, r3
 801a1a2:	d103      	bne.n	801a1ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	689a      	ldr	r2, [r3, #8]
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	2200      	movs	r2, #0
 801a1b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801a1b2:	68fb      	ldr	r3, [r7, #12]
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	1e5a      	subs	r2, r3, #1
 801a1b8:	68fb      	ldr	r3, [r7, #12]
 801a1ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801a1bc:	68fb      	ldr	r3, [r7, #12]
 801a1be:	681b      	ldr	r3, [r3, #0]
}
 801a1c0:	4618      	mov	r0, r3
 801a1c2:	3714      	adds	r7, #20
 801a1c4:	46bd      	mov	sp, r7
 801a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ca:	4770      	bx	lr

0801a1cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801a1cc:	b580      	push	{r7, lr}
 801a1ce:	b084      	sub	sp, #16
 801a1d0:	af00      	add	r7, sp, #0
 801a1d2:	6078      	str	r0, [r7, #4]
 801a1d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801a1da:	68fb      	ldr	r3, [r7, #12]
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	d10c      	bne.n	801a1fa <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801a1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1e4:	b672      	cpsid	i
 801a1e6:	f383 8811 	msr	BASEPRI, r3
 801a1ea:	f3bf 8f6f 	isb	sy
 801a1ee:	f3bf 8f4f 	dsb	sy
 801a1f2:	b662      	cpsie	i
 801a1f4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801a1f6:	bf00      	nop
 801a1f8:	e7fe      	b.n	801a1f8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 801a1fa:	f001 ff9f 	bl	801c13c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801a1fe:	68fb      	ldr	r3, [r7, #12]
 801a200:	681a      	ldr	r2, [r3, #0]
 801a202:	68fb      	ldr	r3, [r7, #12]
 801a204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a206:	68f9      	ldr	r1, [r7, #12]
 801a208:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801a20a:	fb01 f303 	mul.w	r3, r1, r3
 801a20e:	441a      	add	r2, r3
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801a214:	68fb      	ldr	r3, [r7, #12]
 801a216:	2200      	movs	r2, #0
 801a218:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801a21a:	68fb      	ldr	r3, [r7, #12]
 801a21c:	681a      	ldr	r2, [r3, #0]
 801a21e:	68fb      	ldr	r3, [r7, #12]
 801a220:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801a222:	68fb      	ldr	r3, [r7, #12]
 801a224:	681a      	ldr	r2, [r3, #0]
 801a226:	68fb      	ldr	r3, [r7, #12]
 801a228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a22a:	3b01      	subs	r3, #1
 801a22c:	68f9      	ldr	r1, [r7, #12]
 801a22e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801a230:	fb01 f303 	mul.w	r3, r1, r3
 801a234:	441a      	add	r2, r3
 801a236:	68fb      	ldr	r3, [r7, #12]
 801a238:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801a23a:	68fb      	ldr	r3, [r7, #12]
 801a23c:	22ff      	movs	r2, #255	; 0xff
 801a23e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801a242:	68fb      	ldr	r3, [r7, #12]
 801a244:	22ff      	movs	r2, #255	; 0xff
 801a246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801a24a:	683b      	ldr	r3, [r7, #0]
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	d114      	bne.n	801a27a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a250:	68fb      	ldr	r3, [r7, #12]
 801a252:	691b      	ldr	r3, [r3, #16]
 801a254:	2b00      	cmp	r3, #0
 801a256:	d01a      	beq.n	801a28e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	3310      	adds	r3, #16
 801a25c:	4618      	mov	r0, r3
 801a25e:	f001 f995 	bl	801b58c <xTaskRemoveFromEventList>
 801a262:	4603      	mov	r3, r0
 801a264:	2b00      	cmp	r3, #0
 801a266:	d012      	beq.n	801a28e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801a268:	4b0c      	ldr	r3, [pc, #48]	; (801a29c <xQueueGenericReset+0xd0>)
 801a26a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a26e:	601a      	str	r2, [r3, #0]
 801a270:	f3bf 8f4f 	dsb	sy
 801a274:	f3bf 8f6f 	isb	sy
 801a278:	e009      	b.n	801a28e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801a27a:	68fb      	ldr	r3, [r7, #12]
 801a27c:	3310      	adds	r3, #16
 801a27e:	4618      	mov	r0, r3
 801a280:	f7ff fef0 	bl	801a064 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801a284:	68fb      	ldr	r3, [r7, #12]
 801a286:	3324      	adds	r3, #36	; 0x24
 801a288:	4618      	mov	r0, r3
 801a28a:	f7ff feeb 	bl	801a064 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801a28e:	f001 ff89 	bl	801c1a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801a292:	2301      	movs	r3, #1
}
 801a294:	4618      	mov	r0, r3
 801a296:	3710      	adds	r7, #16
 801a298:	46bd      	mov	sp, r7
 801a29a:	bd80      	pop	{r7, pc}
 801a29c:	e000ed04 	.word	0xe000ed04

0801a2a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801a2a0:	b580      	push	{r7, lr}
 801a2a2:	b08e      	sub	sp, #56	; 0x38
 801a2a4:	af02      	add	r7, sp, #8
 801a2a6:	60f8      	str	r0, [r7, #12]
 801a2a8:	60b9      	str	r1, [r7, #8]
 801a2aa:	607a      	str	r2, [r7, #4]
 801a2ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801a2ae:	68fb      	ldr	r3, [r7, #12]
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d10c      	bne.n	801a2ce <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 801a2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2b8:	b672      	cpsid	i
 801a2ba:	f383 8811 	msr	BASEPRI, r3
 801a2be:	f3bf 8f6f 	isb	sy
 801a2c2:	f3bf 8f4f 	dsb	sy
 801a2c6:	b662      	cpsie	i
 801a2c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801a2ca:	bf00      	nop
 801a2cc:	e7fe      	b.n	801a2cc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801a2ce:	683b      	ldr	r3, [r7, #0]
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	d10c      	bne.n	801a2ee <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 801a2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2d8:	b672      	cpsid	i
 801a2da:	f383 8811 	msr	BASEPRI, r3
 801a2de:	f3bf 8f6f 	isb	sy
 801a2e2:	f3bf 8f4f 	dsb	sy
 801a2e6:	b662      	cpsie	i
 801a2e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a2ea:	bf00      	nop
 801a2ec:	e7fe      	b.n	801a2ec <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d002      	beq.n	801a2fa <xQueueGenericCreateStatic+0x5a>
 801a2f4:	68bb      	ldr	r3, [r7, #8]
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	d001      	beq.n	801a2fe <xQueueGenericCreateStatic+0x5e>
 801a2fa:	2301      	movs	r3, #1
 801a2fc:	e000      	b.n	801a300 <xQueueGenericCreateStatic+0x60>
 801a2fe:	2300      	movs	r3, #0
 801a300:	2b00      	cmp	r3, #0
 801a302:	d10c      	bne.n	801a31e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 801a304:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a308:	b672      	cpsid	i
 801a30a:	f383 8811 	msr	BASEPRI, r3
 801a30e:	f3bf 8f6f 	isb	sy
 801a312:	f3bf 8f4f 	dsb	sy
 801a316:	b662      	cpsie	i
 801a318:	623b      	str	r3, [r7, #32]
}
 801a31a:	bf00      	nop
 801a31c:	e7fe      	b.n	801a31c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	2b00      	cmp	r3, #0
 801a322:	d102      	bne.n	801a32a <xQueueGenericCreateStatic+0x8a>
 801a324:	68bb      	ldr	r3, [r7, #8]
 801a326:	2b00      	cmp	r3, #0
 801a328:	d101      	bne.n	801a32e <xQueueGenericCreateStatic+0x8e>
 801a32a:	2301      	movs	r3, #1
 801a32c:	e000      	b.n	801a330 <xQueueGenericCreateStatic+0x90>
 801a32e:	2300      	movs	r3, #0
 801a330:	2b00      	cmp	r3, #0
 801a332:	d10c      	bne.n	801a34e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 801a334:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a338:	b672      	cpsid	i
 801a33a:	f383 8811 	msr	BASEPRI, r3
 801a33e:	f3bf 8f6f 	isb	sy
 801a342:	f3bf 8f4f 	dsb	sy
 801a346:	b662      	cpsie	i
 801a348:	61fb      	str	r3, [r7, #28]
}
 801a34a:	bf00      	nop
 801a34c:	e7fe      	b.n	801a34c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801a34e:	2348      	movs	r3, #72	; 0x48
 801a350:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801a352:	697b      	ldr	r3, [r7, #20]
 801a354:	2b48      	cmp	r3, #72	; 0x48
 801a356:	d00c      	beq.n	801a372 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 801a358:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a35c:	b672      	cpsid	i
 801a35e:	f383 8811 	msr	BASEPRI, r3
 801a362:	f3bf 8f6f 	isb	sy
 801a366:	f3bf 8f4f 	dsb	sy
 801a36a:	b662      	cpsie	i
 801a36c:	61bb      	str	r3, [r7, #24]
}
 801a36e:	bf00      	nop
 801a370:	e7fe      	b.n	801a370 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801a372:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801a374:	683b      	ldr	r3, [r7, #0]
 801a376:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801a378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d00d      	beq.n	801a39a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801a37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a380:	2201      	movs	r2, #1
 801a382:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801a386:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801a38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a38c:	9300      	str	r3, [sp, #0]
 801a38e:	4613      	mov	r3, r2
 801a390:	687a      	ldr	r2, [r7, #4]
 801a392:	68b9      	ldr	r1, [r7, #8]
 801a394:	68f8      	ldr	r0, [r7, #12]
 801a396:	f000 f847 	bl	801a428 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801a39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801a39c:	4618      	mov	r0, r3
 801a39e:	3730      	adds	r7, #48	; 0x30
 801a3a0:	46bd      	mov	sp, r7
 801a3a2:	bd80      	pop	{r7, pc}

0801a3a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801a3a4:	b580      	push	{r7, lr}
 801a3a6:	b08a      	sub	sp, #40	; 0x28
 801a3a8:	af02      	add	r7, sp, #8
 801a3aa:	60f8      	str	r0, [r7, #12]
 801a3ac:	60b9      	str	r1, [r7, #8]
 801a3ae:	4613      	mov	r3, r2
 801a3b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801a3b2:	68fb      	ldr	r3, [r7, #12]
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	d10c      	bne.n	801a3d2 <xQueueGenericCreate+0x2e>
	__asm volatile
 801a3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3bc:	b672      	cpsid	i
 801a3be:	f383 8811 	msr	BASEPRI, r3
 801a3c2:	f3bf 8f6f 	isb	sy
 801a3c6:	f3bf 8f4f 	dsb	sy
 801a3ca:	b662      	cpsie	i
 801a3cc:	613b      	str	r3, [r7, #16]
}
 801a3ce:	bf00      	nop
 801a3d0:	e7fe      	b.n	801a3d0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801a3d2:	68bb      	ldr	r3, [r7, #8]
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	d102      	bne.n	801a3de <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801a3d8:	2300      	movs	r3, #0
 801a3da:	61fb      	str	r3, [r7, #28]
 801a3dc:	e004      	b.n	801a3e8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a3de:	68fb      	ldr	r3, [r7, #12]
 801a3e0:	68ba      	ldr	r2, [r7, #8]
 801a3e2:	fb02 f303 	mul.w	r3, r2, r3
 801a3e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801a3e8:	69fb      	ldr	r3, [r7, #28]
 801a3ea:	3348      	adds	r3, #72	; 0x48
 801a3ec:	4618      	mov	r0, r3
 801a3ee:	f001 ffd1 	bl	801c394 <pvPortMalloc>
 801a3f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801a3f4:	69bb      	ldr	r3, [r7, #24]
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d011      	beq.n	801a41e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801a3fa:	69bb      	ldr	r3, [r7, #24]
 801a3fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801a3fe:	697b      	ldr	r3, [r7, #20]
 801a400:	3348      	adds	r3, #72	; 0x48
 801a402:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801a404:	69bb      	ldr	r3, [r7, #24]
 801a406:	2200      	movs	r2, #0
 801a408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801a40c:	79fa      	ldrb	r2, [r7, #7]
 801a40e:	69bb      	ldr	r3, [r7, #24]
 801a410:	9300      	str	r3, [sp, #0]
 801a412:	4613      	mov	r3, r2
 801a414:	697a      	ldr	r2, [r7, #20]
 801a416:	68b9      	ldr	r1, [r7, #8]
 801a418:	68f8      	ldr	r0, [r7, #12]
 801a41a:	f000 f805 	bl	801a428 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801a41e:	69bb      	ldr	r3, [r7, #24]
	}
 801a420:	4618      	mov	r0, r3
 801a422:	3720      	adds	r7, #32
 801a424:	46bd      	mov	sp, r7
 801a426:	bd80      	pop	{r7, pc}

0801a428 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801a428:	b580      	push	{r7, lr}
 801a42a:	b084      	sub	sp, #16
 801a42c:	af00      	add	r7, sp, #0
 801a42e:	60f8      	str	r0, [r7, #12]
 801a430:	60b9      	str	r1, [r7, #8]
 801a432:	607a      	str	r2, [r7, #4]
 801a434:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801a436:	68bb      	ldr	r3, [r7, #8]
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d103      	bne.n	801a444 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801a43c:	69bb      	ldr	r3, [r7, #24]
 801a43e:	69ba      	ldr	r2, [r7, #24]
 801a440:	601a      	str	r2, [r3, #0]
 801a442:	e002      	b.n	801a44a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801a444:	69bb      	ldr	r3, [r7, #24]
 801a446:	687a      	ldr	r2, [r7, #4]
 801a448:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801a44a:	69bb      	ldr	r3, [r7, #24]
 801a44c:	68fa      	ldr	r2, [r7, #12]
 801a44e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801a450:	69bb      	ldr	r3, [r7, #24]
 801a452:	68ba      	ldr	r2, [r7, #8]
 801a454:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801a456:	2101      	movs	r1, #1
 801a458:	69b8      	ldr	r0, [r7, #24]
 801a45a:	f7ff feb7 	bl	801a1cc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801a45e:	bf00      	nop
 801a460:	3710      	adds	r7, #16
 801a462:	46bd      	mov	sp, r7
 801a464:	bd80      	pop	{r7, pc}
	...

0801a468 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801a468:	b580      	push	{r7, lr}
 801a46a:	b08e      	sub	sp, #56	; 0x38
 801a46c:	af00      	add	r7, sp, #0
 801a46e:	60f8      	str	r0, [r7, #12]
 801a470:	60b9      	str	r1, [r7, #8]
 801a472:	607a      	str	r2, [r7, #4]
 801a474:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801a476:	2300      	movs	r3, #0
 801a478:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a47a:	68fb      	ldr	r3, [r7, #12]
 801a47c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801a47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a480:	2b00      	cmp	r3, #0
 801a482:	d10c      	bne.n	801a49e <xQueueGenericSend+0x36>
	__asm volatile
 801a484:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a488:	b672      	cpsid	i
 801a48a:	f383 8811 	msr	BASEPRI, r3
 801a48e:	f3bf 8f6f 	isb	sy
 801a492:	f3bf 8f4f 	dsb	sy
 801a496:	b662      	cpsie	i
 801a498:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801a49a:	bf00      	nop
 801a49c:	e7fe      	b.n	801a49c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a49e:	68bb      	ldr	r3, [r7, #8]
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d103      	bne.n	801a4ac <xQueueGenericSend+0x44>
 801a4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d101      	bne.n	801a4b0 <xQueueGenericSend+0x48>
 801a4ac:	2301      	movs	r3, #1
 801a4ae:	e000      	b.n	801a4b2 <xQueueGenericSend+0x4a>
 801a4b0:	2300      	movs	r3, #0
 801a4b2:	2b00      	cmp	r3, #0
 801a4b4:	d10c      	bne.n	801a4d0 <xQueueGenericSend+0x68>
	__asm volatile
 801a4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4ba:	b672      	cpsid	i
 801a4bc:	f383 8811 	msr	BASEPRI, r3
 801a4c0:	f3bf 8f6f 	isb	sy
 801a4c4:	f3bf 8f4f 	dsb	sy
 801a4c8:	b662      	cpsie	i
 801a4ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a4cc:	bf00      	nop
 801a4ce:	e7fe      	b.n	801a4ce <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a4d0:	683b      	ldr	r3, [r7, #0]
 801a4d2:	2b02      	cmp	r3, #2
 801a4d4:	d103      	bne.n	801a4de <xQueueGenericSend+0x76>
 801a4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a4da:	2b01      	cmp	r3, #1
 801a4dc:	d101      	bne.n	801a4e2 <xQueueGenericSend+0x7a>
 801a4de:	2301      	movs	r3, #1
 801a4e0:	e000      	b.n	801a4e4 <xQueueGenericSend+0x7c>
 801a4e2:	2300      	movs	r3, #0
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	d10c      	bne.n	801a502 <xQueueGenericSend+0x9a>
	__asm volatile
 801a4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4ec:	b672      	cpsid	i
 801a4ee:	f383 8811 	msr	BASEPRI, r3
 801a4f2:	f3bf 8f6f 	isb	sy
 801a4f6:	f3bf 8f4f 	dsb	sy
 801a4fa:	b662      	cpsie	i
 801a4fc:	623b      	str	r3, [r7, #32]
}
 801a4fe:	bf00      	nop
 801a500:	e7fe      	b.n	801a500 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a502:	f001 fa09 	bl	801b918 <xTaskGetSchedulerState>
 801a506:	4603      	mov	r3, r0
 801a508:	2b00      	cmp	r3, #0
 801a50a:	d102      	bne.n	801a512 <xQueueGenericSend+0xaa>
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d101      	bne.n	801a516 <xQueueGenericSend+0xae>
 801a512:	2301      	movs	r3, #1
 801a514:	e000      	b.n	801a518 <xQueueGenericSend+0xb0>
 801a516:	2300      	movs	r3, #0
 801a518:	2b00      	cmp	r3, #0
 801a51a:	d10c      	bne.n	801a536 <xQueueGenericSend+0xce>
	__asm volatile
 801a51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a520:	b672      	cpsid	i
 801a522:	f383 8811 	msr	BASEPRI, r3
 801a526:	f3bf 8f6f 	isb	sy
 801a52a:	f3bf 8f4f 	dsb	sy
 801a52e:	b662      	cpsie	i
 801a530:	61fb      	str	r3, [r7, #28]
}
 801a532:	bf00      	nop
 801a534:	e7fe      	b.n	801a534 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a536:	f001 fe01 	bl	801c13c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a53c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a542:	429a      	cmp	r2, r3
 801a544:	d302      	bcc.n	801a54c <xQueueGenericSend+0xe4>
 801a546:	683b      	ldr	r3, [r7, #0]
 801a548:	2b02      	cmp	r3, #2
 801a54a:	d129      	bne.n	801a5a0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a54c:	683a      	ldr	r2, [r7, #0]
 801a54e:	68b9      	ldr	r1, [r7, #8]
 801a550:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a552:	f000 fa9b 	bl	801aa8c <prvCopyDataToQueue>
 801a556:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	d010      	beq.n	801a582 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a562:	3324      	adds	r3, #36	; 0x24
 801a564:	4618      	mov	r0, r3
 801a566:	f001 f811 	bl	801b58c <xTaskRemoveFromEventList>
 801a56a:	4603      	mov	r3, r0
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d013      	beq.n	801a598 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801a570:	4b3f      	ldr	r3, [pc, #252]	; (801a670 <xQueueGenericSend+0x208>)
 801a572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a576:	601a      	str	r2, [r3, #0]
 801a578:	f3bf 8f4f 	dsb	sy
 801a57c:	f3bf 8f6f 	isb	sy
 801a580:	e00a      	b.n	801a598 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801a582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a584:	2b00      	cmp	r3, #0
 801a586:	d007      	beq.n	801a598 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801a588:	4b39      	ldr	r3, [pc, #228]	; (801a670 <xQueueGenericSend+0x208>)
 801a58a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a58e:	601a      	str	r2, [r3, #0]
 801a590:	f3bf 8f4f 	dsb	sy
 801a594:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801a598:	f001 fe04 	bl	801c1a4 <vPortExitCritical>
				return pdPASS;
 801a59c:	2301      	movs	r3, #1
 801a59e:	e063      	b.n	801a668 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d103      	bne.n	801a5ae <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a5a6:	f001 fdfd 	bl	801c1a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801a5aa:	2300      	movs	r3, #0
 801a5ac:	e05c      	b.n	801a668 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a5ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d106      	bne.n	801a5c2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a5b4:	f107 0314 	add.w	r3, r7, #20
 801a5b8:	4618      	mov	r0, r3
 801a5ba:	f001 f84b 	bl	801b654 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a5be:	2301      	movs	r3, #1
 801a5c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a5c2:	f001 fdef 	bl	801c1a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a5c6:	f000 fdb1 	bl	801b12c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a5ca:	f001 fdb7 	bl	801c13c <vPortEnterCritical>
 801a5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a5d4:	b25b      	sxtb	r3, r3
 801a5d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a5da:	d103      	bne.n	801a5e4 <xQueueGenericSend+0x17c>
 801a5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5de:	2200      	movs	r2, #0
 801a5e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a5ea:	b25b      	sxtb	r3, r3
 801a5ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a5f0:	d103      	bne.n	801a5fa <xQueueGenericSend+0x192>
 801a5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5f4:	2200      	movs	r2, #0
 801a5f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a5fa:	f001 fdd3 	bl	801c1a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a5fe:	1d3a      	adds	r2, r7, #4
 801a600:	f107 0314 	add.w	r3, r7, #20
 801a604:	4611      	mov	r1, r2
 801a606:	4618      	mov	r0, r3
 801a608:	f001 f83a 	bl	801b680 <xTaskCheckForTimeOut>
 801a60c:	4603      	mov	r3, r0
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d124      	bne.n	801a65c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801a612:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a614:	f000 fb32 	bl	801ac7c <prvIsQueueFull>
 801a618:	4603      	mov	r3, r0
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d018      	beq.n	801a650 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801a61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a620:	3310      	adds	r3, #16
 801a622:	687a      	ldr	r2, [r7, #4]
 801a624:	4611      	mov	r1, r2
 801a626:	4618      	mov	r0, r3
 801a628:	f000 ff8a 	bl	801b540 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801a62c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a62e:	f000 fabd 	bl	801abac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801a632:	f000 fd89 	bl	801b148 <xTaskResumeAll>
 801a636:	4603      	mov	r3, r0
 801a638:	2b00      	cmp	r3, #0
 801a63a:	f47f af7c 	bne.w	801a536 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 801a63e:	4b0c      	ldr	r3, [pc, #48]	; (801a670 <xQueueGenericSend+0x208>)
 801a640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a644:	601a      	str	r2, [r3, #0]
 801a646:	f3bf 8f4f 	dsb	sy
 801a64a:	f3bf 8f6f 	isb	sy
 801a64e:	e772      	b.n	801a536 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801a650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a652:	f000 faab 	bl	801abac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a656:	f000 fd77 	bl	801b148 <xTaskResumeAll>
 801a65a:	e76c      	b.n	801a536 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801a65c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a65e:	f000 faa5 	bl	801abac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a662:	f000 fd71 	bl	801b148 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801a666:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801a668:	4618      	mov	r0, r3
 801a66a:	3738      	adds	r7, #56	; 0x38
 801a66c:	46bd      	mov	sp, r7
 801a66e:	bd80      	pop	{r7, pc}
 801a670:	e000ed04 	.word	0xe000ed04

0801a674 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801a674:	b580      	push	{r7, lr}
 801a676:	b08e      	sub	sp, #56	; 0x38
 801a678:	af00      	add	r7, sp, #0
 801a67a:	60f8      	str	r0, [r7, #12]
 801a67c:	60b9      	str	r1, [r7, #8]
 801a67e:	607a      	str	r2, [r7, #4]
 801a680:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a682:	68fb      	ldr	r3, [r7, #12]
 801a684:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801a686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a688:	2b00      	cmp	r3, #0
 801a68a:	d10c      	bne.n	801a6a6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 801a68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a690:	b672      	cpsid	i
 801a692:	f383 8811 	msr	BASEPRI, r3
 801a696:	f3bf 8f6f 	isb	sy
 801a69a:	f3bf 8f4f 	dsb	sy
 801a69e:	b662      	cpsie	i
 801a6a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a6a2:	bf00      	nop
 801a6a4:	e7fe      	b.n	801a6a4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a6a6:	68bb      	ldr	r3, [r7, #8]
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d103      	bne.n	801a6b4 <xQueueGenericSendFromISR+0x40>
 801a6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	d101      	bne.n	801a6b8 <xQueueGenericSendFromISR+0x44>
 801a6b4:	2301      	movs	r3, #1
 801a6b6:	e000      	b.n	801a6ba <xQueueGenericSendFromISR+0x46>
 801a6b8:	2300      	movs	r3, #0
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	d10c      	bne.n	801a6d8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 801a6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a6c2:	b672      	cpsid	i
 801a6c4:	f383 8811 	msr	BASEPRI, r3
 801a6c8:	f3bf 8f6f 	isb	sy
 801a6cc:	f3bf 8f4f 	dsb	sy
 801a6d0:	b662      	cpsie	i
 801a6d2:	623b      	str	r3, [r7, #32]
}
 801a6d4:	bf00      	nop
 801a6d6:	e7fe      	b.n	801a6d6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a6d8:	683b      	ldr	r3, [r7, #0]
 801a6da:	2b02      	cmp	r3, #2
 801a6dc:	d103      	bne.n	801a6e6 <xQueueGenericSendFromISR+0x72>
 801a6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a6e2:	2b01      	cmp	r3, #1
 801a6e4:	d101      	bne.n	801a6ea <xQueueGenericSendFromISR+0x76>
 801a6e6:	2301      	movs	r3, #1
 801a6e8:	e000      	b.n	801a6ec <xQueueGenericSendFromISR+0x78>
 801a6ea:	2300      	movs	r3, #0
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	d10c      	bne.n	801a70a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 801a6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a6f4:	b672      	cpsid	i
 801a6f6:	f383 8811 	msr	BASEPRI, r3
 801a6fa:	f3bf 8f6f 	isb	sy
 801a6fe:	f3bf 8f4f 	dsb	sy
 801a702:	b662      	cpsie	i
 801a704:	61fb      	str	r3, [r7, #28]
}
 801a706:	bf00      	nop
 801a708:	e7fe      	b.n	801a708 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a70a:	f001 fdff 	bl	801c30c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801a70e:	f3ef 8211 	mrs	r2, BASEPRI
 801a712:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a716:	b672      	cpsid	i
 801a718:	f383 8811 	msr	BASEPRI, r3
 801a71c:	f3bf 8f6f 	isb	sy
 801a720:	f3bf 8f4f 	dsb	sy
 801a724:	b662      	cpsie	i
 801a726:	61ba      	str	r2, [r7, #24]
 801a728:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801a72a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a72c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a736:	429a      	cmp	r2, r3
 801a738:	d302      	bcc.n	801a740 <xQueueGenericSendFromISR+0xcc>
 801a73a:	683b      	ldr	r3, [r7, #0]
 801a73c:	2b02      	cmp	r3, #2
 801a73e:	d12c      	bne.n	801a79a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801a740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a742:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a74a:	683a      	ldr	r2, [r7, #0]
 801a74c:	68b9      	ldr	r1, [r7, #8]
 801a74e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a750:	f000 f99c 	bl	801aa8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801a754:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801a758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a75c:	d112      	bne.n	801a784 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a762:	2b00      	cmp	r3, #0
 801a764:	d016      	beq.n	801a794 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a768:	3324      	adds	r3, #36	; 0x24
 801a76a:	4618      	mov	r0, r3
 801a76c:	f000 ff0e 	bl	801b58c <xTaskRemoveFromEventList>
 801a770:	4603      	mov	r3, r0
 801a772:	2b00      	cmp	r3, #0
 801a774:	d00e      	beq.n	801a794 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	2b00      	cmp	r3, #0
 801a77a:	d00b      	beq.n	801a794 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	2201      	movs	r2, #1
 801a780:	601a      	str	r2, [r3, #0]
 801a782:	e007      	b.n	801a794 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801a784:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801a788:	3301      	adds	r3, #1
 801a78a:	b2db      	uxtb	r3, r3
 801a78c:	b25a      	sxtb	r2, r3
 801a78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801a794:	2301      	movs	r3, #1
 801a796:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801a798:	e001      	b.n	801a79e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801a79a:	2300      	movs	r3, #0
 801a79c:	637b      	str	r3, [r7, #52]	; 0x34
 801a79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7a0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801a7a2:	693b      	ldr	r3, [r7, #16]
 801a7a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801a7a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a7aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801a7ac:	4618      	mov	r0, r3
 801a7ae:	3738      	adds	r7, #56	; 0x38
 801a7b0:	46bd      	mov	sp, r7
 801a7b2:	bd80      	pop	{r7, pc}

0801a7b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801a7b4:	b580      	push	{r7, lr}
 801a7b6:	b08c      	sub	sp, #48	; 0x30
 801a7b8:	af00      	add	r7, sp, #0
 801a7ba:	60f8      	str	r0, [r7, #12]
 801a7bc:	60b9      	str	r1, [r7, #8]
 801a7be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801a7c0:	2300      	movs	r3, #0
 801a7c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a7c4:	68fb      	ldr	r3, [r7, #12]
 801a7c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7ca:	2b00      	cmp	r3, #0
 801a7cc:	d10c      	bne.n	801a7e8 <xQueueReceive+0x34>
	__asm volatile
 801a7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7d2:	b672      	cpsid	i
 801a7d4:	f383 8811 	msr	BASEPRI, r3
 801a7d8:	f3bf 8f6f 	isb	sy
 801a7dc:	f3bf 8f4f 	dsb	sy
 801a7e0:	b662      	cpsie	i
 801a7e2:	623b      	str	r3, [r7, #32]
}
 801a7e4:	bf00      	nop
 801a7e6:	e7fe      	b.n	801a7e6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a7e8:	68bb      	ldr	r3, [r7, #8]
 801a7ea:	2b00      	cmp	r3, #0
 801a7ec:	d103      	bne.n	801a7f6 <xQueueReceive+0x42>
 801a7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d101      	bne.n	801a7fa <xQueueReceive+0x46>
 801a7f6:	2301      	movs	r3, #1
 801a7f8:	e000      	b.n	801a7fc <xQueueReceive+0x48>
 801a7fa:	2300      	movs	r3, #0
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	d10c      	bne.n	801a81a <xQueueReceive+0x66>
	__asm volatile
 801a800:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a804:	b672      	cpsid	i
 801a806:	f383 8811 	msr	BASEPRI, r3
 801a80a:	f3bf 8f6f 	isb	sy
 801a80e:	f3bf 8f4f 	dsb	sy
 801a812:	b662      	cpsie	i
 801a814:	61fb      	str	r3, [r7, #28]
}
 801a816:	bf00      	nop
 801a818:	e7fe      	b.n	801a818 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a81a:	f001 f87d 	bl	801b918 <xTaskGetSchedulerState>
 801a81e:	4603      	mov	r3, r0
 801a820:	2b00      	cmp	r3, #0
 801a822:	d102      	bne.n	801a82a <xQueueReceive+0x76>
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	2b00      	cmp	r3, #0
 801a828:	d101      	bne.n	801a82e <xQueueReceive+0x7a>
 801a82a:	2301      	movs	r3, #1
 801a82c:	e000      	b.n	801a830 <xQueueReceive+0x7c>
 801a82e:	2300      	movs	r3, #0
 801a830:	2b00      	cmp	r3, #0
 801a832:	d10c      	bne.n	801a84e <xQueueReceive+0x9a>
	__asm volatile
 801a834:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a838:	b672      	cpsid	i
 801a83a:	f383 8811 	msr	BASEPRI, r3
 801a83e:	f3bf 8f6f 	isb	sy
 801a842:	f3bf 8f4f 	dsb	sy
 801a846:	b662      	cpsie	i
 801a848:	61bb      	str	r3, [r7, #24]
}
 801a84a:	bf00      	nop
 801a84c:	e7fe      	b.n	801a84c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a84e:	f001 fc75 	bl	801c13c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a856:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a85a:	2b00      	cmp	r3, #0
 801a85c:	d01f      	beq.n	801a89e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a85e:	68b9      	ldr	r1, [r7, #8]
 801a860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a862:	f000 f97d 	bl	801ab60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a868:	1e5a      	subs	r2, r3, #1
 801a86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a86c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a870:	691b      	ldr	r3, [r3, #16]
 801a872:	2b00      	cmp	r3, #0
 801a874:	d00f      	beq.n	801a896 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a878:	3310      	adds	r3, #16
 801a87a:	4618      	mov	r0, r3
 801a87c:	f000 fe86 	bl	801b58c <xTaskRemoveFromEventList>
 801a880:	4603      	mov	r3, r0
 801a882:	2b00      	cmp	r3, #0
 801a884:	d007      	beq.n	801a896 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801a886:	4b3d      	ldr	r3, [pc, #244]	; (801a97c <xQueueReceive+0x1c8>)
 801a888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a88c:	601a      	str	r2, [r3, #0]
 801a88e:	f3bf 8f4f 	dsb	sy
 801a892:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a896:	f001 fc85 	bl	801c1a4 <vPortExitCritical>
				return pdPASS;
 801a89a:	2301      	movs	r3, #1
 801a89c:	e069      	b.n	801a972 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d103      	bne.n	801a8ac <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a8a4:	f001 fc7e 	bl	801c1a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a8a8:	2300      	movs	r3, #0
 801a8aa:	e062      	b.n	801a972 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8ae:	2b00      	cmp	r3, #0
 801a8b0:	d106      	bne.n	801a8c0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a8b2:	f107 0310 	add.w	r3, r7, #16
 801a8b6:	4618      	mov	r0, r3
 801a8b8:	f000 fecc 	bl	801b654 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a8bc:	2301      	movs	r3, #1
 801a8be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a8c0:	f001 fc70 	bl	801c1a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a8c4:	f000 fc32 	bl	801b12c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a8c8:	f001 fc38 	bl	801c13c <vPortEnterCritical>
 801a8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a8d2:	b25b      	sxtb	r3, r3
 801a8d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a8d8:	d103      	bne.n	801a8e2 <xQueueReceive+0x12e>
 801a8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8dc:	2200      	movs	r2, #0
 801a8de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a8e8:	b25b      	sxtb	r3, r3
 801a8ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a8ee:	d103      	bne.n	801a8f8 <xQueueReceive+0x144>
 801a8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8f2:	2200      	movs	r2, #0
 801a8f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a8f8:	f001 fc54 	bl	801c1a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a8fc:	1d3a      	adds	r2, r7, #4
 801a8fe:	f107 0310 	add.w	r3, r7, #16
 801a902:	4611      	mov	r1, r2
 801a904:	4618      	mov	r0, r3
 801a906:	f000 febb 	bl	801b680 <xTaskCheckForTimeOut>
 801a90a:	4603      	mov	r3, r0
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	d123      	bne.n	801a958 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a910:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a912:	f000 f99d 	bl	801ac50 <prvIsQueueEmpty>
 801a916:	4603      	mov	r3, r0
 801a918:	2b00      	cmp	r3, #0
 801a91a:	d017      	beq.n	801a94c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a91e:	3324      	adds	r3, #36	; 0x24
 801a920:	687a      	ldr	r2, [r7, #4]
 801a922:	4611      	mov	r1, r2
 801a924:	4618      	mov	r0, r3
 801a926:	f000 fe0b 	bl	801b540 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a92a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a92c:	f000 f93e 	bl	801abac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a930:	f000 fc0a 	bl	801b148 <xTaskResumeAll>
 801a934:	4603      	mov	r3, r0
 801a936:	2b00      	cmp	r3, #0
 801a938:	d189      	bne.n	801a84e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 801a93a:	4b10      	ldr	r3, [pc, #64]	; (801a97c <xQueueReceive+0x1c8>)
 801a93c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a940:	601a      	str	r2, [r3, #0]
 801a942:	f3bf 8f4f 	dsb	sy
 801a946:	f3bf 8f6f 	isb	sy
 801a94a:	e780      	b.n	801a84e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801a94c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a94e:	f000 f92d 	bl	801abac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a952:	f000 fbf9 	bl	801b148 <xTaskResumeAll>
 801a956:	e77a      	b.n	801a84e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801a958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a95a:	f000 f927 	bl	801abac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a95e:	f000 fbf3 	bl	801b148 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a964:	f000 f974 	bl	801ac50 <prvIsQueueEmpty>
 801a968:	4603      	mov	r3, r0
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	f43f af6f 	beq.w	801a84e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a970:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a972:	4618      	mov	r0, r3
 801a974:	3730      	adds	r7, #48	; 0x30
 801a976:	46bd      	mov	sp, r7
 801a978:	bd80      	pop	{r7, pc}
 801a97a:	bf00      	nop
 801a97c:	e000ed04 	.word	0xe000ed04

0801a980 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801a980:	b580      	push	{r7, lr}
 801a982:	b08e      	sub	sp, #56	; 0x38
 801a984:	af00      	add	r7, sp, #0
 801a986:	60f8      	str	r0, [r7, #12]
 801a988:	60b9      	str	r1, [r7, #8]
 801a98a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a98c:	68fb      	ldr	r3, [r7, #12]
 801a98e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801a990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a992:	2b00      	cmp	r3, #0
 801a994:	d10c      	bne.n	801a9b0 <xQueueReceiveFromISR+0x30>
	__asm volatile
 801a996:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a99a:	b672      	cpsid	i
 801a99c:	f383 8811 	msr	BASEPRI, r3
 801a9a0:	f3bf 8f6f 	isb	sy
 801a9a4:	f3bf 8f4f 	dsb	sy
 801a9a8:	b662      	cpsie	i
 801a9aa:	623b      	str	r3, [r7, #32]
}
 801a9ac:	bf00      	nop
 801a9ae:	e7fe      	b.n	801a9ae <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a9b0:	68bb      	ldr	r3, [r7, #8]
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	d103      	bne.n	801a9be <xQueueReceiveFromISR+0x3e>
 801a9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d101      	bne.n	801a9c2 <xQueueReceiveFromISR+0x42>
 801a9be:	2301      	movs	r3, #1
 801a9c0:	e000      	b.n	801a9c4 <xQueueReceiveFromISR+0x44>
 801a9c2:	2300      	movs	r3, #0
 801a9c4:	2b00      	cmp	r3, #0
 801a9c6:	d10c      	bne.n	801a9e2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 801a9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a9cc:	b672      	cpsid	i
 801a9ce:	f383 8811 	msr	BASEPRI, r3
 801a9d2:	f3bf 8f6f 	isb	sy
 801a9d6:	f3bf 8f4f 	dsb	sy
 801a9da:	b662      	cpsie	i
 801a9dc:	61fb      	str	r3, [r7, #28]
}
 801a9de:	bf00      	nop
 801a9e0:	e7fe      	b.n	801a9e0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a9e2:	f001 fc93 	bl	801c30c <vPortValidateInterruptPriority>
	__asm volatile
 801a9e6:	f3ef 8211 	mrs	r2, BASEPRI
 801a9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a9ee:	b672      	cpsid	i
 801a9f0:	f383 8811 	msr	BASEPRI, r3
 801a9f4:	f3bf 8f6f 	isb	sy
 801a9f8:	f3bf 8f4f 	dsb	sy
 801a9fc:	b662      	cpsie	i
 801a9fe:	61ba      	str	r2, [r7, #24]
 801aa00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801aa02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801aa04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801aa06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aa0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801aa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d02f      	beq.n	801aa72 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801aa12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801aa18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801aa1c:	68b9      	ldr	r1, [r7, #8]
 801aa1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801aa20:	f000 f89e 	bl	801ab60 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801aa24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa26:	1e5a      	subs	r2, r3, #1
 801aa28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801aa2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801aa30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801aa34:	d112      	bne.n	801aa5c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801aa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa38:	691b      	ldr	r3, [r3, #16]
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d016      	beq.n	801aa6c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801aa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa40:	3310      	adds	r3, #16
 801aa42:	4618      	mov	r0, r3
 801aa44:	f000 fda2 	bl	801b58c <xTaskRemoveFromEventList>
 801aa48:	4603      	mov	r3, r0
 801aa4a:	2b00      	cmp	r3, #0
 801aa4c:	d00e      	beq.n	801aa6c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d00b      	beq.n	801aa6c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	2201      	movs	r2, #1
 801aa58:	601a      	str	r2, [r3, #0]
 801aa5a:	e007      	b.n	801aa6c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801aa5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aa60:	3301      	adds	r3, #1
 801aa62:	b2db      	uxtb	r3, r3
 801aa64:	b25a      	sxtb	r2, r3
 801aa66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801aa6c:	2301      	movs	r3, #1
 801aa6e:	637b      	str	r3, [r7, #52]	; 0x34
 801aa70:	e001      	b.n	801aa76 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 801aa72:	2300      	movs	r3, #0
 801aa74:	637b      	str	r3, [r7, #52]	; 0x34
 801aa76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa78:	613b      	str	r3, [r7, #16]
	__asm volatile
 801aa7a:	693b      	ldr	r3, [r7, #16]
 801aa7c:	f383 8811 	msr	BASEPRI, r3
}
 801aa80:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801aa82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801aa84:	4618      	mov	r0, r3
 801aa86:	3738      	adds	r7, #56	; 0x38
 801aa88:	46bd      	mov	sp, r7
 801aa8a:	bd80      	pop	{r7, pc}

0801aa8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801aa8c:	b580      	push	{r7, lr}
 801aa8e:	b086      	sub	sp, #24
 801aa90:	af00      	add	r7, sp, #0
 801aa92:	60f8      	str	r0, [r7, #12]
 801aa94:	60b9      	str	r1, [r7, #8]
 801aa96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801aa98:	2300      	movs	r3, #0
 801aa9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801aa9c:	68fb      	ldr	r3, [r7, #12]
 801aa9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aaa0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801aaa2:	68fb      	ldr	r3, [r7, #12]
 801aaa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	d10d      	bne.n	801aac6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801aaaa:	68fb      	ldr	r3, [r7, #12]
 801aaac:	681b      	ldr	r3, [r3, #0]
 801aaae:	2b00      	cmp	r3, #0
 801aab0:	d14d      	bne.n	801ab4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801aab2:	68fb      	ldr	r3, [r7, #12]
 801aab4:	689b      	ldr	r3, [r3, #8]
 801aab6:	4618      	mov	r0, r3
 801aab8:	f000 ff4c 	bl	801b954 <xTaskPriorityDisinherit>
 801aabc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801aabe:	68fb      	ldr	r3, [r7, #12]
 801aac0:	2200      	movs	r2, #0
 801aac2:	609a      	str	r2, [r3, #8]
 801aac4:	e043      	b.n	801ab4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	d119      	bne.n	801ab00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801aacc:	68fb      	ldr	r3, [r7, #12]
 801aace:	6858      	ldr	r0, [r3, #4]
 801aad0:	68fb      	ldr	r3, [r7, #12]
 801aad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aad4:	461a      	mov	r2, r3
 801aad6:	68b9      	ldr	r1, [r7, #8]
 801aad8:	f002 ff44 	bl	801d964 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801aadc:	68fb      	ldr	r3, [r7, #12]
 801aade:	685a      	ldr	r2, [r3, #4]
 801aae0:	68fb      	ldr	r3, [r7, #12]
 801aae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aae4:	441a      	add	r2, r3
 801aae6:	68fb      	ldr	r3, [r7, #12]
 801aae8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801aaea:	68fb      	ldr	r3, [r7, #12]
 801aaec:	685a      	ldr	r2, [r3, #4]
 801aaee:	68fb      	ldr	r3, [r7, #12]
 801aaf0:	689b      	ldr	r3, [r3, #8]
 801aaf2:	429a      	cmp	r2, r3
 801aaf4:	d32b      	bcc.n	801ab4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801aaf6:	68fb      	ldr	r3, [r7, #12]
 801aaf8:	681a      	ldr	r2, [r3, #0]
 801aafa:	68fb      	ldr	r3, [r7, #12]
 801aafc:	605a      	str	r2, [r3, #4]
 801aafe:	e026      	b.n	801ab4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	68d8      	ldr	r0, [r3, #12]
 801ab04:	68fb      	ldr	r3, [r7, #12]
 801ab06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab08:	461a      	mov	r2, r3
 801ab0a:	68b9      	ldr	r1, [r7, #8]
 801ab0c:	f002 ff2a 	bl	801d964 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801ab10:	68fb      	ldr	r3, [r7, #12]
 801ab12:	68da      	ldr	r2, [r3, #12]
 801ab14:	68fb      	ldr	r3, [r7, #12]
 801ab16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab18:	425b      	negs	r3, r3
 801ab1a:	441a      	add	r2, r3
 801ab1c:	68fb      	ldr	r3, [r7, #12]
 801ab1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801ab20:	68fb      	ldr	r3, [r7, #12]
 801ab22:	68da      	ldr	r2, [r3, #12]
 801ab24:	68fb      	ldr	r3, [r7, #12]
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	429a      	cmp	r2, r3
 801ab2a:	d207      	bcs.n	801ab3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801ab2c:	68fb      	ldr	r3, [r7, #12]
 801ab2e:	689a      	ldr	r2, [r3, #8]
 801ab30:	68fb      	ldr	r3, [r7, #12]
 801ab32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab34:	425b      	negs	r3, r3
 801ab36:	441a      	add	r2, r3
 801ab38:	68fb      	ldr	r3, [r7, #12]
 801ab3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	2b02      	cmp	r3, #2
 801ab40:	d105      	bne.n	801ab4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801ab42:	693b      	ldr	r3, [r7, #16]
 801ab44:	2b00      	cmp	r3, #0
 801ab46:	d002      	beq.n	801ab4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801ab48:	693b      	ldr	r3, [r7, #16]
 801ab4a:	3b01      	subs	r3, #1
 801ab4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801ab4e:	693b      	ldr	r3, [r7, #16]
 801ab50:	1c5a      	adds	r2, r3, #1
 801ab52:	68fb      	ldr	r3, [r7, #12]
 801ab54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801ab56:	697b      	ldr	r3, [r7, #20]
}
 801ab58:	4618      	mov	r0, r3
 801ab5a:	3718      	adds	r7, #24
 801ab5c:	46bd      	mov	sp, r7
 801ab5e:	bd80      	pop	{r7, pc}

0801ab60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801ab60:	b580      	push	{r7, lr}
 801ab62:	b082      	sub	sp, #8
 801ab64:	af00      	add	r7, sp, #0
 801ab66:	6078      	str	r0, [r7, #4]
 801ab68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d018      	beq.n	801aba4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	68da      	ldr	r2, [r3, #12]
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab7a:	441a      	add	r2, r3
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	68da      	ldr	r2, [r3, #12]
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	689b      	ldr	r3, [r3, #8]
 801ab88:	429a      	cmp	r2, r3
 801ab8a:	d303      	bcc.n	801ab94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	681a      	ldr	r2, [r3, #0]
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	68d9      	ldr	r1, [r3, #12]
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab9c:	461a      	mov	r2, r3
 801ab9e:	6838      	ldr	r0, [r7, #0]
 801aba0:	f002 fee0 	bl	801d964 <memcpy>
	}
}
 801aba4:	bf00      	nop
 801aba6:	3708      	adds	r7, #8
 801aba8:	46bd      	mov	sp, r7
 801abaa:	bd80      	pop	{r7, pc}

0801abac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801abac:	b580      	push	{r7, lr}
 801abae:	b084      	sub	sp, #16
 801abb0:	af00      	add	r7, sp, #0
 801abb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801abb4:	f001 fac2 	bl	801c13c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801abbe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801abc0:	e011      	b.n	801abe6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abc6:	2b00      	cmp	r3, #0
 801abc8:	d012      	beq.n	801abf0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	3324      	adds	r3, #36	; 0x24
 801abce:	4618      	mov	r0, r3
 801abd0:	f000 fcdc 	bl	801b58c <xTaskRemoveFromEventList>
 801abd4:	4603      	mov	r3, r0
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	d001      	beq.n	801abde <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801abda:	f000 fdb7 	bl	801b74c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801abde:	7bfb      	ldrb	r3, [r7, #15]
 801abe0:	3b01      	subs	r3, #1
 801abe2:	b2db      	uxtb	r3, r3
 801abe4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801abe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801abea:	2b00      	cmp	r3, #0
 801abec:	dce9      	bgt.n	801abc2 <prvUnlockQueue+0x16>
 801abee:	e000      	b.n	801abf2 <prvUnlockQueue+0x46>
					break;
 801abf0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	22ff      	movs	r2, #255	; 0xff
 801abf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801abfa:	f001 fad3 	bl	801c1a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801abfe:	f001 fa9d 	bl	801c13c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ac08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801ac0a:	e011      	b.n	801ac30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	691b      	ldr	r3, [r3, #16]
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	d012      	beq.n	801ac3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	3310      	adds	r3, #16
 801ac18:	4618      	mov	r0, r3
 801ac1a:	f000 fcb7 	bl	801b58c <xTaskRemoveFromEventList>
 801ac1e:	4603      	mov	r3, r0
 801ac20:	2b00      	cmp	r3, #0
 801ac22:	d001      	beq.n	801ac28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801ac24:	f000 fd92 	bl	801b74c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801ac28:	7bbb      	ldrb	r3, [r7, #14]
 801ac2a:	3b01      	subs	r3, #1
 801ac2c:	b2db      	uxtb	r3, r3
 801ac2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801ac30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ac34:	2b00      	cmp	r3, #0
 801ac36:	dce9      	bgt.n	801ac0c <prvUnlockQueue+0x60>
 801ac38:	e000      	b.n	801ac3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801ac3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	22ff      	movs	r2, #255	; 0xff
 801ac40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801ac44:	f001 faae 	bl	801c1a4 <vPortExitCritical>
}
 801ac48:	bf00      	nop
 801ac4a:	3710      	adds	r7, #16
 801ac4c:	46bd      	mov	sp, r7
 801ac4e:	bd80      	pop	{r7, pc}

0801ac50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801ac50:	b580      	push	{r7, lr}
 801ac52:	b084      	sub	sp, #16
 801ac54:	af00      	add	r7, sp, #0
 801ac56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801ac58:	f001 fa70 	bl	801c13c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	d102      	bne.n	801ac6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801ac64:	2301      	movs	r3, #1
 801ac66:	60fb      	str	r3, [r7, #12]
 801ac68:	e001      	b.n	801ac6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801ac6a:	2300      	movs	r3, #0
 801ac6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801ac6e:	f001 fa99 	bl	801c1a4 <vPortExitCritical>

	return xReturn;
 801ac72:	68fb      	ldr	r3, [r7, #12]
}
 801ac74:	4618      	mov	r0, r3
 801ac76:	3710      	adds	r7, #16
 801ac78:	46bd      	mov	sp, r7
 801ac7a:	bd80      	pop	{r7, pc}

0801ac7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801ac7c:	b580      	push	{r7, lr}
 801ac7e:	b084      	sub	sp, #16
 801ac80:	af00      	add	r7, sp, #0
 801ac82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801ac84:	f001 fa5a 	bl	801c13c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ac90:	429a      	cmp	r2, r3
 801ac92:	d102      	bne.n	801ac9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801ac94:	2301      	movs	r3, #1
 801ac96:	60fb      	str	r3, [r7, #12]
 801ac98:	e001      	b.n	801ac9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801ac9a:	2300      	movs	r3, #0
 801ac9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801ac9e:	f001 fa81 	bl	801c1a4 <vPortExitCritical>

	return xReturn;
 801aca2:	68fb      	ldr	r3, [r7, #12]
}
 801aca4:	4618      	mov	r0, r3
 801aca6:	3710      	adds	r7, #16
 801aca8:	46bd      	mov	sp, r7
 801acaa:	bd80      	pop	{r7, pc}

0801acac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801acac:	b580      	push	{r7, lr}
 801acae:	b08e      	sub	sp, #56	; 0x38
 801acb0:	af04      	add	r7, sp, #16
 801acb2:	60f8      	str	r0, [r7, #12]
 801acb4:	60b9      	str	r1, [r7, #8]
 801acb6:	607a      	str	r2, [r7, #4]
 801acb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801acba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	d10c      	bne.n	801acda <xTaskCreateStatic+0x2e>
	__asm volatile
 801acc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801acc4:	b672      	cpsid	i
 801acc6:	f383 8811 	msr	BASEPRI, r3
 801acca:	f3bf 8f6f 	isb	sy
 801acce:	f3bf 8f4f 	dsb	sy
 801acd2:	b662      	cpsie	i
 801acd4:	623b      	str	r3, [r7, #32]
}
 801acd6:	bf00      	nop
 801acd8:	e7fe      	b.n	801acd8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801acda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801acdc:	2b00      	cmp	r3, #0
 801acde:	d10c      	bne.n	801acfa <xTaskCreateStatic+0x4e>
	__asm volatile
 801ace0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ace4:	b672      	cpsid	i
 801ace6:	f383 8811 	msr	BASEPRI, r3
 801acea:	f3bf 8f6f 	isb	sy
 801acee:	f3bf 8f4f 	dsb	sy
 801acf2:	b662      	cpsie	i
 801acf4:	61fb      	str	r3, [r7, #28]
}
 801acf6:	bf00      	nop
 801acf8:	e7fe      	b.n	801acf8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801acfa:	2358      	movs	r3, #88	; 0x58
 801acfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801acfe:	693b      	ldr	r3, [r7, #16]
 801ad00:	2b58      	cmp	r3, #88	; 0x58
 801ad02:	d00c      	beq.n	801ad1e <xTaskCreateStatic+0x72>
	__asm volatile
 801ad04:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad08:	b672      	cpsid	i
 801ad0a:	f383 8811 	msr	BASEPRI, r3
 801ad0e:	f3bf 8f6f 	isb	sy
 801ad12:	f3bf 8f4f 	dsb	sy
 801ad16:	b662      	cpsie	i
 801ad18:	61bb      	str	r3, [r7, #24]
}
 801ad1a:	bf00      	nop
 801ad1c:	e7fe      	b.n	801ad1c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801ad1e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801ad20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d01e      	beq.n	801ad64 <xTaskCreateStatic+0xb8>
 801ad26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad28:	2b00      	cmp	r3, #0
 801ad2a:	d01b      	beq.n	801ad64 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801ad2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad2e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801ad30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ad34:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801ad36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad38:	2202      	movs	r2, #2
 801ad3a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801ad3e:	2300      	movs	r3, #0
 801ad40:	9303      	str	r3, [sp, #12]
 801ad42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad44:	9302      	str	r3, [sp, #8]
 801ad46:	f107 0314 	add.w	r3, r7, #20
 801ad4a:	9301      	str	r3, [sp, #4]
 801ad4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad4e:	9300      	str	r3, [sp, #0]
 801ad50:	683b      	ldr	r3, [r7, #0]
 801ad52:	687a      	ldr	r2, [r7, #4]
 801ad54:	68b9      	ldr	r1, [r7, #8]
 801ad56:	68f8      	ldr	r0, [r7, #12]
 801ad58:	f000 f850 	bl	801adfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801ad5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ad5e:	f000 f8e1 	bl	801af24 <prvAddNewTaskToReadyList>
 801ad62:	e001      	b.n	801ad68 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 801ad64:	2300      	movs	r3, #0
 801ad66:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801ad68:	697b      	ldr	r3, [r7, #20]
	}
 801ad6a:	4618      	mov	r0, r3
 801ad6c:	3728      	adds	r7, #40	; 0x28
 801ad6e:	46bd      	mov	sp, r7
 801ad70:	bd80      	pop	{r7, pc}

0801ad72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801ad72:	b580      	push	{r7, lr}
 801ad74:	b08c      	sub	sp, #48	; 0x30
 801ad76:	af04      	add	r7, sp, #16
 801ad78:	60f8      	str	r0, [r7, #12]
 801ad7a:	60b9      	str	r1, [r7, #8]
 801ad7c:	603b      	str	r3, [r7, #0]
 801ad7e:	4613      	mov	r3, r2
 801ad80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801ad82:	88fb      	ldrh	r3, [r7, #6]
 801ad84:	009b      	lsls	r3, r3, #2
 801ad86:	4618      	mov	r0, r3
 801ad88:	f001 fb04 	bl	801c394 <pvPortMalloc>
 801ad8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801ad8e:	697b      	ldr	r3, [r7, #20]
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	d00e      	beq.n	801adb2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801ad94:	2058      	movs	r0, #88	; 0x58
 801ad96:	f001 fafd 	bl	801c394 <pvPortMalloc>
 801ad9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801ad9c:	69fb      	ldr	r3, [r7, #28]
 801ad9e:	2b00      	cmp	r3, #0
 801ada0:	d003      	beq.n	801adaa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801ada2:	69fb      	ldr	r3, [r7, #28]
 801ada4:	697a      	ldr	r2, [r7, #20]
 801ada6:	631a      	str	r2, [r3, #48]	; 0x30
 801ada8:	e005      	b.n	801adb6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801adaa:	6978      	ldr	r0, [r7, #20]
 801adac:	f001 fbc2 	bl	801c534 <vPortFree>
 801adb0:	e001      	b.n	801adb6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801adb2:	2300      	movs	r3, #0
 801adb4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801adb6:	69fb      	ldr	r3, [r7, #28]
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d017      	beq.n	801adec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801adbc:	69fb      	ldr	r3, [r7, #28]
 801adbe:	2200      	movs	r2, #0
 801adc0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801adc4:	88fa      	ldrh	r2, [r7, #6]
 801adc6:	2300      	movs	r3, #0
 801adc8:	9303      	str	r3, [sp, #12]
 801adca:	69fb      	ldr	r3, [r7, #28]
 801adcc:	9302      	str	r3, [sp, #8]
 801adce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801add0:	9301      	str	r3, [sp, #4]
 801add2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801add4:	9300      	str	r3, [sp, #0]
 801add6:	683b      	ldr	r3, [r7, #0]
 801add8:	68b9      	ldr	r1, [r7, #8]
 801adda:	68f8      	ldr	r0, [r7, #12]
 801addc:	f000 f80e 	bl	801adfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801ade0:	69f8      	ldr	r0, [r7, #28]
 801ade2:	f000 f89f 	bl	801af24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801ade6:	2301      	movs	r3, #1
 801ade8:	61bb      	str	r3, [r7, #24]
 801adea:	e002      	b.n	801adf2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801adec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801adf0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801adf2:	69bb      	ldr	r3, [r7, #24]
	}
 801adf4:	4618      	mov	r0, r3
 801adf6:	3720      	adds	r7, #32
 801adf8:	46bd      	mov	sp, r7
 801adfa:	bd80      	pop	{r7, pc}

0801adfc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801adfc:	b580      	push	{r7, lr}
 801adfe:	b088      	sub	sp, #32
 801ae00:	af00      	add	r7, sp, #0
 801ae02:	60f8      	str	r0, [r7, #12]
 801ae04:	60b9      	str	r1, [r7, #8]
 801ae06:	607a      	str	r2, [r7, #4]
 801ae08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801ae0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801ae0e:	687b      	ldr	r3, [r7, #4]
 801ae10:	009b      	lsls	r3, r3, #2
 801ae12:	461a      	mov	r2, r3
 801ae14:	21a5      	movs	r1, #165	; 0xa5
 801ae16:	f002 fdb3 	bl	801d980 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ae1e:	6879      	ldr	r1, [r7, #4]
 801ae20:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801ae24:	440b      	add	r3, r1
 801ae26:	009b      	lsls	r3, r3, #2
 801ae28:	4413      	add	r3, r2
 801ae2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801ae2c:	69bb      	ldr	r3, [r7, #24]
 801ae2e:	f023 0307 	bic.w	r3, r3, #7
 801ae32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801ae34:	69bb      	ldr	r3, [r7, #24]
 801ae36:	f003 0307 	and.w	r3, r3, #7
 801ae3a:	2b00      	cmp	r3, #0
 801ae3c:	d00c      	beq.n	801ae58 <prvInitialiseNewTask+0x5c>
	__asm volatile
 801ae3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ae42:	b672      	cpsid	i
 801ae44:	f383 8811 	msr	BASEPRI, r3
 801ae48:	f3bf 8f6f 	isb	sy
 801ae4c:	f3bf 8f4f 	dsb	sy
 801ae50:	b662      	cpsie	i
 801ae52:	617b      	str	r3, [r7, #20]
}
 801ae54:	bf00      	nop
 801ae56:	e7fe      	b.n	801ae56 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801ae58:	68bb      	ldr	r3, [r7, #8]
 801ae5a:	2b00      	cmp	r3, #0
 801ae5c:	d01f      	beq.n	801ae9e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801ae5e:	2300      	movs	r3, #0
 801ae60:	61fb      	str	r3, [r7, #28]
 801ae62:	e012      	b.n	801ae8a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801ae64:	68ba      	ldr	r2, [r7, #8]
 801ae66:	69fb      	ldr	r3, [r7, #28]
 801ae68:	4413      	add	r3, r2
 801ae6a:	7819      	ldrb	r1, [r3, #0]
 801ae6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ae6e:	69fb      	ldr	r3, [r7, #28]
 801ae70:	4413      	add	r3, r2
 801ae72:	3334      	adds	r3, #52	; 0x34
 801ae74:	460a      	mov	r2, r1
 801ae76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801ae78:	68ba      	ldr	r2, [r7, #8]
 801ae7a:	69fb      	ldr	r3, [r7, #28]
 801ae7c:	4413      	add	r3, r2
 801ae7e:	781b      	ldrb	r3, [r3, #0]
 801ae80:	2b00      	cmp	r3, #0
 801ae82:	d006      	beq.n	801ae92 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801ae84:	69fb      	ldr	r3, [r7, #28]
 801ae86:	3301      	adds	r3, #1
 801ae88:	61fb      	str	r3, [r7, #28]
 801ae8a:	69fb      	ldr	r3, [r7, #28]
 801ae8c:	2b0f      	cmp	r3, #15
 801ae8e:	d9e9      	bls.n	801ae64 <prvInitialiseNewTask+0x68>
 801ae90:	e000      	b.n	801ae94 <prvInitialiseNewTask+0x98>
			{
				break;
 801ae92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801ae94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae96:	2200      	movs	r2, #0
 801ae98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801ae9c:	e003      	b.n	801aea6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801ae9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aea0:	2200      	movs	r2, #0
 801aea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801aea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aea8:	2b06      	cmp	r3, #6
 801aeaa:	d901      	bls.n	801aeb0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801aeac:	2306      	movs	r3, #6
 801aeae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801aeb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aeb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801aeb4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801aeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aeb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801aeba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801aebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aebe:	2200      	movs	r2, #0
 801aec0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801aec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aec4:	3304      	adds	r3, #4
 801aec6:	4618      	mov	r0, r3
 801aec8:	f7ff f8ec 	bl	801a0a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801aecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aece:	3318      	adds	r3, #24
 801aed0:	4618      	mov	r0, r3
 801aed2:	f7ff f8e7 	bl	801a0a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801aed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aeda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801aedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aede:	f1c3 0207 	rsb	r2, r3, #7
 801aee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aee4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801aee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aeea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 801aeec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aeee:	2200      	movs	r2, #0
 801aef0:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801aef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aef4:	2200      	movs	r2, #0
 801aef6:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801aef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aefa:	2200      	movs	r2, #0
 801aefc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801af00:	683a      	ldr	r2, [r7, #0]
 801af02:	68f9      	ldr	r1, [r7, #12]
 801af04:	69b8      	ldr	r0, [r7, #24]
 801af06:	f001 f80d 	bl	801bf24 <pxPortInitialiseStack>
 801af0a:	4602      	mov	r2, r0
 801af0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af0e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801af10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af12:	2b00      	cmp	r3, #0
 801af14:	d002      	beq.n	801af1c <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801af16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801af1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801af1c:	bf00      	nop
 801af1e:	3720      	adds	r7, #32
 801af20:	46bd      	mov	sp, r7
 801af22:	bd80      	pop	{r7, pc}

0801af24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801af24:	b580      	push	{r7, lr}
 801af26:	b082      	sub	sp, #8
 801af28:	af00      	add	r7, sp, #0
 801af2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801af2c:	f001 f906 	bl	801c13c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801af30:	4b2a      	ldr	r3, [pc, #168]	; (801afdc <prvAddNewTaskToReadyList+0xb8>)
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	3301      	adds	r3, #1
 801af36:	4a29      	ldr	r2, [pc, #164]	; (801afdc <prvAddNewTaskToReadyList+0xb8>)
 801af38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801af3a:	4b29      	ldr	r3, [pc, #164]	; (801afe0 <prvAddNewTaskToReadyList+0xbc>)
 801af3c:	681b      	ldr	r3, [r3, #0]
 801af3e:	2b00      	cmp	r3, #0
 801af40:	d109      	bne.n	801af56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801af42:	4a27      	ldr	r2, [pc, #156]	; (801afe0 <prvAddNewTaskToReadyList+0xbc>)
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801af48:	4b24      	ldr	r3, [pc, #144]	; (801afdc <prvAddNewTaskToReadyList+0xb8>)
 801af4a:	681b      	ldr	r3, [r3, #0]
 801af4c:	2b01      	cmp	r3, #1
 801af4e:	d110      	bne.n	801af72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801af50:	f000 fc22 	bl	801b798 <prvInitialiseTaskLists>
 801af54:	e00d      	b.n	801af72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801af56:	4b23      	ldr	r3, [pc, #140]	; (801afe4 <prvAddNewTaskToReadyList+0xc0>)
 801af58:	681b      	ldr	r3, [r3, #0]
 801af5a:	2b00      	cmp	r3, #0
 801af5c:	d109      	bne.n	801af72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801af5e:	4b20      	ldr	r3, [pc, #128]	; (801afe0 <prvAddNewTaskToReadyList+0xbc>)
 801af60:	681b      	ldr	r3, [r3, #0]
 801af62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af68:	429a      	cmp	r2, r3
 801af6a:	d802      	bhi.n	801af72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801af6c:	4a1c      	ldr	r2, [pc, #112]	; (801afe0 <prvAddNewTaskToReadyList+0xbc>)
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801af72:	4b1d      	ldr	r3, [pc, #116]	; (801afe8 <prvAddNewTaskToReadyList+0xc4>)
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	3301      	adds	r3, #1
 801af78:	4a1b      	ldr	r2, [pc, #108]	; (801afe8 <prvAddNewTaskToReadyList+0xc4>)
 801af7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af80:	2201      	movs	r2, #1
 801af82:	409a      	lsls	r2, r3
 801af84:	4b19      	ldr	r3, [pc, #100]	; (801afec <prvAddNewTaskToReadyList+0xc8>)
 801af86:	681b      	ldr	r3, [r3, #0]
 801af88:	4313      	orrs	r3, r2
 801af8a:	4a18      	ldr	r2, [pc, #96]	; (801afec <prvAddNewTaskToReadyList+0xc8>)
 801af8c:	6013      	str	r3, [r2, #0]
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801af92:	4613      	mov	r3, r2
 801af94:	009b      	lsls	r3, r3, #2
 801af96:	4413      	add	r3, r2
 801af98:	009b      	lsls	r3, r3, #2
 801af9a:	4a15      	ldr	r2, [pc, #84]	; (801aff0 <prvAddNewTaskToReadyList+0xcc>)
 801af9c:	441a      	add	r2, r3
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	3304      	adds	r3, #4
 801afa2:	4619      	mov	r1, r3
 801afa4:	4610      	mov	r0, r2
 801afa6:	f7ff f88a 	bl	801a0be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801afaa:	f001 f8fb 	bl	801c1a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801afae:	4b0d      	ldr	r3, [pc, #52]	; (801afe4 <prvAddNewTaskToReadyList+0xc0>)
 801afb0:	681b      	ldr	r3, [r3, #0]
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	d00e      	beq.n	801afd4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801afb6:	4b0a      	ldr	r3, [pc, #40]	; (801afe0 <prvAddNewTaskToReadyList+0xbc>)
 801afb8:	681b      	ldr	r3, [r3, #0]
 801afba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801afc0:	429a      	cmp	r2, r3
 801afc2:	d207      	bcs.n	801afd4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801afc4:	4b0b      	ldr	r3, [pc, #44]	; (801aff4 <prvAddNewTaskToReadyList+0xd0>)
 801afc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801afca:	601a      	str	r2, [r3, #0]
 801afcc:	f3bf 8f4f 	dsb	sy
 801afd0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801afd4:	bf00      	nop
 801afd6:	3708      	adds	r7, #8
 801afd8:	46bd      	mov	sp, r7
 801afda:	bd80      	pop	{r7, pc}
 801afdc:	20041f2c 	.word	0x20041f2c
 801afe0:	20041e2c 	.word	0x20041e2c
 801afe4:	20041f38 	.word	0x20041f38
 801afe8:	20041f48 	.word	0x20041f48
 801afec:	20041f34 	.word	0x20041f34
 801aff0:	20041e30 	.word	0x20041e30
 801aff4:	e000ed04 	.word	0xe000ed04

0801aff8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801aff8:	b580      	push	{r7, lr}
 801affa:	b084      	sub	sp, #16
 801affc:	af00      	add	r7, sp, #0
 801affe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801b000:	2300      	movs	r3, #0
 801b002:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	2b00      	cmp	r3, #0
 801b008:	d019      	beq.n	801b03e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801b00a:	4b14      	ldr	r3, [pc, #80]	; (801b05c <vTaskDelay+0x64>)
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	2b00      	cmp	r3, #0
 801b010:	d00c      	beq.n	801b02c <vTaskDelay+0x34>
	__asm volatile
 801b012:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b016:	b672      	cpsid	i
 801b018:	f383 8811 	msr	BASEPRI, r3
 801b01c:	f3bf 8f6f 	isb	sy
 801b020:	f3bf 8f4f 	dsb	sy
 801b024:	b662      	cpsie	i
 801b026:	60bb      	str	r3, [r7, #8]
}
 801b028:	bf00      	nop
 801b02a:	e7fe      	b.n	801b02a <vTaskDelay+0x32>
			vTaskSuspendAll();
 801b02c:	f000 f87e 	bl	801b12c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801b030:	2100      	movs	r1, #0
 801b032:	6878      	ldr	r0, [r7, #4]
 801b034:	f000 ff10 	bl	801be58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801b038:	f000 f886 	bl	801b148 <xTaskResumeAll>
 801b03c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801b03e:	68fb      	ldr	r3, [r7, #12]
 801b040:	2b00      	cmp	r3, #0
 801b042:	d107      	bne.n	801b054 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 801b044:	4b06      	ldr	r3, [pc, #24]	; (801b060 <vTaskDelay+0x68>)
 801b046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b04a:	601a      	str	r2, [r3, #0]
 801b04c:	f3bf 8f4f 	dsb	sy
 801b050:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b054:	bf00      	nop
 801b056:	3710      	adds	r7, #16
 801b058:	46bd      	mov	sp, r7
 801b05a:	bd80      	pop	{r7, pc}
 801b05c:	20041f54 	.word	0x20041f54
 801b060:	e000ed04 	.word	0xe000ed04

0801b064 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801b064:	b580      	push	{r7, lr}
 801b066:	b08a      	sub	sp, #40	; 0x28
 801b068:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801b06a:	2300      	movs	r3, #0
 801b06c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801b06e:	2300      	movs	r3, #0
 801b070:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801b072:	463a      	mov	r2, r7
 801b074:	1d39      	adds	r1, r7, #4
 801b076:	f107 0308 	add.w	r3, r7, #8
 801b07a:	4618      	mov	r0, r3
 801b07c:	f7e6 f82a 	bl	80010d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801b080:	6839      	ldr	r1, [r7, #0]
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	68ba      	ldr	r2, [r7, #8]
 801b086:	9202      	str	r2, [sp, #8]
 801b088:	9301      	str	r3, [sp, #4]
 801b08a:	2300      	movs	r3, #0
 801b08c:	9300      	str	r3, [sp, #0]
 801b08e:	2300      	movs	r3, #0
 801b090:	460a      	mov	r2, r1
 801b092:	4920      	ldr	r1, [pc, #128]	; (801b114 <vTaskStartScheduler+0xb0>)
 801b094:	4820      	ldr	r0, [pc, #128]	; (801b118 <vTaskStartScheduler+0xb4>)
 801b096:	f7ff fe09 	bl	801acac <xTaskCreateStatic>
 801b09a:	4603      	mov	r3, r0
 801b09c:	4a1f      	ldr	r2, [pc, #124]	; (801b11c <vTaskStartScheduler+0xb8>)
 801b09e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801b0a0:	4b1e      	ldr	r3, [pc, #120]	; (801b11c <vTaskStartScheduler+0xb8>)
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	2b00      	cmp	r3, #0
 801b0a6:	d002      	beq.n	801b0ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801b0a8:	2301      	movs	r3, #1
 801b0aa:	617b      	str	r3, [r7, #20]
 801b0ac:	e001      	b.n	801b0b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801b0ae:	2300      	movs	r3, #0
 801b0b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801b0b2:	697b      	ldr	r3, [r7, #20]
 801b0b4:	2b01      	cmp	r3, #1
 801b0b6:	d118      	bne.n	801b0ea <vTaskStartScheduler+0x86>
	__asm volatile
 801b0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b0bc:	b672      	cpsid	i
 801b0be:	f383 8811 	msr	BASEPRI, r3
 801b0c2:	f3bf 8f6f 	isb	sy
 801b0c6:	f3bf 8f4f 	dsb	sy
 801b0ca:	b662      	cpsie	i
 801b0cc:	613b      	str	r3, [r7, #16]
}
 801b0ce:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801b0d0:	4b13      	ldr	r3, [pc, #76]	; (801b120 <vTaskStartScheduler+0xbc>)
 801b0d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b0d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801b0d8:	4b12      	ldr	r3, [pc, #72]	; (801b124 <vTaskStartScheduler+0xc0>)
 801b0da:	2201      	movs	r2, #1
 801b0dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801b0de:	4b12      	ldr	r3, [pc, #72]	; (801b128 <vTaskStartScheduler+0xc4>)
 801b0e0:	2200      	movs	r2, #0
 801b0e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801b0e4:	f000 ffac 	bl	801c040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801b0e8:	e010      	b.n	801b10c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801b0ea:	697b      	ldr	r3, [r7, #20]
 801b0ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b0f0:	d10c      	bne.n	801b10c <vTaskStartScheduler+0xa8>
	__asm volatile
 801b0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b0f6:	b672      	cpsid	i
 801b0f8:	f383 8811 	msr	BASEPRI, r3
 801b0fc:	f3bf 8f6f 	isb	sy
 801b100:	f3bf 8f4f 	dsb	sy
 801b104:	b662      	cpsie	i
 801b106:	60fb      	str	r3, [r7, #12]
}
 801b108:	bf00      	nop
 801b10a:	e7fe      	b.n	801b10a <vTaskStartScheduler+0xa6>
}
 801b10c:	bf00      	nop
 801b10e:	3718      	adds	r7, #24
 801b110:	46bd      	mov	sp, r7
 801b112:	bd80      	pop	{r7, pc}
 801b114:	0801f02c 	.word	0x0801f02c
 801b118:	0801b765 	.word	0x0801b765
 801b11c:	20041f50 	.word	0x20041f50
 801b120:	20041f4c 	.word	0x20041f4c
 801b124:	20041f38 	.word	0x20041f38
 801b128:	20041f30 	.word	0x20041f30

0801b12c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801b12c:	b480      	push	{r7}
 801b12e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801b130:	4b04      	ldr	r3, [pc, #16]	; (801b144 <vTaskSuspendAll+0x18>)
 801b132:	681b      	ldr	r3, [r3, #0]
 801b134:	3301      	adds	r3, #1
 801b136:	4a03      	ldr	r2, [pc, #12]	; (801b144 <vTaskSuspendAll+0x18>)
 801b138:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801b13a:	bf00      	nop
 801b13c:	46bd      	mov	sp, r7
 801b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b142:	4770      	bx	lr
 801b144:	20041f54 	.word	0x20041f54

0801b148 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801b148:	b580      	push	{r7, lr}
 801b14a:	b084      	sub	sp, #16
 801b14c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801b14e:	2300      	movs	r3, #0
 801b150:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801b152:	2300      	movs	r3, #0
 801b154:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801b156:	4b42      	ldr	r3, [pc, #264]	; (801b260 <xTaskResumeAll+0x118>)
 801b158:	681b      	ldr	r3, [r3, #0]
 801b15a:	2b00      	cmp	r3, #0
 801b15c:	d10c      	bne.n	801b178 <xTaskResumeAll+0x30>
	__asm volatile
 801b15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b162:	b672      	cpsid	i
 801b164:	f383 8811 	msr	BASEPRI, r3
 801b168:	f3bf 8f6f 	isb	sy
 801b16c:	f3bf 8f4f 	dsb	sy
 801b170:	b662      	cpsie	i
 801b172:	603b      	str	r3, [r7, #0]
}
 801b174:	bf00      	nop
 801b176:	e7fe      	b.n	801b176 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801b178:	f000 ffe0 	bl	801c13c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801b17c:	4b38      	ldr	r3, [pc, #224]	; (801b260 <xTaskResumeAll+0x118>)
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	3b01      	subs	r3, #1
 801b182:	4a37      	ldr	r2, [pc, #220]	; (801b260 <xTaskResumeAll+0x118>)
 801b184:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b186:	4b36      	ldr	r3, [pc, #216]	; (801b260 <xTaskResumeAll+0x118>)
 801b188:	681b      	ldr	r3, [r3, #0]
 801b18a:	2b00      	cmp	r3, #0
 801b18c:	d161      	bne.n	801b252 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801b18e:	4b35      	ldr	r3, [pc, #212]	; (801b264 <xTaskResumeAll+0x11c>)
 801b190:	681b      	ldr	r3, [r3, #0]
 801b192:	2b00      	cmp	r3, #0
 801b194:	d05d      	beq.n	801b252 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b196:	e02e      	b.n	801b1f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b198:	4b33      	ldr	r3, [pc, #204]	; (801b268 <xTaskResumeAll+0x120>)
 801b19a:	68db      	ldr	r3, [r3, #12]
 801b19c:	68db      	ldr	r3, [r3, #12]
 801b19e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b1a0:	68fb      	ldr	r3, [r7, #12]
 801b1a2:	3318      	adds	r3, #24
 801b1a4:	4618      	mov	r0, r3
 801b1a6:	f7fe ffe7 	bl	801a178 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b1aa:	68fb      	ldr	r3, [r7, #12]
 801b1ac:	3304      	adds	r3, #4
 801b1ae:	4618      	mov	r0, r3
 801b1b0:	f7fe ffe2 	bl	801a178 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801b1b4:	68fb      	ldr	r3, [r7, #12]
 801b1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b1b8:	2201      	movs	r2, #1
 801b1ba:	409a      	lsls	r2, r3
 801b1bc:	4b2b      	ldr	r3, [pc, #172]	; (801b26c <xTaskResumeAll+0x124>)
 801b1be:	681b      	ldr	r3, [r3, #0]
 801b1c0:	4313      	orrs	r3, r2
 801b1c2:	4a2a      	ldr	r2, [pc, #168]	; (801b26c <xTaskResumeAll+0x124>)
 801b1c4:	6013      	str	r3, [r2, #0]
 801b1c6:	68fb      	ldr	r3, [r7, #12]
 801b1c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b1ca:	4613      	mov	r3, r2
 801b1cc:	009b      	lsls	r3, r3, #2
 801b1ce:	4413      	add	r3, r2
 801b1d0:	009b      	lsls	r3, r3, #2
 801b1d2:	4a27      	ldr	r2, [pc, #156]	; (801b270 <xTaskResumeAll+0x128>)
 801b1d4:	441a      	add	r2, r3
 801b1d6:	68fb      	ldr	r3, [r7, #12]
 801b1d8:	3304      	adds	r3, #4
 801b1da:	4619      	mov	r1, r3
 801b1dc:	4610      	mov	r0, r2
 801b1de:	f7fe ff6e 	bl	801a0be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b1e2:	68fb      	ldr	r3, [r7, #12]
 801b1e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b1e6:	4b23      	ldr	r3, [pc, #140]	; (801b274 <xTaskResumeAll+0x12c>)
 801b1e8:	681b      	ldr	r3, [r3, #0]
 801b1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b1ec:	429a      	cmp	r2, r3
 801b1ee:	d302      	bcc.n	801b1f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 801b1f0:	4b21      	ldr	r3, [pc, #132]	; (801b278 <xTaskResumeAll+0x130>)
 801b1f2:	2201      	movs	r2, #1
 801b1f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b1f6:	4b1c      	ldr	r3, [pc, #112]	; (801b268 <xTaskResumeAll+0x120>)
 801b1f8:	681b      	ldr	r3, [r3, #0]
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d1cc      	bne.n	801b198 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801b1fe:	68fb      	ldr	r3, [r7, #12]
 801b200:	2b00      	cmp	r3, #0
 801b202:	d001      	beq.n	801b208 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801b204:	f000 fb68 	bl	801b8d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801b208:	4b1c      	ldr	r3, [pc, #112]	; (801b27c <xTaskResumeAll+0x134>)
 801b20a:	681b      	ldr	r3, [r3, #0]
 801b20c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	2b00      	cmp	r3, #0
 801b212:	d010      	beq.n	801b236 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801b214:	f000 f858 	bl	801b2c8 <xTaskIncrementTick>
 801b218:	4603      	mov	r3, r0
 801b21a:	2b00      	cmp	r3, #0
 801b21c:	d002      	beq.n	801b224 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801b21e:	4b16      	ldr	r3, [pc, #88]	; (801b278 <xTaskResumeAll+0x130>)
 801b220:	2201      	movs	r2, #1
 801b222:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	3b01      	subs	r3, #1
 801b228:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801b22a:	687b      	ldr	r3, [r7, #4]
 801b22c:	2b00      	cmp	r3, #0
 801b22e:	d1f1      	bne.n	801b214 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 801b230:	4b12      	ldr	r3, [pc, #72]	; (801b27c <xTaskResumeAll+0x134>)
 801b232:	2200      	movs	r2, #0
 801b234:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801b236:	4b10      	ldr	r3, [pc, #64]	; (801b278 <xTaskResumeAll+0x130>)
 801b238:	681b      	ldr	r3, [r3, #0]
 801b23a:	2b00      	cmp	r3, #0
 801b23c:	d009      	beq.n	801b252 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801b23e:	2301      	movs	r3, #1
 801b240:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801b242:	4b0f      	ldr	r3, [pc, #60]	; (801b280 <xTaskResumeAll+0x138>)
 801b244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b248:	601a      	str	r2, [r3, #0]
 801b24a:	f3bf 8f4f 	dsb	sy
 801b24e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b252:	f000 ffa7 	bl	801c1a4 <vPortExitCritical>

	return xAlreadyYielded;
 801b256:	68bb      	ldr	r3, [r7, #8]
}
 801b258:	4618      	mov	r0, r3
 801b25a:	3710      	adds	r7, #16
 801b25c:	46bd      	mov	sp, r7
 801b25e:	bd80      	pop	{r7, pc}
 801b260:	20041f54 	.word	0x20041f54
 801b264:	20041f2c 	.word	0x20041f2c
 801b268:	20041eec 	.word	0x20041eec
 801b26c:	20041f34 	.word	0x20041f34
 801b270:	20041e30 	.word	0x20041e30
 801b274:	20041e2c 	.word	0x20041e2c
 801b278:	20041f40 	.word	0x20041f40
 801b27c:	20041f3c 	.word	0x20041f3c
 801b280:	e000ed04 	.word	0xe000ed04

0801b284 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801b284:	b480      	push	{r7}
 801b286:	b083      	sub	sp, #12
 801b288:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801b28a:	4b05      	ldr	r3, [pc, #20]	; (801b2a0 <xTaskGetTickCount+0x1c>)
 801b28c:	681b      	ldr	r3, [r3, #0]
 801b28e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801b290:	687b      	ldr	r3, [r7, #4]
}
 801b292:	4618      	mov	r0, r3
 801b294:	370c      	adds	r7, #12
 801b296:	46bd      	mov	sp, r7
 801b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b29c:	4770      	bx	lr
 801b29e:	bf00      	nop
 801b2a0:	20041f30 	.word	0x20041f30

0801b2a4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801b2a4:	b580      	push	{r7, lr}
 801b2a6:	b082      	sub	sp, #8
 801b2a8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801b2aa:	f001 f82f 	bl	801c30c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801b2ae:	2300      	movs	r3, #0
 801b2b0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801b2b2:	4b04      	ldr	r3, [pc, #16]	; (801b2c4 <xTaskGetTickCountFromISR+0x20>)
 801b2b4:	681b      	ldr	r3, [r3, #0]
 801b2b6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801b2b8:	683b      	ldr	r3, [r7, #0]
}
 801b2ba:	4618      	mov	r0, r3
 801b2bc:	3708      	adds	r7, #8
 801b2be:	46bd      	mov	sp, r7
 801b2c0:	bd80      	pop	{r7, pc}
 801b2c2:	bf00      	nop
 801b2c4:	20041f30 	.word	0x20041f30

0801b2c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801b2c8:	b580      	push	{r7, lr}
 801b2ca:	b086      	sub	sp, #24
 801b2cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801b2ce:	2300      	movs	r3, #0
 801b2d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b2d2:	4b4f      	ldr	r3, [pc, #316]	; (801b410 <xTaskIncrementTick+0x148>)
 801b2d4:	681b      	ldr	r3, [r3, #0]
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	f040 808a 	bne.w	801b3f0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801b2dc:	4b4d      	ldr	r3, [pc, #308]	; (801b414 <xTaskIncrementTick+0x14c>)
 801b2de:	681b      	ldr	r3, [r3, #0]
 801b2e0:	3301      	adds	r3, #1
 801b2e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801b2e4:	4a4b      	ldr	r2, [pc, #300]	; (801b414 <xTaskIncrementTick+0x14c>)
 801b2e6:	693b      	ldr	r3, [r7, #16]
 801b2e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801b2ea:	693b      	ldr	r3, [r7, #16]
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	d122      	bne.n	801b336 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 801b2f0:	4b49      	ldr	r3, [pc, #292]	; (801b418 <xTaskIncrementTick+0x150>)
 801b2f2:	681b      	ldr	r3, [r3, #0]
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	d00c      	beq.n	801b314 <xTaskIncrementTick+0x4c>
	__asm volatile
 801b2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b2fe:	b672      	cpsid	i
 801b300:	f383 8811 	msr	BASEPRI, r3
 801b304:	f3bf 8f6f 	isb	sy
 801b308:	f3bf 8f4f 	dsb	sy
 801b30c:	b662      	cpsie	i
 801b30e:	603b      	str	r3, [r7, #0]
}
 801b310:	bf00      	nop
 801b312:	e7fe      	b.n	801b312 <xTaskIncrementTick+0x4a>
 801b314:	4b40      	ldr	r3, [pc, #256]	; (801b418 <xTaskIncrementTick+0x150>)
 801b316:	681b      	ldr	r3, [r3, #0]
 801b318:	60fb      	str	r3, [r7, #12]
 801b31a:	4b40      	ldr	r3, [pc, #256]	; (801b41c <xTaskIncrementTick+0x154>)
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	4a3e      	ldr	r2, [pc, #248]	; (801b418 <xTaskIncrementTick+0x150>)
 801b320:	6013      	str	r3, [r2, #0]
 801b322:	4a3e      	ldr	r2, [pc, #248]	; (801b41c <xTaskIncrementTick+0x154>)
 801b324:	68fb      	ldr	r3, [r7, #12]
 801b326:	6013      	str	r3, [r2, #0]
 801b328:	4b3d      	ldr	r3, [pc, #244]	; (801b420 <xTaskIncrementTick+0x158>)
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	3301      	adds	r3, #1
 801b32e:	4a3c      	ldr	r2, [pc, #240]	; (801b420 <xTaskIncrementTick+0x158>)
 801b330:	6013      	str	r3, [r2, #0]
 801b332:	f000 fad1 	bl	801b8d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801b336:	4b3b      	ldr	r3, [pc, #236]	; (801b424 <xTaskIncrementTick+0x15c>)
 801b338:	681b      	ldr	r3, [r3, #0]
 801b33a:	693a      	ldr	r2, [r7, #16]
 801b33c:	429a      	cmp	r2, r3
 801b33e:	d348      	bcc.n	801b3d2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b340:	4b35      	ldr	r3, [pc, #212]	; (801b418 <xTaskIncrementTick+0x150>)
 801b342:	681b      	ldr	r3, [r3, #0]
 801b344:	681b      	ldr	r3, [r3, #0]
 801b346:	2b00      	cmp	r3, #0
 801b348:	d104      	bne.n	801b354 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b34a:	4b36      	ldr	r3, [pc, #216]	; (801b424 <xTaskIncrementTick+0x15c>)
 801b34c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b350:	601a      	str	r2, [r3, #0]
					break;
 801b352:	e03e      	b.n	801b3d2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b354:	4b30      	ldr	r3, [pc, #192]	; (801b418 <xTaskIncrementTick+0x150>)
 801b356:	681b      	ldr	r3, [r3, #0]
 801b358:	68db      	ldr	r3, [r3, #12]
 801b35a:	68db      	ldr	r3, [r3, #12]
 801b35c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801b35e:	68bb      	ldr	r3, [r7, #8]
 801b360:	685b      	ldr	r3, [r3, #4]
 801b362:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801b364:	693a      	ldr	r2, [r7, #16]
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	429a      	cmp	r2, r3
 801b36a:	d203      	bcs.n	801b374 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801b36c:	4a2d      	ldr	r2, [pc, #180]	; (801b424 <xTaskIncrementTick+0x15c>)
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801b372:	e02e      	b.n	801b3d2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b374:	68bb      	ldr	r3, [r7, #8]
 801b376:	3304      	adds	r3, #4
 801b378:	4618      	mov	r0, r3
 801b37a:	f7fe fefd 	bl	801a178 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801b37e:	68bb      	ldr	r3, [r7, #8]
 801b380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b382:	2b00      	cmp	r3, #0
 801b384:	d004      	beq.n	801b390 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b386:	68bb      	ldr	r3, [r7, #8]
 801b388:	3318      	adds	r3, #24
 801b38a:	4618      	mov	r0, r3
 801b38c:	f7fe fef4 	bl	801a178 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801b390:	68bb      	ldr	r3, [r7, #8]
 801b392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b394:	2201      	movs	r2, #1
 801b396:	409a      	lsls	r2, r3
 801b398:	4b23      	ldr	r3, [pc, #140]	; (801b428 <xTaskIncrementTick+0x160>)
 801b39a:	681b      	ldr	r3, [r3, #0]
 801b39c:	4313      	orrs	r3, r2
 801b39e:	4a22      	ldr	r2, [pc, #136]	; (801b428 <xTaskIncrementTick+0x160>)
 801b3a0:	6013      	str	r3, [r2, #0]
 801b3a2:	68bb      	ldr	r3, [r7, #8]
 801b3a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b3a6:	4613      	mov	r3, r2
 801b3a8:	009b      	lsls	r3, r3, #2
 801b3aa:	4413      	add	r3, r2
 801b3ac:	009b      	lsls	r3, r3, #2
 801b3ae:	4a1f      	ldr	r2, [pc, #124]	; (801b42c <xTaskIncrementTick+0x164>)
 801b3b0:	441a      	add	r2, r3
 801b3b2:	68bb      	ldr	r3, [r7, #8]
 801b3b4:	3304      	adds	r3, #4
 801b3b6:	4619      	mov	r1, r3
 801b3b8:	4610      	mov	r0, r2
 801b3ba:	f7fe fe80 	bl	801a0be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b3be:	68bb      	ldr	r3, [r7, #8]
 801b3c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b3c2:	4b1b      	ldr	r3, [pc, #108]	; (801b430 <xTaskIncrementTick+0x168>)
 801b3c4:	681b      	ldr	r3, [r3, #0]
 801b3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b3c8:	429a      	cmp	r2, r3
 801b3ca:	d3b9      	bcc.n	801b340 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 801b3cc:	2301      	movs	r3, #1
 801b3ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b3d0:	e7b6      	b.n	801b340 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801b3d2:	4b17      	ldr	r3, [pc, #92]	; (801b430 <xTaskIncrementTick+0x168>)
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b3d8:	4914      	ldr	r1, [pc, #80]	; (801b42c <xTaskIncrementTick+0x164>)
 801b3da:	4613      	mov	r3, r2
 801b3dc:	009b      	lsls	r3, r3, #2
 801b3de:	4413      	add	r3, r2
 801b3e0:	009b      	lsls	r3, r3, #2
 801b3e2:	440b      	add	r3, r1
 801b3e4:	681b      	ldr	r3, [r3, #0]
 801b3e6:	2b01      	cmp	r3, #1
 801b3e8:	d907      	bls.n	801b3fa <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 801b3ea:	2301      	movs	r3, #1
 801b3ec:	617b      	str	r3, [r7, #20]
 801b3ee:	e004      	b.n	801b3fa <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801b3f0:	4b10      	ldr	r3, [pc, #64]	; (801b434 <xTaskIncrementTick+0x16c>)
 801b3f2:	681b      	ldr	r3, [r3, #0]
 801b3f4:	3301      	adds	r3, #1
 801b3f6:	4a0f      	ldr	r2, [pc, #60]	; (801b434 <xTaskIncrementTick+0x16c>)
 801b3f8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801b3fa:	4b0f      	ldr	r3, [pc, #60]	; (801b438 <xTaskIncrementTick+0x170>)
 801b3fc:	681b      	ldr	r3, [r3, #0]
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d001      	beq.n	801b406 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 801b402:	2301      	movs	r3, #1
 801b404:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801b406:	697b      	ldr	r3, [r7, #20]
}
 801b408:	4618      	mov	r0, r3
 801b40a:	3718      	adds	r7, #24
 801b40c:	46bd      	mov	sp, r7
 801b40e:	bd80      	pop	{r7, pc}
 801b410:	20041f54 	.word	0x20041f54
 801b414:	20041f30 	.word	0x20041f30
 801b418:	20041ee4 	.word	0x20041ee4
 801b41c:	20041ee8 	.word	0x20041ee8
 801b420:	20041f44 	.word	0x20041f44
 801b424:	20041f4c 	.word	0x20041f4c
 801b428:	20041f34 	.word	0x20041f34
 801b42c:	20041e30 	.word	0x20041e30
 801b430:	20041e2c 	.word	0x20041e2c
 801b434:	20041f3c 	.word	0x20041f3c
 801b438:	20041f40 	.word	0x20041f40

0801b43c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801b43c:	b580      	push	{r7, lr}
 801b43e:	b088      	sub	sp, #32
 801b440:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801b442:	4b3a      	ldr	r3, [pc, #232]	; (801b52c <vTaskSwitchContext+0xf0>)
 801b444:	681b      	ldr	r3, [r3, #0]
 801b446:	2b00      	cmp	r3, #0
 801b448:	d003      	beq.n	801b452 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801b44a:	4b39      	ldr	r3, [pc, #228]	; (801b530 <vTaskSwitchContext+0xf4>)
 801b44c:	2201      	movs	r2, #1
 801b44e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801b450:	e068      	b.n	801b524 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 801b452:	4b37      	ldr	r3, [pc, #220]	; (801b530 <vTaskSwitchContext+0xf4>)
 801b454:	2200      	movs	r2, #0
 801b456:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801b458:	4b36      	ldr	r3, [pc, #216]	; (801b534 <vTaskSwitchContext+0xf8>)
 801b45a:	681b      	ldr	r3, [r3, #0]
 801b45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b45e:	61fb      	str	r3, [r7, #28]
 801b460:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 801b464:	61bb      	str	r3, [r7, #24]
 801b466:	69fb      	ldr	r3, [r7, #28]
 801b468:	681b      	ldr	r3, [r3, #0]
 801b46a:	69ba      	ldr	r2, [r7, #24]
 801b46c:	429a      	cmp	r2, r3
 801b46e:	d111      	bne.n	801b494 <vTaskSwitchContext+0x58>
 801b470:	69fb      	ldr	r3, [r7, #28]
 801b472:	3304      	adds	r3, #4
 801b474:	681b      	ldr	r3, [r3, #0]
 801b476:	69ba      	ldr	r2, [r7, #24]
 801b478:	429a      	cmp	r2, r3
 801b47a:	d10b      	bne.n	801b494 <vTaskSwitchContext+0x58>
 801b47c:	69fb      	ldr	r3, [r7, #28]
 801b47e:	3308      	adds	r3, #8
 801b480:	681b      	ldr	r3, [r3, #0]
 801b482:	69ba      	ldr	r2, [r7, #24]
 801b484:	429a      	cmp	r2, r3
 801b486:	d105      	bne.n	801b494 <vTaskSwitchContext+0x58>
 801b488:	69fb      	ldr	r3, [r7, #28]
 801b48a:	330c      	adds	r3, #12
 801b48c:	681b      	ldr	r3, [r3, #0]
 801b48e:	69ba      	ldr	r2, [r7, #24]
 801b490:	429a      	cmp	r2, r3
 801b492:	d008      	beq.n	801b4a6 <vTaskSwitchContext+0x6a>
 801b494:	4b27      	ldr	r3, [pc, #156]	; (801b534 <vTaskSwitchContext+0xf8>)
 801b496:	681a      	ldr	r2, [r3, #0]
 801b498:	4b26      	ldr	r3, [pc, #152]	; (801b534 <vTaskSwitchContext+0xf8>)
 801b49a:	681b      	ldr	r3, [r3, #0]
 801b49c:	3334      	adds	r3, #52	; 0x34
 801b49e:	4619      	mov	r1, r3
 801b4a0:	4610      	mov	r0, r2
 801b4a2:	f7e5 fe04 	bl	80010ae <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b4a6:	4b24      	ldr	r3, [pc, #144]	; (801b538 <vTaskSwitchContext+0xfc>)
 801b4a8:	681b      	ldr	r3, [r3, #0]
 801b4aa:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801b4ac:	68fb      	ldr	r3, [r7, #12]
 801b4ae:	fab3 f383 	clz	r3, r3
 801b4b2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801b4b4:	7afb      	ldrb	r3, [r7, #11]
 801b4b6:	f1c3 031f 	rsb	r3, r3, #31
 801b4ba:	617b      	str	r3, [r7, #20]
 801b4bc:	491f      	ldr	r1, [pc, #124]	; (801b53c <vTaskSwitchContext+0x100>)
 801b4be:	697a      	ldr	r2, [r7, #20]
 801b4c0:	4613      	mov	r3, r2
 801b4c2:	009b      	lsls	r3, r3, #2
 801b4c4:	4413      	add	r3, r2
 801b4c6:	009b      	lsls	r3, r3, #2
 801b4c8:	440b      	add	r3, r1
 801b4ca:	681b      	ldr	r3, [r3, #0]
 801b4cc:	2b00      	cmp	r3, #0
 801b4ce:	d10c      	bne.n	801b4ea <vTaskSwitchContext+0xae>
	__asm volatile
 801b4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b4d4:	b672      	cpsid	i
 801b4d6:	f383 8811 	msr	BASEPRI, r3
 801b4da:	f3bf 8f6f 	isb	sy
 801b4de:	f3bf 8f4f 	dsb	sy
 801b4e2:	b662      	cpsie	i
 801b4e4:	607b      	str	r3, [r7, #4]
}
 801b4e6:	bf00      	nop
 801b4e8:	e7fe      	b.n	801b4e8 <vTaskSwitchContext+0xac>
 801b4ea:	697a      	ldr	r2, [r7, #20]
 801b4ec:	4613      	mov	r3, r2
 801b4ee:	009b      	lsls	r3, r3, #2
 801b4f0:	4413      	add	r3, r2
 801b4f2:	009b      	lsls	r3, r3, #2
 801b4f4:	4a11      	ldr	r2, [pc, #68]	; (801b53c <vTaskSwitchContext+0x100>)
 801b4f6:	4413      	add	r3, r2
 801b4f8:	613b      	str	r3, [r7, #16]
 801b4fa:	693b      	ldr	r3, [r7, #16]
 801b4fc:	685b      	ldr	r3, [r3, #4]
 801b4fe:	685a      	ldr	r2, [r3, #4]
 801b500:	693b      	ldr	r3, [r7, #16]
 801b502:	605a      	str	r2, [r3, #4]
 801b504:	693b      	ldr	r3, [r7, #16]
 801b506:	685a      	ldr	r2, [r3, #4]
 801b508:	693b      	ldr	r3, [r7, #16]
 801b50a:	3308      	adds	r3, #8
 801b50c:	429a      	cmp	r2, r3
 801b50e:	d104      	bne.n	801b51a <vTaskSwitchContext+0xde>
 801b510:	693b      	ldr	r3, [r7, #16]
 801b512:	685b      	ldr	r3, [r3, #4]
 801b514:	685a      	ldr	r2, [r3, #4]
 801b516:	693b      	ldr	r3, [r7, #16]
 801b518:	605a      	str	r2, [r3, #4]
 801b51a:	693b      	ldr	r3, [r7, #16]
 801b51c:	685b      	ldr	r3, [r3, #4]
 801b51e:	68db      	ldr	r3, [r3, #12]
 801b520:	4a04      	ldr	r2, [pc, #16]	; (801b534 <vTaskSwitchContext+0xf8>)
 801b522:	6013      	str	r3, [r2, #0]
}
 801b524:	bf00      	nop
 801b526:	3720      	adds	r7, #32
 801b528:	46bd      	mov	sp, r7
 801b52a:	bd80      	pop	{r7, pc}
 801b52c:	20041f54 	.word	0x20041f54
 801b530:	20041f40 	.word	0x20041f40
 801b534:	20041e2c 	.word	0x20041e2c
 801b538:	20041f34 	.word	0x20041f34
 801b53c:	20041e30 	.word	0x20041e30

0801b540 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801b540:	b580      	push	{r7, lr}
 801b542:	b084      	sub	sp, #16
 801b544:	af00      	add	r7, sp, #0
 801b546:	6078      	str	r0, [r7, #4]
 801b548:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	2b00      	cmp	r3, #0
 801b54e:	d10c      	bne.n	801b56a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 801b550:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b554:	b672      	cpsid	i
 801b556:	f383 8811 	msr	BASEPRI, r3
 801b55a:	f3bf 8f6f 	isb	sy
 801b55e:	f3bf 8f4f 	dsb	sy
 801b562:	b662      	cpsie	i
 801b564:	60fb      	str	r3, [r7, #12]
}
 801b566:	bf00      	nop
 801b568:	e7fe      	b.n	801b568 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b56a:	4b07      	ldr	r3, [pc, #28]	; (801b588 <vTaskPlaceOnEventList+0x48>)
 801b56c:	681b      	ldr	r3, [r3, #0]
 801b56e:	3318      	adds	r3, #24
 801b570:	4619      	mov	r1, r3
 801b572:	6878      	ldr	r0, [r7, #4]
 801b574:	f7fe fdc7 	bl	801a106 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801b578:	2101      	movs	r1, #1
 801b57a:	6838      	ldr	r0, [r7, #0]
 801b57c:	f000 fc6c 	bl	801be58 <prvAddCurrentTaskToDelayedList>
}
 801b580:	bf00      	nop
 801b582:	3710      	adds	r7, #16
 801b584:	46bd      	mov	sp, r7
 801b586:	bd80      	pop	{r7, pc}
 801b588:	20041e2c 	.word	0x20041e2c

0801b58c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801b58c:	b580      	push	{r7, lr}
 801b58e:	b086      	sub	sp, #24
 801b590:	af00      	add	r7, sp, #0
 801b592:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	68db      	ldr	r3, [r3, #12]
 801b598:	68db      	ldr	r3, [r3, #12]
 801b59a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801b59c:	693b      	ldr	r3, [r7, #16]
 801b59e:	2b00      	cmp	r3, #0
 801b5a0:	d10c      	bne.n	801b5bc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 801b5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b5a6:	b672      	cpsid	i
 801b5a8:	f383 8811 	msr	BASEPRI, r3
 801b5ac:	f3bf 8f6f 	isb	sy
 801b5b0:	f3bf 8f4f 	dsb	sy
 801b5b4:	b662      	cpsie	i
 801b5b6:	60fb      	str	r3, [r7, #12]
}
 801b5b8:	bf00      	nop
 801b5ba:	e7fe      	b.n	801b5ba <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801b5bc:	693b      	ldr	r3, [r7, #16]
 801b5be:	3318      	adds	r3, #24
 801b5c0:	4618      	mov	r0, r3
 801b5c2:	f7fe fdd9 	bl	801a178 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b5c6:	4b1d      	ldr	r3, [pc, #116]	; (801b63c <xTaskRemoveFromEventList+0xb0>)
 801b5c8:	681b      	ldr	r3, [r3, #0]
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d11c      	bne.n	801b608 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801b5ce:	693b      	ldr	r3, [r7, #16]
 801b5d0:	3304      	adds	r3, #4
 801b5d2:	4618      	mov	r0, r3
 801b5d4:	f7fe fdd0 	bl	801a178 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801b5d8:	693b      	ldr	r3, [r7, #16]
 801b5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b5dc:	2201      	movs	r2, #1
 801b5de:	409a      	lsls	r2, r3
 801b5e0:	4b17      	ldr	r3, [pc, #92]	; (801b640 <xTaskRemoveFromEventList+0xb4>)
 801b5e2:	681b      	ldr	r3, [r3, #0]
 801b5e4:	4313      	orrs	r3, r2
 801b5e6:	4a16      	ldr	r2, [pc, #88]	; (801b640 <xTaskRemoveFromEventList+0xb4>)
 801b5e8:	6013      	str	r3, [r2, #0]
 801b5ea:	693b      	ldr	r3, [r7, #16]
 801b5ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b5ee:	4613      	mov	r3, r2
 801b5f0:	009b      	lsls	r3, r3, #2
 801b5f2:	4413      	add	r3, r2
 801b5f4:	009b      	lsls	r3, r3, #2
 801b5f6:	4a13      	ldr	r2, [pc, #76]	; (801b644 <xTaskRemoveFromEventList+0xb8>)
 801b5f8:	441a      	add	r2, r3
 801b5fa:	693b      	ldr	r3, [r7, #16]
 801b5fc:	3304      	adds	r3, #4
 801b5fe:	4619      	mov	r1, r3
 801b600:	4610      	mov	r0, r2
 801b602:	f7fe fd5c 	bl	801a0be <vListInsertEnd>
 801b606:	e005      	b.n	801b614 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801b608:	693b      	ldr	r3, [r7, #16]
 801b60a:	3318      	adds	r3, #24
 801b60c:	4619      	mov	r1, r3
 801b60e:	480e      	ldr	r0, [pc, #56]	; (801b648 <xTaskRemoveFromEventList+0xbc>)
 801b610:	f7fe fd55 	bl	801a0be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b614:	693b      	ldr	r3, [r7, #16]
 801b616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b618:	4b0c      	ldr	r3, [pc, #48]	; (801b64c <xTaskRemoveFromEventList+0xc0>)
 801b61a:	681b      	ldr	r3, [r3, #0]
 801b61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b61e:	429a      	cmp	r2, r3
 801b620:	d905      	bls.n	801b62e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801b622:	2301      	movs	r3, #1
 801b624:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801b626:	4b0a      	ldr	r3, [pc, #40]	; (801b650 <xTaskRemoveFromEventList+0xc4>)
 801b628:	2201      	movs	r2, #1
 801b62a:	601a      	str	r2, [r3, #0]
 801b62c:	e001      	b.n	801b632 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801b62e:	2300      	movs	r3, #0
 801b630:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801b632:	697b      	ldr	r3, [r7, #20]
}
 801b634:	4618      	mov	r0, r3
 801b636:	3718      	adds	r7, #24
 801b638:	46bd      	mov	sp, r7
 801b63a:	bd80      	pop	{r7, pc}
 801b63c:	20041f54 	.word	0x20041f54
 801b640:	20041f34 	.word	0x20041f34
 801b644:	20041e30 	.word	0x20041e30
 801b648:	20041eec 	.word	0x20041eec
 801b64c:	20041e2c 	.word	0x20041e2c
 801b650:	20041f40 	.word	0x20041f40

0801b654 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801b654:	b480      	push	{r7}
 801b656:	b083      	sub	sp, #12
 801b658:	af00      	add	r7, sp, #0
 801b65a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801b65c:	4b06      	ldr	r3, [pc, #24]	; (801b678 <vTaskInternalSetTimeOutState+0x24>)
 801b65e:	681a      	ldr	r2, [r3, #0]
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801b664:	4b05      	ldr	r3, [pc, #20]	; (801b67c <vTaskInternalSetTimeOutState+0x28>)
 801b666:	681a      	ldr	r2, [r3, #0]
 801b668:	687b      	ldr	r3, [r7, #4]
 801b66a:	605a      	str	r2, [r3, #4]
}
 801b66c:	bf00      	nop
 801b66e:	370c      	adds	r7, #12
 801b670:	46bd      	mov	sp, r7
 801b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b676:	4770      	bx	lr
 801b678:	20041f44 	.word	0x20041f44
 801b67c:	20041f30 	.word	0x20041f30

0801b680 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801b680:	b580      	push	{r7, lr}
 801b682:	b088      	sub	sp, #32
 801b684:	af00      	add	r7, sp, #0
 801b686:	6078      	str	r0, [r7, #4]
 801b688:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	d10c      	bne.n	801b6aa <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 801b690:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b694:	b672      	cpsid	i
 801b696:	f383 8811 	msr	BASEPRI, r3
 801b69a:	f3bf 8f6f 	isb	sy
 801b69e:	f3bf 8f4f 	dsb	sy
 801b6a2:	b662      	cpsie	i
 801b6a4:	613b      	str	r3, [r7, #16]
}
 801b6a6:	bf00      	nop
 801b6a8:	e7fe      	b.n	801b6a8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801b6aa:	683b      	ldr	r3, [r7, #0]
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	d10c      	bne.n	801b6ca <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 801b6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b6b4:	b672      	cpsid	i
 801b6b6:	f383 8811 	msr	BASEPRI, r3
 801b6ba:	f3bf 8f6f 	isb	sy
 801b6be:	f3bf 8f4f 	dsb	sy
 801b6c2:	b662      	cpsie	i
 801b6c4:	60fb      	str	r3, [r7, #12]
}
 801b6c6:	bf00      	nop
 801b6c8:	e7fe      	b.n	801b6c8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 801b6ca:	f000 fd37 	bl	801c13c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801b6ce:	4b1d      	ldr	r3, [pc, #116]	; (801b744 <xTaskCheckForTimeOut+0xc4>)
 801b6d0:	681b      	ldr	r3, [r3, #0]
 801b6d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	685b      	ldr	r3, [r3, #4]
 801b6d8:	69ba      	ldr	r2, [r7, #24]
 801b6da:	1ad3      	subs	r3, r2, r3
 801b6dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801b6de:	683b      	ldr	r3, [r7, #0]
 801b6e0:	681b      	ldr	r3, [r3, #0]
 801b6e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b6e6:	d102      	bne.n	801b6ee <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801b6e8:	2300      	movs	r3, #0
 801b6ea:	61fb      	str	r3, [r7, #28]
 801b6ec:	e023      	b.n	801b736 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	681a      	ldr	r2, [r3, #0]
 801b6f2:	4b15      	ldr	r3, [pc, #84]	; (801b748 <xTaskCheckForTimeOut+0xc8>)
 801b6f4:	681b      	ldr	r3, [r3, #0]
 801b6f6:	429a      	cmp	r2, r3
 801b6f8:	d007      	beq.n	801b70a <xTaskCheckForTimeOut+0x8a>
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	685b      	ldr	r3, [r3, #4]
 801b6fe:	69ba      	ldr	r2, [r7, #24]
 801b700:	429a      	cmp	r2, r3
 801b702:	d302      	bcc.n	801b70a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801b704:	2301      	movs	r3, #1
 801b706:	61fb      	str	r3, [r7, #28]
 801b708:	e015      	b.n	801b736 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801b70a:	683b      	ldr	r3, [r7, #0]
 801b70c:	681b      	ldr	r3, [r3, #0]
 801b70e:	697a      	ldr	r2, [r7, #20]
 801b710:	429a      	cmp	r2, r3
 801b712:	d20b      	bcs.n	801b72c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801b714:	683b      	ldr	r3, [r7, #0]
 801b716:	681a      	ldr	r2, [r3, #0]
 801b718:	697b      	ldr	r3, [r7, #20]
 801b71a:	1ad2      	subs	r2, r2, r3
 801b71c:	683b      	ldr	r3, [r7, #0]
 801b71e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801b720:	6878      	ldr	r0, [r7, #4]
 801b722:	f7ff ff97 	bl	801b654 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801b726:	2300      	movs	r3, #0
 801b728:	61fb      	str	r3, [r7, #28]
 801b72a:	e004      	b.n	801b736 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 801b72c:	683b      	ldr	r3, [r7, #0]
 801b72e:	2200      	movs	r2, #0
 801b730:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801b732:	2301      	movs	r3, #1
 801b734:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801b736:	f000 fd35 	bl	801c1a4 <vPortExitCritical>

	return xReturn;
 801b73a:	69fb      	ldr	r3, [r7, #28]
}
 801b73c:	4618      	mov	r0, r3
 801b73e:	3720      	adds	r7, #32
 801b740:	46bd      	mov	sp, r7
 801b742:	bd80      	pop	{r7, pc}
 801b744:	20041f30 	.word	0x20041f30
 801b748:	20041f44 	.word	0x20041f44

0801b74c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801b74c:	b480      	push	{r7}
 801b74e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801b750:	4b03      	ldr	r3, [pc, #12]	; (801b760 <vTaskMissedYield+0x14>)
 801b752:	2201      	movs	r2, #1
 801b754:	601a      	str	r2, [r3, #0]
}
 801b756:	bf00      	nop
 801b758:	46bd      	mov	sp, r7
 801b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b75e:	4770      	bx	lr
 801b760:	20041f40 	.word	0x20041f40

0801b764 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801b764:	b580      	push	{r7, lr}
 801b766:	b082      	sub	sp, #8
 801b768:	af00      	add	r7, sp, #0
 801b76a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801b76c:	f000 f854 	bl	801b818 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801b770:	4b07      	ldr	r3, [pc, #28]	; (801b790 <prvIdleTask+0x2c>)
 801b772:	681b      	ldr	r3, [r3, #0]
 801b774:	2b01      	cmp	r3, #1
 801b776:	d907      	bls.n	801b788 <prvIdleTask+0x24>
			{
				taskYIELD();
 801b778:	4b06      	ldr	r3, [pc, #24]	; (801b794 <prvIdleTask+0x30>)
 801b77a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b77e:	601a      	str	r2, [r3, #0]
 801b780:	f3bf 8f4f 	dsb	sy
 801b784:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 801b788:	f7e5 fc8a 	bl	80010a0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801b78c:	e7ee      	b.n	801b76c <prvIdleTask+0x8>
 801b78e:	bf00      	nop
 801b790:	20041e30 	.word	0x20041e30
 801b794:	e000ed04 	.word	0xe000ed04

0801b798 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801b798:	b580      	push	{r7, lr}
 801b79a:	b082      	sub	sp, #8
 801b79c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b79e:	2300      	movs	r3, #0
 801b7a0:	607b      	str	r3, [r7, #4]
 801b7a2:	e00c      	b.n	801b7be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801b7a4:	687a      	ldr	r2, [r7, #4]
 801b7a6:	4613      	mov	r3, r2
 801b7a8:	009b      	lsls	r3, r3, #2
 801b7aa:	4413      	add	r3, r2
 801b7ac:	009b      	lsls	r3, r3, #2
 801b7ae:	4a12      	ldr	r2, [pc, #72]	; (801b7f8 <prvInitialiseTaskLists+0x60>)
 801b7b0:	4413      	add	r3, r2
 801b7b2:	4618      	mov	r0, r3
 801b7b4:	f7fe fc56 	bl	801a064 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b7b8:	687b      	ldr	r3, [r7, #4]
 801b7ba:	3301      	adds	r3, #1
 801b7bc:	607b      	str	r3, [r7, #4]
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	2b06      	cmp	r3, #6
 801b7c2:	d9ef      	bls.n	801b7a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801b7c4:	480d      	ldr	r0, [pc, #52]	; (801b7fc <prvInitialiseTaskLists+0x64>)
 801b7c6:	f7fe fc4d 	bl	801a064 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801b7ca:	480d      	ldr	r0, [pc, #52]	; (801b800 <prvInitialiseTaskLists+0x68>)
 801b7cc:	f7fe fc4a 	bl	801a064 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801b7d0:	480c      	ldr	r0, [pc, #48]	; (801b804 <prvInitialiseTaskLists+0x6c>)
 801b7d2:	f7fe fc47 	bl	801a064 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801b7d6:	480c      	ldr	r0, [pc, #48]	; (801b808 <prvInitialiseTaskLists+0x70>)
 801b7d8:	f7fe fc44 	bl	801a064 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801b7dc:	480b      	ldr	r0, [pc, #44]	; (801b80c <prvInitialiseTaskLists+0x74>)
 801b7de:	f7fe fc41 	bl	801a064 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801b7e2:	4b0b      	ldr	r3, [pc, #44]	; (801b810 <prvInitialiseTaskLists+0x78>)
 801b7e4:	4a05      	ldr	r2, [pc, #20]	; (801b7fc <prvInitialiseTaskLists+0x64>)
 801b7e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801b7e8:	4b0a      	ldr	r3, [pc, #40]	; (801b814 <prvInitialiseTaskLists+0x7c>)
 801b7ea:	4a05      	ldr	r2, [pc, #20]	; (801b800 <prvInitialiseTaskLists+0x68>)
 801b7ec:	601a      	str	r2, [r3, #0]
}
 801b7ee:	bf00      	nop
 801b7f0:	3708      	adds	r7, #8
 801b7f2:	46bd      	mov	sp, r7
 801b7f4:	bd80      	pop	{r7, pc}
 801b7f6:	bf00      	nop
 801b7f8:	20041e30 	.word	0x20041e30
 801b7fc:	20041ebc 	.word	0x20041ebc
 801b800:	20041ed0 	.word	0x20041ed0
 801b804:	20041eec 	.word	0x20041eec
 801b808:	20041f00 	.word	0x20041f00
 801b80c:	20041f18 	.word	0x20041f18
 801b810:	20041ee4 	.word	0x20041ee4
 801b814:	20041ee8 	.word	0x20041ee8

0801b818 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801b818:	b580      	push	{r7, lr}
 801b81a:	b082      	sub	sp, #8
 801b81c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b81e:	e019      	b.n	801b854 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801b820:	f000 fc8c 	bl	801c13c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b824:	4b10      	ldr	r3, [pc, #64]	; (801b868 <prvCheckTasksWaitingTermination+0x50>)
 801b826:	68db      	ldr	r3, [r3, #12]
 801b828:	68db      	ldr	r3, [r3, #12]
 801b82a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b82c:	687b      	ldr	r3, [r7, #4]
 801b82e:	3304      	adds	r3, #4
 801b830:	4618      	mov	r0, r3
 801b832:	f7fe fca1 	bl	801a178 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801b836:	4b0d      	ldr	r3, [pc, #52]	; (801b86c <prvCheckTasksWaitingTermination+0x54>)
 801b838:	681b      	ldr	r3, [r3, #0]
 801b83a:	3b01      	subs	r3, #1
 801b83c:	4a0b      	ldr	r2, [pc, #44]	; (801b86c <prvCheckTasksWaitingTermination+0x54>)
 801b83e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801b840:	4b0b      	ldr	r3, [pc, #44]	; (801b870 <prvCheckTasksWaitingTermination+0x58>)
 801b842:	681b      	ldr	r3, [r3, #0]
 801b844:	3b01      	subs	r3, #1
 801b846:	4a0a      	ldr	r2, [pc, #40]	; (801b870 <prvCheckTasksWaitingTermination+0x58>)
 801b848:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801b84a:	f000 fcab 	bl	801c1a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801b84e:	6878      	ldr	r0, [r7, #4]
 801b850:	f000 f810 	bl	801b874 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b854:	4b06      	ldr	r3, [pc, #24]	; (801b870 <prvCheckTasksWaitingTermination+0x58>)
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	2b00      	cmp	r3, #0
 801b85a:	d1e1      	bne.n	801b820 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801b85c:	bf00      	nop
 801b85e:	bf00      	nop
 801b860:	3708      	adds	r7, #8
 801b862:	46bd      	mov	sp, r7
 801b864:	bd80      	pop	{r7, pc}
 801b866:	bf00      	nop
 801b868:	20041f00 	.word	0x20041f00
 801b86c:	20041f2c 	.word	0x20041f2c
 801b870:	20041f14 	.word	0x20041f14

0801b874 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801b874:	b580      	push	{r7, lr}
 801b876:	b084      	sub	sp, #16
 801b878:	af00      	add	r7, sp, #0
 801b87a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801b882:	2b00      	cmp	r3, #0
 801b884:	d108      	bne.n	801b898 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801b886:	687b      	ldr	r3, [r7, #4]
 801b888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b88a:	4618      	mov	r0, r3
 801b88c:	f000 fe52 	bl	801c534 <vPortFree>
				vPortFree( pxTCB );
 801b890:	6878      	ldr	r0, [r7, #4]
 801b892:	f000 fe4f 	bl	801c534 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801b896:	e01a      	b.n	801b8ce <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801b89e:	2b01      	cmp	r3, #1
 801b8a0:	d103      	bne.n	801b8aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801b8a2:	6878      	ldr	r0, [r7, #4]
 801b8a4:	f000 fe46 	bl	801c534 <vPortFree>
	}
 801b8a8:	e011      	b.n	801b8ce <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801b8b0:	2b02      	cmp	r3, #2
 801b8b2:	d00c      	beq.n	801b8ce <prvDeleteTCB+0x5a>
	__asm volatile
 801b8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b8b8:	b672      	cpsid	i
 801b8ba:	f383 8811 	msr	BASEPRI, r3
 801b8be:	f3bf 8f6f 	isb	sy
 801b8c2:	f3bf 8f4f 	dsb	sy
 801b8c6:	b662      	cpsie	i
 801b8c8:	60fb      	str	r3, [r7, #12]
}
 801b8ca:	bf00      	nop
 801b8cc:	e7fe      	b.n	801b8cc <prvDeleteTCB+0x58>
	}
 801b8ce:	bf00      	nop
 801b8d0:	3710      	adds	r7, #16
 801b8d2:	46bd      	mov	sp, r7
 801b8d4:	bd80      	pop	{r7, pc}
	...

0801b8d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801b8d8:	b480      	push	{r7}
 801b8da:	b083      	sub	sp, #12
 801b8dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b8de:	4b0c      	ldr	r3, [pc, #48]	; (801b910 <prvResetNextTaskUnblockTime+0x38>)
 801b8e0:	681b      	ldr	r3, [r3, #0]
 801b8e2:	681b      	ldr	r3, [r3, #0]
 801b8e4:	2b00      	cmp	r3, #0
 801b8e6:	d104      	bne.n	801b8f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801b8e8:	4b0a      	ldr	r3, [pc, #40]	; (801b914 <prvResetNextTaskUnblockTime+0x3c>)
 801b8ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b8ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801b8f0:	e008      	b.n	801b904 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b8f2:	4b07      	ldr	r3, [pc, #28]	; (801b910 <prvResetNextTaskUnblockTime+0x38>)
 801b8f4:	681b      	ldr	r3, [r3, #0]
 801b8f6:	68db      	ldr	r3, [r3, #12]
 801b8f8:	68db      	ldr	r3, [r3, #12]
 801b8fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	685b      	ldr	r3, [r3, #4]
 801b900:	4a04      	ldr	r2, [pc, #16]	; (801b914 <prvResetNextTaskUnblockTime+0x3c>)
 801b902:	6013      	str	r3, [r2, #0]
}
 801b904:	bf00      	nop
 801b906:	370c      	adds	r7, #12
 801b908:	46bd      	mov	sp, r7
 801b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b90e:	4770      	bx	lr
 801b910:	20041ee4 	.word	0x20041ee4
 801b914:	20041f4c 	.word	0x20041f4c

0801b918 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801b918:	b480      	push	{r7}
 801b91a:	b083      	sub	sp, #12
 801b91c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801b91e:	4b0b      	ldr	r3, [pc, #44]	; (801b94c <xTaskGetSchedulerState+0x34>)
 801b920:	681b      	ldr	r3, [r3, #0]
 801b922:	2b00      	cmp	r3, #0
 801b924:	d102      	bne.n	801b92c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801b926:	2301      	movs	r3, #1
 801b928:	607b      	str	r3, [r7, #4]
 801b92a:	e008      	b.n	801b93e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b92c:	4b08      	ldr	r3, [pc, #32]	; (801b950 <xTaskGetSchedulerState+0x38>)
 801b92e:	681b      	ldr	r3, [r3, #0]
 801b930:	2b00      	cmp	r3, #0
 801b932:	d102      	bne.n	801b93a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801b934:	2302      	movs	r3, #2
 801b936:	607b      	str	r3, [r7, #4]
 801b938:	e001      	b.n	801b93e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801b93a:	2300      	movs	r3, #0
 801b93c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801b93e:	687b      	ldr	r3, [r7, #4]
	}
 801b940:	4618      	mov	r0, r3
 801b942:	370c      	adds	r7, #12
 801b944:	46bd      	mov	sp, r7
 801b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b94a:	4770      	bx	lr
 801b94c:	20041f38 	.word	0x20041f38
 801b950:	20041f54 	.word	0x20041f54

0801b954 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801b954:	b580      	push	{r7, lr}
 801b956:	b086      	sub	sp, #24
 801b958:	af00      	add	r7, sp, #0
 801b95a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801b960:	2300      	movs	r3, #0
 801b962:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	2b00      	cmp	r3, #0
 801b968:	d072      	beq.n	801ba50 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801b96a:	4b3c      	ldr	r3, [pc, #240]	; (801ba5c <xTaskPriorityDisinherit+0x108>)
 801b96c:	681b      	ldr	r3, [r3, #0]
 801b96e:	693a      	ldr	r2, [r7, #16]
 801b970:	429a      	cmp	r2, r3
 801b972:	d00c      	beq.n	801b98e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 801b974:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b978:	b672      	cpsid	i
 801b97a:	f383 8811 	msr	BASEPRI, r3
 801b97e:	f3bf 8f6f 	isb	sy
 801b982:	f3bf 8f4f 	dsb	sy
 801b986:	b662      	cpsie	i
 801b988:	60fb      	str	r3, [r7, #12]
}
 801b98a:	bf00      	nop
 801b98c:	e7fe      	b.n	801b98c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801b98e:	693b      	ldr	r3, [r7, #16]
 801b990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b992:	2b00      	cmp	r3, #0
 801b994:	d10c      	bne.n	801b9b0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801b996:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b99a:	b672      	cpsid	i
 801b99c:	f383 8811 	msr	BASEPRI, r3
 801b9a0:	f3bf 8f6f 	isb	sy
 801b9a4:	f3bf 8f4f 	dsb	sy
 801b9a8:	b662      	cpsie	i
 801b9aa:	60bb      	str	r3, [r7, #8]
}
 801b9ac:	bf00      	nop
 801b9ae:	e7fe      	b.n	801b9ae <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 801b9b0:	693b      	ldr	r3, [r7, #16]
 801b9b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b9b4:	1e5a      	subs	r2, r3, #1
 801b9b6:	693b      	ldr	r3, [r7, #16]
 801b9b8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801b9ba:	693b      	ldr	r3, [r7, #16]
 801b9bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b9be:	693b      	ldr	r3, [r7, #16]
 801b9c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b9c2:	429a      	cmp	r2, r3
 801b9c4:	d044      	beq.n	801ba50 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801b9c6:	693b      	ldr	r3, [r7, #16]
 801b9c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b9ca:	2b00      	cmp	r3, #0
 801b9cc:	d140      	bne.n	801ba50 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b9ce:	693b      	ldr	r3, [r7, #16]
 801b9d0:	3304      	adds	r3, #4
 801b9d2:	4618      	mov	r0, r3
 801b9d4:	f7fe fbd0 	bl	801a178 <uxListRemove>
 801b9d8:	4603      	mov	r3, r0
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d115      	bne.n	801ba0a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801b9de:	693b      	ldr	r3, [r7, #16]
 801b9e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b9e2:	491f      	ldr	r1, [pc, #124]	; (801ba60 <xTaskPriorityDisinherit+0x10c>)
 801b9e4:	4613      	mov	r3, r2
 801b9e6:	009b      	lsls	r3, r3, #2
 801b9e8:	4413      	add	r3, r2
 801b9ea:	009b      	lsls	r3, r3, #2
 801b9ec:	440b      	add	r3, r1
 801b9ee:	681b      	ldr	r3, [r3, #0]
 801b9f0:	2b00      	cmp	r3, #0
 801b9f2:	d10a      	bne.n	801ba0a <xTaskPriorityDisinherit+0xb6>
 801b9f4:	693b      	ldr	r3, [r7, #16]
 801b9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b9f8:	2201      	movs	r2, #1
 801b9fa:	fa02 f303 	lsl.w	r3, r2, r3
 801b9fe:	43da      	mvns	r2, r3
 801ba00:	4b18      	ldr	r3, [pc, #96]	; (801ba64 <xTaskPriorityDisinherit+0x110>)
 801ba02:	681b      	ldr	r3, [r3, #0]
 801ba04:	4013      	ands	r3, r2
 801ba06:	4a17      	ldr	r2, [pc, #92]	; (801ba64 <xTaskPriorityDisinherit+0x110>)
 801ba08:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801ba0a:	693b      	ldr	r3, [r7, #16]
 801ba0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ba0e:	693b      	ldr	r3, [r7, #16]
 801ba10:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ba12:	693b      	ldr	r3, [r7, #16]
 801ba14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba16:	f1c3 0207 	rsb	r2, r3, #7
 801ba1a:	693b      	ldr	r3, [r7, #16]
 801ba1c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801ba1e:	693b      	ldr	r3, [r7, #16]
 801ba20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba22:	2201      	movs	r2, #1
 801ba24:	409a      	lsls	r2, r3
 801ba26:	4b0f      	ldr	r3, [pc, #60]	; (801ba64 <xTaskPriorityDisinherit+0x110>)
 801ba28:	681b      	ldr	r3, [r3, #0]
 801ba2a:	4313      	orrs	r3, r2
 801ba2c:	4a0d      	ldr	r2, [pc, #52]	; (801ba64 <xTaskPriorityDisinherit+0x110>)
 801ba2e:	6013      	str	r3, [r2, #0]
 801ba30:	693b      	ldr	r3, [r7, #16]
 801ba32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ba34:	4613      	mov	r3, r2
 801ba36:	009b      	lsls	r3, r3, #2
 801ba38:	4413      	add	r3, r2
 801ba3a:	009b      	lsls	r3, r3, #2
 801ba3c:	4a08      	ldr	r2, [pc, #32]	; (801ba60 <xTaskPriorityDisinherit+0x10c>)
 801ba3e:	441a      	add	r2, r3
 801ba40:	693b      	ldr	r3, [r7, #16]
 801ba42:	3304      	adds	r3, #4
 801ba44:	4619      	mov	r1, r3
 801ba46:	4610      	mov	r0, r2
 801ba48:	f7fe fb39 	bl	801a0be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801ba4c:	2301      	movs	r3, #1
 801ba4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801ba50:	697b      	ldr	r3, [r7, #20]
	}
 801ba52:	4618      	mov	r0, r3
 801ba54:	3718      	adds	r7, #24
 801ba56:	46bd      	mov	sp, r7
 801ba58:	bd80      	pop	{r7, pc}
 801ba5a:	bf00      	nop
 801ba5c:	20041e2c 	.word	0x20041e2c
 801ba60:	20041e30 	.word	0x20041e30
 801ba64:	20041f34 	.word	0x20041f34

0801ba68 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801ba68:	b580      	push	{r7, lr}
 801ba6a:	b086      	sub	sp, #24
 801ba6c:	af00      	add	r7, sp, #0
 801ba6e:	60f8      	str	r0, [r7, #12]
 801ba70:	60b9      	str	r1, [r7, #8]
 801ba72:	607a      	str	r2, [r7, #4]
 801ba74:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801ba76:	f000 fb61 	bl	801c13c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801ba7a:	4b26      	ldr	r3, [pc, #152]	; (801bb14 <xTaskNotifyWait+0xac>)
 801ba7c:	681b      	ldr	r3, [r3, #0]
 801ba7e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801ba82:	b2db      	uxtb	r3, r3
 801ba84:	2b02      	cmp	r3, #2
 801ba86:	d01a      	beq.n	801babe <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801ba88:	4b22      	ldr	r3, [pc, #136]	; (801bb14 <xTaskNotifyWait+0xac>)
 801ba8a:	681b      	ldr	r3, [r3, #0]
 801ba8c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801ba8e:	68fa      	ldr	r2, [r7, #12]
 801ba90:	43d2      	mvns	r2, r2
 801ba92:	400a      	ands	r2, r1
 801ba94:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801ba96:	4b1f      	ldr	r3, [pc, #124]	; (801bb14 <xTaskNotifyWait+0xac>)
 801ba98:	681b      	ldr	r3, [r3, #0]
 801ba9a:	2201      	movs	r2, #1
 801ba9c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 801baa0:	683b      	ldr	r3, [r7, #0]
 801baa2:	2b00      	cmp	r3, #0
 801baa4:	d00b      	beq.n	801babe <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801baa6:	2101      	movs	r1, #1
 801baa8:	6838      	ldr	r0, [r7, #0]
 801baaa:	f000 f9d5 	bl	801be58 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801baae:	4b1a      	ldr	r3, [pc, #104]	; (801bb18 <xTaskNotifyWait+0xb0>)
 801bab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801bab4:	601a      	str	r2, [r3, #0]
 801bab6:	f3bf 8f4f 	dsb	sy
 801baba:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801babe:	f000 fb71 	bl	801c1a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 801bac2:	f000 fb3b 	bl	801c13c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	2b00      	cmp	r3, #0
 801baca:	d004      	beq.n	801bad6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801bacc:	4b11      	ldr	r3, [pc, #68]	; (801bb14 <xTaskNotifyWait+0xac>)
 801bace:	681b      	ldr	r3, [r3, #0]
 801bad0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801bad6:	4b0f      	ldr	r3, [pc, #60]	; (801bb14 <xTaskNotifyWait+0xac>)
 801bad8:	681b      	ldr	r3, [r3, #0]
 801bada:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801bade:	b2db      	uxtb	r3, r3
 801bae0:	2b02      	cmp	r3, #2
 801bae2:	d002      	beq.n	801baea <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801bae4:	2300      	movs	r3, #0
 801bae6:	617b      	str	r3, [r7, #20]
 801bae8:	e008      	b.n	801bafc <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801baea:	4b0a      	ldr	r3, [pc, #40]	; (801bb14 <xTaskNotifyWait+0xac>)
 801baec:	681b      	ldr	r3, [r3, #0]
 801baee:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801baf0:	68ba      	ldr	r2, [r7, #8]
 801baf2:	43d2      	mvns	r2, r2
 801baf4:	400a      	ands	r2, r1
 801baf6:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 801baf8:	2301      	movs	r3, #1
 801bafa:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801bafc:	4b05      	ldr	r3, [pc, #20]	; (801bb14 <xTaskNotifyWait+0xac>)
 801bafe:	681b      	ldr	r3, [r3, #0]
 801bb00:	2200      	movs	r2, #0
 801bb02:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 801bb06:	f000 fb4d 	bl	801c1a4 <vPortExitCritical>

		return xReturn;
 801bb0a:	697b      	ldr	r3, [r7, #20]
	}
 801bb0c:	4618      	mov	r0, r3
 801bb0e:	3718      	adds	r7, #24
 801bb10:	46bd      	mov	sp, r7
 801bb12:	bd80      	pop	{r7, pc}
 801bb14:	20041e2c 	.word	0x20041e2c
 801bb18:	e000ed04 	.word	0xe000ed04

0801bb1c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801bb1c:	b580      	push	{r7, lr}
 801bb1e:	b08a      	sub	sp, #40	; 0x28
 801bb20:	af00      	add	r7, sp, #0
 801bb22:	60f8      	str	r0, [r7, #12]
 801bb24:	60b9      	str	r1, [r7, #8]
 801bb26:	603b      	str	r3, [r7, #0]
 801bb28:	4613      	mov	r3, r2
 801bb2a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801bb2c:	2301      	movs	r3, #1
 801bb2e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801bb30:	68fb      	ldr	r3, [r7, #12]
 801bb32:	2b00      	cmp	r3, #0
 801bb34:	d10c      	bne.n	801bb50 <xTaskGenericNotify+0x34>
	__asm volatile
 801bb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bb3a:	b672      	cpsid	i
 801bb3c:	f383 8811 	msr	BASEPRI, r3
 801bb40:	f3bf 8f6f 	isb	sy
 801bb44:	f3bf 8f4f 	dsb	sy
 801bb48:	b662      	cpsie	i
 801bb4a:	61bb      	str	r3, [r7, #24]
}
 801bb4c:	bf00      	nop
 801bb4e:	e7fe      	b.n	801bb4e <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 801bb50:	68fb      	ldr	r3, [r7, #12]
 801bb52:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801bb54:	f000 faf2 	bl	801c13c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801bb58:	683b      	ldr	r3, [r7, #0]
 801bb5a:	2b00      	cmp	r3, #0
 801bb5c:	d003      	beq.n	801bb66 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801bb5e:	6a3b      	ldr	r3, [r7, #32]
 801bb60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bb62:	683b      	ldr	r3, [r7, #0]
 801bb64:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801bb66:	6a3b      	ldr	r3, [r7, #32]
 801bb68:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801bb6c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801bb6e:	6a3b      	ldr	r3, [r7, #32]
 801bb70:	2202      	movs	r2, #2
 801bb72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 801bb76:	79fb      	ldrb	r3, [r7, #7]
 801bb78:	2b04      	cmp	r3, #4
 801bb7a:	d828      	bhi.n	801bbce <xTaskGenericNotify+0xb2>
 801bb7c:	a201      	add	r2, pc, #4	; (adr r2, 801bb84 <xTaskGenericNotify+0x68>)
 801bb7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bb82:	bf00      	nop
 801bb84:	0801bbf3 	.word	0x0801bbf3
 801bb88:	0801bb99 	.word	0x0801bb99
 801bb8c:	0801bba7 	.word	0x0801bba7
 801bb90:	0801bbb3 	.word	0x0801bbb3
 801bb94:	0801bbbb 	.word	0x0801bbbb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801bb98:	6a3b      	ldr	r3, [r7, #32]
 801bb9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bb9c:	68bb      	ldr	r3, [r7, #8]
 801bb9e:	431a      	orrs	r2, r3
 801bba0:	6a3b      	ldr	r3, [r7, #32]
 801bba2:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 801bba4:	e028      	b.n	801bbf8 <xTaskGenericNotify+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801bba6:	6a3b      	ldr	r3, [r7, #32]
 801bba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bbaa:	1c5a      	adds	r2, r3, #1
 801bbac:	6a3b      	ldr	r3, [r7, #32]
 801bbae:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 801bbb0:	e022      	b.n	801bbf8 <xTaskGenericNotify+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801bbb2:	6a3b      	ldr	r3, [r7, #32]
 801bbb4:	68ba      	ldr	r2, [r7, #8]
 801bbb6:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 801bbb8:	e01e      	b.n	801bbf8 <xTaskGenericNotify+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801bbba:	7ffb      	ldrb	r3, [r7, #31]
 801bbbc:	2b02      	cmp	r3, #2
 801bbbe:	d003      	beq.n	801bbc8 <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801bbc0:	6a3b      	ldr	r3, [r7, #32]
 801bbc2:	68ba      	ldr	r2, [r7, #8]
 801bbc4:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801bbc6:	e017      	b.n	801bbf8 <xTaskGenericNotify+0xdc>
						xReturn = pdFAIL;
 801bbc8:	2300      	movs	r3, #0
 801bbca:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 801bbcc:	e014      	b.n	801bbf8 <xTaskGenericNotify+0xdc>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801bbce:	6a3b      	ldr	r3, [r7, #32]
 801bbd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bbd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801bbd6:	d00e      	beq.n	801bbf6 <xTaskGenericNotify+0xda>
	__asm volatile
 801bbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bbdc:	b672      	cpsid	i
 801bbde:	f383 8811 	msr	BASEPRI, r3
 801bbe2:	f3bf 8f6f 	isb	sy
 801bbe6:	f3bf 8f4f 	dsb	sy
 801bbea:	b662      	cpsie	i
 801bbec:	617b      	str	r3, [r7, #20]
}
 801bbee:	bf00      	nop
 801bbf0:	e7fe      	b.n	801bbf0 <xTaskGenericNotify+0xd4>
					break;
 801bbf2:	bf00      	nop
 801bbf4:	e000      	b.n	801bbf8 <xTaskGenericNotify+0xdc>

					break;
 801bbf6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801bbf8:	7ffb      	ldrb	r3, [r7, #31]
 801bbfa:	2b01      	cmp	r3, #1
 801bbfc:	d13b      	bne.n	801bc76 <xTaskGenericNotify+0x15a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801bbfe:	6a3b      	ldr	r3, [r7, #32]
 801bc00:	3304      	adds	r3, #4
 801bc02:	4618      	mov	r0, r3
 801bc04:	f7fe fab8 	bl	801a178 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801bc08:	6a3b      	ldr	r3, [r7, #32]
 801bc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc0c:	2201      	movs	r2, #1
 801bc0e:	409a      	lsls	r2, r3
 801bc10:	4b1c      	ldr	r3, [pc, #112]	; (801bc84 <xTaskGenericNotify+0x168>)
 801bc12:	681b      	ldr	r3, [r3, #0]
 801bc14:	4313      	orrs	r3, r2
 801bc16:	4a1b      	ldr	r2, [pc, #108]	; (801bc84 <xTaskGenericNotify+0x168>)
 801bc18:	6013      	str	r3, [r2, #0]
 801bc1a:	6a3b      	ldr	r3, [r7, #32]
 801bc1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bc1e:	4613      	mov	r3, r2
 801bc20:	009b      	lsls	r3, r3, #2
 801bc22:	4413      	add	r3, r2
 801bc24:	009b      	lsls	r3, r3, #2
 801bc26:	4a18      	ldr	r2, [pc, #96]	; (801bc88 <xTaskGenericNotify+0x16c>)
 801bc28:	441a      	add	r2, r3
 801bc2a:	6a3b      	ldr	r3, [r7, #32]
 801bc2c:	3304      	adds	r3, #4
 801bc2e:	4619      	mov	r1, r3
 801bc30:	4610      	mov	r0, r2
 801bc32:	f7fe fa44 	bl	801a0be <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801bc36:	6a3b      	ldr	r3, [r7, #32]
 801bc38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bc3a:	2b00      	cmp	r3, #0
 801bc3c:	d00c      	beq.n	801bc58 <xTaskGenericNotify+0x13c>
	__asm volatile
 801bc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bc42:	b672      	cpsid	i
 801bc44:	f383 8811 	msr	BASEPRI, r3
 801bc48:	f3bf 8f6f 	isb	sy
 801bc4c:	f3bf 8f4f 	dsb	sy
 801bc50:	b662      	cpsie	i
 801bc52:	613b      	str	r3, [r7, #16]
}
 801bc54:	bf00      	nop
 801bc56:	e7fe      	b.n	801bc56 <xTaskGenericNotify+0x13a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801bc58:	6a3b      	ldr	r3, [r7, #32]
 801bc5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bc5c:	4b0b      	ldr	r3, [pc, #44]	; (801bc8c <xTaskGenericNotify+0x170>)
 801bc5e:	681b      	ldr	r3, [r3, #0]
 801bc60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc62:	429a      	cmp	r2, r3
 801bc64:	d907      	bls.n	801bc76 <xTaskGenericNotify+0x15a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801bc66:	4b0a      	ldr	r3, [pc, #40]	; (801bc90 <xTaskGenericNotify+0x174>)
 801bc68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801bc6c:	601a      	str	r2, [r3, #0]
 801bc6e:	f3bf 8f4f 	dsb	sy
 801bc72:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801bc76:	f000 fa95 	bl	801c1a4 <vPortExitCritical>

		return xReturn;
 801bc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801bc7c:	4618      	mov	r0, r3
 801bc7e:	3728      	adds	r7, #40	; 0x28
 801bc80:	46bd      	mov	sp, r7
 801bc82:	bd80      	pop	{r7, pc}
 801bc84:	20041f34 	.word	0x20041f34
 801bc88:	20041e30 	.word	0x20041e30
 801bc8c:	20041e2c 	.word	0x20041e2c
 801bc90:	e000ed04 	.word	0xe000ed04

0801bc94 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801bc94:	b580      	push	{r7, lr}
 801bc96:	b08e      	sub	sp, #56	; 0x38
 801bc98:	af00      	add	r7, sp, #0
 801bc9a:	60f8      	str	r0, [r7, #12]
 801bc9c:	60b9      	str	r1, [r7, #8]
 801bc9e:	603b      	str	r3, [r7, #0]
 801bca0:	4613      	mov	r3, r2
 801bca2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 801bca4:	2301      	movs	r3, #1
 801bca6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801bca8:	68fb      	ldr	r3, [r7, #12]
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	d10c      	bne.n	801bcc8 <xTaskGenericNotifyFromISR+0x34>
	__asm volatile
 801bcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bcb2:	b672      	cpsid	i
 801bcb4:	f383 8811 	msr	BASEPRI, r3
 801bcb8:	f3bf 8f6f 	isb	sy
 801bcbc:	f3bf 8f4f 	dsb	sy
 801bcc0:	b662      	cpsie	i
 801bcc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 801bcc4:	bf00      	nop
 801bcc6:	e7fe      	b.n	801bcc6 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801bcc8:	f000 fb20 	bl	801c30c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801bccc:	68fb      	ldr	r3, [r7, #12]
 801bcce:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 801bcd0:	f3ef 8211 	mrs	r2, BASEPRI
 801bcd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bcd8:	b672      	cpsid	i
 801bcda:	f383 8811 	msr	BASEPRI, r3
 801bcde:	f3bf 8f6f 	isb	sy
 801bce2:	f3bf 8f4f 	dsb	sy
 801bce6:	b662      	cpsie	i
 801bce8:	623a      	str	r2, [r7, #32]
 801bcea:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801bcec:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801bcee:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801bcf0:	683b      	ldr	r3, [r7, #0]
 801bcf2:	2b00      	cmp	r3, #0
 801bcf4:	d003      	beq.n	801bcfe <xTaskGenericNotifyFromISR+0x6a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801bcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bcf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bcfa:	683b      	ldr	r3, [r7, #0]
 801bcfc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801bcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd00:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801bd04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801bd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd0a:	2202      	movs	r2, #2
 801bd0c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 801bd10:	79fb      	ldrb	r3, [r7, #7]
 801bd12:	2b04      	cmp	r3, #4
 801bd14:	d828      	bhi.n	801bd68 <xTaskGenericNotifyFromISR+0xd4>
 801bd16:	a201      	add	r2, pc, #4	; (adr r2, 801bd1c <xTaskGenericNotifyFromISR+0x88>)
 801bd18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bd1c:	0801bd8d 	.word	0x0801bd8d
 801bd20:	0801bd31 	.word	0x0801bd31
 801bd24:	0801bd3f 	.word	0x0801bd3f
 801bd28:	0801bd4b 	.word	0x0801bd4b
 801bd2c:	0801bd53 	.word	0x0801bd53
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801bd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bd34:	68bb      	ldr	r3, [r7, #8]
 801bd36:	431a      	orrs	r2, r3
 801bd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd3a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 801bd3c:	e029      	b.n	801bd92 <xTaskGenericNotifyFromISR+0xfe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801bd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bd42:	1c5a      	adds	r2, r3, #1
 801bd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd46:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 801bd48:	e023      	b.n	801bd92 <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801bd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd4c:	68ba      	ldr	r2, [r7, #8]
 801bd4e:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 801bd50:	e01f      	b.n	801bd92 <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801bd52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801bd56:	2b02      	cmp	r3, #2
 801bd58:	d003      	beq.n	801bd62 <xTaskGenericNotifyFromISR+0xce>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801bd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd5c:	68ba      	ldr	r2, [r7, #8]
 801bd5e:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801bd60:	e017      	b.n	801bd92 <xTaskGenericNotifyFromISR+0xfe>
						xReturn = pdFAIL;
 801bd62:	2300      	movs	r3, #0
 801bd64:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801bd66:	e014      	b.n	801bd92 <xTaskGenericNotifyFromISR+0xfe>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801bd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bd6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801bd70:	d00e      	beq.n	801bd90 <xTaskGenericNotifyFromISR+0xfc>
	__asm volatile
 801bd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bd76:	b672      	cpsid	i
 801bd78:	f383 8811 	msr	BASEPRI, r3
 801bd7c:	f3bf 8f6f 	isb	sy
 801bd80:	f3bf 8f4f 	dsb	sy
 801bd84:	b662      	cpsie	i
 801bd86:	61bb      	str	r3, [r7, #24]
}
 801bd88:	bf00      	nop
 801bd8a:	e7fe      	b.n	801bd8a <xTaskGenericNotifyFromISR+0xf6>
					break;
 801bd8c:	bf00      	nop
 801bd8e:	e000      	b.n	801bd92 <xTaskGenericNotifyFromISR+0xfe>
					break;
 801bd90:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801bd92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801bd96:	2b01      	cmp	r3, #1
 801bd98:	d147      	bne.n	801be2a <xTaskGenericNotifyFromISR+0x196>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801bd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	d00c      	beq.n	801bdbc <xTaskGenericNotifyFromISR+0x128>
	__asm volatile
 801bda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bda6:	b672      	cpsid	i
 801bda8:	f383 8811 	msr	BASEPRI, r3
 801bdac:	f3bf 8f6f 	isb	sy
 801bdb0:	f3bf 8f4f 	dsb	sy
 801bdb4:	b662      	cpsie	i
 801bdb6:	617b      	str	r3, [r7, #20]
}
 801bdb8:	bf00      	nop
 801bdba:	e7fe      	b.n	801bdba <xTaskGenericNotifyFromISR+0x126>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801bdbc:	4b20      	ldr	r3, [pc, #128]	; (801be40 <xTaskGenericNotifyFromISR+0x1ac>)
 801bdbe:	681b      	ldr	r3, [r3, #0]
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	d11c      	bne.n	801bdfe <xTaskGenericNotifyFromISR+0x16a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801bdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bdc6:	3304      	adds	r3, #4
 801bdc8:	4618      	mov	r0, r3
 801bdca:	f7fe f9d5 	bl	801a178 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801bdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bdd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bdd2:	2201      	movs	r2, #1
 801bdd4:	409a      	lsls	r2, r3
 801bdd6:	4b1b      	ldr	r3, [pc, #108]	; (801be44 <xTaskGenericNotifyFromISR+0x1b0>)
 801bdd8:	681b      	ldr	r3, [r3, #0]
 801bdda:	4313      	orrs	r3, r2
 801bddc:	4a19      	ldr	r2, [pc, #100]	; (801be44 <xTaskGenericNotifyFromISR+0x1b0>)
 801bdde:	6013      	str	r3, [r2, #0]
 801bde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bde2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bde4:	4613      	mov	r3, r2
 801bde6:	009b      	lsls	r3, r3, #2
 801bde8:	4413      	add	r3, r2
 801bdea:	009b      	lsls	r3, r3, #2
 801bdec:	4a16      	ldr	r2, [pc, #88]	; (801be48 <xTaskGenericNotifyFromISR+0x1b4>)
 801bdee:	441a      	add	r2, r3
 801bdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bdf2:	3304      	adds	r3, #4
 801bdf4:	4619      	mov	r1, r3
 801bdf6:	4610      	mov	r0, r2
 801bdf8:	f7fe f961 	bl	801a0be <vListInsertEnd>
 801bdfc:	e005      	b.n	801be0a <xTaskGenericNotifyFromISR+0x176>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801bdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be00:	3318      	adds	r3, #24
 801be02:	4619      	mov	r1, r3
 801be04:	4811      	ldr	r0, [pc, #68]	; (801be4c <xTaskGenericNotifyFromISR+0x1b8>)
 801be06:	f7fe f95a 	bl	801a0be <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801be0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801be0e:	4b10      	ldr	r3, [pc, #64]	; (801be50 <xTaskGenericNotifyFromISR+0x1bc>)
 801be10:	681b      	ldr	r3, [r3, #0]
 801be12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be14:	429a      	cmp	r2, r3
 801be16:	d908      	bls.n	801be2a <xTaskGenericNotifyFromISR+0x196>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801be18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	d002      	beq.n	801be24 <xTaskGenericNotifyFromISR+0x190>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801be1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801be20:	2201      	movs	r2, #1
 801be22:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801be24:	4b0b      	ldr	r3, [pc, #44]	; (801be54 <xTaskGenericNotifyFromISR+0x1c0>)
 801be26:	2201      	movs	r2, #1
 801be28:	601a      	str	r2, [r3, #0]
 801be2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be2c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801be2e:	693b      	ldr	r3, [r7, #16]
 801be30:	f383 8811 	msr	BASEPRI, r3
}
 801be34:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801be36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 801be38:	4618      	mov	r0, r3
 801be3a:	3738      	adds	r7, #56	; 0x38
 801be3c:	46bd      	mov	sp, r7
 801be3e:	bd80      	pop	{r7, pc}
 801be40:	20041f54 	.word	0x20041f54
 801be44:	20041f34 	.word	0x20041f34
 801be48:	20041e30 	.word	0x20041e30
 801be4c:	20041eec 	.word	0x20041eec
 801be50:	20041e2c 	.word	0x20041e2c
 801be54:	20041f40 	.word	0x20041f40

0801be58 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801be58:	b580      	push	{r7, lr}
 801be5a:	b084      	sub	sp, #16
 801be5c:	af00      	add	r7, sp, #0
 801be5e:	6078      	str	r0, [r7, #4]
 801be60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801be62:	4b29      	ldr	r3, [pc, #164]	; (801bf08 <prvAddCurrentTaskToDelayedList+0xb0>)
 801be64:	681b      	ldr	r3, [r3, #0]
 801be66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801be68:	4b28      	ldr	r3, [pc, #160]	; (801bf0c <prvAddCurrentTaskToDelayedList+0xb4>)
 801be6a:	681b      	ldr	r3, [r3, #0]
 801be6c:	3304      	adds	r3, #4
 801be6e:	4618      	mov	r0, r3
 801be70:	f7fe f982 	bl	801a178 <uxListRemove>
 801be74:	4603      	mov	r3, r0
 801be76:	2b00      	cmp	r3, #0
 801be78:	d10b      	bne.n	801be92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801be7a:	4b24      	ldr	r3, [pc, #144]	; (801bf0c <prvAddCurrentTaskToDelayedList+0xb4>)
 801be7c:	681b      	ldr	r3, [r3, #0]
 801be7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be80:	2201      	movs	r2, #1
 801be82:	fa02 f303 	lsl.w	r3, r2, r3
 801be86:	43da      	mvns	r2, r3
 801be88:	4b21      	ldr	r3, [pc, #132]	; (801bf10 <prvAddCurrentTaskToDelayedList+0xb8>)
 801be8a:	681b      	ldr	r3, [r3, #0]
 801be8c:	4013      	ands	r3, r2
 801be8e:	4a20      	ldr	r2, [pc, #128]	; (801bf10 <prvAddCurrentTaskToDelayedList+0xb8>)
 801be90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801be98:	d10a      	bne.n	801beb0 <prvAddCurrentTaskToDelayedList+0x58>
 801be9a:	683b      	ldr	r3, [r7, #0]
 801be9c:	2b00      	cmp	r3, #0
 801be9e:	d007      	beq.n	801beb0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bea0:	4b1a      	ldr	r3, [pc, #104]	; (801bf0c <prvAddCurrentTaskToDelayedList+0xb4>)
 801bea2:	681b      	ldr	r3, [r3, #0]
 801bea4:	3304      	adds	r3, #4
 801bea6:	4619      	mov	r1, r3
 801bea8:	481a      	ldr	r0, [pc, #104]	; (801bf14 <prvAddCurrentTaskToDelayedList+0xbc>)
 801beaa:	f7fe f908 	bl	801a0be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801beae:	e026      	b.n	801befe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801beb0:	68fa      	ldr	r2, [r7, #12]
 801beb2:	687b      	ldr	r3, [r7, #4]
 801beb4:	4413      	add	r3, r2
 801beb6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801beb8:	4b14      	ldr	r3, [pc, #80]	; (801bf0c <prvAddCurrentTaskToDelayedList+0xb4>)
 801beba:	681b      	ldr	r3, [r3, #0]
 801bebc:	68ba      	ldr	r2, [r7, #8]
 801bebe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801bec0:	68ba      	ldr	r2, [r7, #8]
 801bec2:	68fb      	ldr	r3, [r7, #12]
 801bec4:	429a      	cmp	r2, r3
 801bec6:	d209      	bcs.n	801bedc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bec8:	4b13      	ldr	r3, [pc, #76]	; (801bf18 <prvAddCurrentTaskToDelayedList+0xc0>)
 801beca:	681a      	ldr	r2, [r3, #0]
 801becc:	4b0f      	ldr	r3, [pc, #60]	; (801bf0c <prvAddCurrentTaskToDelayedList+0xb4>)
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	3304      	adds	r3, #4
 801bed2:	4619      	mov	r1, r3
 801bed4:	4610      	mov	r0, r2
 801bed6:	f7fe f916 	bl	801a106 <vListInsert>
}
 801beda:	e010      	b.n	801befe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bedc:	4b0f      	ldr	r3, [pc, #60]	; (801bf1c <prvAddCurrentTaskToDelayedList+0xc4>)
 801bede:	681a      	ldr	r2, [r3, #0]
 801bee0:	4b0a      	ldr	r3, [pc, #40]	; (801bf0c <prvAddCurrentTaskToDelayedList+0xb4>)
 801bee2:	681b      	ldr	r3, [r3, #0]
 801bee4:	3304      	adds	r3, #4
 801bee6:	4619      	mov	r1, r3
 801bee8:	4610      	mov	r0, r2
 801beea:	f7fe f90c 	bl	801a106 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801beee:	4b0c      	ldr	r3, [pc, #48]	; (801bf20 <prvAddCurrentTaskToDelayedList+0xc8>)
 801bef0:	681b      	ldr	r3, [r3, #0]
 801bef2:	68ba      	ldr	r2, [r7, #8]
 801bef4:	429a      	cmp	r2, r3
 801bef6:	d202      	bcs.n	801befe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801bef8:	4a09      	ldr	r2, [pc, #36]	; (801bf20 <prvAddCurrentTaskToDelayedList+0xc8>)
 801befa:	68bb      	ldr	r3, [r7, #8]
 801befc:	6013      	str	r3, [r2, #0]
}
 801befe:	bf00      	nop
 801bf00:	3710      	adds	r7, #16
 801bf02:	46bd      	mov	sp, r7
 801bf04:	bd80      	pop	{r7, pc}
 801bf06:	bf00      	nop
 801bf08:	20041f30 	.word	0x20041f30
 801bf0c:	20041e2c 	.word	0x20041e2c
 801bf10:	20041f34 	.word	0x20041f34
 801bf14:	20041f18 	.word	0x20041f18
 801bf18:	20041ee8 	.word	0x20041ee8
 801bf1c:	20041ee4 	.word	0x20041ee4
 801bf20:	20041f4c 	.word	0x20041f4c

0801bf24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801bf24:	b480      	push	{r7}
 801bf26:	b085      	sub	sp, #20
 801bf28:	af00      	add	r7, sp, #0
 801bf2a:	60f8      	str	r0, [r7, #12]
 801bf2c:	60b9      	str	r1, [r7, #8]
 801bf2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801bf30:	68fb      	ldr	r3, [r7, #12]
 801bf32:	3b04      	subs	r3, #4
 801bf34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801bf36:	68fb      	ldr	r3, [r7, #12]
 801bf38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801bf3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801bf3e:	68fb      	ldr	r3, [r7, #12]
 801bf40:	3b04      	subs	r3, #4
 801bf42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801bf44:	68bb      	ldr	r3, [r7, #8]
 801bf46:	f023 0201 	bic.w	r2, r3, #1
 801bf4a:	68fb      	ldr	r3, [r7, #12]
 801bf4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801bf4e:	68fb      	ldr	r3, [r7, #12]
 801bf50:	3b04      	subs	r3, #4
 801bf52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801bf54:	4a0c      	ldr	r2, [pc, #48]	; (801bf88 <pxPortInitialiseStack+0x64>)
 801bf56:	68fb      	ldr	r3, [r7, #12]
 801bf58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801bf5a:	68fb      	ldr	r3, [r7, #12]
 801bf5c:	3b14      	subs	r3, #20
 801bf5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801bf60:	687a      	ldr	r2, [r7, #4]
 801bf62:	68fb      	ldr	r3, [r7, #12]
 801bf64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801bf66:	68fb      	ldr	r3, [r7, #12]
 801bf68:	3b04      	subs	r3, #4
 801bf6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801bf6c:	68fb      	ldr	r3, [r7, #12]
 801bf6e:	f06f 0202 	mvn.w	r2, #2
 801bf72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801bf74:	68fb      	ldr	r3, [r7, #12]
 801bf76:	3b20      	subs	r3, #32
 801bf78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801bf7a:	68fb      	ldr	r3, [r7, #12]
}
 801bf7c:	4618      	mov	r0, r3
 801bf7e:	3714      	adds	r7, #20
 801bf80:	46bd      	mov	sp, r7
 801bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf86:	4770      	bx	lr
 801bf88:	0801bf8d 	.word	0x0801bf8d

0801bf8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801bf8c:	b480      	push	{r7}
 801bf8e:	b085      	sub	sp, #20
 801bf90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801bf92:	2300      	movs	r3, #0
 801bf94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801bf96:	4b14      	ldr	r3, [pc, #80]	; (801bfe8 <prvTaskExitError+0x5c>)
 801bf98:	681b      	ldr	r3, [r3, #0]
 801bf9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801bf9e:	d00c      	beq.n	801bfba <prvTaskExitError+0x2e>
	__asm volatile
 801bfa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bfa4:	b672      	cpsid	i
 801bfa6:	f383 8811 	msr	BASEPRI, r3
 801bfaa:	f3bf 8f6f 	isb	sy
 801bfae:	f3bf 8f4f 	dsb	sy
 801bfb2:	b662      	cpsie	i
 801bfb4:	60fb      	str	r3, [r7, #12]
}
 801bfb6:	bf00      	nop
 801bfb8:	e7fe      	b.n	801bfb8 <prvTaskExitError+0x2c>
	__asm volatile
 801bfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bfbe:	b672      	cpsid	i
 801bfc0:	f383 8811 	msr	BASEPRI, r3
 801bfc4:	f3bf 8f6f 	isb	sy
 801bfc8:	f3bf 8f4f 	dsb	sy
 801bfcc:	b662      	cpsie	i
 801bfce:	60bb      	str	r3, [r7, #8]
}
 801bfd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801bfd2:	bf00      	nop
 801bfd4:	687b      	ldr	r3, [r7, #4]
 801bfd6:	2b00      	cmp	r3, #0
 801bfd8:	d0fc      	beq.n	801bfd4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801bfda:	bf00      	nop
 801bfdc:	bf00      	nop
 801bfde:	3714      	adds	r7, #20
 801bfe0:	46bd      	mov	sp, r7
 801bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfe6:	4770      	bx	lr
 801bfe8:	200000d8 	.word	0x200000d8
 801bfec:	00000000 	.word	0x00000000

0801bff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801bff0:	4b07      	ldr	r3, [pc, #28]	; (801c010 <pxCurrentTCBConst2>)
 801bff2:	6819      	ldr	r1, [r3, #0]
 801bff4:	6808      	ldr	r0, [r1, #0]
 801bff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bffa:	f380 8809 	msr	PSP, r0
 801bffe:	f3bf 8f6f 	isb	sy
 801c002:	f04f 0000 	mov.w	r0, #0
 801c006:	f380 8811 	msr	BASEPRI, r0
 801c00a:	4770      	bx	lr
 801c00c:	f3af 8000 	nop.w

0801c010 <pxCurrentTCBConst2>:
 801c010:	20041e2c 	.word	0x20041e2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801c014:	bf00      	nop
 801c016:	bf00      	nop

0801c018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801c018:	4808      	ldr	r0, [pc, #32]	; (801c03c <prvPortStartFirstTask+0x24>)
 801c01a:	6800      	ldr	r0, [r0, #0]
 801c01c:	6800      	ldr	r0, [r0, #0]
 801c01e:	f380 8808 	msr	MSP, r0
 801c022:	f04f 0000 	mov.w	r0, #0
 801c026:	f380 8814 	msr	CONTROL, r0
 801c02a:	b662      	cpsie	i
 801c02c:	b661      	cpsie	f
 801c02e:	f3bf 8f4f 	dsb	sy
 801c032:	f3bf 8f6f 	isb	sy
 801c036:	df00      	svc	0
 801c038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801c03a:	bf00      	nop
 801c03c:	e000ed08 	.word	0xe000ed08

0801c040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801c040:	b580      	push	{r7, lr}
 801c042:	b084      	sub	sp, #16
 801c044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801c046:	4b37      	ldr	r3, [pc, #220]	; (801c124 <xPortStartScheduler+0xe4>)
 801c048:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801c04a:	68fb      	ldr	r3, [r7, #12]
 801c04c:	781b      	ldrb	r3, [r3, #0]
 801c04e:	b2db      	uxtb	r3, r3
 801c050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801c052:	68fb      	ldr	r3, [r7, #12]
 801c054:	22ff      	movs	r2, #255	; 0xff
 801c056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801c058:	68fb      	ldr	r3, [r7, #12]
 801c05a:	781b      	ldrb	r3, [r3, #0]
 801c05c:	b2db      	uxtb	r3, r3
 801c05e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801c060:	78fb      	ldrb	r3, [r7, #3]
 801c062:	b2db      	uxtb	r3, r3
 801c064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801c068:	b2da      	uxtb	r2, r3
 801c06a:	4b2f      	ldr	r3, [pc, #188]	; (801c128 <xPortStartScheduler+0xe8>)
 801c06c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801c06e:	4b2f      	ldr	r3, [pc, #188]	; (801c12c <xPortStartScheduler+0xec>)
 801c070:	2207      	movs	r2, #7
 801c072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c074:	e009      	b.n	801c08a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 801c076:	4b2d      	ldr	r3, [pc, #180]	; (801c12c <xPortStartScheduler+0xec>)
 801c078:	681b      	ldr	r3, [r3, #0]
 801c07a:	3b01      	subs	r3, #1
 801c07c:	4a2b      	ldr	r2, [pc, #172]	; (801c12c <xPortStartScheduler+0xec>)
 801c07e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801c080:	78fb      	ldrb	r3, [r7, #3]
 801c082:	b2db      	uxtb	r3, r3
 801c084:	005b      	lsls	r3, r3, #1
 801c086:	b2db      	uxtb	r3, r3
 801c088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c08a:	78fb      	ldrb	r3, [r7, #3]
 801c08c:	b2db      	uxtb	r3, r3
 801c08e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c092:	2b80      	cmp	r3, #128	; 0x80
 801c094:	d0ef      	beq.n	801c076 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801c096:	4b25      	ldr	r3, [pc, #148]	; (801c12c <xPortStartScheduler+0xec>)
 801c098:	681b      	ldr	r3, [r3, #0]
 801c09a:	f1c3 0307 	rsb	r3, r3, #7
 801c09e:	2b04      	cmp	r3, #4
 801c0a0:	d00c      	beq.n	801c0bc <xPortStartScheduler+0x7c>
	__asm volatile
 801c0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c0a6:	b672      	cpsid	i
 801c0a8:	f383 8811 	msr	BASEPRI, r3
 801c0ac:	f3bf 8f6f 	isb	sy
 801c0b0:	f3bf 8f4f 	dsb	sy
 801c0b4:	b662      	cpsie	i
 801c0b6:	60bb      	str	r3, [r7, #8]
}
 801c0b8:	bf00      	nop
 801c0ba:	e7fe      	b.n	801c0ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801c0bc:	4b1b      	ldr	r3, [pc, #108]	; (801c12c <xPortStartScheduler+0xec>)
 801c0be:	681b      	ldr	r3, [r3, #0]
 801c0c0:	021b      	lsls	r3, r3, #8
 801c0c2:	4a1a      	ldr	r2, [pc, #104]	; (801c12c <xPortStartScheduler+0xec>)
 801c0c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801c0c6:	4b19      	ldr	r3, [pc, #100]	; (801c12c <xPortStartScheduler+0xec>)
 801c0c8:	681b      	ldr	r3, [r3, #0]
 801c0ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801c0ce:	4a17      	ldr	r2, [pc, #92]	; (801c12c <xPortStartScheduler+0xec>)
 801c0d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	b2da      	uxtb	r2, r3
 801c0d6:	68fb      	ldr	r3, [r7, #12]
 801c0d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801c0da:	4b15      	ldr	r3, [pc, #84]	; (801c130 <xPortStartScheduler+0xf0>)
 801c0dc:	681b      	ldr	r3, [r3, #0]
 801c0de:	4a14      	ldr	r2, [pc, #80]	; (801c130 <xPortStartScheduler+0xf0>)
 801c0e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801c0e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801c0e6:	4b12      	ldr	r3, [pc, #72]	; (801c130 <xPortStartScheduler+0xf0>)
 801c0e8:	681b      	ldr	r3, [r3, #0]
 801c0ea:	4a11      	ldr	r2, [pc, #68]	; (801c130 <xPortStartScheduler+0xf0>)
 801c0ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801c0f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801c0f2:	f000 f8dd 	bl	801c2b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801c0f6:	4b0f      	ldr	r3, [pc, #60]	; (801c134 <xPortStartScheduler+0xf4>)
 801c0f8:	2200      	movs	r2, #0
 801c0fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801c0fc:	f000 f8fc 	bl	801c2f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801c100:	4b0d      	ldr	r3, [pc, #52]	; (801c138 <xPortStartScheduler+0xf8>)
 801c102:	681b      	ldr	r3, [r3, #0]
 801c104:	4a0c      	ldr	r2, [pc, #48]	; (801c138 <xPortStartScheduler+0xf8>)
 801c106:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801c10a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801c10c:	f7ff ff84 	bl	801c018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801c110:	f7ff f994 	bl	801b43c <vTaskSwitchContext>
	prvTaskExitError();
 801c114:	f7ff ff3a 	bl	801bf8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801c118:	2300      	movs	r3, #0
}
 801c11a:	4618      	mov	r0, r3
 801c11c:	3710      	adds	r7, #16
 801c11e:	46bd      	mov	sp, r7
 801c120:	bd80      	pop	{r7, pc}
 801c122:	bf00      	nop
 801c124:	e000e400 	.word	0xe000e400
 801c128:	20041f58 	.word	0x20041f58
 801c12c:	20041f5c 	.word	0x20041f5c
 801c130:	e000ed20 	.word	0xe000ed20
 801c134:	200000d8 	.word	0x200000d8
 801c138:	e000ef34 	.word	0xe000ef34

0801c13c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801c13c:	b480      	push	{r7}
 801c13e:	b083      	sub	sp, #12
 801c140:	af00      	add	r7, sp, #0
	__asm volatile
 801c142:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c146:	b672      	cpsid	i
 801c148:	f383 8811 	msr	BASEPRI, r3
 801c14c:	f3bf 8f6f 	isb	sy
 801c150:	f3bf 8f4f 	dsb	sy
 801c154:	b662      	cpsie	i
 801c156:	607b      	str	r3, [r7, #4]
}
 801c158:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801c15a:	4b10      	ldr	r3, [pc, #64]	; (801c19c <vPortEnterCritical+0x60>)
 801c15c:	681b      	ldr	r3, [r3, #0]
 801c15e:	3301      	adds	r3, #1
 801c160:	4a0e      	ldr	r2, [pc, #56]	; (801c19c <vPortEnterCritical+0x60>)
 801c162:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801c164:	4b0d      	ldr	r3, [pc, #52]	; (801c19c <vPortEnterCritical+0x60>)
 801c166:	681b      	ldr	r3, [r3, #0]
 801c168:	2b01      	cmp	r3, #1
 801c16a:	d111      	bne.n	801c190 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801c16c:	4b0c      	ldr	r3, [pc, #48]	; (801c1a0 <vPortEnterCritical+0x64>)
 801c16e:	681b      	ldr	r3, [r3, #0]
 801c170:	b2db      	uxtb	r3, r3
 801c172:	2b00      	cmp	r3, #0
 801c174:	d00c      	beq.n	801c190 <vPortEnterCritical+0x54>
	__asm volatile
 801c176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c17a:	b672      	cpsid	i
 801c17c:	f383 8811 	msr	BASEPRI, r3
 801c180:	f3bf 8f6f 	isb	sy
 801c184:	f3bf 8f4f 	dsb	sy
 801c188:	b662      	cpsie	i
 801c18a:	603b      	str	r3, [r7, #0]
}
 801c18c:	bf00      	nop
 801c18e:	e7fe      	b.n	801c18e <vPortEnterCritical+0x52>
	}
}
 801c190:	bf00      	nop
 801c192:	370c      	adds	r7, #12
 801c194:	46bd      	mov	sp, r7
 801c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c19a:	4770      	bx	lr
 801c19c:	200000d8 	.word	0x200000d8
 801c1a0:	e000ed04 	.word	0xe000ed04

0801c1a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801c1a4:	b480      	push	{r7}
 801c1a6:	b083      	sub	sp, #12
 801c1a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801c1aa:	4b13      	ldr	r3, [pc, #76]	; (801c1f8 <vPortExitCritical+0x54>)
 801c1ac:	681b      	ldr	r3, [r3, #0]
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	d10c      	bne.n	801c1cc <vPortExitCritical+0x28>
	__asm volatile
 801c1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c1b6:	b672      	cpsid	i
 801c1b8:	f383 8811 	msr	BASEPRI, r3
 801c1bc:	f3bf 8f6f 	isb	sy
 801c1c0:	f3bf 8f4f 	dsb	sy
 801c1c4:	b662      	cpsie	i
 801c1c6:	607b      	str	r3, [r7, #4]
}
 801c1c8:	bf00      	nop
 801c1ca:	e7fe      	b.n	801c1ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801c1cc:	4b0a      	ldr	r3, [pc, #40]	; (801c1f8 <vPortExitCritical+0x54>)
 801c1ce:	681b      	ldr	r3, [r3, #0]
 801c1d0:	3b01      	subs	r3, #1
 801c1d2:	4a09      	ldr	r2, [pc, #36]	; (801c1f8 <vPortExitCritical+0x54>)
 801c1d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801c1d6:	4b08      	ldr	r3, [pc, #32]	; (801c1f8 <vPortExitCritical+0x54>)
 801c1d8:	681b      	ldr	r3, [r3, #0]
 801c1da:	2b00      	cmp	r3, #0
 801c1dc:	d105      	bne.n	801c1ea <vPortExitCritical+0x46>
 801c1de:	2300      	movs	r3, #0
 801c1e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c1e2:	683b      	ldr	r3, [r7, #0]
 801c1e4:	f383 8811 	msr	BASEPRI, r3
}
 801c1e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801c1ea:	bf00      	nop
 801c1ec:	370c      	adds	r7, #12
 801c1ee:	46bd      	mov	sp, r7
 801c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1f4:	4770      	bx	lr
 801c1f6:	bf00      	nop
 801c1f8:	200000d8 	.word	0x200000d8
 801c1fc:	00000000 	.word	0x00000000

0801c200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801c200:	f3ef 8009 	mrs	r0, PSP
 801c204:	f3bf 8f6f 	isb	sy
 801c208:	4b15      	ldr	r3, [pc, #84]	; (801c260 <pxCurrentTCBConst>)
 801c20a:	681a      	ldr	r2, [r3, #0]
 801c20c:	f01e 0f10 	tst.w	lr, #16
 801c210:	bf08      	it	eq
 801c212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801c216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c21a:	6010      	str	r0, [r2, #0]
 801c21c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801c220:	f04f 0050 	mov.w	r0, #80	; 0x50
 801c224:	b672      	cpsid	i
 801c226:	f380 8811 	msr	BASEPRI, r0
 801c22a:	f3bf 8f4f 	dsb	sy
 801c22e:	f3bf 8f6f 	isb	sy
 801c232:	b662      	cpsie	i
 801c234:	f7ff f902 	bl	801b43c <vTaskSwitchContext>
 801c238:	f04f 0000 	mov.w	r0, #0
 801c23c:	f380 8811 	msr	BASEPRI, r0
 801c240:	bc09      	pop	{r0, r3}
 801c242:	6819      	ldr	r1, [r3, #0]
 801c244:	6808      	ldr	r0, [r1, #0]
 801c246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c24a:	f01e 0f10 	tst.w	lr, #16
 801c24e:	bf08      	it	eq
 801c250:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801c254:	f380 8809 	msr	PSP, r0
 801c258:	f3bf 8f6f 	isb	sy
 801c25c:	4770      	bx	lr
 801c25e:	bf00      	nop

0801c260 <pxCurrentTCBConst>:
 801c260:	20041e2c 	.word	0x20041e2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801c264:	bf00      	nop
 801c266:	bf00      	nop

0801c268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801c268:	b580      	push	{r7, lr}
 801c26a:	b082      	sub	sp, #8
 801c26c:	af00      	add	r7, sp, #0
	__asm volatile
 801c26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c272:	b672      	cpsid	i
 801c274:	f383 8811 	msr	BASEPRI, r3
 801c278:	f3bf 8f6f 	isb	sy
 801c27c:	f3bf 8f4f 	dsb	sy
 801c280:	b662      	cpsie	i
 801c282:	607b      	str	r3, [r7, #4]
}
 801c284:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801c286:	f7ff f81f 	bl	801b2c8 <xTaskIncrementTick>
 801c28a:	4603      	mov	r3, r0
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d003      	beq.n	801c298 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801c290:	4b06      	ldr	r3, [pc, #24]	; (801c2ac <SysTick_Handler+0x44>)
 801c292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c296:	601a      	str	r2, [r3, #0]
 801c298:	2300      	movs	r3, #0
 801c29a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c29c:	683b      	ldr	r3, [r7, #0]
 801c29e:	f383 8811 	msr	BASEPRI, r3
}
 801c2a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801c2a4:	bf00      	nop
 801c2a6:	3708      	adds	r7, #8
 801c2a8:	46bd      	mov	sp, r7
 801c2aa:	bd80      	pop	{r7, pc}
 801c2ac:	e000ed04 	.word	0xe000ed04

0801c2b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801c2b0:	b480      	push	{r7}
 801c2b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801c2b4:	4b0b      	ldr	r3, [pc, #44]	; (801c2e4 <vPortSetupTimerInterrupt+0x34>)
 801c2b6:	2200      	movs	r2, #0
 801c2b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801c2ba:	4b0b      	ldr	r3, [pc, #44]	; (801c2e8 <vPortSetupTimerInterrupt+0x38>)
 801c2bc:	2200      	movs	r2, #0
 801c2be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801c2c0:	4b0a      	ldr	r3, [pc, #40]	; (801c2ec <vPortSetupTimerInterrupt+0x3c>)
 801c2c2:	681b      	ldr	r3, [r3, #0]
 801c2c4:	4a0a      	ldr	r2, [pc, #40]	; (801c2f0 <vPortSetupTimerInterrupt+0x40>)
 801c2c6:	fba2 2303 	umull	r2, r3, r2, r3
 801c2ca:	099b      	lsrs	r3, r3, #6
 801c2cc:	4a09      	ldr	r2, [pc, #36]	; (801c2f4 <vPortSetupTimerInterrupt+0x44>)
 801c2ce:	3b01      	subs	r3, #1
 801c2d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801c2d2:	4b04      	ldr	r3, [pc, #16]	; (801c2e4 <vPortSetupTimerInterrupt+0x34>)
 801c2d4:	2207      	movs	r2, #7
 801c2d6:	601a      	str	r2, [r3, #0]
}
 801c2d8:	bf00      	nop
 801c2da:	46bd      	mov	sp, r7
 801c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2e0:	4770      	bx	lr
 801c2e2:	bf00      	nop
 801c2e4:	e000e010 	.word	0xe000e010
 801c2e8:	e000e018 	.word	0xe000e018
 801c2ec:	20000010 	.word	0x20000010
 801c2f0:	10624dd3 	.word	0x10624dd3
 801c2f4:	e000e014 	.word	0xe000e014

0801c2f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801c2f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801c308 <vPortEnableVFP+0x10>
 801c2fc:	6801      	ldr	r1, [r0, #0]
 801c2fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801c302:	6001      	str	r1, [r0, #0]
 801c304:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801c306:	bf00      	nop
 801c308:	e000ed88 	.word	0xe000ed88

0801c30c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801c30c:	b480      	push	{r7}
 801c30e:	b085      	sub	sp, #20
 801c310:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801c312:	f3ef 8305 	mrs	r3, IPSR
 801c316:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801c318:	68fb      	ldr	r3, [r7, #12]
 801c31a:	2b0f      	cmp	r3, #15
 801c31c:	d916      	bls.n	801c34c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801c31e:	4a19      	ldr	r2, [pc, #100]	; (801c384 <vPortValidateInterruptPriority+0x78>)
 801c320:	68fb      	ldr	r3, [r7, #12]
 801c322:	4413      	add	r3, r2
 801c324:	781b      	ldrb	r3, [r3, #0]
 801c326:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801c328:	4b17      	ldr	r3, [pc, #92]	; (801c388 <vPortValidateInterruptPriority+0x7c>)
 801c32a:	781b      	ldrb	r3, [r3, #0]
 801c32c:	7afa      	ldrb	r2, [r7, #11]
 801c32e:	429a      	cmp	r2, r3
 801c330:	d20c      	bcs.n	801c34c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 801c332:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c336:	b672      	cpsid	i
 801c338:	f383 8811 	msr	BASEPRI, r3
 801c33c:	f3bf 8f6f 	isb	sy
 801c340:	f3bf 8f4f 	dsb	sy
 801c344:	b662      	cpsie	i
 801c346:	607b      	str	r3, [r7, #4]
}
 801c348:	bf00      	nop
 801c34a:	e7fe      	b.n	801c34a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801c34c:	4b0f      	ldr	r3, [pc, #60]	; (801c38c <vPortValidateInterruptPriority+0x80>)
 801c34e:	681b      	ldr	r3, [r3, #0]
 801c350:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801c354:	4b0e      	ldr	r3, [pc, #56]	; (801c390 <vPortValidateInterruptPriority+0x84>)
 801c356:	681b      	ldr	r3, [r3, #0]
 801c358:	429a      	cmp	r2, r3
 801c35a:	d90c      	bls.n	801c376 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801c35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c360:	b672      	cpsid	i
 801c362:	f383 8811 	msr	BASEPRI, r3
 801c366:	f3bf 8f6f 	isb	sy
 801c36a:	f3bf 8f4f 	dsb	sy
 801c36e:	b662      	cpsie	i
 801c370:	603b      	str	r3, [r7, #0]
}
 801c372:	bf00      	nop
 801c374:	e7fe      	b.n	801c374 <vPortValidateInterruptPriority+0x68>
	}
 801c376:	bf00      	nop
 801c378:	3714      	adds	r7, #20
 801c37a:	46bd      	mov	sp, r7
 801c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c380:	4770      	bx	lr
 801c382:	bf00      	nop
 801c384:	e000e3f0 	.word	0xe000e3f0
 801c388:	20041f58 	.word	0x20041f58
 801c38c:	e000ed0c 	.word	0xe000ed0c
 801c390:	20041f5c 	.word	0x20041f5c

0801c394 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801c394:	b580      	push	{r7, lr}
 801c396:	b08a      	sub	sp, #40	; 0x28
 801c398:	af00      	add	r7, sp, #0
 801c39a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801c39c:	2300      	movs	r3, #0
 801c39e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801c3a0:	f7fe fec4 	bl	801b12c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801c3a4:	4b5e      	ldr	r3, [pc, #376]	; (801c520 <pvPortMalloc+0x18c>)
 801c3a6:	681b      	ldr	r3, [r3, #0]
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	d101      	bne.n	801c3b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801c3ac:	f000 f920 	bl	801c5f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801c3b0:	4b5c      	ldr	r3, [pc, #368]	; (801c524 <pvPortMalloc+0x190>)
 801c3b2:	681a      	ldr	r2, [r3, #0]
 801c3b4:	687b      	ldr	r3, [r7, #4]
 801c3b6:	4013      	ands	r3, r2
 801c3b8:	2b00      	cmp	r3, #0
 801c3ba:	f040 8092 	bne.w	801c4e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801c3be:	687b      	ldr	r3, [r7, #4]
 801c3c0:	2b00      	cmp	r3, #0
 801c3c2:	d01f      	beq.n	801c404 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 801c3c4:	2208      	movs	r2, #8
 801c3c6:	687b      	ldr	r3, [r7, #4]
 801c3c8:	4413      	add	r3, r2
 801c3ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801c3cc:	687b      	ldr	r3, [r7, #4]
 801c3ce:	f003 0307 	and.w	r3, r3, #7
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	d016      	beq.n	801c404 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801c3d6:	687b      	ldr	r3, [r7, #4]
 801c3d8:	f023 0307 	bic.w	r3, r3, #7
 801c3dc:	3308      	adds	r3, #8
 801c3de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c3e0:	687b      	ldr	r3, [r7, #4]
 801c3e2:	f003 0307 	and.w	r3, r3, #7
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	d00c      	beq.n	801c404 <pvPortMalloc+0x70>
	__asm volatile
 801c3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c3ee:	b672      	cpsid	i
 801c3f0:	f383 8811 	msr	BASEPRI, r3
 801c3f4:	f3bf 8f6f 	isb	sy
 801c3f8:	f3bf 8f4f 	dsb	sy
 801c3fc:	b662      	cpsie	i
 801c3fe:	617b      	str	r3, [r7, #20]
}
 801c400:	bf00      	nop
 801c402:	e7fe      	b.n	801c402 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	2b00      	cmp	r3, #0
 801c408:	d06b      	beq.n	801c4e2 <pvPortMalloc+0x14e>
 801c40a:	4b47      	ldr	r3, [pc, #284]	; (801c528 <pvPortMalloc+0x194>)
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	687a      	ldr	r2, [r7, #4]
 801c410:	429a      	cmp	r2, r3
 801c412:	d866      	bhi.n	801c4e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801c414:	4b45      	ldr	r3, [pc, #276]	; (801c52c <pvPortMalloc+0x198>)
 801c416:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801c418:	4b44      	ldr	r3, [pc, #272]	; (801c52c <pvPortMalloc+0x198>)
 801c41a:	681b      	ldr	r3, [r3, #0]
 801c41c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c41e:	e004      	b.n	801c42a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 801c420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c422:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801c424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c426:	681b      	ldr	r3, [r3, #0]
 801c428:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c42c:	685b      	ldr	r3, [r3, #4]
 801c42e:	687a      	ldr	r2, [r7, #4]
 801c430:	429a      	cmp	r2, r3
 801c432:	d903      	bls.n	801c43c <pvPortMalloc+0xa8>
 801c434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c436:	681b      	ldr	r3, [r3, #0]
 801c438:	2b00      	cmp	r3, #0
 801c43a:	d1f1      	bne.n	801c420 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801c43c:	4b38      	ldr	r3, [pc, #224]	; (801c520 <pvPortMalloc+0x18c>)
 801c43e:	681b      	ldr	r3, [r3, #0]
 801c440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c442:	429a      	cmp	r2, r3
 801c444:	d04d      	beq.n	801c4e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801c446:	6a3b      	ldr	r3, [r7, #32]
 801c448:	681b      	ldr	r3, [r3, #0]
 801c44a:	2208      	movs	r2, #8
 801c44c:	4413      	add	r3, r2
 801c44e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801c450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c452:	681a      	ldr	r2, [r3, #0]
 801c454:	6a3b      	ldr	r3, [r7, #32]
 801c456:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801c458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c45a:	685a      	ldr	r2, [r3, #4]
 801c45c:	687b      	ldr	r3, [r7, #4]
 801c45e:	1ad2      	subs	r2, r2, r3
 801c460:	2308      	movs	r3, #8
 801c462:	005b      	lsls	r3, r3, #1
 801c464:	429a      	cmp	r2, r3
 801c466:	d921      	bls.n	801c4ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801c468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	4413      	add	r3, r2
 801c46e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c470:	69bb      	ldr	r3, [r7, #24]
 801c472:	f003 0307 	and.w	r3, r3, #7
 801c476:	2b00      	cmp	r3, #0
 801c478:	d00c      	beq.n	801c494 <pvPortMalloc+0x100>
	__asm volatile
 801c47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c47e:	b672      	cpsid	i
 801c480:	f383 8811 	msr	BASEPRI, r3
 801c484:	f3bf 8f6f 	isb	sy
 801c488:	f3bf 8f4f 	dsb	sy
 801c48c:	b662      	cpsie	i
 801c48e:	613b      	str	r3, [r7, #16]
}
 801c490:	bf00      	nop
 801c492:	e7fe      	b.n	801c492 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801c494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c496:	685a      	ldr	r2, [r3, #4]
 801c498:	687b      	ldr	r3, [r7, #4]
 801c49a:	1ad2      	subs	r2, r2, r3
 801c49c:	69bb      	ldr	r3, [r7, #24]
 801c49e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801c4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4a2:	687a      	ldr	r2, [r7, #4]
 801c4a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801c4a6:	69b8      	ldr	r0, [r7, #24]
 801c4a8:	f000 f904 	bl	801c6b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801c4ac:	4b1e      	ldr	r3, [pc, #120]	; (801c528 <pvPortMalloc+0x194>)
 801c4ae:	681a      	ldr	r2, [r3, #0]
 801c4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4b2:	685b      	ldr	r3, [r3, #4]
 801c4b4:	1ad3      	subs	r3, r2, r3
 801c4b6:	4a1c      	ldr	r2, [pc, #112]	; (801c528 <pvPortMalloc+0x194>)
 801c4b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801c4ba:	4b1b      	ldr	r3, [pc, #108]	; (801c528 <pvPortMalloc+0x194>)
 801c4bc:	681a      	ldr	r2, [r3, #0]
 801c4be:	4b1c      	ldr	r3, [pc, #112]	; (801c530 <pvPortMalloc+0x19c>)
 801c4c0:	681b      	ldr	r3, [r3, #0]
 801c4c2:	429a      	cmp	r2, r3
 801c4c4:	d203      	bcs.n	801c4ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801c4c6:	4b18      	ldr	r3, [pc, #96]	; (801c528 <pvPortMalloc+0x194>)
 801c4c8:	681b      	ldr	r3, [r3, #0]
 801c4ca:	4a19      	ldr	r2, [pc, #100]	; (801c530 <pvPortMalloc+0x19c>)
 801c4cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801c4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4d0:	685a      	ldr	r2, [r3, #4]
 801c4d2:	4b14      	ldr	r3, [pc, #80]	; (801c524 <pvPortMalloc+0x190>)
 801c4d4:	681b      	ldr	r3, [r3, #0]
 801c4d6:	431a      	orrs	r2, r3
 801c4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801c4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4de:	2200      	movs	r2, #0
 801c4e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801c4e2:	f7fe fe31 	bl	801b148 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801c4e6:	69fb      	ldr	r3, [r7, #28]
 801c4e8:	2b00      	cmp	r3, #0
 801c4ea:	d101      	bne.n	801c4f0 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801c4ec:	f7e4 fdea 	bl	80010c4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801c4f0:	69fb      	ldr	r3, [r7, #28]
 801c4f2:	f003 0307 	and.w	r3, r3, #7
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	d00c      	beq.n	801c514 <pvPortMalloc+0x180>
	__asm volatile
 801c4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c4fe:	b672      	cpsid	i
 801c500:	f383 8811 	msr	BASEPRI, r3
 801c504:	f3bf 8f6f 	isb	sy
 801c508:	f3bf 8f4f 	dsb	sy
 801c50c:	b662      	cpsie	i
 801c50e:	60fb      	str	r3, [r7, #12]
}
 801c510:	bf00      	nop
 801c512:	e7fe      	b.n	801c512 <pvPortMalloc+0x17e>
	return pvReturn;
 801c514:	69fb      	ldr	r3, [r7, #28]
}
 801c516:	4618      	mov	r0, r3
 801c518:	3728      	adds	r7, #40	; 0x28
 801c51a:	46bd      	mov	sp, r7
 801c51c:	bd80      	pop	{r7, pc}
 801c51e:	bf00      	nop
 801c520:	20049f68 	.word	0x20049f68
 801c524:	20049f74 	.word	0x20049f74
 801c528:	20049f6c 	.word	0x20049f6c
 801c52c:	20049f60 	.word	0x20049f60
 801c530:	20049f70 	.word	0x20049f70

0801c534 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801c534:	b580      	push	{r7, lr}
 801c536:	b086      	sub	sp, #24
 801c538:	af00      	add	r7, sp, #0
 801c53a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801c53c:	687b      	ldr	r3, [r7, #4]
 801c53e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	2b00      	cmp	r3, #0
 801c544:	d04c      	beq.n	801c5e0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801c546:	2308      	movs	r3, #8
 801c548:	425b      	negs	r3, r3
 801c54a:	697a      	ldr	r2, [r7, #20]
 801c54c:	4413      	add	r3, r2
 801c54e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801c550:	697b      	ldr	r3, [r7, #20]
 801c552:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801c554:	693b      	ldr	r3, [r7, #16]
 801c556:	685a      	ldr	r2, [r3, #4]
 801c558:	4b23      	ldr	r3, [pc, #140]	; (801c5e8 <vPortFree+0xb4>)
 801c55a:	681b      	ldr	r3, [r3, #0]
 801c55c:	4013      	ands	r3, r2
 801c55e:	2b00      	cmp	r3, #0
 801c560:	d10c      	bne.n	801c57c <vPortFree+0x48>
	__asm volatile
 801c562:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c566:	b672      	cpsid	i
 801c568:	f383 8811 	msr	BASEPRI, r3
 801c56c:	f3bf 8f6f 	isb	sy
 801c570:	f3bf 8f4f 	dsb	sy
 801c574:	b662      	cpsie	i
 801c576:	60fb      	str	r3, [r7, #12]
}
 801c578:	bf00      	nop
 801c57a:	e7fe      	b.n	801c57a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801c57c:	693b      	ldr	r3, [r7, #16]
 801c57e:	681b      	ldr	r3, [r3, #0]
 801c580:	2b00      	cmp	r3, #0
 801c582:	d00c      	beq.n	801c59e <vPortFree+0x6a>
	__asm volatile
 801c584:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c588:	b672      	cpsid	i
 801c58a:	f383 8811 	msr	BASEPRI, r3
 801c58e:	f3bf 8f6f 	isb	sy
 801c592:	f3bf 8f4f 	dsb	sy
 801c596:	b662      	cpsie	i
 801c598:	60bb      	str	r3, [r7, #8]
}
 801c59a:	bf00      	nop
 801c59c:	e7fe      	b.n	801c59c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801c59e:	693b      	ldr	r3, [r7, #16]
 801c5a0:	685a      	ldr	r2, [r3, #4]
 801c5a2:	4b11      	ldr	r3, [pc, #68]	; (801c5e8 <vPortFree+0xb4>)
 801c5a4:	681b      	ldr	r3, [r3, #0]
 801c5a6:	4013      	ands	r3, r2
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	d019      	beq.n	801c5e0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801c5ac:	693b      	ldr	r3, [r7, #16]
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d115      	bne.n	801c5e0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801c5b4:	693b      	ldr	r3, [r7, #16]
 801c5b6:	685a      	ldr	r2, [r3, #4]
 801c5b8:	4b0b      	ldr	r3, [pc, #44]	; (801c5e8 <vPortFree+0xb4>)
 801c5ba:	681b      	ldr	r3, [r3, #0]
 801c5bc:	43db      	mvns	r3, r3
 801c5be:	401a      	ands	r2, r3
 801c5c0:	693b      	ldr	r3, [r7, #16]
 801c5c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801c5c4:	f7fe fdb2 	bl	801b12c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801c5c8:	693b      	ldr	r3, [r7, #16]
 801c5ca:	685a      	ldr	r2, [r3, #4]
 801c5cc:	4b07      	ldr	r3, [pc, #28]	; (801c5ec <vPortFree+0xb8>)
 801c5ce:	681b      	ldr	r3, [r3, #0]
 801c5d0:	4413      	add	r3, r2
 801c5d2:	4a06      	ldr	r2, [pc, #24]	; (801c5ec <vPortFree+0xb8>)
 801c5d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801c5d6:	6938      	ldr	r0, [r7, #16]
 801c5d8:	f000 f86c 	bl	801c6b4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801c5dc:	f7fe fdb4 	bl	801b148 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801c5e0:	bf00      	nop
 801c5e2:	3718      	adds	r7, #24
 801c5e4:	46bd      	mov	sp, r7
 801c5e6:	bd80      	pop	{r7, pc}
 801c5e8:	20049f74 	.word	0x20049f74
 801c5ec:	20049f6c 	.word	0x20049f6c

0801c5f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801c5f0:	b480      	push	{r7}
 801c5f2:	b085      	sub	sp, #20
 801c5f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801c5f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c5fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801c5fc:	4b27      	ldr	r3, [pc, #156]	; (801c69c <prvHeapInit+0xac>)
 801c5fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801c600:	68fb      	ldr	r3, [r7, #12]
 801c602:	f003 0307 	and.w	r3, r3, #7
 801c606:	2b00      	cmp	r3, #0
 801c608:	d00c      	beq.n	801c624 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801c60a:	68fb      	ldr	r3, [r7, #12]
 801c60c:	3307      	adds	r3, #7
 801c60e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c610:	68fb      	ldr	r3, [r7, #12]
 801c612:	f023 0307 	bic.w	r3, r3, #7
 801c616:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801c618:	68ba      	ldr	r2, [r7, #8]
 801c61a:	68fb      	ldr	r3, [r7, #12]
 801c61c:	1ad3      	subs	r3, r2, r3
 801c61e:	4a1f      	ldr	r2, [pc, #124]	; (801c69c <prvHeapInit+0xac>)
 801c620:	4413      	add	r3, r2
 801c622:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801c624:	68fb      	ldr	r3, [r7, #12]
 801c626:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801c628:	4a1d      	ldr	r2, [pc, #116]	; (801c6a0 <prvHeapInit+0xb0>)
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801c62e:	4b1c      	ldr	r3, [pc, #112]	; (801c6a0 <prvHeapInit+0xb0>)
 801c630:	2200      	movs	r2, #0
 801c632:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801c634:	687b      	ldr	r3, [r7, #4]
 801c636:	68ba      	ldr	r2, [r7, #8]
 801c638:	4413      	add	r3, r2
 801c63a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801c63c:	2208      	movs	r2, #8
 801c63e:	68fb      	ldr	r3, [r7, #12]
 801c640:	1a9b      	subs	r3, r3, r2
 801c642:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c644:	68fb      	ldr	r3, [r7, #12]
 801c646:	f023 0307 	bic.w	r3, r3, #7
 801c64a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801c64c:	68fb      	ldr	r3, [r7, #12]
 801c64e:	4a15      	ldr	r2, [pc, #84]	; (801c6a4 <prvHeapInit+0xb4>)
 801c650:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801c652:	4b14      	ldr	r3, [pc, #80]	; (801c6a4 <prvHeapInit+0xb4>)
 801c654:	681b      	ldr	r3, [r3, #0]
 801c656:	2200      	movs	r2, #0
 801c658:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801c65a:	4b12      	ldr	r3, [pc, #72]	; (801c6a4 <prvHeapInit+0xb4>)
 801c65c:	681b      	ldr	r3, [r3, #0]
 801c65e:	2200      	movs	r2, #0
 801c660:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801c662:	687b      	ldr	r3, [r7, #4]
 801c664:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801c666:	683b      	ldr	r3, [r7, #0]
 801c668:	68fa      	ldr	r2, [r7, #12]
 801c66a:	1ad2      	subs	r2, r2, r3
 801c66c:	683b      	ldr	r3, [r7, #0]
 801c66e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801c670:	4b0c      	ldr	r3, [pc, #48]	; (801c6a4 <prvHeapInit+0xb4>)
 801c672:	681a      	ldr	r2, [r3, #0]
 801c674:	683b      	ldr	r3, [r7, #0]
 801c676:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c678:	683b      	ldr	r3, [r7, #0]
 801c67a:	685b      	ldr	r3, [r3, #4]
 801c67c:	4a0a      	ldr	r2, [pc, #40]	; (801c6a8 <prvHeapInit+0xb8>)
 801c67e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c680:	683b      	ldr	r3, [r7, #0]
 801c682:	685b      	ldr	r3, [r3, #4]
 801c684:	4a09      	ldr	r2, [pc, #36]	; (801c6ac <prvHeapInit+0xbc>)
 801c686:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801c688:	4b09      	ldr	r3, [pc, #36]	; (801c6b0 <prvHeapInit+0xc0>)
 801c68a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801c68e:	601a      	str	r2, [r3, #0]
}
 801c690:	bf00      	nop
 801c692:	3714      	adds	r7, #20
 801c694:	46bd      	mov	sp, r7
 801c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c69a:	4770      	bx	lr
 801c69c:	20041f60 	.word	0x20041f60
 801c6a0:	20049f60 	.word	0x20049f60
 801c6a4:	20049f68 	.word	0x20049f68
 801c6a8:	20049f70 	.word	0x20049f70
 801c6ac:	20049f6c 	.word	0x20049f6c
 801c6b0:	20049f74 	.word	0x20049f74

0801c6b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801c6b4:	b480      	push	{r7}
 801c6b6:	b085      	sub	sp, #20
 801c6b8:	af00      	add	r7, sp, #0
 801c6ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801c6bc:	4b28      	ldr	r3, [pc, #160]	; (801c760 <prvInsertBlockIntoFreeList+0xac>)
 801c6be:	60fb      	str	r3, [r7, #12]
 801c6c0:	e002      	b.n	801c6c8 <prvInsertBlockIntoFreeList+0x14>
 801c6c2:	68fb      	ldr	r3, [r7, #12]
 801c6c4:	681b      	ldr	r3, [r3, #0]
 801c6c6:	60fb      	str	r3, [r7, #12]
 801c6c8:	68fb      	ldr	r3, [r7, #12]
 801c6ca:	681b      	ldr	r3, [r3, #0]
 801c6cc:	687a      	ldr	r2, [r7, #4]
 801c6ce:	429a      	cmp	r2, r3
 801c6d0:	d8f7      	bhi.n	801c6c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801c6d2:	68fb      	ldr	r3, [r7, #12]
 801c6d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801c6d6:	68fb      	ldr	r3, [r7, #12]
 801c6d8:	685b      	ldr	r3, [r3, #4]
 801c6da:	68ba      	ldr	r2, [r7, #8]
 801c6dc:	4413      	add	r3, r2
 801c6de:	687a      	ldr	r2, [r7, #4]
 801c6e0:	429a      	cmp	r2, r3
 801c6e2:	d108      	bne.n	801c6f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801c6e4:	68fb      	ldr	r3, [r7, #12]
 801c6e6:	685a      	ldr	r2, [r3, #4]
 801c6e8:	687b      	ldr	r3, [r7, #4]
 801c6ea:	685b      	ldr	r3, [r3, #4]
 801c6ec:	441a      	add	r2, r3
 801c6ee:	68fb      	ldr	r3, [r7, #12]
 801c6f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801c6f2:	68fb      	ldr	r3, [r7, #12]
 801c6f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801c6fa:	687b      	ldr	r3, [r7, #4]
 801c6fc:	685b      	ldr	r3, [r3, #4]
 801c6fe:	68ba      	ldr	r2, [r7, #8]
 801c700:	441a      	add	r2, r3
 801c702:	68fb      	ldr	r3, [r7, #12]
 801c704:	681b      	ldr	r3, [r3, #0]
 801c706:	429a      	cmp	r2, r3
 801c708:	d118      	bne.n	801c73c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801c70a:	68fb      	ldr	r3, [r7, #12]
 801c70c:	681a      	ldr	r2, [r3, #0]
 801c70e:	4b15      	ldr	r3, [pc, #84]	; (801c764 <prvInsertBlockIntoFreeList+0xb0>)
 801c710:	681b      	ldr	r3, [r3, #0]
 801c712:	429a      	cmp	r2, r3
 801c714:	d00d      	beq.n	801c732 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801c716:	687b      	ldr	r3, [r7, #4]
 801c718:	685a      	ldr	r2, [r3, #4]
 801c71a:	68fb      	ldr	r3, [r7, #12]
 801c71c:	681b      	ldr	r3, [r3, #0]
 801c71e:	685b      	ldr	r3, [r3, #4]
 801c720:	441a      	add	r2, r3
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801c726:	68fb      	ldr	r3, [r7, #12]
 801c728:	681b      	ldr	r3, [r3, #0]
 801c72a:	681a      	ldr	r2, [r3, #0]
 801c72c:	687b      	ldr	r3, [r7, #4]
 801c72e:	601a      	str	r2, [r3, #0]
 801c730:	e008      	b.n	801c744 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801c732:	4b0c      	ldr	r3, [pc, #48]	; (801c764 <prvInsertBlockIntoFreeList+0xb0>)
 801c734:	681a      	ldr	r2, [r3, #0]
 801c736:	687b      	ldr	r3, [r7, #4]
 801c738:	601a      	str	r2, [r3, #0]
 801c73a:	e003      	b.n	801c744 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801c73c:	68fb      	ldr	r3, [r7, #12]
 801c73e:	681a      	ldr	r2, [r3, #0]
 801c740:	687b      	ldr	r3, [r7, #4]
 801c742:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801c744:	68fa      	ldr	r2, [r7, #12]
 801c746:	687b      	ldr	r3, [r7, #4]
 801c748:	429a      	cmp	r2, r3
 801c74a:	d002      	beq.n	801c752 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801c74c:	68fb      	ldr	r3, [r7, #12]
 801c74e:	687a      	ldr	r2, [r7, #4]
 801c750:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801c752:	bf00      	nop
 801c754:	3714      	adds	r7, #20
 801c756:	46bd      	mov	sp, r7
 801c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c75c:	4770      	bx	lr
 801c75e:	bf00      	nop
 801c760:	20049f60 	.word	0x20049f60
 801c764:	20049f68 	.word	0x20049f68

0801c768 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801c768:	b580      	push	{r7, lr}
 801c76a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801c76c:	2201      	movs	r2, #1
 801c76e:	4912      	ldr	r1, [pc, #72]	; (801c7b8 <MX_USB_DEVICE_Init+0x50>)
 801c770:	4812      	ldr	r0, [pc, #72]	; (801c7bc <MX_USB_DEVICE_Init+0x54>)
 801c772:	f7f9 fca7 	bl	80160c4 <USBD_Init>
 801c776:	4603      	mov	r3, r0
 801c778:	2b00      	cmp	r3, #0
 801c77a:	d001      	beq.n	801c780 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801c77c:	f7e6 f88a 	bl	8002894 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 801c780:	490f      	ldr	r1, [pc, #60]	; (801c7c0 <MX_USB_DEVICE_Init+0x58>)
 801c782:	480e      	ldr	r0, [pc, #56]	; (801c7bc <MX_USB_DEVICE_Init+0x54>)
 801c784:	f7f9 fcce 	bl	8016124 <USBD_RegisterClass>
 801c788:	4603      	mov	r3, r0
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	d001      	beq.n	801c792 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801c78e:	f7e6 f881 	bl	8002894 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801c792:	490c      	ldr	r1, [pc, #48]	; (801c7c4 <MX_USB_DEVICE_Init+0x5c>)
 801c794:	4809      	ldr	r0, [pc, #36]	; (801c7bc <MX_USB_DEVICE_Init+0x54>)
 801c796:	f7f9 fbc5 	bl	8015f24 <USBD_CDC_RegisterInterface>
 801c79a:	4603      	mov	r3, r0
 801c79c:	2b00      	cmp	r3, #0
 801c79e:	d001      	beq.n	801c7a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801c7a0:	f7e6 f878 	bl	8002894 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801c7a4:	4805      	ldr	r0, [pc, #20]	; (801c7bc <MX_USB_DEVICE_Init+0x54>)
 801c7a6:	f7f9 fcf3 	bl	8016190 <USBD_Start>
 801c7aa:	4603      	mov	r3, r0
 801c7ac:	2b00      	cmp	r3, #0
 801c7ae:	d001      	beq.n	801c7b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801c7b0:	f7e6 f870 	bl	8002894 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801c7b4:	bf00      	nop
 801c7b6:	bd80      	pop	{r7, pc}
 801c7b8:	200000f0 	.word	0x200000f0
 801c7bc:	20049f78 	.word	0x20049f78
 801c7c0:	20000038 	.word	0x20000038
 801c7c4:	200000dc 	.word	0x200000dc

0801c7c8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801c7c8:	b580      	push	{r7, lr}
 801c7ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801c7cc:	2200      	movs	r2, #0
 801c7ce:	4905      	ldr	r1, [pc, #20]	; (801c7e4 <CDC_Init_HS+0x1c>)
 801c7d0:	4805      	ldr	r0, [pc, #20]	; (801c7e8 <CDC_Init_HS+0x20>)
 801c7d2:	f7f9 fbc1 	bl	8015f58 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801c7d6:	4905      	ldr	r1, [pc, #20]	; (801c7ec <CDC_Init_HS+0x24>)
 801c7d8:	4803      	ldr	r0, [pc, #12]	; (801c7e8 <CDC_Init_HS+0x20>)
 801c7da:	f7f9 fbdf 	bl	8015f9c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801c7de:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801c7e0:	4618      	mov	r0, r3
 801c7e2:	bd80      	pop	{r7, pc}
 801c7e4:	2004aa54 	.word	0x2004aa54
 801c7e8:	20049f78 	.word	0x20049f78
 801c7ec:	2004a254 	.word	0x2004a254

0801c7f0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801c7f0:	b480      	push	{r7}
 801c7f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 801c7f4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801c7f6:	4618      	mov	r0, r3
 801c7f8:	46bd      	mov	sp, r7
 801c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7fe:	4770      	bx	lr

0801c800 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801c800:	b480      	push	{r7}
 801c802:	b083      	sub	sp, #12
 801c804:	af00      	add	r7, sp, #0
 801c806:	4603      	mov	r3, r0
 801c808:	6039      	str	r1, [r7, #0]
 801c80a:	71fb      	strb	r3, [r7, #7]
 801c80c:	4613      	mov	r3, r2
 801c80e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801c810:	79fb      	ldrb	r3, [r7, #7]
 801c812:	2b23      	cmp	r3, #35	; 0x23
 801c814:	d84a      	bhi.n	801c8ac <CDC_Control_HS+0xac>
 801c816:	a201      	add	r2, pc, #4	; (adr r2, 801c81c <CDC_Control_HS+0x1c>)
 801c818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c81c:	0801c8ad 	.word	0x0801c8ad
 801c820:	0801c8ad 	.word	0x0801c8ad
 801c824:	0801c8ad 	.word	0x0801c8ad
 801c828:	0801c8ad 	.word	0x0801c8ad
 801c82c:	0801c8ad 	.word	0x0801c8ad
 801c830:	0801c8ad 	.word	0x0801c8ad
 801c834:	0801c8ad 	.word	0x0801c8ad
 801c838:	0801c8ad 	.word	0x0801c8ad
 801c83c:	0801c8ad 	.word	0x0801c8ad
 801c840:	0801c8ad 	.word	0x0801c8ad
 801c844:	0801c8ad 	.word	0x0801c8ad
 801c848:	0801c8ad 	.word	0x0801c8ad
 801c84c:	0801c8ad 	.word	0x0801c8ad
 801c850:	0801c8ad 	.word	0x0801c8ad
 801c854:	0801c8ad 	.word	0x0801c8ad
 801c858:	0801c8ad 	.word	0x0801c8ad
 801c85c:	0801c8ad 	.word	0x0801c8ad
 801c860:	0801c8ad 	.word	0x0801c8ad
 801c864:	0801c8ad 	.word	0x0801c8ad
 801c868:	0801c8ad 	.word	0x0801c8ad
 801c86c:	0801c8ad 	.word	0x0801c8ad
 801c870:	0801c8ad 	.word	0x0801c8ad
 801c874:	0801c8ad 	.word	0x0801c8ad
 801c878:	0801c8ad 	.word	0x0801c8ad
 801c87c:	0801c8ad 	.word	0x0801c8ad
 801c880:	0801c8ad 	.word	0x0801c8ad
 801c884:	0801c8ad 	.word	0x0801c8ad
 801c888:	0801c8ad 	.word	0x0801c8ad
 801c88c:	0801c8ad 	.word	0x0801c8ad
 801c890:	0801c8ad 	.word	0x0801c8ad
 801c894:	0801c8ad 	.word	0x0801c8ad
 801c898:	0801c8ad 	.word	0x0801c8ad
 801c89c:	0801c8ad 	.word	0x0801c8ad
 801c8a0:	0801c8ad 	.word	0x0801c8ad
 801c8a4:	0801c8ad 	.word	0x0801c8ad
 801c8a8:	0801c8ad 	.word	0x0801c8ad
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801c8ac:	bf00      	nop
  }

  return (USBD_OK);
 801c8ae:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801c8b0:	4618      	mov	r0, r3
 801c8b2:	370c      	adds	r7, #12
 801c8b4:	46bd      	mov	sp, r7
 801c8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8ba:	4770      	bx	lr

0801c8bc <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801c8bc:	b580      	push	{r7, lr}
 801c8be:	b082      	sub	sp, #8
 801c8c0:	af00      	add	r7, sp, #0
 801c8c2:	6078      	str	r0, [r7, #4]
 801c8c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801c8c6:	6879      	ldr	r1, [r7, #4]
 801c8c8:	4805      	ldr	r0, [pc, #20]	; (801c8e0 <CDC_Receive_HS+0x24>)
 801c8ca:	f7f9 fb67 	bl	8015f9c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801c8ce:	4804      	ldr	r0, [pc, #16]	; (801c8e0 <CDC_Receive_HS+0x24>)
 801c8d0:	f7f9 fbc2 	bl	8016058 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801c8d4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801c8d6:	4618      	mov	r0, r3
 801c8d8:	3708      	adds	r7, #8
 801c8da:	46bd      	mov	sp, r7
 801c8dc:	bd80      	pop	{r7, pc}
 801c8de:	bf00      	nop
 801c8e0:	20049f78 	.word	0x20049f78

0801c8e4 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 801c8e4:	b580      	push	{r7, lr}
 801c8e6:	b084      	sub	sp, #16
 801c8e8:	af00      	add	r7, sp, #0
 801c8ea:	6078      	str	r0, [r7, #4]
 801c8ec:	460b      	mov	r3, r1
 801c8ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801c8f0:	2300      	movs	r3, #0
 801c8f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 801c8f4:	4b0d      	ldr	r3, [pc, #52]	; (801c92c <CDC_Transmit_HS+0x48>)
 801c8f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c8fa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801c8fc:	68bb      	ldr	r3, [r7, #8]
 801c8fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801c902:	2b00      	cmp	r3, #0
 801c904:	d001      	beq.n	801c90a <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801c906:	2301      	movs	r3, #1
 801c908:	e00b      	b.n	801c922 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801c90a:	887b      	ldrh	r3, [r7, #2]
 801c90c:	461a      	mov	r2, r3
 801c90e:	6879      	ldr	r1, [r7, #4]
 801c910:	4806      	ldr	r0, [pc, #24]	; (801c92c <CDC_Transmit_HS+0x48>)
 801c912:	f7f9 fb21 	bl	8015f58 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801c916:	4805      	ldr	r0, [pc, #20]	; (801c92c <CDC_Transmit_HS+0x48>)
 801c918:	f7f9 fb5e 	bl	8015fd8 <USBD_CDC_TransmitPacket>
 801c91c:	4603      	mov	r3, r0
 801c91e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801c920:	7bfb      	ldrb	r3, [r7, #15]
}
 801c922:	4618      	mov	r0, r3
 801c924:	3710      	adds	r7, #16
 801c926:	46bd      	mov	sp, r7
 801c928:	bd80      	pop	{r7, pc}
 801c92a:	bf00      	nop
 801c92c:	20049f78 	.word	0x20049f78

0801c930 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801c930:	b480      	push	{r7}
 801c932:	b087      	sub	sp, #28
 801c934:	af00      	add	r7, sp, #0
 801c936:	60f8      	str	r0, [r7, #12]
 801c938:	60b9      	str	r1, [r7, #8]
 801c93a:	4613      	mov	r3, r2
 801c93c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801c93e:	2300      	movs	r3, #0
 801c940:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801c942:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c946:	4618      	mov	r0, r3
 801c948:	371c      	adds	r7, #28
 801c94a:	46bd      	mov	sp, r7
 801c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c950:	4770      	bx	lr
	...

0801c954 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c954:	b480      	push	{r7}
 801c956:	b083      	sub	sp, #12
 801c958:	af00      	add	r7, sp, #0
 801c95a:	4603      	mov	r3, r0
 801c95c:	6039      	str	r1, [r7, #0]
 801c95e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801c960:	683b      	ldr	r3, [r7, #0]
 801c962:	2212      	movs	r2, #18
 801c964:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801c966:	4b03      	ldr	r3, [pc, #12]	; (801c974 <USBD_HS_DeviceDescriptor+0x20>)
}
 801c968:	4618      	mov	r0, r3
 801c96a:	370c      	adds	r7, #12
 801c96c:	46bd      	mov	sp, r7
 801c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c972:	4770      	bx	lr
 801c974:	20000110 	.word	0x20000110

0801c978 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c978:	b480      	push	{r7}
 801c97a:	b083      	sub	sp, #12
 801c97c:	af00      	add	r7, sp, #0
 801c97e:	4603      	mov	r3, r0
 801c980:	6039      	str	r1, [r7, #0]
 801c982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801c984:	683b      	ldr	r3, [r7, #0]
 801c986:	2204      	movs	r2, #4
 801c988:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801c98a:	4b03      	ldr	r3, [pc, #12]	; (801c998 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801c98c:	4618      	mov	r0, r3
 801c98e:	370c      	adds	r7, #12
 801c990:	46bd      	mov	sp, r7
 801c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c996:	4770      	bx	lr
 801c998:	20000130 	.word	0x20000130

0801c99c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c99c:	b580      	push	{r7, lr}
 801c99e:	b082      	sub	sp, #8
 801c9a0:	af00      	add	r7, sp, #0
 801c9a2:	4603      	mov	r3, r0
 801c9a4:	6039      	str	r1, [r7, #0]
 801c9a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801c9a8:	79fb      	ldrb	r3, [r7, #7]
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	d105      	bne.n	801c9ba <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801c9ae:	683a      	ldr	r2, [r7, #0]
 801c9b0:	4907      	ldr	r1, [pc, #28]	; (801c9d0 <USBD_HS_ProductStrDescriptor+0x34>)
 801c9b2:	4808      	ldr	r0, [pc, #32]	; (801c9d4 <USBD_HS_ProductStrDescriptor+0x38>)
 801c9b4:	f7fa fdc2 	bl	801753c <USBD_GetString>
 801c9b8:	e004      	b.n	801c9c4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801c9ba:	683a      	ldr	r2, [r7, #0]
 801c9bc:	4904      	ldr	r1, [pc, #16]	; (801c9d0 <USBD_HS_ProductStrDescriptor+0x34>)
 801c9be:	4805      	ldr	r0, [pc, #20]	; (801c9d4 <USBD_HS_ProductStrDescriptor+0x38>)
 801c9c0:	f7fa fdbc 	bl	801753c <USBD_GetString>
  }
  return USBD_StrDesc;
 801c9c4:	4b02      	ldr	r3, [pc, #8]	; (801c9d0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801c9c6:	4618      	mov	r0, r3
 801c9c8:	3708      	adds	r7, #8
 801c9ca:	46bd      	mov	sp, r7
 801c9cc:	bd80      	pop	{r7, pc}
 801c9ce:	bf00      	nop
 801c9d0:	2004b254 	.word	0x2004b254
 801c9d4:	0801f034 	.word	0x0801f034

0801c9d8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c9d8:	b580      	push	{r7, lr}
 801c9da:	b082      	sub	sp, #8
 801c9dc:	af00      	add	r7, sp, #0
 801c9de:	4603      	mov	r3, r0
 801c9e0:	6039      	str	r1, [r7, #0]
 801c9e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801c9e4:	683a      	ldr	r2, [r7, #0]
 801c9e6:	4904      	ldr	r1, [pc, #16]	; (801c9f8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 801c9e8:	4804      	ldr	r0, [pc, #16]	; (801c9fc <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801c9ea:	f7fa fda7 	bl	801753c <USBD_GetString>
  return USBD_StrDesc;
 801c9ee:	4b02      	ldr	r3, [pc, #8]	; (801c9f8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801c9f0:	4618      	mov	r0, r3
 801c9f2:	3708      	adds	r7, #8
 801c9f4:	46bd      	mov	sp, r7
 801c9f6:	bd80      	pop	{r7, pc}
 801c9f8:	2004b254 	.word	0x2004b254
 801c9fc:	0801f04c 	.word	0x0801f04c

0801ca00 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ca00:	b580      	push	{r7, lr}
 801ca02:	b082      	sub	sp, #8
 801ca04:	af00      	add	r7, sp, #0
 801ca06:	4603      	mov	r3, r0
 801ca08:	6039      	str	r1, [r7, #0]
 801ca0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801ca0c:	683b      	ldr	r3, [r7, #0]
 801ca0e:	221a      	movs	r2, #26
 801ca10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801ca12:	f000 f855 	bl	801cac0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801ca16:	4b02      	ldr	r3, [pc, #8]	; (801ca20 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801ca18:	4618      	mov	r0, r3
 801ca1a:	3708      	adds	r7, #8
 801ca1c:	46bd      	mov	sp, r7
 801ca1e:	bd80      	pop	{r7, pc}
 801ca20:	20000134 	.word	0x20000134

0801ca24 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ca24:	b580      	push	{r7, lr}
 801ca26:	b082      	sub	sp, #8
 801ca28:	af00      	add	r7, sp, #0
 801ca2a:	4603      	mov	r3, r0
 801ca2c:	6039      	str	r1, [r7, #0]
 801ca2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801ca30:	79fb      	ldrb	r3, [r7, #7]
 801ca32:	2b00      	cmp	r3, #0
 801ca34:	d105      	bne.n	801ca42 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801ca36:	683a      	ldr	r2, [r7, #0]
 801ca38:	4907      	ldr	r1, [pc, #28]	; (801ca58 <USBD_HS_ConfigStrDescriptor+0x34>)
 801ca3a:	4808      	ldr	r0, [pc, #32]	; (801ca5c <USBD_HS_ConfigStrDescriptor+0x38>)
 801ca3c:	f7fa fd7e 	bl	801753c <USBD_GetString>
 801ca40:	e004      	b.n	801ca4c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801ca42:	683a      	ldr	r2, [r7, #0]
 801ca44:	4904      	ldr	r1, [pc, #16]	; (801ca58 <USBD_HS_ConfigStrDescriptor+0x34>)
 801ca46:	4805      	ldr	r0, [pc, #20]	; (801ca5c <USBD_HS_ConfigStrDescriptor+0x38>)
 801ca48:	f7fa fd78 	bl	801753c <USBD_GetString>
  }
  return USBD_StrDesc;
 801ca4c:	4b02      	ldr	r3, [pc, #8]	; (801ca58 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801ca4e:	4618      	mov	r0, r3
 801ca50:	3708      	adds	r7, #8
 801ca52:	46bd      	mov	sp, r7
 801ca54:	bd80      	pop	{r7, pc}
 801ca56:	bf00      	nop
 801ca58:	2004b254 	.word	0x2004b254
 801ca5c:	0801f060 	.word	0x0801f060

0801ca60 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ca60:	b580      	push	{r7, lr}
 801ca62:	b082      	sub	sp, #8
 801ca64:	af00      	add	r7, sp, #0
 801ca66:	4603      	mov	r3, r0
 801ca68:	6039      	str	r1, [r7, #0]
 801ca6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801ca6c:	79fb      	ldrb	r3, [r7, #7]
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d105      	bne.n	801ca7e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801ca72:	683a      	ldr	r2, [r7, #0]
 801ca74:	4907      	ldr	r1, [pc, #28]	; (801ca94 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801ca76:	4808      	ldr	r0, [pc, #32]	; (801ca98 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801ca78:	f7fa fd60 	bl	801753c <USBD_GetString>
 801ca7c:	e004      	b.n	801ca88 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801ca7e:	683a      	ldr	r2, [r7, #0]
 801ca80:	4904      	ldr	r1, [pc, #16]	; (801ca94 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801ca82:	4805      	ldr	r0, [pc, #20]	; (801ca98 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801ca84:	f7fa fd5a 	bl	801753c <USBD_GetString>
  }
  return USBD_StrDesc;
 801ca88:	4b02      	ldr	r3, [pc, #8]	; (801ca94 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801ca8a:	4618      	mov	r0, r3
 801ca8c:	3708      	adds	r7, #8
 801ca8e:	46bd      	mov	sp, r7
 801ca90:	bd80      	pop	{r7, pc}
 801ca92:	bf00      	nop
 801ca94:	2004b254 	.word	0x2004b254
 801ca98:	0801f06c 	.word	0x0801f06c

0801ca9c <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ca9c:	b480      	push	{r7}
 801ca9e:	b083      	sub	sp, #12
 801caa0:	af00      	add	r7, sp, #0
 801caa2:	4603      	mov	r3, r0
 801caa4:	6039      	str	r1, [r7, #0]
 801caa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 801caa8:	683b      	ldr	r3, [r7, #0]
 801caaa:	220c      	movs	r2, #12
 801caac:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 801caae:	4b03      	ldr	r3, [pc, #12]	; (801cabc <USBD_HS_USR_BOSDescriptor+0x20>)
}
 801cab0:	4618      	mov	r0, r3
 801cab2:	370c      	adds	r7, #12
 801cab4:	46bd      	mov	sp, r7
 801cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801caba:	4770      	bx	lr
 801cabc:	20000124 	.word	0x20000124

0801cac0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801cac0:	b580      	push	{r7, lr}
 801cac2:	b084      	sub	sp, #16
 801cac4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801cac6:	4b0f      	ldr	r3, [pc, #60]	; (801cb04 <Get_SerialNum+0x44>)
 801cac8:	681b      	ldr	r3, [r3, #0]
 801caca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801cacc:	4b0e      	ldr	r3, [pc, #56]	; (801cb08 <Get_SerialNum+0x48>)
 801cace:	681b      	ldr	r3, [r3, #0]
 801cad0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801cad2:	4b0e      	ldr	r3, [pc, #56]	; (801cb0c <Get_SerialNum+0x4c>)
 801cad4:	681b      	ldr	r3, [r3, #0]
 801cad6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801cad8:	68fa      	ldr	r2, [r7, #12]
 801cada:	687b      	ldr	r3, [r7, #4]
 801cadc:	4413      	add	r3, r2
 801cade:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801cae0:	68fb      	ldr	r3, [r7, #12]
 801cae2:	2b00      	cmp	r3, #0
 801cae4:	d009      	beq.n	801cafa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801cae6:	2208      	movs	r2, #8
 801cae8:	4909      	ldr	r1, [pc, #36]	; (801cb10 <Get_SerialNum+0x50>)
 801caea:	68f8      	ldr	r0, [r7, #12]
 801caec:	f000 f814 	bl	801cb18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801caf0:	2204      	movs	r2, #4
 801caf2:	4908      	ldr	r1, [pc, #32]	; (801cb14 <Get_SerialNum+0x54>)
 801caf4:	68b8      	ldr	r0, [r7, #8]
 801caf6:	f000 f80f 	bl	801cb18 <IntToUnicode>
  }
}
 801cafa:	bf00      	nop
 801cafc:	3710      	adds	r7, #16
 801cafe:	46bd      	mov	sp, r7
 801cb00:	bd80      	pop	{r7, pc}
 801cb02:	bf00      	nop
 801cb04:	1ff0f420 	.word	0x1ff0f420
 801cb08:	1ff0f424 	.word	0x1ff0f424
 801cb0c:	1ff0f428 	.word	0x1ff0f428
 801cb10:	20000136 	.word	0x20000136
 801cb14:	20000146 	.word	0x20000146

0801cb18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801cb18:	b480      	push	{r7}
 801cb1a:	b087      	sub	sp, #28
 801cb1c:	af00      	add	r7, sp, #0
 801cb1e:	60f8      	str	r0, [r7, #12]
 801cb20:	60b9      	str	r1, [r7, #8]
 801cb22:	4613      	mov	r3, r2
 801cb24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801cb26:	2300      	movs	r3, #0
 801cb28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801cb2a:	2300      	movs	r3, #0
 801cb2c:	75fb      	strb	r3, [r7, #23]
 801cb2e:	e027      	b.n	801cb80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801cb30:	68fb      	ldr	r3, [r7, #12]
 801cb32:	0f1b      	lsrs	r3, r3, #28
 801cb34:	2b09      	cmp	r3, #9
 801cb36:	d80b      	bhi.n	801cb50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801cb38:	68fb      	ldr	r3, [r7, #12]
 801cb3a:	0f1b      	lsrs	r3, r3, #28
 801cb3c:	b2da      	uxtb	r2, r3
 801cb3e:	7dfb      	ldrb	r3, [r7, #23]
 801cb40:	005b      	lsls	r3, r3, #1
 801cb42:	4619      	mov	r1, r3
 801cb44:	68bb      	ldr	r3, [r7, #8]
 801cb46:	440b      	add	r3, r1
 801cb48:	3230      	adds	r2, #48	; 0x30
 801cb4a:	b2d2      	uxtb	r2, r2
 801cb4c:	701a      	strb	r2, [r3, #0]
 801cb4e:	e00a      	b.n	801cb66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801cb50:	68fb      	ldr	r3, [r7, #12]
 801cb52:	0f1b      	lsrs	r3, r3, #28
 801cb54:	b2da      	uxtb	r2, r3
 801cb56:	7dfb      	ldrb	r3, [r7, #23]
 801cb58:	005b      	lsls	r3, r3, #1
 801cb5a:	4619      	mov	r1, r3
 801cb5c:	68bb      	ldr	r3, [r7, #8]
 801cb5e:	440b      	add	r3, r1
 801cb60:	3237      	adds	r2, #55	; 0x37
 801cb62:	b2d2      	uxtb	r2, r2
 801cb64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801cb66:	68fb      	ldr	r3, [r7, #12]
 801cb68:	011b      	lsls	r3, r3, #4
 801cb6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801cb6c:	7dfb      	ldrb	r3, [r7, #23]
 801cb6e:	005b      	lsls	r3, r3, #1
 801cb70:	3301      	adds	r3, #1
 801cb72:	68ba      	ldr	r2, [r7, #8]
 801cb74:	4413      	add	r3, r2
 801cb76:	2200      	movs	r2, #0
 801cb78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801cb7a:	7dfb      	ldrb	r3, [r7, #23]
 801cb7c:	3301      	adds	r3, #1
 801cb7e:	75fb      	strb	r3, [r7, #23]
 801cb80:	7dfa      	ldrb	r2, [r7, #23]
 801cb82:	79fb      	ldrb	r3, [r7, #7]
 801cb84:	429a      	cmp	r2, r3
 801cb86:	d3d3      	bcc.n	801cb30 <IntToUnicode+0x18>
  }
}
 801cb88:	bf00      	nop
 801cb8a:	bf00      	nop
 801cb8c:	371c      	adds	r7, #28
 801cb8e:	46bd      	mov	sp, r7
 801cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb94:	4770      	bx	lr
	...

0801cb98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801cb98:	b580      	push	{r7, lr}
 801cb9a:	b08e      	sub	sp, #56	; 0x38
 801cb9c:	af00      	add	r7, sp, #0
 801cb9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801cba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cba4:	2200      	movs	r2, #0
 801cba6:	601a      	str	r2, [r3, #0]
 801cba8:	605a      	str	r2, [r3, #4]
 801cbaa:	609a      	str	r2, [r3, #8]
 801cbac:	60da      	str	r2, [r3, #12]
 801cbae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 801cbb0:	687b      	ldr	r3, [r7, #4]
 801cbb2:	681b      	ldr	r3, [r3, #0]
 801cbb4:	4a4c      	ldr	r2, [pc, #304]	; (801cce8 <HAL_PCD_MspInit+0x150>)
 801cbb6:	4293      	cmp	r3, r2
 801cbb8:	f040 8091 	bne.w	801ccde <HAL_PCD_MspInit+0x146>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801cbbc:	4b4b      	ldr	r3, [pc, #300]	; (801ccec <HAL_PCD_MspInit+0x154>)
 801cbbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cbc0:	4a4a      	ldr	r2, [pc, #296]	; (801ccec <HAL_PCD_MspInit+0x154>)
 801cbc2:	f043 0302 	orr.w	r3, r3, #2
 801cbc6:	6313      	str	r3, [r2, #48]	; 0x30
 801cbc8:	4b48      	ldr	r3, [pc, #288]	; (801ccec <HAL_PCD_MspInit+0x154>)
 801cbca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cbcc:	f003 0302 	and.w	r3, r3, #2
 801cbd0:	623b      	str	r3, [r7, #32]
 801cbd2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 801cbd4:	4b45      	ldr	r3, [pc, #276]	; (801ccec <HAL_PCD_MspInit+0x154>)
 801cbd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cbd8:	4a44      	ldr	r2, [pc, #272]	; (801ccec <HAL_PCD_MspInit+0x154>)
 801cbda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cbde:	6313      	str	r3, [r2, #48]	; 0x30
 801cbe0:	4b42      	ldr	r3, [pc, #264]	; (801ccec <HAL_PCD_MspInit+0x154>)
 801cbe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cbe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cbe8:	61fb      	str	r3, [r7, #28]
 801cbea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801cbec:	4b3f      	ldr	r3, [pc, #252]	; (801ccec <HAL_PCD_MspInit+0x154>)
 801cbee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cbf0:	4a3e      	ldr	r2, [pc, #248]	; (801ccec <HAL_PCD_MspInit+0x154>)
 801cbf2:	f043 0304 	orr.w	r3, r3, #4
 801cbf6:	6313      	str	r3, [r2, #48]	; 0x30
 801cbf8:	4b3c      	ldr	r3, [pc, #240]	; (801ccec <HAL_PCD_MspInit+0x154>)
 801cbfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cbfc:	f003 0304 	and.w	r3, r3, #4
 801cc00:	61bb      	str	r3, [r7, #24]
 801cc02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801cc04:	4b39      	ldr	r3, [pc, #228]	; (801ccec <HAL_PCD_MspInit+0x154>)
 801cc06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc08:	4a38      	ldr	r2, [pc, #224]	; (801ccec <HAL_PCD_MspInit+0x154>)
 801cc0a:	f043 0301 	orr.w	r3, r3, #1
 801cc0e:	6313      	str	r3, [r2, #48]	; 0x30
 801cc10:	4b36      	ldr	r3, [pc, #216]	; (801ccec <HAL_PCD_MspInit+0x154>)
 801cc12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc14:	f003 0301 	and.w	r3, r3, #1
 801cc18:	617b      	str	r3, [r7, #20]
 801cc1a:	697b      	ldr	r3, [r7, #20]
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB1     ------> USB_OTG_HS_ULPI_D2
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 801cc1c:	f643 4323 	movw	r3, #15395	; 0x3c23
 801cc20:	627b      	str	r3, [r7, #36]	; 0x24
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cc22:	2302      	movs	r3, #2
 801cc24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cc26:	2300      	movs	r3, #0
 801cc28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cc2a:	2303      	movs	r3, #3
 801cc2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801cc2e:	230a      	movs	r3, #10
 801cc30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801cc32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cc36:	4619      	mov	r1, r3
 801cc38:	482d      	ldr	r0, [pc, #180]	; (801ccf0 <HAL_PCD_MspInit+0x158>)
 801cc3a:	f7ea fd27 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 801cc3e:	2310      	movs	r3, #16
 801cc40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cc42:	2302      	movs	r3, #2
 801cc44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cc46:	2300      	movs	r3, #0
 801cc48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cc4a:	2303      	movs	r3, #3
 801cc4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801cc4e:	230a      	movs	r3, #10
 801cc50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 801cc52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cc56:	4619      	mov	r1, r3
 801cc58:	4826      	ldr	r0, [pc, #152]	; (801ccf4 <HAL_PCD_MspInit+0x15c>)
 801cc5a:	f7ea fd17 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 801cc5e:	2305      	movs	r3, #5
 801cc60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cc62:	2302      	movs	r3, #2
 801cc64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cc66:	2300      	movs	r3, #0
 801cc68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cc6a:	2303      	movs	r3, #3
 801cc6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801cc6e:	230a      	movs	r3, #10
 801cc70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801cc72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cc76:	4619      	mov	r1, r3
 801cc78:	481f      	ldr	r0, [pc, #124]	; (801ccf8 <HAL_PCD_MspInit+0x160>)
 801cc7a:	f7ea fd07 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 801cc7e:	2328      	movs	r3, #40	; 0x28
 801cc80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cc82:	2302      	movs	r3, #2
 801cc84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cc86:	2300      	movs	r3, #0
 801cc88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cc8a:	2303      	movs	r3, #3
 801cc8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801cc8e:	230a      	movs	r3, #10
 801cc90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801cc92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cc96:	4619      	mov	r1, r3
 801cc98:	4818      	ldr	r0, [pc, #96]	; (801ccfc <HAL_PCD_MspInit+0x164>)
 801cc9a:	f7ea fcf7 	bl	800768c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801cc9e:	4b13      	ldr	r3, [pc, #76]	; (801ccec <HAL_PCD_MspInit+0x154>)
 801cca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cca2:	4a12      	ldr	r2, [pc, #72]	; (801ccec <HAL_PCD_MspInit+0x154>)
 801cca4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801cca8:	6313      	str	r3, [r2, #48]	; 0x30
 801ccaa:	4b10      	ldr	r3, [pc, #64]	; (801ccec <HAL_PCD_MspInit+0x154>)
 801ccac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ccae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801ccb2:	613b      	str	r3, [r7, #16]
 801ccb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 801ccb6:	4b0d      	ldr	r3, [pc, #52]	; (801ccec <HAL_PCD_MspInit+0x154>)
 801ccb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ccba:	4a0c      	ldr	r2, [pc, #48]	; (801ccec <HAL_PCD_MspInit+0x154>)
 801ccbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801ccc0:	6313      	str	r3, [r2, #48]	; 0x30
 801ccc2:	4b0a      	ldr	r3, [pc, #40]	; (801ccec <HAL_PCD_MspInit+0x154>)
 801ccc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ccc6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801ccca:	60fb      	str	r3, [r7, #12]
 801cccc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 801ccce:	2200      	movs	r2, #0
 801ccd0:	2105      	movs	r1, #5
 801ccd2:	204d      	movs	r0, #77	; 0x4d
 801ccd4:	f7e9 fabc 	bl	8006250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801ccd8:	204d      	movs	r0, #77	; 0x4d
 801ccda:	f7e9 fad5 	bl	8006288 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801ccde:	bf00      	nop
 801cce0:	3738      	adds	r7, #56	; 0x38
 801cce2:	46bd      	mov	sp, r7
 801cce4:	bd80      	pop	{r7, pc}
 801cce6:	bf00      	nop
 801cce8:	40040000 	.word	0x40040000
 801ccec:	40023800 	.word	0x40023800
 801ccf0:	40020400 	.word	0x40020400
 801ccf4:	40021c00 	.word	0x40021c00
 801ccf8:	40020800 	.word	0x40020800
 801ccfc:	40020000 	.word	0x40020000

0801cd00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cd00:	b580      	push	{r7, lr}
 801cd02:	b082      	sub	sp, #8
 801cd04:	af00      	add	r7, sp, #0
 801cd06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 801cd0e:	687b      	ldr	r3, [r7, #4]
 801cd10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801cd14:	4619      	mov	r1, r3
 801cd16:	4610      	mov	r0, r2
 801cd18:	f7f9 fa87 	bl	801622a <USBD_LL_SetupStage>
}
 801cd1c:	bf00      	nop
 801cd1e:	3708      	adds	r7, #8
 801cd20:	46bd      	mov	sp, r7
 801cd22:	bd80      	pop	{r7, pc}

0801cd24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cd24:	b580      	push	{r7, lr}
 801cd26:	b082      	sub	sp, #8
 801cd28:	af00      	add	r7, sp, #0
 801cd2a:	6078      	str	r0, [r7, #4]
 801cd2c:	460b      	mov	r3, r1
 801cd2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 801cd36:	78fa      	ldrb	r2, [r7, #3]
 801cd38:	6879      	ldr	r1, [r7, #4]
 801cd3a:	4613      	mov	r3, r2
 801cd3c:	00db      	lsls	r3, r3, #3
 801cd3e:	4413      	add	r3, r2
 801cd40:	009b      	lsls	r3, r3, #2
 801cd42:	440b      	add	r3, r1
 801cd44:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801cd48:	681a      	ldr	r2, [r3, #0]
 801cd4a:	78fb      	ldrb	r3, [r7, #3]
 801cd4c:	4619      	mov	r1, r3
 801cd4e:	f7f9 fac1 	bl	80162d4 <USBD_LL_DataOutStage>
}
 801cd52:	bf00      	nop
 801cd54:	3708      	adds	r7, #8
 801cd56:	46bd      	mov	sp, r7
 801cd58:	bd80      	pop	{r7, pc}

0801cd5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cd5a:	b580      	push	{r7, lr}
 801cd5c:	b082      	sub	sp, #8
 801cd5e:	af00      	add	r7, sp, #0
 801cd60:	6078      	str	r0, [r7, #4]
 801cd62:	460b      	mov	r3, r1
 801cd64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801cd66:	687b      	ldr	r3, [r7, #4]
 801cd68:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 801cd6c:	78fa      	ldrb	r2, [r7, #3]
 801cd6e:	6879      	ldr	r1, [r7, #4]
 801cd70:	4613      	mov	r3, r2
 801cd72:	00db      	lsls	r3, r3, #3
 801cd74:	4413      	add	r3, r2
 801cd76:	009b      	lsls	r3, r3, #2
 801cd78:	440b      	add	r3, r1
 801cd7a:	334c      	adds	r3, #76	; 0x4c
 801cd7c:	681a      	ldr	r2, [r3, #0]
 801cd7e:	78fb      	ldrb	r3, [r7, #3]
 801cd80:	4619      	mov	r1, r3
 801cd82:	f7f9 fb5a 	bl	801643a <USBD_LL_DataInStage>
}
 801cd86:	bf00      	nop
 801cd88:	3708      	adds	r7, #8
 801cd8a:	46bd      	mov	sp, r7
 801cd8c:	bd80      	pop	{r7, pc}

0801cd8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cd8e:	b580      	push	{r7, lr}
 801cd90:	b082      	sub	sp, #8
 801cd92:	af00      	add	r7, sp, #0
 801cd94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801cd96:	687b      	ldr	r3, [r7, #4]
 801cd98:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801cd9c:	4618      	mov	r0, r3
 801cd9e:	f7f9 fc8e 	bl	80166be <USBD_LL_SOF>
}
 801cda2:	bf00      	nop
 801cda4:	3708      	adds	r7, #8
 801cda6:	46bd      	mov	sp, r7
 801cda8:	bd80      	pop	{r7, pc}

0801cdaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cdaa:	b580      	push	{r7, lr}
 801cdac:	b084      	sub	sp, #16
 801cdae:	af00      	add	r7, sp, #0
 801cdb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801cdb2:	2301      	movs	r3, #1
 801cdb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801cdb6:	687b      	ldr	r3, [r7, #4]
 801cdb8:	68db      	ldr	r3, [r3, #12]
 801cdba:	2b00      	cmp	r3, #0
 801cdbc:	d102      	bne.n	801cdc4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801cdbe:	2300      	movs	r3, #0
 801cdc0:	73fb      	strb	r3, [r7, #15]
 801cdc2:	e008      	b.n	801cdd6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	68db      	ldr	r3, [r3, #12]
 801cdc8:	2b02      	cmp	r3, #2
 801cdca:	d102      	bne.n	801cdd2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801cdcc:	2301      	movs	r3, #1
 801cdce:	73fb      	strb	r3, [r7, #15]
 801cdd0:	e001      	b.n	801cdd6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801cdd2:	f7e5 fd5f 	bl	8002894 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801cdd6:	687b      	ldr	r3, [r7, #4]
 801cdd8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801cddc:	7bfa      	ldrb	r2, [r7, #15]
 801cdde:	4611      	mov	r1, r2
 801cde0:	4618      	mov	r0, r3
 801cde2:	f7f9 fc2e 	bl	8016642 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801cde6:	687b      	ldr	r3, [r7, #4]
 801cde8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801cdec:	4618      	mov	r0, r3
 801cdee:	f7f9 fbd6 	bl	801659e <USBD_LL_Reset>
}
 801cdf2:	bf00      	nop
 801cdf4:	3710      	adds	r7, #16
 801cdf6:	46bd      	mov	sp, r7
 801cdf8:	bd80      	pop	{r7, pc}
	...

0801cdfc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cdfc:	b580      	push	{r7, lr}
 801cdfe:	b082      	sub	sp, #8
 801ce00:	af00      	add	r7, sp, #0
 801ce02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801ce04:	687b      	ldr	r3, [r7, #4]
 801ce06:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801ce0a:	4618      	mov	r0, r3
 801ce0c:	f7f9 fc29 	bl	8016662 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	681b      	ldr	r3, [r3, #0]
 801ce14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801ce18:	681b      	ldr	r3, [r3, #0]
 801ce1a:	687a      	ldr	r2, [r7, #4]
 801ce1c:	6812      	ldr	r2, [r2, #0]
 801ce1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801ce22:	f043 0301 	orr.w	r3, r3, #1
 801ce26:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	6a1b      	ldr	r3, [r3, #32]
 801ce2c:	2b00      	cmp	r3, #0
 801ce2e:	d005      	beq.n	801ce3c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801ce30:	4b04      	ldr	r3, [pc, #16]	; (801ce44 <HAL_PCD_SuspendCallback+0x48>)
 801ce32:	691b      	ldr	r3, [r3, #16]
 801ce34:	4a03      	ldr	r2, [pc, #12]	; (801ce44 <HAL_PCD_SuspendCallback+0x48>)
 801ce36:	f043 0306 	orr.w	r3, r3, #6
 801ce3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801ce3c:	bf00      	nop
 801ce3e:	3708      	adds	r7, #8
 801ce40:	46bd      	mov	sp, r7
 801ce42:	bd80      	pop	{r7, pc}
 801ce44:	e000ed00 	.word	0xe000ed00

0801ce48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ce48:	b580      	push	{r7, lr}
 801ce4a:	b082      	sub	sp, #8
 801ce4c:	af00      	add	r7, sp, #0
 801ce4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801ce50:	687b      	ldr	r3, [r7, #4]
 801ce52:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801ce56:	4618      	mov	r0, r3
 801ce58:	f7f9 fc19 	bl	801668e <USBD_LL_Resume>
}
 801ce5c:	bf00      	nop
 801ce5e:	3708      	adds	r7, #8
 801ce60:	46bd      	mov	sp, r7
 801ce62:	bd80      	pop	{r7, pc}

0801ce64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ce64:	b580      	push	{r7, lr}
 801ce66:	b082      	sub	sp, #8
 801ce68:	af00      	add	r7, sp, #0
 801ce6a:	6078      	str	r0, [r7, #4]
 801ce6c:	460b      	mov	r3, r1
 801ce6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801ce70:	687b      	ldr	r3, [r7, #4]
 801ce72:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801ce76:	78fa      	ldrb	r2, [r7, #3]
 801ce78:	4611      	mov	r1, r2
 801ce7a:	4618      	mov	r0, r3
 801ce7c:	f7f9 fc71 	bl	8016762 <USBD_LL_IsoOUTIncomplete>
}
 801ce80:	bf00      	nop
 801ce82:	3708      	adds	r7, #8
 801ce84:	46bd      	mov	sp, r7
 801ce86:	bd80      	pop	{r7, pc}

0801ce88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ce88:	b580      	push	{r7, lr}
 801ce8a:	b082      	sub	sp, #8
 801ce8c:	af00      	add	r7, sp, #0
 801ce8e:	6078      	str	r0, [r7, #4]
 801ce90:	460b      	mov	r3, r1
 801ce92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801ce9a:	78fa      	ldrb	r2, [r7, #3]
 801ce9c:	4611      	mov	r1, r2
 801ce9e:	4618      	mov	r0, r3
 801cea0:	f7f9 fc2d 	bl	80166fe <USBD_LL_IsoINIncomplete>
}
 801cea4:	bf00      	nop
 801cea6:	3708      	adds	r7, #8
 801cea8:	46bd      	mov	sp, r7
 801ceaa:	bd80      	pop	{r7, pc}

0801ceac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ceac:	b580      	push	{r7, lr}
 801ceae:	b082      	sub	sp, #8
 801ceb0:	af00      	add	r7, sp, #0
 801ceb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801ceba:	4618      	mov	r0, r3
 801cebc:	f7f9 fc83 	bl	80167c6 <USBD_LL_DevConnected>
}
 801cec0:	bf00      	nop
 801cec2:	3708      	adds	r7, #8
 801cec4:	46bd      	mov	sp, r7
 801cec6:	bd80      	pop	{r7, pc}

0801cec8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cec8:	b580      	push	{r7, lr}
 801ceca:	b082      	sub	sp, #8
 801cecc:	af00      	add	r7, sp, #0
 801cece:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801ced6:	4618      	mov	r0, r3
 801ced8:	f7f9 fc80 	bl	80167dc <USBD_LL_DevDisconnected>
}
 801cedc:	bf00      	nop
 801cede:	3708      	adds	r7, #8
 801cee0:	46bd      	mov	sp, r7
 801cee2:	bd80      	pop	{r7, pc}

0801cee4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801cee4:	b580      	push	{r7, lr}
 801cee6:	b082      	sub	sp, #8
 801cee8:	af00      	add	r7, sp, #0
 801ceea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	781b      	ldrb	r3, [r3, #0]
 801cef0:	2b01      	cmp	r3, #1
 801cef2:	d140      	bne.n	801cf76 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801cef4:	4a22      	ldr	r2, [pc, #136]	; (801cf80 <USBD_LL_Init+0x9c>)
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_HS;
 801cefc:	687b      	ldr	r3, [r7, #4]
 801cefe:	4a20      	ldr	r2, [pc, #128]	; (801cf80 <USBD_LL_Init+0x9c>)
 801cf00:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801cf04:	4b1e      	ldr	r3, [pc, #120]	; (801cf80 <USBD_LL_Init+0x9c>)
 801cf06:	4a1f      	ldr	r2, [pc, #124]	; (801cf84 <USBD_LL_Init+0xa0>)
 801cf08:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 801cf0a:	4b1d      	ldr	r3, [pc, #116]	; (801cf80 <USBD_LL_Init+0x9c>)
 801cf0c:	2208      	movs	r2, #8
 801cf0e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 801cf10:	4b1b      	ldr	r3, [pc, #108]	; (801cf80 <USBD_LL_Init+0x9c>)
 801cf12:	2200      	movs	r2, #0
 801cf14:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801cf16:	4b1a      	ldr	r3, [pc, #104]	; (801cf80 <USBD_LL_Init+0x9c>)
 801cf18:	2200      	movs	r2, #0
 801cf1a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 801cf1c:	4b18      	ldr	r3, [pc, #96]	; (801cf80 <USBD_LL_Init+0x9c>)
 801cf1e:	2201      	movs	r2, #1
 801cf20:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801cf22:	4b17      	ldr	r3, [pc, #92]	; (801cf80 <USBD_LL_Init+0x9c>)
 801cf24:	2200      	movs	r2, #0
 801cf26:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801cf28:	4b15      	ldr	r3, [pc, #84]	; (801cf80 <USBD_LL_Init+0x9c>)
 801cf2a:	2200      	movs	r2, #0
 801cf2c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801cf2e:	4b14      	ldr	r3, [pc, #80]	; (801cf80 <USBD_LL_Init+0x9c>)
 801cf30:	2200      	movs	r2, #0
 801cf32:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801cf34:	4b12      	ldr	r3, [pc, #72]	; (801cf80 <USBD_LL_Init+0x9c>)
 801cf36:	2200      	movs	r2, #0
 801cf38:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801cf3a:	4b11      	ldr	r3, [pc, #68]	; (801cf80 <USBD_LL_Init+0x9c>)
 801cf3c:	2200      	movs	r2, #0
 801cf3e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801cf40:	4b0f      	ldr	r3, [pc, #60]	; (801cf80 <USBD_LL_Init+0x9c>)
 801cf42:	2200      	movs	r2, #0
 801cf44:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801cf46:	480e      	ldr	r0, [pc, #56]	; (801cf80 <USBD_LL_Init+0x9c>)
 801cf48:	f7ed fd00 	bl	800a94c <HAL_PCD_Init>
 801cf4c:	4603      	mov	r3, r0
 801cf4e:	2b00      	cmp	r3, #0
 801cf50:	d001      	beq.n	801cf56 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801cf52:	f7e5 fc9f 	bl	8002894 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801cf56:	f44f 7100 	mov.w	r1, #512	; 0x200
 801cf5a:	4809      	ldr	r0, [pc, #36]	; (801cf80 <USBD_LL_Init+0x9c>)
 801cf5c:	f7ee ff79 	bl	800be52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801cf60:	2280      	movs	r2, #128	; 0x80
 801cf62:	2100      	movs	r1, #0
 801cf64:	4806      	ldr	r0, [pc, #24]	; (801cf80 <USBD_LL_Init+0x9c>)
 801cf66:	f7ee ff2d 	bl	800bdc4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801cf6a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801cf6e:	2101      	movs	r1, #1
 801cf70:	4803      	ldr	r0, [pc, #12]	; (801cf80 <USBD_LL_Init+0x9c>)
 801cf72:	f7ee ff27 	bl	800bdc4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801cf76:	2300      	movs	r3, #0
}
 801cf78:	4618      	mov	r0, r3
 801cf7a:	3708      	adds	r7, #8
 801cf7c:	46bd      	mov	sp, r7
 801cf7e:	bd80      	pop	{r7, pc}
 801cf80:	2004b454 	.word	0x2004b454
 801cf84:	40040000 	.word	0x40040000

0801cf88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801cf88:	b580      	push	{r7, lr}
 801cf8a:	b084      	sub	sp, #16
 801cf8c:	af00      	add	r7, sp, #0
 801cf8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cf90:	2300      	movs	r3, #0
 801cf92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cf94:	2300      	movs	r3, #0
 801cf96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801cf9e:	4618      	mov	r0, r3
 801cfa0:	f7ed fdf8 	bl	800ab94 <HAL_PCD_Start>
 801cfa4:	4603      	mov	r3, r0
 801cfa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cfa8:	7bfb      	ldrb	r3, [r7, #15]
 801cfaa:	4618      	mov	r0, r3
 801cfac:	f000 f97e 	bl	801d2ac <USBD_Get_USB_Status>
 801cfb0:	4603      	mov	r3, r0
 801cfb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801cfb4:	7bbb      	ldrb	r3, [r7, #14]
}
 801cfb6:	4618      	mov	r0, r3
 801cfb8:	3710      	adds	r7, #16
 801cfba:	46bd      	mov	sp, r7
 801cfbc:	bd80      	pop	{r7, pc}

0801cfbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801cfbe:	b580      	push	{r7, lr}
 801cfc0:	b084      	sub	sp, #16
 801cfc2:	af00      	add	r7, sp, #0
 801cfc4:	6078      	str	r0, [r7, #4]
 801cfc6:	4608      	mov	r0, r1
 801cfc8:	4611      	mov	r1, r2
 801cfca:	461a      	mov	r2, r3
 801cfcc:	4603      	mov	r3, r0
 801cfce:	70fb      	strb	r3, [r7, #3]
 801cfd0:	460b      	mov	r3, r1
 801cfd2:	70bb      	strb	r3, [r7, #2]
 801cfd4:	4613      	mov	r3, r2
 801cfd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cfd8:	2300      	movs	r3, #0
 801cfda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cfdc:	2300      	movs	r3, #0
 801cfde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801cfe0:	687b      	ldr	r3, [r7, #4]
 801cfe2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801cfe6:	78bb      	ldrb	r3, [r7, #2]
 801cfe8:	883a      	ldrh	r2, [r7, #0]
 801cfea:	78f9      	ldrb	r1, [r7, #3]
 801cfec:	f7ee fae5 	bl	800b5ba <HAL_PCD_EP_Open>
 801cff0:	4603      	mov	r3, r0
 801cff2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cff4:	7bfb      	ldrb	r3, [r7, #15]
 801cff6:	4618      	mov	r0, r3
 801cff8:	f000 f958 	bl	801d2ac <USBD_Get_USB_Status>
 801cffc:	4603      	mov	r3, r0
 801cffe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d000:	7bbb      	ldrb	r3, [r7, #14]
}
 801d002:	4618      	mov	r0, r3
 801d004:	3710      	adds	r7, #16
 801d006:	46bd      	mov	sp, r7
 801d008:	bd80      	pop	{r7, pc}

0801d00a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d00a:	b580      	push	{r7, lr}
 801d00c:	b084      	sub	sp, #16
 801d00e:	af00      	add	r7, sp, #0
 801d010:	6078      	str	r0, [r7, #4]
 801d012:	460b      	mov	r3, r1
 801d014:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d016:	2300      	movs	r3, #0
 801d018:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d01a:	2300      	movs	r3, #0
 801d01c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d01e:	687b      	ldr	r3, [r7, #4]
 801d020:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801d024:	78fa      	ldrb	r2, [r7, #3]
 801d026:	4611      	mov	r1, r2
 801d028:	4618      	mov	r0, r3
 801d02a:	f7ee fb2e 	bl	800b68a <HAL_PCD_EP_Close>
 801d02e:	4603      	mov	r3, r0
 801d030:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d032:	7bfb      	ldrb	r3, [r7, #15]
 801d034:	4618      	mov	r0, r3
 801d036:	f000 f939 	bl	801d2ac <USBD_Get_USB_Status>
 801d03a:	4603      	mov	r3, r0
 801d03c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d03e:	7bbb      	ldrb	r3, [r7, #14]
}
 801d040:	4618      	mov	r0, r3
 801d042:	3710      	adds	r7, #16
 801d044:	46bd      	mov	sp, r7
 801d046:	bd80      	pop	{r7, pc}

0801d048 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d048:	b580      	push	{r7, lr}
 801d04a:	b084      	sub	sp, #16
 801d04c:	af00      	add	r7, sp, #0
 801d04e:	6078      	str	r0, [r7, #4]
 801d050:	460b      	mov	r3, r1
 801d052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d054:	2300      	movs	r3, #0
 801d056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d058:	2300      	movs	r3, #0
 801d05a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d05c:	687b      	ldr	r3, [r7, #4]
 801d05e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801d062:	78fa      	ldrb	r2, [r7, #3]
 801d064:	4611      	mov	r1, r2
 801d066:	4618      	mov	r0, r3
 801d068:	f7ee fc06 	bl	800b878 <HAL_PCD_EP_SetStall>
 801d06c:	4603      	mov	r3, r0
 801d06e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d070:	7bfb      	ldrb	r3, [r7, #15]
 801d072:	4618      	mov	r0, r3
 801d074:	f000 f91a 	bl	801d2ac <USBD_Get_USB_Status>
 801d078:	4603      	mov	r3, r0
 801d07a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d07c:	7bbb      	ldrb	r3, [r7, #14]
}
 801d07e:	4618      	mov	r0, r3
 801d080:	3710      	adds	r7, #16
 801d082:	46bd      	mov	sp, r7
 801d084:	bd80      	pop	{r7, pc}

0801d086 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d086:	b580      	push	{r7, lr}
 801d088:	b084      	sub	sp, #16
 801d08a:	af00      	add	r7, sp, #0
 801d08c:	6078      	str	r0, [r7, #4]
 801d08e:	460b      	mov	r3, r1
 801d090:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d092:	2300      	movs	r3, #0
 801d094:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d096:	2300      	movs	r3, #0
 801d098:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801d0a0:	78fa      	ldrb	r2, [r7, #3]
 801d0a2:	4611      	mov	r1, r2
 801d0a4:	4618      	mov	r0, r3
 801d0a6:	f7ee fc4b 	bl	800b940 <HAL_PCD_EP_ClrStall>
 801d0aa:	4603      	mov	r3, r0
 801d0ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d0ae:	7bfb      	ldrb	r3, [r7, #15]
 801d0b0:	4618      	mov	r0, r3
 801d0b2:	f000 f8fb 	bl	801d2ac <USBD_Get_USB_Status>
 801d0b6:	4603      	mov	r3, r0
 801d0b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d0ba:	7bbb      	ldrb	r3, [r7, #14]
}
 801d0bc:	4618      	mov	r0, r3
 801d0be:	3710      	adds	r7, #16
 801d0c0:	46bd      	mov	sp, r7
 801d0c2:	bd80      	pop	{r7, pc}

0801d0c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d0c4:	b480      	push	{r7}
 801d0c6:	b085      	sub	sp, #20
 801d0c8:	af00      	add	r7, sp, #0
 801d0ca:	6078      	str	r0, [r7, #4]
 801d0cc:	460b      	mov	r3, r1
 801d0ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801d0d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d0d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d0dc:	2b00      	cmp	r3, #0
 801d0de:	da0b      	bge.n	801d0f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d0e0:	78fb      	ldrb	r3, [r7, #3]
 801d0e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801d0e6:	68f9      	ldr	r1, [r7, #12]
 801d0e8:	4613      	mov	r3, r2
 801d0ea:	00db      	lsls	r3, r3, #3
 801d0ec:	4413      	add	r3, r2
 801d0ee:	009b      	lsls	r3, r3, #2
 801d0f0:	440b      	add	r3, r1
 801d0f2:	333e      	adds	r3, #62	; 0x3e
 801d0f4:	781b      	ldrb	r3, [r3, #0]
 801d0f6:	e00b      	b.n	801d110 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d0f8:	78fb      	ldrb	r3, [r7, #3]
 801d0fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801d0fe:	68f9      	ldr	r1, [r7, #12]
 801d100:	4613      	mov	r3, r2
 801d102:	00db      	lsls	r3, r3, #3
 801d104:	4413      	add	r3, r2
 801d106:	009b      	lsls	r3, r3, #2
 801d108:	440b      	add	r3, r1
 801d10a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801d10e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d110:	4618      	mov	r0, r3
 801d112:	3714      	adds	r7, #20
 801d114:	46bd      	mov	sp, r7
 801d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d11a:	4770      	bx	lr

0801d11c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d11c:	b580      	push	{r7, lr}
 801d11e:	b084      	sub	sp, #16
 801d120:	af00      	add	r7, sp, #0
 801d122:	6078      	str	r0, [r7, #4]
 801d124:	460b      	mov	r3, r1
 801d126:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d128:	2300      	movs	r3, #0
 801d12a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d12c:	2300      	movs	r3, #0
 801d12e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d130:	687b      	ldr	r3, [r7, #4]
 801d132:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801d136:	78fa      	ldrb	r2, [r7, #3]
 801d138:	4611      	mov	r1, r2
 801d13a:	4618      	mov	r0, r3
 801d13c:	f7ee fa18 	bl	800b570 <HAL_PCD_SetAddress>
 801d140:	4603      	mov	r3, r0
 801d142:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d144:	7bfb      	ldrb	r3, [r7, #15]
 801d146:	4618      	mov	r0, r3
 801d148:	f000 f8b0 	bl	801d2ac <USBD_Get_USB_Status>
 801d14c:	4603      	mov	r3, r0
 801d14e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d150:	7bbb      	ldrb	r3, [r7, #14]
}
 801d152:	4618      	mov	r0, r3
 801d154:	3710      	adds	r7, #16
 801d156:	46bd      	mov	sp, r7
 801d158:	bd80      	pop	{r7, pc}

0801d15a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d15a:	b580      	push	{r7, lr}
 801d15c:	b086      	sub	sp, #24
 801d15e:	af00      	add	r7, sp, #0
 801d160:	60f8      	str	r0, [r7, #12]
 801d162:	607a      	str	r2, [r7, #4]
 801d164:	603b      	str	r3, [r7, #0]
 801d166:	460b      	mov	r3, r1
 801d168:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d16a:	2300      	movs	r3, #0
 801d16c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d16e:	2300      	movs	r3, #0
 801d170:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d172:	68fb      	ldr	r3, [r7, #12]
 801d174:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801d178:	7af9      	ldrb	r1, [r7, #11]
 801d17a:	683b      	ldr	r3, [r7, #0]
 801d17c:	687a      	ldr	r2, [r7, #4]
 801d17e:	f7ee fb31 	bl	800b7e4 <HAL_PCD_EP_Transmit>
 801d182:	4603      	mov	r3, r0
 801d184:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d186:	7dfb      	ldrb	r3, [r7, #23]
 801d188:	4618      	mov	r0, r3
 801d18a:	f000 f88f 	bl	801d2ac <USBD_Get_USB_Status>
 801d18e:	4603      	mov	r3, r0
 801d190:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d192:	7dbb      	ldrb	r3, [r7, #22]
}
 801d194:	4618      	mov	r0, r3
 801d196:	3718      	adds	r7, #24
 801d198:	46bd      	mov	sp, r7
 801d19a:	bd80      	pop	{r7, pc}

0801d19c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d19c:	b580      	push	{r7, lr}
 801d19e:	b086      	sub	sp, #24
 801d1a0:	af00      	add	r7, sp, #0
 801d1a2:	60f8      	str	r0, [r7, #12]
 801d1a4:	607a      	str	r2, [r7, #4]
 801d1a6:	603b      	str	r3, [r7, #0]
 801d1a8:	460b      	mov	r3, r1
 801d1aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d1ac:	2300      	movs	r3, #0
 801d1ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d1b0:	2300      	movs	r3, #0
 801d1b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d1b4:	68fb      	ldr	r3, [r7, #12]
 801d1b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801d1ba:	7af9      	ldrb	r1, [r7, #11]
 801d1bc:	683b      	ldr	r3, [r7, #0]
 801d1be:	687a      	ldr	r2, [r7, #4]
 801d1c0:	f7ee faad 	bl	800b71e <HAL_PCD_EP_Receive>
 801d1c4:	4603      	mov	r3, r0
 801d1c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d1c8:	7dfb      	ldrb	r3, [r7, #23]
 801d1ca:	4618      	mov	r0, r3
 801d1cc:	f000 f86e 	bl	801d2ac <USBD_Get_USB_Status>
 801d1d0:	4603      	mov	r3, r0
 801d1d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d1d4:	7dbb      	ldrb	r3, [r7, #22]
}
 801d1d6:	4618      	mov	r0, r3
 801d1d8:	3718      	adds	r7, #24
 801d1da:	46bd      	mov	sp, r7
 801d1dc:	bd80      	pop	{r7, pc}

0801d1de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d1de:	b580      	push	{r7, lr}
 801d1e0:	b082      	sub	sp, #8
 801d1e2:	af00      	add	r7, sp, #0
 801d1e4:	6078      	str	r0, [r7, #4]
 801d1e6:	460b      	mov	r3, r1
 801d1e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801d1ea:	687b      	ldr	r3, [r7, #4]
 801d1ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801d1f0:	78fa      	ldrb	r2, [r7, #3]
 801d1f2:	4611      	mov	r1, r2
 801d1f4:	4618      	mov	r0, r3
 801d1f6:	f7ee fadd 	bl	800b7b4 <HAL_PCD_EP_GetRxCount>
 801d1fa:	4603      	mov	r3, r0
}
 801d1fc:	4618      	mov	r0, r3
 801d1fe:	3708      	adds	r7, #8
 801d200:	46bd      	mov	sp, r7
 801d202:	bd80      	pop	{r7, pc}

0801d204 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801d204:	b580      	push	{r7, lr}
 801d206:	b082      	sub	sp, #8
 801d208:	af00      	add	r7, sp, #0
 801d20a:	6078      	str	r0, [r7, #4]
 801d20c:	460b      	mov	r3, r1
 801d20e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801d210:	78fb      	ldrb	r3, [r7, #3]
 801d212:	2b00      	cmp	r3, #0
 801d214:	d002      	beq.n	801d21c <HAL_PCDEx_LPM_Callback+0x18>
 801d216:	2b01      	cmp	r3, #1
 801d218:	d01f      	beq.n	801d25a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801d21a:	e03b      	b.n	801d294 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801d21c:	687b      	ldr	r3, [r7, #4]
 801d21e:	6a1b      	ldr	r3, [r3, #32]
 801d220:	2b00      	cmp	r3, #0
 801d222:	d007      	beq.n	801d234 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801d224:	f000 f83c 	bl	801d2a0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d228:	4b1c      	ldr	r3, [pc, #112]	; (801d29c <HAL_PCDEx_LPM_Callback+0x98>)
 801d22a:	691b      	ldr	r3, [r3, #16]
 801d22c:	4a1b      	ldr	r2, [pc, #108]	; (801d29c <HAL_PCDEx_LPM_Callback+0x98>)
 801d22e:	f023 0306 	bic.w	r3, r3, #6
 801d232:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	681b      	ldr	r3, [r3, #0]
 801d238:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801d23c:	681b      	ldr	r3, [r3, #0]
 801d23e:	687a      	ldr	r2, [r7, #4]
 801d240:	6812      	ldr	r2, [r2, #0]
 801d242:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801d246:	f023 0301 	bic.w	r3, r3, #1
 801d24a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801d24c:	687b      	ldr	r3, [r7, #4]
 801d24e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801d252:	4618      	mov	r0, r3
 801d254:	f7f9 fa1b 	bl	801668e <USBD_LL_Resume>
    break;
 801d258:	e01c      	b.n	801d294 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801d25a:	687b      	ldr	r3, [r7, #4]
 801d25c:	681b      	ldr	r3, [r3, #0]
 801d25e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801d262:	681b      	ldr	r3, [r3, #0]
 801d264:	687a      	ldr	r2, [r7, #4]
 801d266:	6812      	ldr	r2, [r2, #0]
 801d268:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801d26c:	f043 0301 	orr.w	r3, r3, #1
 801d270:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801d278:	4618      	mov	r0, r3
 801d27a:	f7f9 f9f2 	bl	8016662 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801d27e:	687b      	ldr	r3, [r7, #4]
 801d280:	6a1b      	ldr	r3, [r3, #32]
 801d282:	2b00      	cmp	r3, #0
 801d284:	d005      	beq.n	801d292 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d286:	4b05      	ldr	r3, [pc, #20]	; (801d29c <HAL_PCDEx_LPM_Callback+0x98>)
 801d288:	691b      	ldr	r3, [r3, #16]
 801d28a:	4a04      	ldr	r2, [pc, #16]	; (801d29c <HAL_PCDEx_LPM_Callback+0x98>)
 801d28c:	f043 0306 	orr.w	r3, r3, #6
 801d290:	6113      	str	r3, [r2, #16]
    break;
 801d292:	bf00      	nop
}
 801d294:	bf00      	nop
 801d296:	3708      	adds	r7, #8
 801d298:	46bd      	mov	sp, r7
 801d29a:	bd80      	pop	{r7, pc}
 801d29c:	e000ed00 	.word	0xe000ed00

0801d2a0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801d2a0:	b580      	push	{r7, lr}
 801d2a2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801d2a4:	f7e4 f878 	bl	8001398 <SystemClock_Config>
}
 801d2a8:	bf00      	nop
 801d2aa:	bd80      	pop	{r7, pc}

0801d2ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d2ac:	b480      	push	{r7}
 801d2ae:	b085      	sub	sp, #20
 801d2b0:	af00      	add	r7, sp, #0
 801d2b2:	4603      	mov	r3, r0
 801d2b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d2b6:	2300      	movs	r3, #0
 801d2b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801d2ba:	79fb      	ldrb	r3, [r7, #7]
 801d2bc:	2b03      	cmp	r3, #3
 801d2be:	d817      	bhi.n	801d2f0 <USBD_Get_USB_Status+0x44>
 801d2c0:	a201      	add	r2, pc, #4	; (adr r2, 801d2c8 <USBD_Get_USB_Status+0x1c>)
 801d2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d2c6:	bf00      	nop
 801d2c8:	0801d2d9 	.word	0x0801d2d9
 801d2cc:	0801d2df 	.word	0x0801d2df
 801d2d0:	0801d2e5 	.word	0x0801d2e5
 801d2d4:	0801d2eb 	.word	0x0801d2eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d2d8:	2300      	movs	r3, #0
 801d2da:	73fb      	strb	r3, [r7, #15]
    break;
 801d2dc:	e00b      	b.n	801d2f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d2de:	2303      	movs	r3, #3
 801d2e0:	73fb      	strb	r3, [r7, #15]
    break;
 801d2e2:	e008      	b.n	801d2f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d2e4:	2301      	movs	r3, #1
 801d2e6:	73fb      	strb	r3, [r7, #15]
    break;
 801d2e8:	e005      	b.n	801d2f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d2ea:	2303      	movs	r3, #3
 801d2ec:	73fb      	strb	r3, [r7, #15]
    break;
 801d2ee:	e002      	b.n	801d2f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801d2f0:	2303      	movs	r3, #3
 801d2f2:	73fb      	strb	r3, [r7, #15]
    break;
 801d2f4:	bf00      	nop
  }
  return usb_status;
 801d2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 801d2f8:	4618      	mov	r0, r3
 801d2fa:	3714      	adds	r7, #20
 801d2fc:	46bd      	mov	sp, r7
 801d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d302:	4770      	bx	lr

0801d304 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801d304:	b580      	push	{r7, lr}
 801d306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801d308:	2201      	movs	r2, #1
 801d30a:	490e      	ldr	r1, [pc, #56]	; (801d344 <MX_USB_HOST_Init+0x40>)
 801d30c:	480e      	ldr	r0, [pc, #56]	; (801d348 <MX_USB_HOST_Init+0x44>)
 801d30e:	f7fa fdbb 	bl	8017e88 <USBH_Init>
 801d312:	4603      	mov	r3, r0
 801d314:	2b00      	cmp	r3, #0
 801d316:	d001      	beq.n	801d31c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801d318:	f7e5 fabc 	bl	8002894 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801d31c:	490b      	ldr	r1, [pc, #44]	; (801d34c <MX_USB_HOST_Init+0x48>)
 801d31e:	480a      	ldr	r0, [pc, #40]	; (801d348 <MX_USB_HOST_Init+0x44>)
 801d320:	f7fa fe87 	bl	8018032 <USBH_RegisterClass>
 801d324:	4603      	mov	r3, r0
 801d326:	2b00      	cmp	r3, #0
 801d328:	d001      	beq.n	801d32e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801d32a:	f7e5 fab3 	bl	8002894 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801d32e:	4806      	ldr	r0, [pc, #24]	; (801d348 <MX_USB_HOST_Init+0x44>)
 801d330:	f7fa ff0b 	bl	801814a <USBH_Start>
 801d334:	4603      	mov	r3, r0
 801d336:	2b00      	cmp	r3, #0
 801d338:	d001      	beq.n	801d33e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801d33a:	f7e5 faab 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801d33e:	bf00      	nop
 801d340:	bd80      	pop	{r7, pc}
 801d342:	bf00      	nop
 801d344:	0801d351 	.word	0x0801d351
 801d348:	2004b95c 	.word	0x2004b95c
 801d34c:	200000b8 	.word	0x200000b8

0801d350 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801d350:	b480      	push	{r7}
 801d352:	b083      	sub	sp, #12
 801d354:	af00      	add	r7, sp, #0
 801d356:	6078      	str	r0, [r7, #4]
 801d358:	460b      	mov	r3, r1
 801d35a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801d35c:	78fb      	ldrb	r3, [r7, #3]
 801d35e:	3b01      	subs	r3, #1
 801d360:	2b04      	cmp	r3, #4
 801d362:	d819      	bhi.n	801d398 <USBH_UserProcess+0x48>
 801d364:	a201      	add	r2, pc, #4	; (adr r2, 801d36c <USBH_UserProcess+0x1c>)
 801d366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d36a:	bf00      	nop
 801d36c:	0801d399 	.word	0x0801d399
 801d370:	0801d389 	.word	0x0801d389
 801d374:	0801d399 	.word	0x0801d399
 801d378:	0801d391 	.word	0x0801d391
 801d37c:	0801d381 	.word	0x0801d381
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801d380:	4b09      	ldr	r3, [pc, #36]	; (801d3a8 <USBH_UserProcess+0x58>)
 801d382:	2203      	movs	r2, #3
 801d384:	701a      	strb	r2, [r3, #0]
  break;
 801d386:	e008      	b.n	801d39a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801d388:	4b07      	ldr	r3, [pc, #28]	; (801d3a8 <USBH_UserProcess+0x58>)
 801d38a:	2202      	movs	r2, #2
 801d38c:	701a      	strb	r2, [r3, #0]
  break;
 801d38e:	e004      	b.n	801d39a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801d390:	4b05      	ldr	r3, [pc, #20]	; (801d3a8 <USBH_UserProcess+0x58>)
 801d392:	2201      	movs	r2, #1
 801d394:	701a      	strb	r2, [r3, #0]
  break;
 801d396:	e000      	b.n	801d39a <USBH_UserProcess+0x4a>

  default:
  break;
 801d398:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801d39a:	bf00      	nop
 801d39c:	370c      	adds	r7, #12
 801d39e:	46bd      	mov	sp, r7
 801d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3a4:	4770      	bx	lr
 801d3a6:	bf00      	nop
 801d3a8:	2004bd40 	.word	0x2004bd40

0801d3ac <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801d3ac:	b580      	push	{r7, lr}
 801d3ae:	b08a      	sub	sp, #40	; 0x28
 801d3b0:	af00      	add	r7, sp, #0
 801d3b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d3b4:	f107 0314 	add.w	r3, r7, #20
 801d3b8:	2200      	movs	r2, #0
 801d3ba:	601a      	str	r2, [r3, #0]
 801d3bc:	605a      	str	r2, [r3, #4]
 801d3be:	609a      	str	r2, [r3, #8]
 801d3c0:	60da      	str	r2, [r3, #12]
 801d3c2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	681b      	ldr	r3, [r3, #0]
 801d3c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801d3cc:	d13c      	bne.n	801d448 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d3ce:	4b20      	ldr	r3, [pc, #128]	; (801d450 <HAL_HCD_MspInit+0xa4>)
 801d3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3d2:	4a1f      	ldr	r2, [pc, #124]	; (801d450 <HAL_HCD_MspInit+0xa4>)
 801d3d4:	f043 0301 	orr.w	r3, r3, #1
 801d3d8:	6313      	str	r3, [r2, #48]	; 0x30
 801d3da:	4b1d      	ldr	r3, [pc, #116]	; (801d450 <HAL_HCD_MspInit+0xa4>)
 801d3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3de:	f003 0301 	and.w	r3, r3, #1
 801d3e2:	613b      	str	r3, [r7, #16]
 801d3e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 801d3e6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801d3ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d3ec:	2302      	movs	r3, #2
 801d3ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d3f0:	2300      	movs	r3, #0
 801d3f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d3f4:	2303      	movs	r3, #3
 801d3f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801d3f8:	230a      	movs	r3, #10
 801d3fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d3fc:	f107 0314 	add.w	r3, r7, #20
 801d400:	4619      	mov	r1, r3
 801d402:	4814      	ldr	r0, [pc, #80]	; (801d454 <HAL_HCD_MspInit+0xa8>)
 801d404:	f7ea f942 	bl	800768c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801d408:	4b11      	ldr	r3, [pc, #68]	; (801d450 <HAL_HCD_MspInit+0xa4>)
 801d40a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d40c:	4a10      	ldr	r2, [pc, #64]	; (801d450 <HAL_HCD_MspInit+0xa4>)
 801d40e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d412:	6353      	str	r3, [r2, #52]	; 0x34
 801d414:	4b0e      	ldr	r3, [pc, #56]	; (801d450 <HAL_HCD_MspInit+0xa4>)
 801d416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d41c:	60fb      	str	r3, [r7, #12]
 801d41e:	68fb      	ldr	r3, [r7, #12]
 801d420:	4b0b      	ldr	r3, [pc, #44]	; (801d450 <HAL_HCD_MspInit+0xa4>)
 801d422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d424:	4a0a      	ldr	r2, [pc, #40]	; (801d450 <HAL_HCD_MspInit+0xa4>)
 801d426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801d42a:	6453      	str	r3, [r2, #68]	; 0x44
 801d42c:	4b08      	ldr	r3, [pc, #32]	; (801d450 <HAL_HCD_MspInit+0xa4>)
 801d42e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d434:	60bb      	str	r3, [r7, #8]
 801d436:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801d438:	2200      	movs	r2, #0
 801d43a:	2105      	movs	r1, #5
 801d43c:	2043      	movs	r0, #67	; 0x43
 801d43e:	f7e8 ff07 	bl	8006250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801d442:	2043      	movs	r0, #67	; 0x43
 801d444:	f7e8 ff20 	bl	8006288 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801d448:	bf00      	nop
 801d44a:	3728      	adds	r7, #40	; 0x28
 801d44c:	46bd      	mov	sp, r7
 801d44e:	bd80      	pop	{r7, pc}
 801d450:	40023800 	.word	0x40023800
 801d454:	40020000 	.word	0x40020000

0801d458 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801d458:	b580      	push	{r7, lr}
 801d45a:	b082      	sub	sp, #8
 801d45c:	af00      	add	r7, sp, #0
 801d45e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801d460:	687b      	ldr	r3, [r7, #4]
 801d462:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801d466:	4618      	mov	r0, r3
 801d468:	f7fb fb27 	bl	8018aba <USBH_LL_IncTimer>
}
 801d46c:	bf00      	nop
 801d46e:	3708      	adds	r7, #8
 801d470:	46bd      	mov	sp, r7
 801d472:	bd80      	pop	{r7, pc}

0801d474 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801d474:	b580      	push	{r7, lr}
 801d476:	b082      	sub	sp, #8
 801d478:	af00      	add	r7, sp, #0
 801d47a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801d47c:	687b      	ldr	r3, [r7, #4]
 801d47e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801d482:	4618      	mov	r0, r3
 801d484:	f7fb fb6b 	bl	8018b5e <USBH_LL_Connect>
}
 801d488:	bf00      	nop
 801d48a:	3708      	adds	r7, #8
 801d48c:	46bd      	mov	sp, r7
 801d48e:	bd80      	pop	{r7, pc}

0801d490 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801d490:	b580      	push	{r7, lr}
 801d492:	b082      	sub	sp, #8
 801d494:	af00      	add	r7, sp, #0
 801d496:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801d49e:	4618      	mov	r0, r3
 801d4a0:	f7fb fb80 	bl	8018ba4 <USBH_LL_Disconnect>
}
 801d4a4:	bf00      	nop
 801d4a6:	3708      	adds	r7, #8
 801d4a8:	46bd      	mov	sp, r7
 801d4aa:	bd80      	pop	{r7, pc}

0801d4ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801d4ac:	b580      	push	{r7, lr}
 801d4ae:	b082      	sub	sp, #8
 801d4b0:	af00      	add	r7, sp, #0
 801d4b2:	6078      	str	r0, [r7, #4]
 801d4b4:	460b      	mov	r3, r1
 801d4b6:	70fb      	strb	r3, [r7, #3]
 801d4b8:	4613      	mov	r3, r2
 801d4ba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801d4bc:	687b      	ldr	r3, [r7, #4]
 801d4be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801d4c2:	4618      	mov	r0, r3
 801d4c4:	f7fb fbb5 	bl	8018c32 <USBH_LL_NotifyURBChange>
#endif
}
 801d4c8:	bf00      	nop
 801d4ca:	3708      	adds	r7, #8
 801d4cc:	46bd      	mov	sp, r7
 801d4ce:	bd80      	pop	{r7, pc}

0801d4d0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801d4d0:	b580      	push	{r7, lr}
 801d4d2:	b082      	sub	sp, #8
 801d4d4:	af00      	add	r7, sp, #0
 801d4d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801d4d8:	687b      	ldr	r3, [r7, #4]
 801d4da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801d4de:	4618      	mov	r0, r3
 801d4e0:	f7fb fb15 	bl	8018b0e <USBH_LL_PortEnabled>
}
 801d4e4:	bf00      	nop
 801d4e6:	3708      	adds	r7, #8
 801d4e8:	46bd      	mov	sp, r7
 801d4ea:	bd80      	pop	{r7, pc}

0801d4ec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801d4ec:	b580      	push	{r7, lr}
 801d4ee:	b082      	sub	sp, #8
 801d4f0:	af00      	add	r7, sp, #0
 801d4f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801d4f4:	687b      	ldr	r3, [r7, #4]
 801d4f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801d4fa:	4618      	mov	r0, r3
 801d4fc:	f7fb fb21 	bl	8018b42 <USBH_LL_PortDisabled>
}
 801d500:	bf00      	nop
 801d502:	3708      	adds	r7, #8
 801d504:	46bd      	mov	sp, r7
 801d506:	bd80      	pop	{r7, pc}

0801d508 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801d508:	b580      	push	{r7, lr}
 801d50a:	b082      	sub	sp, #8
 801d50c:	af00      	add	r7, sp, #0
 801d50e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801d510:	687b      	ldr	r3, [r7, #4]
 801d512:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801d516:	2b01      	cmp	r3, #1
 801d518:	d12a      	bne.n	801d570 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801d51a:	4a18      	ldr	r2, [pc, #96]	; (801d57c <USBH_LL_Init+0x74>)
 801d51c:	687b      	ldr	r3, [r7, #4]
 801d51e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801d522:	687b      	ldr	r3, [r7, #4]
 801d524:	4a15      	ldr	r2, [pc, #84]	; (801d57c <USBH_LL_Init+0x74>)
 801d526:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801d52a:	4b14      	ldr	r3, [pc, #80]	; (801d57c <USBH_LL_Init+0x74>)
 801d52c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801d530:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801d532:	4b12      	ldr	r3, [pc, #72]	; (801d57c <USBH_LL_Init+0x74>)
 801d534:	2208      	movs	r2, #8
 801d536:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801d538:	4b10      	ldr	r3, [pc, #64]	; (801d57c <USBH_LL_Init+0x74>)
 801d53a:	2201      	movs	r2, #1
 801d53c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801d53e:	4b0f      	ldr	r3, [pc, #60]	; (801d57c <USBH_LL_Init+0x74>)
 801d540:	2200      	movs	r2, #0
 801d542:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801d544:	4b0d      	ldr	r3, [pc, #52]	; (801d57c <USBH_LL_Init+0x74>)
 801d546:	2202      	movs	r2, #2
 801d548:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801d54a:	4b0c      	ldr	r3, [pc, #48]	; (801d57c <USBH_LL_Init+0x74>)
 801d54c:	2200      	movs	r2, #0
 801d54e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801d550:	480a      	ldr	r0, [pc, #40]	; (801d57c <USBH_LL_Init+0x74>)
 801d552:	f7ea fbc2 	bl	8007cda <HAL_HCD_Init>
 801d556:	4603      	mov	r3, r0
 801d558:	2b00      	cmp	r3, #0
 801d55a:	d001      	beq.n	801d560 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801d55c:	f7e5 f99a 	bl	8002894 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801d560:	4806      	ldr	r0, [pc, #24]	; (801d57c <USBH_LL_Init+0x74>)
 801d562:	f7ea ffa6 	bl	80084b2 <HAL_HCD_GetCurrentFrame>
 801d566:	4603      	mov	r3, r0
 801d568:	4619      	mov	r1, r3
 801d56a:	6878      	ldr	r0, [r7, #4]
 801d56c:	f7fb fa96 	bl	8018a9c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801d570:	2300      	movs	r3, #0
}
 801d572:	4618      	mov	r0, r3
 801d574:	3708      	adds	r7, #8
 801d576:	46bd      	mov	sp, r7
 801d578:	bd80      	pop	{r7, pc}
 801d57a:	bf00      	nop
 801d57c:	2004bd44 	.word	0x2004bd44

0801d580 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801d580:	b580      	push	{r7, lr}
 801d582:	b084      	sub	sp, #16
 801d584:	af00      	add	r7, sp, #0
 801d586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d588:	2300      	movs	r3, #0
 801d58a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801d58c:	2300      	movs	r3, #0
 801d58e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801d590:	687b      	ldr	r3, [r7, #4]
 801d592:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801d596:	4618      	mov	r0, r3
 801d598:	f7ea ff15 	bl	80083c6 <HAL_HCD_Start>
 801d59c:	4603      	mov	r3, r0
 801d59e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801d5a0:	7bfb      	ldrb	r3, [r7, #15]
 801d5a2:	4618      	mov	r0, r3
 801d5a4:	f000 f95c 	bl	801d860 <USBH_Get_USB_Status>
 801d5a8:	4603      	mov	r3, r0
 801d5aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d5ac:	7bbb      	ldrb	r3, [r7, #14]
}
 801d5ae:	4618      	mov	r0, r3
 801d5b0:	3710      	adds	r7, #16
 801d5b2:	46bd      	mov	sp, r7
 801d5b4:	bd80      	pop	{r7, pc}

0801d5b6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801d5b6:	b580      	push	{r7, lr}
 801d5b8:	b084      	sub	sp, #16
 801d5ba:	af00      	add	r7, sp, #0
 801d5bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d5be:	2300      	movs	r3, #0
 801d5c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801d5c2:	2300      	movs	r3, #0
 801d5c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801d5c6:	687b      	ldr	r3, [r7, #4]
 801d5c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801d5cc:	4618      	mov	r0, r3
 801d5ce:	f7ea ff1d 	bl	800840c <HAL_HCD_Stop>
 801d5d2:	4603      	mov	r3, r0
 801d5d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801d5d6:	7bfb      	ldrb	r3, [r7, #15]
 801d5d8:	4618      	mov	r0, r3
 801d5da:	f000 f941 	bl	801d860 <USBH_Get_USB_Status>
 801d5de:	4603      	mov	r3, r0
 801d5e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d5e2:	7bbb      	ldrb	r3, [r7, #14]
}
 801d5e4:	4618      	mov	r0, r3
 801d5e6:	3710      	adds	r7, #16
 801d5e8:	46bd      	mov	sp, r7
 801d5ea:	bd80      	pop	{r7, pc}

0801d5ec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801d5ec:	b580      	push	{r7, lr}
 801d5ee:	b084      	sub	sp, #16
 801d5f0:	af00      	add	r7, sp, #0
 801d5f2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801d5f4:	2301      	movs	r3, #1
 801d5f6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801d5f8:	687b      	ldr	r3, [r7, #4]
 801d5fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801d5fe:	4618      	mov	r0, r3
 801d600:	f7ea ff65 	bl	80084ce <HAL_HCD_GetCurrentSpeed>
 801d604:	4603      	mov	r3, r0
 801d606:	2b02      	cmp	r3, #2
 801d608:	d00c      	beq.n	801d624 <USBH_LL_GetSpeed+0x38>
 801d60a:	2b02      	cmp	r3, #2
 801d60c:	d80d      	bhi.n	801d62a <USBH_LL_GetSpeed+0x3e>
 801d60e:	2b00      	cmp	r3, #0
 801d610:	d002      	beq.n	801d618 <USBH_LL_GetSpeed+0x2c>
 801d612:	2b01      	cmp	r3, #1
 801d614:	d003      	beq.n	801d61e <USBH_LL_GetSpeed+0x32>
 801d616:	e008      	b.n	801d62a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801d618:	2300      	movs	r3, #0
 801d61a:	73fb      	strb	r3, [r7, #15]
    break;
 801d61c:	e008      	b.n	801d630 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801d61e:	2301      	movs	r3, #1
 801d620:	73fb      	strb	r3, [r7, #15]
    break;
 801d622:	e005      	b.n	801d630 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801d624:	2302      	movs	r3, #2
 801d626:	73fb      	strb	r3, [r7, #15]
    break;
 801d628:	e002      	b.n	801d630 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801d62a:	2301      	movs	r3, #1
 801d62c:	73fb      	strb	r3, [r7, #15]
    break;
 801d62e:	bf00      	nop
  }
  return  speed;
 801d630:	7bfb      	ldrb	r3, [r7, #15]
}
 801d632:	4618      	mov	r0, r3
 801d634:	3710      	adds	r7, #16
 801d636:	46bd      	mov	sp, r7
 801d638:	bd80      	pop	{r7, pc}

0801d63a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801d63a:	b580      	push	{r7, lr}
 801d63c:	b084      	sub	sp, #16
 801d63e:	af00      	add	r7, sp, #0
 801d640:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d642:	2300      	movs	r3, #0
 801d644:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801d646:	2300      	movs	r3, #0
 801d648:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801d64a:	687b      	ldr	r3, [r7, #4]
 801d64c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801d650:	4618      	mov	r0, r3
 801d652:	f7ea fef8 	bl	8008446 <HAL_HCD_ResetPort>
 801d656:	4603      	mov	r3, r0
 801d658:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801d65a:	7bfb      	ldrb	r3, [r7, #15]
 801d65c:	4618      	mov	r0, r3
 801d65e:	f000 f8ff 	bl	801d860 <USBH_Get_USB_Status>
 801d662:	4603      	mov	r3, r0
 801d664:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d666:	7bbb      	ldrb	r3, [r7, #14]
}
 801d668:	4618      	mov	r0, r3
 801d66a:	3710      	adds	r7, #16
 801d66c:	46bd      	mov	sp, r7
 801d66e:	bd80      	pop	{r7, pc}

0801d670 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801d670:	b580      	push	{r7, lr}
 801d672:	b082      	sub	sp, #8
 801d674:	af00      	add	r7, sp, #0
 801d676:	6078      	str	r0, [r7, #4]
 801d678:	460b      	mov	r3, r1
 801d67a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801d67c:	687b      	ldr	r3, [r7, #4]
 801d67e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801d682:	78fa      	ldrb	r2, [r7, #3]
 801d684:	4611      	mov	r1, r2
 801d686:	4618      	mov	r0, r3
 801d688:	f7ea feff 	bl	800848a <HAL_HCD_HC_GetXferCount>
 801d68c:	4603      	mov	r3, r0
}
 801d68e:	4618      	mov	r0, r3
 801d690:	3708      	adds	r7, #8
 801d692:	46bd      	mov	sp, r7
 801d694:	bd80      	pop	{r7, pc}

0801d696 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801d696:	b590      	push	{r4, r7, lr}
 801d698:	b089      	sub	sp, #36	; 0x24
 801d69a:	af04      	add	r7, sp, #16
 801d69c:	6078      	str	r0, [r7, #4]
 801d69e:	4608      	mov	r0, r1
 801d6a0:	4611      	mov	r1, r2
 801d6a2:	461a      	mov	r2, r3
 801d6a4:	4603      	mov	r3, r0
 801d6a6:	70fb      	strb	r3, [r7, #3]
 801d6a8:	460b      	mov	r3, r1
 801d6aa:	70bb      	strb	r3, [r7, #2]
 801d6ac:	4613      	mov	r3, r2
 801d6ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d6b0:	2300      	movs	r3, #0
 801d6b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801d6b4:	2300      	movs	r3, #0
 801d6b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801d6b8:	687b      	ldr	r3, [r7, #4]
 801d6ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801d6be:	787c      	ldrb	r4, [r7, #1]
 801d6c0:	78ba      	ldrb	r2, [r7, #2]
 801d6c2:	78f9      	ldrb	r1, [r7, #3]
 801d6c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801d6c6:	9302      	str	r3, [sp, #8]
 801d6c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d6cc:	9301      	str	r3, [sp, #4]
 801d6ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 801d6d2:	9300      	str	r3, [sp, #0]
 801d6d4:	4623      	mov	r3, r4
 801d6d6:	f7ea fb62 	bl	8007d9e <HAL_HCD_HC_Init>
 801d6da:	4603      	mov	r3, r0
 801d6dc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801d6de:	7bfb      	ldrb	r3, [r7, #15]
 801d6e0:	4618      	mov	r0, r3
 801d6e2:	f000 f8bd 	bl	801d860 <USBH_Get_USB_Status>
 801d6e6:	4603      	mov	r3, r0
 801d6e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d6ea:	7bbb      	ldrb	r3, [r7, #14]
}
 801d6ec:	4618      	mov	r0, r3
 801d6ee:	3714      	adds	r7, #20
 801d6f0:	46bd      	mov	sp, r7
 801d6f2:	bd90      	pop	{r4, r7, pc}

0801d6f4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801d6f4:	b580      	push	{r7, lr}
 801d6f6:	b084      	sub	sp, #16
 801d6f8:	af00      	add	r7, sp, #0
 801d6fa:	6078      	str	r0, [r7, #4]
 801d6fc:	460b      	mov	r3, r1
 801d6fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d700:	2300      	movs	r3, #0
 801d702:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801d704:	2300      	movs	r3, #0
 801d706:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801d708:	687b      	ldr	r3, [r7, #4]
 801d70a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801d70e:	78fa      	ldrb	r2, [r7, #3]
 801d710:	4611      	mov	r1, r2
 801d712:	4618      	mov	r0, r3
 801d714:	f7ea fbd2 	bl	8007ebc <HAL_HCD_HC_Halt>
 801d718:	4603      	mov	r3, r0
 801d71a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801d71c:	7bfb      	ldrb	r3, [r7, #15]
 801d71e:	4618      	mov	r0, r3
 801d720:	f000 f89e 	bl	801d860 <USBH_Get_USB_Status>
 801d724:	4603      	mov	r3, r0
 801d726:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d728:	7bbb      	ldrb	r3, [r7, #14]
}
 801d72a:	4618      	mov	r0, r3
 801d72c:	3710      	adds	r7, #16
 801d72e:	46bd      	mov	sp, r7
 801d730:	bd80      	pop	{r7, pc}

0801d732 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801d732:	b590      	push	{r4, r7, lr}
 801d734:	b089      	sub	sp, #36	; 0x24
 801d736:	af04      	add	r7, sp, #16
 801d738:	6078      	str	r0, [r7, #4]
 801d73a:	4608      	mov	r0, r1
 801d73c:	4611      	mov	r1, r2
 801d73e:	461a      	mov	r2, r3
 801d740:	4603      	mov	r3, r0
 801d742:	70fb      	strb	r3, [r7, #3]
 801d744:	460b      	mov	r3, r1
 801d746:	70bb      	strb	r3, [r7, #2]
 801d748:	4613      	mov	r3, r2
 801d74a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d74c:	2300      	movs	r3, #0
 801d74e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801d750:	2300      	movs	r3, #0
 801d752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801d754:	687b      	ldr	r3, [r7, #4]
 801d756:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801d75a:	787c      	ldrb	r4, [r7, #1]
 801d75c:	78ba      	ldrb	r2, [r7, #2]
 801d75e:	78f9      	ldrb	r1, [r7, #3]
 801d760:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801d764:	9303      	str	r3, [sp, #12]
 801d766:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801d768:	9302      	str	r3, [sp, #8]
 801d76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d76c:	9301      	str	r3, [sp, #4]
 801d76e:	f897 3020 	ldrb.w	r3, [r7, #32]
 801d772:	9300      	str	r3, [sp, #0]
 801d774:	4623      	mov	r3, r4
 801d776:	f7ea fbc5 	bl	8007f04 <HAL_HCD_HC_SubmitRequest>
 801d77a:	4603      	mov	r3, r0
 801d77c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801d77e:	7bfb      	ldrb	r3, [r7, #15]
 801d780:	4618      	mov	r0, r3
 801d782:	f000 f86d 	bl	801d860 <USBH_Get_USB_Status>
 801d786:	4603      	mov	r3, r0
 801d788:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d78a:	7bbb      	ldrb	r3, [r7, #14]
}
 801d78c:	4618      	mov	r0, r3
 801d78e:	3714      	adds	r7, #20
 801d790:	46bd      	mov	sp, r7
 801d792:	bd90      	pop	{r4, r7, pc}

0801d794 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801d794:	b580      	push	{r7, lr}
 801d796:	b082      	sub	sp, #8
 801d798:	af00      	add	r7, sp, #0
 801d79a:	6078      	str	r0, [r7, #4]
 801d79c:	460b      	mov	r3, r1
 801d79e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801d7a0:	687b      	ldr	r3, [r7, #4]
 801d7a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801d7a6:	78fa      	ldrb	r2, [r7, #3]
 801d7a8:	4611      	mov	r1, r2
 801d7aa:	4618      	mov	r0, r3
 801d7ac:	f7ea fe59 	bl	8008462 <HAL_HCD_HC_GetURBState>
 801d7b0:	4603      	mov	r3, r0
}
 801d7b2:	4618      	mov	r0, r3
 801d7b4:	3708      	adds	r7, #8
 801d7b6:	46bd      	mov	sp, r7
 801d7b8:	bd80      	pop	{r7, pc}

0801d7ba <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801d7ba:	b580      	push	{r7, lr}
 801d7bc:	b082      	sub	sp, #8
 801d7be:	af00      	add	r7, sp, #0
 801d7c0:	6078      	str	r0, [r7, #4]
 801d7c2:	460b      	mov	r3, r1
 801d7c4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801d7c6:	687b      	ldr	r3, [r7, #4]
 801d7c8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801d7cc:	2b01      	cmp	r3, #1
 801d7ce:	d103      	bne.n	801d7d8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801d7d0:	78fb      	ldrb	r3, [r7, #3]
 801d7d2:	4618      	mov	r0, r3
 801d7d4:	f000 f870 	bl	801d8b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801d7d8:	20c8      	movs	r0, #200	; 0xc8
 801d7da:	f7e8 f9a5 	bl	8005b28 <HAL_Delay>
  return USBH_OK;
 801d7de:	2300      	movs	r3, #0
}
 801d7e0:	4618      	mov	r0, r3
 801d7e2:	3708      	adds	r7, #8
 801d7e4:	46bd      	mov	sp, r7
 801d7e6:	bd80      	pop	{r7, pc}

0801d7e8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801d7e8:	b480      	push	{r7}
 801d7ea:	b085      	sub	sp, #20
 801d7ec:	af00      	add	r7, sp, #0
 801d7ee:	6078      	str	r0, [r7, #4]
 801d7f0:	460b      	mov	r3, r1
 801d7f2:	70fb      	strb	r3, [r7, #3]
 801d7f4:	4613      	mov	r3, r2
 801d7f6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801d7f8:	687b      	ldr	r3, [r7, #4]
 801d7fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801d7fe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801d800:	78fb      	ldrb	r3, [r7, #3]
 801d802:	68fa      	ldr	r2, [r7, #12]
 801d804:	212c      	movs	r1, #44	; 0x2c
 801d806:	fb01 f303 	mul.w	r3, r1, r3
 801d80a:	4413      	add	r3, r2
 801d80c:	333b      	adds	r3, #59	; 0x3b
 801d80e:	781b      	ldrb	r3, [r3, #0]
 801d810:	2b00      	cmp	r3, #0
 801d812:	d009      	beq.n	801d828 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801d814:	78fb      	ldrb	r3, [r7, #3]
 801d816:	68fa      	ldr	r2, [r7, #12]
 801d818:	212c      	movs	r1, #44	; 0x2c
 801d81a:	fb01 f303 	mul.w	r3, r1, r3
 801d81e:	4413      	add	r3, r2
 801d820:	3354      	adds	r3, #84	; 0x54
 801d822:	78ba      	ldrb	r2, [r7, #2]
 801d824:	701a      	strb	r2, [r3, #0]
 801d826:	e008      	b.n	801d83a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801d828:	78fb      	ldrb	r3, [r7, #3]
 801d82a:	68fa      	ldr	r2, [r7, #12]
 801d82c:	212c      	movs	r1, #44	; 0x2c
 801d82e:	fb01 f303 	mul.w	r3, r1, r3
 801d832:	4413      	add	r3, r2
 801d834:	3355      	adds	r3, #85	; 0x55
 801d836:	78ba      	ldrb	r2, [r7, #2]
 801d838:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801d83a:	2300      	movs	r3, #0
}
 801d83c:	4618      	mov	r0, r3
 801d83e:	3714      	adds	r7, #20
 801d840:	46bd      	mov	sp, r7
 801d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d846:	4770      	bx	lr

0801d848 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801d848:	b580      	push	{r7, lr}
 801d84a:	b082      	sub	sp, #8
 801d84c:	af00      	add	r7, sp, #0
 801d84e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801d850:	6878      	ldr	r0, [r7, #4]
 801d852:	f7e8 f969 	bl	8005b28 <HAL_Delay>
}
 801d856:	bf00      	nop
 801d858:	3708      	adds	r7, #8
 801d85a:	46bd      	mov	sp, r7
 801d85c:	bd80      	pop	{r7, pc}
	...

0801d860 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d860:	b480      	push	{r7}
 801d862:	b085      	sub	sp, #20
 801d864:	af00      	add	r7, sp, #0
 801d866:	4603      	mov	r3, r0
 801d868:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801d86a:	2300      	movs	r3, #0
 801d86c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801d86e:	79fb      	ldrb	r3, [r7, #7]
 801d870:	2b03      	cmp	r3, #3
 801d872:	d817      	bhi.n	801d8a4 <USBH_Get_USB_Status+0x44>
 801d874:	a201      	add	r2, pc, #4	; (adr r2, 801d87c <USBH_Get_USB_Status+0x1c>)
 801d876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d87a:	bf00      	nop
 801d87c:	0801d88d 	.word	0x0801d88d
 801d880:	0801d893 	.word	0x0801d893
 801d884:	0801d899 	.word	0x0801d899
 801d888:	0801d89f 	.word	0x0801d89f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801d88c:	2300      	movs	r3, #0
 801d88e:	73fb      	strb	r3, [r7, #15]
    break;
 801d890:	e00b      	b.n	801d8aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801d892:	2302      	movs	r3, #2
 801d894:	73fb      	strb	r3, [r7, #15]
    break;
 801d896:	e008      	b.n	801d8aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801d898:	2301      	movs	r3, #1
 801d89a:	73fb      	strb	r3, [r7, #15]
    break;
 801d89c:	e005      	b.n	801d8aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801d89e:	2302      	movs	r3, #2
 801d8a0:	73fb      	strb	r3, [r7, #15]
    break;
 801d8a2:	e002      	b.n	801d8aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801d8a4:	2302      	movs	r3, #2
 801d8a6:	73fb      	strb	r3, [r7, #15]
    break;
 801d8a8:	bf00      	nop
  }
  return usb_status;
 801d8aa:	7bfb      	ldrb	r3, [r7, #15]
}
 801d8ac:	4618      	mov	r0, r3
 801d8ae:	3714      	adds	r7, #20
 801d8b0:	46bd      	mov	sp, r7
 801d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8b6:	4770      	bx	lr

0801d8b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801d8b8:	b580      	push	{r7, lr}
 801d8ba:	b084      	sub	sp, #16
 801d8bc:	af00      	add	r7, sp, #0
 801d8be:	4603      	mov	r3, r0
 801d8c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801d8c2:	79fb      	ldrb	r3, [r7, #7]
 801d8c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801d8c6:	79fb      	ldrb	r3, [r7, #7]
 801d8c8:	2b00      	cmp	r3, #0
 801d8ca:	d102      	bne.n	801d8d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 801d8cc:	2301      	movs	r3, #1
 801d8ce:	73fb      	strb	r3, [r7, #15]
 801d8d0:	e001      	b.n	801d8d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801d8d2:	2300      	movs	r3, #0
 801d8d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801d8d6:	7bfb      	ldrb	r3, [r7, #15]
 801d8d8:	461a      	mov	r2, r3
 801d8da:	2120      	movs	r1, #32
 801d8dc:	4803      	ldr	r0, [pc, #12]	; (801d8ec <MX_DriverVbusFS+0x34>)
 801d8de:	f7ea f9a5 	bl	8007c2c <HAL_GPIO_WritePin>
}
 801d8e2:	bf00      	nop
 801d8e4:	3710      	adds	r7, #16
 801d8e6:	46bd      	mov	sp, r7
 801d8e8:	bd80      	pop	{r7, pc}
 801d8ea:	bf00      	nop
 801d8ec:	40020c00 	.word	0x40020c00

0801d8f0 <__errno>:
 801d8f0:	4b01      	ldr	r3, [pc, #4]	; (801d8f8 <__errno+0x8>)
 801d8f2:	6818      	ldr	r0, [r3, #0]
 801d8f4:	4770      	bx	lr
 801d8f6:	bf00      	nop
 801d8f8:	20000150 	.word	0x20000150

0801d8fc <__libc_init_array>:
 801d8fc:	b570      	push	{r4, r5, r6, lr}
 801d8fe:	4d0d      	ldr	r5, [pc, #52]	; (801d934 <__libc_init_array+0x38>)
 801d900:	4c0d      	ldr	r4, [pc, #52]	; (801d938 <__libc_init_array+0x3c>)
 801d902:	1b64      	subs	r4, r4, r5
 801d904:	10a4      	asrs	r4, r4, #2
 801d906:	2600      	movs	r6, #0
 801d908:	42a6      	cmp	r6, r4
 801d90a:	d109      	bne.n	801d920 <__libc_init_array+0x24>
 801d90c:	4d0b      	ldr	r5, [pc, #44]	; (801d93c <__libc_init_array+0x40>)
 801d90e:	4c0c      	ldr	r4, [pc, #48]	; (801d940 <__libc_init_array+0x44>)
 801d910:	f001 fa6e 	bl	801edf0 <_init>
 801d914:	1b64      	subs	r4, r4, r5
 801d916:	10a4      	asrs	r4, r4, #2
 801d918:	2600      	movs	r6, #0
 801d91a:	42a6      	cmp	r6, r4
 801d91c:	d105      	bne.n	801d92a <__libc_init_array+0x2e>
 801d91e:	bd70      	pop	{r4, r5, r6, pc}
 801d920:	f855 3b04 	ldr.w	r3, [r5], #4
 801d924:	4798      	blx	r3
 801d926:	3601      	adds	r6, #1
 801d928:	e7ee      	b.n	801d908 <__libc_init_array+0xc>
 801d92a:	f855 3b04 	ldr.w	r3, [r5], #4
 801d92e:	4798      	blx	r3
 801d930:	3601      	adds	r6, #1
 801d932:	e7f2      	b.n	801d91a <__libc_init_array+0x1e>
 801d934:	08020c08 	.word	0x08020c08
 801d938:	08020c08 	.word	0x08020c08
 801d93c:	08020c08 	.word	0x08020c08
 801d940:	08020c0c 	.word	0x08020c0c

0801d944 <malloc>:
 801d944:	4b02      	ldr	r3, [pc, #8]	; (801d950 <malloc+0xc>)
 801d946:	4601      	mov	r1, r0
 801d948:	6818      	ldr	r0, [r3, #0]
 801d94a:	f000 b88d 	b.w	801da68 <_malloc_r>
 801d94e:	bf00      	nop
 801d950:	20000150 	.word	0x20000150

0801d954 <free>:
 801d954:	4b02      	ldr	r3, [pc, #8]	; (801d960 <free+0xc>)
 801d956:	4601      	mov	r1, r0
 801d958:	6818      	ldr	r0, [r3, #0]
 801d95a:	f000 b819 	b.w	801d990 <_free_r>
 801d95e:	bf00      	nop
 801d960:	20000150 	.word	0x20000150

0801d964 <memcpy>:
 801d964:	440a      	add	r2, r1
 801d966:	4291      	cmp	r1, r2
 801d968:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801d96c:	d100      	bne.n	801d970 <memcpy+0xc>
 801d96e:	4770      	bx	lr
 801d970:	b510      	push	{r4, lr}
 801d972:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d976:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d97a:	4291      	cmp	r1, r2
 801d97c:	d1f9      	bne.n	801d972 <memcpy+0xe>
 801d97e:	bd10      	pop	{r4, pc}

0801d980 <memset>:
 801d980:	4402      	add	r2, r0
 801d982:	4603      	mov	r3, r0
 801d984:	4293      	cmp	r3, r2
 801d986:	d100      	bne.n	801d98a <memset+0xa>
 801d988:	4770      	bx	lr
 801d98a:	f803 1b01 	strb.w	r1, [r3], #1
 801d98e:	e7f9      	b.n	801d984 <memset+0x4>

0801d990 <_free_r>:
 801d990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d992:	2900      	cmp	r1, #0
 801d994:	d044      	beq.n	801da20 <_free_r+0x90>
 801d996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d99a:	9001      	str	r0, [sp, #4]
 801d99c:	2b00      	cmp	r3, #0
 801d99e:	f1a1 0404 	sub.w	r4, r1, #4
 801d9a2:	bfb8      	it	lt
 801d9a4:	18e4      	addlt	r4, r4, r3
 801d9a6:	f000 fc87 	bl	801e2b8 <__malloc_lock>
 801d9aa:	4a1e      	ldr	r2, [pc, #120]	; (801da24 <_free_r+0x94>)
 801d9ac:	9801      	ldr	r0, [sp, #4]
 801d9ae:	6813      	ldr	r3, [r2, #0]
 801d9b0:	b933      	cbnz	r3, 801d9c0 <_free_r+0x30>
 801d9b2:	6063      	str	r3, [r4, #4]
 801d9b4:	6014      	str	r4, [r2, #0]
 801d9b6:	b003      	add	sp, #12
 801d9b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d9bc:	f000 bc82 	b.w	801e2c4 <__malloc_unlock>
 801d9c0:	42a3      	cmp	r3, r4
 801d9c2:	d908      	bls.n	801d9d6 <_free_r+0x46>
 801d9c4:	6825      	ldr	r5, [r4, #0]
 801d9c6:	1961      	adds	r1, r4, r5
 801d9c8:	428b      	cmp	r3, r1
 801d9ca:	bf01      	itttt	eq
 801d9cc:	6819      	ldreq	r1, [r3, #0]
 801d9ce:	685b      	ldreq	r3, [r3, #4]
 801d9d0:	1949      	addeq	r1, r1, r5
 801d9d2:	6021      	streq	r1, [r4, #0]
 801d9d4:	e7ed      	b.n	801d9b2 <_free_r+0x22>
 801d9d6:	461a      	mov	r2, r3
 801d9d8:	685b      	ldr	r3, [r3, #4]
 801d9da:	b10b      	cbz	r3, 801d9e0 <_free_r+0x50>
 801d9dc:	42a3      	cmp	r3, r4
 801d9de:	d9fa      	bls.n	801d9d6 <_free_r+0x46>
 801d9e0:	6811      	ldr	r1, [r2, #0]
 801d9e2:	1855      	adds	r5, r2, r1
 801d9e4:	42a5      	cmp	r5, r4
 801d9e6:	d10b      	bne.n	801da00 <_free_r+0x70>
 801d9e8:	6824      	ldr	r4, [r4, #0]
 801d9ea:	4421      	add	r1, r4
 801d9ec:	1854      	adds	r4, r2, r1
 801d9ee:	42a3      	cmp	r3, r4
 801d9f0:	6011      	str	r1, [r2, #0]
 801d9f2:	d1e0      	bne.n	801d9b6 <_free_r+0x26>
 801d9f4:	681c      	ldr	r4, [r3, #0]
 801d9f6:	685b      	ldr	r3, [r3, #4]
 801d9f8:	6053      	str	r3, [r2, #4]
 801d9fa:	4421      	add	r1, r4
 801d9fc:	6011      	str	r1, [r2, #0]
 801d9fe:	e7da      	b.n	801d9b6 <_free_r+0x26>
 801da00:	d902      	bls.n	801da08 <_free_r+0x78>
 801da02:	230c      	movs	r3, #12
 801da04:	6003      	str	r3, [r0, #0]
 801da06:	e7d6      	b.n	801d9b6 <_free_r+0x26>
 801da08:	6825      	ldr	r5, [r4, #0]
 801da0a:	1961      	adds	r1, r4, r5
 801da0c:	428b      	cmp	r3, r1
 801da0e:	bf04      	itt	eq
 801da10:	6819      	ldreq	r1, [r3, #0]
 801da12:	685b      	ldreq	r3, [r3, #4]
 801da14:	6063      	str	r3, [r4, #4]
 801da16:	bf04      	itt	eq
 801da18:	1949      	addeq	r1, r1, r5
 801da1a:	6021      	streq	r1, [r4, #0]
 801da1c:	6054      	str	r4, [r2, #4]
 801da1e:	e7ca      	b.n	801d9b6 <_free_r+0x26>
 801da20:	b003      	add	sp, #12
 801da22:	bd30      	pop	{r4, r5, pc}
 801da24:	2004c048 	.word	0x2004c048

0801da28 <sbrk_aligned>:
 801da28:	b570      	push	{r4, r5, r6, lr}
 801da2a:	4e0e      	ldr	r6, [pc, #56]	; (801da64 <sbrk_aligned+0x3c>)
 801da2c:	460c      	mov	r4, r1
 801da2e:	6831      	ldr	r1, [r6, #0]
 801da30:	4605      	mov	r5, r0
 801da32:	b911      	cbnz	r1, 801da3a <sbrk_aligned+0x12>
 801da34:	f000 f930 	bl	801dc98 <_sbrk_r>
 801da38:	6030      	str	r0, [r6, #0]
 801da3a:	4621      	mov	r1, r4
 801da3c:	4628      	mov	r0, r5
 801da3e:	f000 f92b 	bl	801dc98 <_sbrk_r>
 801da42:	1c43      	adds	r3, r0, #1
 801da44:	d00a      	beq.n	801da5c <sbrk_aligned+0x34>
 801da46:	1cc4      	adds	r4, r0, #3
 801da48:	f024 0403 	bic.w	r4, r4, #3
 801da4c:	42a0      	cmp	r0, r4
 801da4e:	d007      	beq.n	801da60 <sbrk_aligned+0x38>
 801da50:	1a21      	subs	r1, r4, r0
 801da52:	4628      	mov	r0, r5
 801da54:	f000 f920 	bl	801dc98 <_sbrk_r>
 801da58:	3001      	adds	r0, #1
 801da5a:	d101      	bne.n	801da60 <sbrk_aligned+0x38>
 801da5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801da60:	4620      	mov	r0, r4
 801da62:	bd70      	pop	{r4, r5, r6, pc}
 801da64:	2004c04c 	.word	0x2004c04c

0801da68 <_malloc_r>:
 801da68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da6c:	1ccd      	adds	r5, r1, #3
 801da6e:	f025 0503 	bic.w	r5, r5, #3
 801da72:	3508      	adds	r5, #8
 801da74:	2d0c      	cmp	r5, #12
 801da76:	bf38      	it	cc
 801da78:	250c      	movcc	r5, #12
 801da7a:	2d00      	cmp	r5, #0
 801da7c:	4607      	mov	r7, r0
 801da7e:	db01      	blt.n	801da84 <_malloc_r+0x1c>
 801da80:	42a9      	cmp	r1, r5
 801da82:	d905      	bls.n	801da90 <_malloc_r+0x28>
 801da84:	230c      	movs	r3, #12
 801da86:	603b      	str	r3, [r7, #0]
 801da88:	2600      	movs	r6, #0
 801da8a:	4630      	mov	r0, r6
 801da8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da90:	4e2e      	ldr	r6, [pc, #184]	; (801db4c <_malloc_r+0xe4>)
 801da92:	f000 fc11 	bl	801e2b8 <__malloc_lock>
 801da96:	6833      	ldr	r3, [r6, #0]
 801da98:	461c      	mov	r4, r3
 801da9a:	bb34      	cbnz	r4, 801daea <_malloc_r+0x82>
 801da9c:	4629      	mov	r1, r5
 801da9e:	4638      	mov	r0, r7
 801daa0:	f7ff ffc2 	bl	801da28 <sbrk_aligned>
 801daa4:	1c43      	adds	r3, r0, #1
 801daa6:	4604      	mov	r4, r0
 801daa8:	d14d      	bne.n	801db46 <_malloc_r+0xde>
 801daaa:	6834      	ldr	r4, [r6, #0]
 801daac:	4626      	mov	r6, r4
 801daae:	2e00      	cmp	r6, #0
 801dab0:	d140      	bne.n	801db34 <_malloc_r+0xcc>
 801dab2:	6823      	ldr	r3, [r4, #0]
 801dab4:	4631      	mov	r1, r6
 801dab6:	4638      	mov	r0, r7
 801dab8:	eb04 0803 	add.w	r8, r4, r3
 801dabc:	f000 f8ec 	bl	801dc98 <_sbrk_r>
 801dac0:	4580      	cmp	r8, r0
 801dac2:	d13a      	bne.n	801db3a <_malloc_r+0xd2>
 801dac4:	6821      	ldr	r1, [r4, #0]
 801dac6:	3503      	adds	r5, #3
 801dac8:	1a6d      	subs	r5, r5, r1
 801daca:	f025 0503 	bic.w	r5, r5, #3
 801dace:	3508      	adds	r5, #8
 801dad0:	2d0c      	cmp	r5, #12
 801dad2:	bf38      	it	cc
 801dad4:	250c      	movcc	r5, #12
 801dad6:	4629      	mov	r1, r5
 801dad8:	4638      	mov	r0, r7
 801dada:	f7ff ffa5 	bl	801da28 <sbrk_aligned>
 801dade:	3001      	adds	r0, #1
 801dae0:	d02b      	beq.n	801db3a <_malloc_r+0xd2>
 801dae2:	6823      	ldr	r3, [r4, #0]
 801dae4:	442b      	add	r3, r5
 801dae6:	6023      	str	r3, [r4, #0]
 801dae8:	e00e      	b.n	801db08 <_malloc_r+0xa0>
 801daea:	6822      	ldr	r2, [r4, #0]
 801daec:	1b52      	subs	r2, r2, r5
 801daee:	d41e      	bmi.n	801db2e <_malloc_r+0xc6>
 801daf0:	2a0b      	cmp	r2, #11
 801daf2:	d916      	bls.n	801db22 <_malloc_r+0xba>
 801daf4:	1961      	adds	r1, r4, r5
 801daf6:	42a3      	cmp	r3, r4
 801daf8:	6025      	str	r5, [r4, #0]
 801dafa:	bf18      	it	ne
 801dafc:	6059      	strne	r1, [r3, #4]
 801dafe:	6863      	ldr	r3, [r4, #4]
 801db00:	bf08      	it	eq
 801db02:	6031      	streq	r1, [r6, #0]
 801db04:	5162      	str	r2, [r4, r5]
 801db06:	604b      	str	r3, [r1, #4]
 801db08:	4638      	mov	r0, r7
 801db0a:	f104 060b 	add.w	r6, r4, #11
 801db0e:	f000 fbd9 	bl	801e2c4 <__malloc_unlock>
 801db12:	f026 0607 	bic.w	r6, r6, #7
 801db16:	1d23      	adds	r3, r4, #4
 801db18:	1af2      	subs	r2, r6, r3
 801db1a:	d0b6      	beq.n	801da8a <_malloc_r+0x22>
 801db1c:	1b9b      	subs	r3, r3, r6
 801db1e:	50a3      	str	r3, [r4, r2]
 801db20:	e7b3      	b.n	801da8a <_malloc_r+0x22>
 801db22:	6862      	ldr	r2, [r4, #4]
 801db24:	42a3      	cmp	r3, r4
 801db26:	bf0c      	ite	eq
 801db28:	6032      	streq	r2, [r6, #0]
 801db2a:	605a      	strne	r2, [r3, #4]
 801db2c:	e7ec      	b.n	801db08 <_malloc_r+0xa0>
 801db2e:	4623      	mov	r3, r4
 801db30:	6864      	ldr	r4, [r4, #4]
 801db32:	e7b2      	b.n	801da9a <_malloc_r+0x32>
 801db34:	4634      	mov	r4, r6
 801db36:	6876      	ldr	r6, [r6, #4]
 801db38:	e7b9      	b.n	801daae <_malloc_r+0x46>
 801db3a:	230c      	movs	r3, #12
 801db3c:	603b      	str	r3, [r7, #0]
 801db3e:	4638      	mov	r0, r7
 801db40:	f000 fbc0 	bl	801e2c4 <__malloc_unlock>
 801db44:	e7a1      	b.n	801da8a <_malloc_r+0x22>
 801db46:	6025      	str	r5, [r4, #0]
 801db48:	e7de      	b.n	801db08 <_malloc_r+0xa0>
 801db4a:	bf00      	nop
 801db4c:	2004c048 	.word	0x2004c048

0801db50 <iprintf>:
 801db50:	b40f      	push	{r0, r1, r2, r3}
 801db52:	4b0a      	ldr	r3, [pc, #40]	; (801db7c <iprintf+0x2c>)
 801db54:	b513      	push	{r0, r1, r4, lr}
 801db56:	681c      	ldr	r4, [r3, #0]
 801db58:	b124      	cbz	r4, 801db64 <iprintf+0x14>
 801db5a:	69a3      	ldr	r3, [r4, #24]
 801db5c:	b913      	cbnz	r3, 801db64 <iprintf+0x14>
 801db5e:	4620      	mov	r0, r4
 801db60:	f000 faa4 	bl	801e0ac <__sinit>
 801db64:	ab05      	add	r3, sp, #20
 801db66:	9a04      	ldr	r2, [sp, #16]
 801db68:	68a1      	ldr	r1, [r4, #8]
 801db6a:	9301      	str	r3, [sp, #4]
 801db6c:	4620      	mov	r0, r4
 801db6e:	f000 fd35 	bl	801e5dc <_vfiprintf_r>
 801db72:	b002      	add	sp, #8
 801db74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801db78:	b004      	add	sp, #16
 801db7a:	4770      	bx	lr
 801db7c:	20000150 	.word	0x20000150

0801db80 <putchar>:
 801db80:	4b09      	ldr	r3, [pc, #36]	; (801dba8 <putchar+0x28>)
 801db82:	b513      	push	{r0, r1, r4, lr}
 801db84:	681c      	ldr	r4, [r3, #0]
 801db86:	4601      	mov	r1, r0
 801db88:	b134      	cbz	r4, 801db98 <putchar+0x18>
 801db8a:	69a3      	ldr	r3, [r4, #24]
 801db8c:	b923      	cbnz	r3, 801db98 <putchar+0x18>
 801db8e:	9001      	str	r0, [sp, #4]
 801db90:	4620      	mov	r0, r4
 801db92:	f000 fa8b 	bl	801e0ac <__sinit>
 801db96:	9901      	ldr	r1, [sp, #4]
 801db98:	68a2      	ldr	r2, [r4, #8]
 801db9a:	4620      	mov	r0, r4
 801db9c:	b002      	add	sp, #8
 801db9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dba2:	f000 bfdf 	b.w	801eb64 <_putc_r>
 801dba6:	bf00      	nop
 801dba8:	20000150 	.word	0x20000150

0801dbac <_puts_r>:
 801dbac:	b570      	push	{r4, r5, r6, lr}
 801dbae:	460e      	mov	r6, r1
 801dbb0:	4605      	mov	r5, r0
 801dbb2:	b118      	cbz	r0, 801dbbc <_puts_r+0x10>
 801dbb4:	6983      	ldr	r3, [r0, #24]
 801dbb6:	b90b      	cbnz	r3, 801dbbc <_puts_r+0x10>
 801dbb8:	f000 fa78 	bl	801e0ac <__sinit>
 801dbbc:	69ab      	ldr	r3, [r5, #24]
 801dbbe:	68ac      	ldr	r4, [r5, #8]
 801dbc0:	b913      	cbnz	r3, 801dbc8 <_puts_r+0x1c>
 801dbc2:	4628      	mov	r0, r5
 801dbc4:	f000 fa72 	bl	801e0ac <__sinit>
 801dbc8:	4b2c      	ldr	r3, [pc, #176]	; (801dc7c <_puts_r+0xd0>)
 801dbca:	429c      	cmp	r4, r3
 801dbcc:	d120      	bne.n	801dc10 <_puts_r+0x64>
 801dbce:	686c      	ldr	r4, [r5, #4]
 801dbd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dbd2:	07db      	lsls	r3, r3, #31
 801dbd4:	d405      	bmi.n	801dbe2 <_puts_r+0x36>
 801dbd6:	89a3      	ldrh	r3, [r4, #12]
 801dbd8:	0598      	lsls	r0, r3, #22
 801dbda:	d402      	bmi.n	801dbe2 <_puts_r+0x36>
 801dbdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dbde:	f000 fb03 	bl	801e1e8 <__retarget_lock_acquire_recursive>
 801dbe2:	89a3      	ldrh	r3, [r4, #12]
 801dbe4:	0719      	lsls	r1, r3, #28
 801dbe6:	d51d      	bpl.n	801dc24 <_puts_r+0x78>
 801dbe8:	6923      	ldr	r3, [r4, #16]
 801dbea:	b1db      	cbz	r3, 801dc24 <_puts_r+0x78>
 801dbec:	3e01      	subs	r6, #1
 801dbee:	68a3      	ldr	r3, [r4, #8]
 801dbf0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801dbf4:	3b01      	subs	r3, #1
 801dbf6:	60a3      	str	r3, [r4, #8]
 801dbf8:	bb39      	cbnz	r1, 801dc4a <_puts_r+0x9e>
 801dbfa:	2b00      	cmp	r3, #0
 801dbfc:	da38      	bge.n	801dc70 <_puts_r+0xc4>
 801dbfe:	4622      	mov	r2, r4
 801dc00:	210a      	movs	r1, #10
 801dc02:	4628      	mov	r0, r5
 801dc04:	f000 f878 	bl	801dcf8 <__swbuf_r>
 801dc08:	3001      	adds	r0, #1
 801dc0a:	d011      	beq.n	801dc30 <_puts_r+0x84>
 801dc0c:	250a      	movs	r5, #10
 801dc0e:	e011      	b.n	801dc34 <_puts_r+0x88>
 801dc10:	4b1b      	ldr	r3, [pc, #108]	; (801dc80 <_puts_r+0xd4>)
 801dc12:	429c      	cmp	r4, r3
 801dc14:	d101      	bne.n	801dc1a <_puts_r+0x6e>
 801dc16:	68ac      	ldr	r4, [r5, #8]
 801dc18:	e7da      	b.n	801dbd0 <_puts_r+0x24>
 801dc1a:	4b1a      	ldr	r3, [pc, #104]	; (801dc84 <_puts_r+0xd8>)
 801dc1c:	429c      	cmp	r4, r3
 801dc1e:	bf08      	it	eq
 801dc20:	68ec      	ldreq	r4, [r5, #12]
 801dc22:	e7d5      	b.n	801dbd0 <_puts_r+0x24>
 801dc24:	4621      	mov	r1, r4
 801dc26:	4628      	mov	r0, r5
 801dc28:	f000 f8b8 	bl	801dd9c <__swsetup_r>
 801dc2c:	2800      	cmp	r0, #0
 801dc2e:	d0dd      	beq.n	801dbec <_puts_r+0x40>
 801dc30:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801dc34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dc36:	07da      	lsls	r2, r3, #31
 801dc38:	d405      	bmi.n	801dc46 <_puts_r+0x9a>
 801dc3a:	89a3      	ldrh	r3, [r4, #12]
 801dc3c:	059b      	lsls	r3, r3, #22
 801dc3e:	d402      	bmi.n	801dc46 <_puts_r+0x9a>
 801dc40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dc42:	f000 fad2 	bl	801e1ea <__retarget_lock_release_recursive>
 801dc46:	4628      	mov	r0, r5
 801dc48:	bd70      	pop	{r4, r5, r6, pc}
 801dc4a:	2b00      	cmp	r3, #0
 801dc4c:	da04      	bge.n	801dc58 <_puts_r+0xac>
 801dc4e:	69a2      	ldr	r2, [r4, #24]
 801dc50:	429a      	cmp	r2, r3
 801dc52:	dc06      	bgt.n	801dc62 <_puts_r+0xb6>
 801dc54:	290a      	cmp	r1, #10
 801dc56:	d004      	beq.n	801dc62 <_puts_r+0xb6>
 801dc58:	6823      	ldr	r3, [r4, #0]
 801dc5a:	1c5a      	adds	r2, r3, #1
 801dc5c:	6022      	str	r2, [r4, #0]
 801dc5e:	7019      	strb	r1, [r3, #0]
 801dc60:	e7c5      	b.n	801dbee <_puts_r+0x42>
 801dc62:	4622      	mov	r2, r4
 801dc64:	4628      	mov	r0, r5
 801dc66:	f000 f847 	bl	801dcf8 <__swbuf_r>
 801dc6a:	3001      	adds	r0, #1
 801dc6c:	d1bf      	bne.n	801dbee <_puts_r+0x42>
 801dc6e:	e7df      	b.n	801dc30 <_puts_r+0x84>
 801dc70:	6823      	ldr	r3, [r4, #0]
 801dc72:	250a      	movs	r5, #10
 801dc74:	1c5a      	adds	r2, r3, #1
 801dc76:	6022      	str	r2, [r4, #0]
 801dc78:	701d      	strb	r5, [r3, #0]
 801dc7a:	e7db      	b.n	801dc34 <_puts_r+0x88>
 801dc7c:	08020b8c 	.word	0x08020b8c
 801dc80:	08020bac 	.word	0x08020bac
 801dc84:	08020b6c 	.word	0x08020b6c

0801dc88 <puts>:
 801dc88:	4b02      	ldr	r3, [pc, #8]	; (801dc94 <puts+0xc>)
 801dc8a:	4601      	mov	r1, r0
 801dc8c:	6818      	ldr	r0, [r3, #0]
 801dc8e:	f7ff bf8d 	b.w	801dbac <_puts_r>
 801dc92:	bf00      	nop
 801dc94:	20000150 	.word	0x20000150

0801dc98 <_sbrk_r>:
 801dc98:	b538      	push	{r3, r4, r5, lr}
 801dc9a:	4d06      	ldr	r5, [pc, #24]	; (801dcb4 <_sbrk_r+0x1c>)
 801dc9c:	2300      	movs	r3, #0
 801dc9e:	4604      	mov	r4, r0
 801dca0:	4608      	mov	r0, r1
 801dca2:	602b      	str	r3, [r5, #0]
 801dca4:	f7e6 f81c 	bl	8003ce0 <_sbrk>
 801dca8:	1c43      	adds	r3, r0, #1
 801dcaa:	d102      	bne.n	801dcb2 <_sbrk_r+0x1a>
 801dcac:	682b      	ldr	r3, [r5, #0]
 801dcae:	b103      	cbz	r3, 801dcb2 <_sbrk_r+0x1a>
 801dcb0:	6023      	str	r3, [r4, #0]
 801dcb2:	bd38      	pop	{r3, r4, r5, pc}
 801dcb4:	2004c054 	.word	0x2004c054

0801dcb8 <siprintf>:
 801dcb8:	b40e      	push	{r1, r2, r3}
 801dcba:	b500      	push	{lr}
 801dcbc:	b09c      	sub	sp, #112	; 0x70
 801dcbe:	ab1d      	add	r3, sp, #116	; 0x74
 801dcc0:	9002      	str	r0, [sp, #8]
 801dcc2:	9006      	str	r0, [sp, #24]
 801dcc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801dcc8:	4809      	ldr	r0, [pc, #36]	; (801dcf0 <siprintf+0x38>)
 801dcca:	9107      	str	r1, [sp, #28]
 801dccc:	9104      	str	r1, [sp, #16]
 801dcce:	4909      	ldr	r1, [pc, #36]	; (801dcf4 <siprintf+0x3c>)
 801dcd0:	f853 2b04 	ldr.w	r2, [r3], #4
 801dcd4:	9105      	str	r1, [sp, #20]
 801dcd6:	6800      	ldr	r0, [r0, #0]
 801dcd8:	9301      	str	r3, [sp, #4]
 801dcda:	a902      	add	r1, sp, #8
 801dcdc:	f000 fb54 	bl	801e388 <_svfiprintf_r>
 801dce0:	9b02      	ldr	r3, [sp, #8]
 801dce2:	2200      	movs	r2, #0
 801dce4:	701a      	strb	r2, [r3, #0]
 801dce6:	b01c      	add	sp, #112	; 0x70
 801dce8:	f85d eb04 	ldr.w	lr, [sp], #4
 801dcec:	b003      	add	sp, #12
 801dcee:	4770      	bx	lr
 801dcf0:	20000150 	.word	0x20000150
 801dcf4:	ffff0208 	.word	0xffff0208

0801dcf8 <__swbuf_r>:
 801dcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcfa:	460e      	mov	r6, r1
 801dcfc:	4614      	mov	r4, r2
 801dcfe:	4605      	mov	r5, r0
 801dd00:	b118      	cbz	r0, 801dd0a <__swbuf_r+0x12>
 801dd02:	6983      	ldr	r3, [r0, #24]
 801dd04:	b90b      	cbnz	r3, 801dd0a <__swbuf_r+0x12>
 801dd06:	f000 f9d1 	bl	801e0ac <__sinit>
 801dd0a:	4b21      	ldr	r3, [pc, #132]	; (801dd90 <__swbuf_r+0x98>)
 801dd0c:	429c      	cmp	r4, r3
 801dd0e:	d12b      	bne.n	801dd68 <__swbuf_r+0x70>
 801dd10:	686c      	ldr	r4, [r5, #4]
 801dd12:	69a3      	ldr	r3, [r4, #24]
 801dd14:	60a3      	str	r3, [r4, #8]
 801dd16:	89a3      	ldrh	r3, [r4, #12]
 801dd18:	071a      	lsls	r2, r3, #28
 801dd1a:	d52f      	bpl.n	801dd7c <__swbuf_r+0x84>
 801dd1c:	6923      	ldr	r3, [r4, #16]
 801dd1e:	b36b      	cbz	r3, 801dd7c <__swbuf_r+0x84>
 801dd20:	6923      	ldr	r3, [r4, #16]
 801dd22:	6820      	ldr	r0, [r4, #0]
 801dd24:	1ac0      	subs	r0, r0, r3
 801dd26:	6963      	ldr	r3, [r4, #20]
 801dd28:	b2f6      	uxtb	r6, r6
 801dd2a:	4283      	cmp	r3, r0
 801dd2c:	4637      	mov	r7, r6
 801dd2e:	dc04      	bgt.n	801dd3a <__swbuf_r+0x42>
 801dd30:	4621      	mov	r1, r4
 801dd32:	4628      	mov	r0, r5
 801dd34:	f000 f926 	bl	801df84 <_fflush_r>
 801dd38:	bb30      	cbnz	r0, 801dd88 <__swbuf_r+0x90>
 801dd3a:	68a3      	ldr	r3, [r4, #8]
 801dd3c:	3b01      	subs	r3, #1
 801dd3e:	60a3      	str	r3, [r4, #8]
 801dd40:	6823      	ldr	r3, [r4, #0]
 801dd42:	1c5a      	adds	r2, r3, #1
 801dd44:	6022      	str	r2, [r4, #0]
 801dd46:	701e      	strb	r6, [r3, #0]
 801dd48:	6963      	ldr	r3, [r4, #20]
 801dd4a:	3001      	adds	r0, #1
 801dd4c:	4283      	cmp	r3, r0
 801dd4e:	d004      	beq.n	801dd5a <__swbuf_r+0x62>
 801dd50:	89a3      	ldrh	r3, [r4, #12]
 801dd52:	07db      	lsls	r3, r3, #31
 801dd54:	d506      	bpl.n	801dd64 <__swbuf_r+0x6c>
 801dd56:	2e0a      	cmp	r6, #10
 801dd58:	d104      	bne.n	801dd64 <__swbuf_r+0x6c>
 801dd5a:	4621      	mov	r1, r4
 801dd5c:	4628      	mov	r0, r5
 801dd5e:	f000 f911 	bl	801df84 <_fflush_r>
 801dd62:	b988      	cbnz	r0, 801dd88 <__swbuf_r+0x90>
 801dd64:	4638      	mov	r0, r7
 801dd66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dd68:	4b0a      	ldr	r3, [pc, #40]	; (801dd94 <__swbuf_r+0x9c>)
 801dd6a:	429c      	cmp	r4, r3
 801dd6c:	d101      	bne.n	801dd72 <__swbuf_r+0x7a>
 801dd6e:	68ac      	ldr	r4, [r5, #8]
 801dd70:	e7cf      	b.n	801dd12 <__swbuf_r+0x1a>
 801dd72:	4b09      	ldr	r3, [pc, #36]	; (801dd98 <__swbuf_r+0xa0>)
 801dd74:	429c      	cmp	r4, r3
 801dd76:	bf08      	it	eq
 801dd78:	68ec      	ldreq	r4, [r5, #12]
 801dd7a:	e7ca      	b.n	801dd12 <__swbuf_r+0x1a>
 801dd7c:	4621      	mov	r1, r4
 801dd7e:	4628      	mov	r0, r5
 801dd80:	f000 f80c 	bl	801dd9c <__swsetup_r>
 801dd84:	2800      	cmp	r0, #0
 801dd86:	d0cb      	beq.n	801dd20 <__swbuf_r+0x28>
 801dd88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801dd8c:	e7ea      	b.n	801dd64 <__swbuf_r+0x6c>
 801dd8e:	bf00      	nop
 801dd90:	08020b8c 	.word	0x08020b8c
 801dd94:	08020bac 	.word	0x08020bac
 801dd98:	08020b6c 	.word	0x08020b6c

0801dd9c <__swsetup_r>:
 801dd9c:	4b32      	ldr	r3, [pc, #200]	; (801de68 <__swsetup_r+0xcc>)
 801dd9e:	b570      	push	{r4, r5, r6, lr}
 801dda0:	681d      	ldr	r5, [r3, #0]
 801dda2:	4606      	mov	r6, r0
 801dda4:	460c      	mov	r4, r1
 801dda6:	b125      	cbz	r5, 801ddb2 <__swsetup_r+0x16>
 801dda8:	69ab      	ldr	r3, [r5, #24]
 801ddaa:	b913      	cbnz	r3, 801ddb2 <__swsetup_r+0x16>
 801ddac:	4628      	mov	r0, r5
 801ddae:	f000 f97d 	bl	801e0ac <__sinit>
 801ddb2:	4b2e      	ldr	r3, [pc, #184]	; (801de6c <__swsetup_r+0xd0>)
 801ddb4:	429c      	cmp	r4, r3
 801ddb6:	d10f      	bne.n	801ddd8 <__swsetup_r+0x3c>
 801ddb8:	686c      	ldr	r4, [r5, #4]
 801ddba:	89a3      	ldrh	r3, [r4, #12]
 801ddbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ddc0:	0719      	lsls	r1, r3, #28
 801ddc2:	d42c      	bmi.n	801de1e <__swsetup_r+0x82>
 801ddc4:	06dd      	lsls	r5, r3, #27
 801ddc6:	d411      	bmi.n	801ddec <__swsetup_r+0x50>
 801ddc8:	2309      	movs	r3, #9
 801ddca:	6033      	str	r3, [r6, #0]
 801ddcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ddd0:	81a3      	strh	r3, [r4, #12]
 801ddd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ddd6:	e03e      	b.n	801de56 <__swsetup_r+0xba>
 801ddd8:	4b25      	ldr	r3, [pc, #148]	; (801de70 <__swsetup_r+0xd4>)
 801ddda:	429c      	cmp	r4, r3
 801dddc:	d101      	bne.n	801dde2 <__swsetup_r+0x46>
 801ddde:	68ac      	ldr	r4, [r5, #8]
 801dde0:	e7eb      	b.n	801ddba <__swsetup_r+0x1e>
 801dde2:	4b24      	ldr	r3, [pc, #144]	; (801de74 <__swsetup_r+0xd8>)
 801dde4:	429c      	cmp	r4, r3
 801dde6:	bf08      	it	eq
 801dde8:	68ec      	ldreq	r4, [r5, #12]
 801ddea:	e7e6      	b.n	801ddba <__swsetup_r+0x1e>
 801ddec:	0758      	lsls	r0, r3, #29
 801ddee:	d512      	bpl.n	801de16 <__swsetup_r+0x7a>
 801ddf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ddf2:	b141      	cbz	r1, 801de06 <__swsetup_r+0x6a>
 801ddf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ddf8:	4299      	cmp	r1, r3
 801ddfa:	d002      	beq.n	801de02 <__swsetup_r+0x66>
 801ddfc:	4630      	mov	r0, r6
 801ddfe:	f7ff fdc7 	bl	801d990 <_free_r>
 801de02:	2300      	movs	r3, #0
 801de04:	6363      	str	r3, [r4, #52]	; 0x34
 801de06:	89a3      	ldrh	r3, [r4, #12]
 801de08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801de0c:	81a3      	strh	r3, [r4, #12]
 801de0e:	2300      	movs	r3, #0
 801de10:	6063      	str	r3, [r4, #4]
 801de12:	6923      	ldr	r3, [r4, #16]
 801de14:	6023      	str	r3, [r4, #0]
 801de16:	89a3      	ldrh	r3, [r4, #12]
 801de18:	f043 0308 	orr.w	r3, r3, #8
 801de1c:	81a3      	strh	r3, [r4, #12]
 801de1e:	6923      	ldr	r3, [r4, #16]
 801de20:	b94b      	cbnz	r3, 801de36 <__swsetup_r+0x9a>
 801de22:	89a3      	ldrh	r3, [r4, #12]
 801de24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801de28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801de2c:	d003      	beq.n	801de36 <__swsetup_r+0x9a>
 801de2e:	4621      	mov	r1, r4
 801de30:	4630      	mov	r0, r6
 801de32:	f000 fa01 	bl	801e238 <__smakebuf_r>
 801de36:	89a0      	ldrh	r0, [r4, #12]
 801de38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801de3c:	f010 0301 	ands.w	r3, r0, #1
 801de40:	d00a      	beq.n	801de58 <__swsetup_r+0xbc>
 801de42:	2300      	movs	r3, #0
 801de44:	60a3      	str	r3, [r4, #8]
 801de46:	6963      	ldr	r3, [r4, #20]
 801de48:	425b      	negs	r3, r3
 801de4a:	61a3      	str	r3, [r4, #24]
 801de4c:	6923      	ldr	r3, [r4, #16]
 801de4e:	b943      	cbnz	r3, 801de62 <__swsetup_r+0xc6>
 801de50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801de54:	d1ba      	bne.n	801ddcc <__swsetup_r+0x30>
 801de56:	bd70      	pop	{r4, r5, r6, pc}
 801de58:	0781      	lsls	r1, r0, #30
 801de5a:	bf58      	it	pl
 801de5c:	6963      	ldrpl	r3, [r4, #20]
 801de5e:	60a3      	str	r3, [r4, #8]
 801de60:	e7f4      	b.n	801de4c <__swsetup_r+0xb0>
 801de62:	2000      	movs	r0, #0
 801de64:	e7f7      	b.n	801de56 <__swsetup_r+0xba>
 801de66:	bf00      	nop
 801de68:	20000150 	.word	0x20000150
 801de6c:	08020b8c 	.word	0x08020b8c
 801de70:	08020bac 	.word	0x08020bac
 801de74:	08020b6c 	.word	0x08020b6c

0801de78 <__sflush_r>:
 801de78:	898a      	ldrh	r2, [r1, #12]
 801de7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de7e:	4605      	mov	r5, r0
 801de80:	0710      	lsls	r0, r2, #28
 801de82:	460c      	mov	r4, r1
 801de84:	d458      	bmi.n	801df38 <__sflush_r+0xc0>
 801de86:	684b      	ldr	r3, [r1, #4]
 801de88:	2b00      	cmp	r3, #0
 801de8a:	dc05      	bgt.n	801de98 <__sflush_r+0x20>
 801de8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801de8e:	2b00      	cmp	r3, #0
 801de90:	dc02      	bgt.n	801de98 <__sflush_r+0x20>
 801de92:	2000      	movs	r0, #0
 801de94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801de9a:	2e00      	cmp	r6, #0
 801de9c:	d0f9      	beq.n	801de92 <__sflush_r+0x1a>
 801de9e:	2300      	movs	r3, #0
 801dea0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801dea4:	682f      	ldr	r7, [r5, #0]
 801dea6:	602b      	str	r3, [r5, #0]
 801dea8:	d032      	beq.n	801df10 <__sflush_r+0x98>
 801deaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801deac:	89a3      	ldrh	r3, [r4, #12]
 801deae:	075a      	lsls	r2, r3, #29
 801deb0:	d505      	bpl.n	801debe <__sflush_r+0x46>
 801deb2:	6863      	ldr	r3, [r4, #4]
 801deb4:	1ac0      	subs	r0, r0, r3
 801deb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801deb8:	b10b      	cbz	r3, 801debe <__sflush_r+0x46>
 801deba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801debc:	1ac0      	subs	r0, r0, r3
 801debe:	2300      	movs	r3, #0
 801dec0:	4602      	mov	r2, r0
 801dec2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dec4:	6a21      	ldr	r1, [r4, #32]
 801dec6:	4628      	mov	r0, r5
 801dec8:	47b0      	blx	r6
 801deca:	1c43      	adds	r3, r0, #1
 801decc:	89a3      	ldrh	r3, [r4, #12]
 801dece:	d106      	bne.n	801dede <__sflush_r+0x66>
 801ded0:	6829      	ldr	r1, [r5, #0]
 801ded2:	291d      	cmp	r1, #29
 801ded4:	d82c      	bhi.n	801df30 <__sflush_r+0xb8>
 801ded6:	4a2a      	ldr	r2, [pc, #168]	; (801df80 <__sflush_r+0x108>)
 801ded8:	40ca      	lsrs	r2, r1
 801deda:	07d6      	lsls	r6, r2, #31
 801dedc:	d528      	bpl.n	801df30 <__sflush_r+0xb8>
 801dede:	2200      	movs	r2, #0
 801dee0:	6062      	str	r2, [r4, #4]
 801dee2:	04d9      	lsls	r1, r3, #19
 801dee4:	6922      	ldr	r2, [r4, #16]
 801dee6:	6022      	str	r2, [r4, #0]
 801dee8:	d504      	bpl.n	801def4 <__sflush_r+0x7c>
 801deea:	1c42      	adds	r2, r0, #1
 801deec:	d101      	bne.n	801def2 <__sflush_r+0x7a>
 801deee:	682b      	ldr	r3, [r5, #0]
 801def0:	b903      	cbnz	r3, 801def4 <__sflush_r+0x7c>
 801def2:	6560      	str	r0, [r4, #84]	; 0x54
 801def4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801def6:	602f      	str	r7, [r5, #0]
 801def8:	2900      	cmp	r1, #0
 801defa:	d0ca      	beq.n	801de92 <__sflush_r+0x1a>
 801defc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801df00:	4299      	cmp	r1, r3
 801df02:	d002      	beq.n	801df0a <__sflush_r+0x92>
 801df04:	4628      	mov	r0, r5
 801df06:	f7ff fd43 	bl	801d990 <_free_r>
 801df0a:	2000      	movs	r0, #0
 801df0c:	6360      	str	r0, [r4, #52]	; 0x34
 801df0e:	e7c1      	b.n	801de94 <__sflush_r+0x1c>
 801df10:	6a21      	ldr	r1, [r4, #32]
 801df12:	2301      	movs	r3, #1
 801df14:	4628      	mov	r0, r5
 801df16:	47b0      	blx	r6
 801df18:	1c41      	adds	r1, r0, #1
 801df1a:	d1c7      	bne.n	801deac <__sflush_r+0x34>
 801df1c:	682b      	ldr	r3, [r5, #0]
 801df1e:	2b00      	cmp	r3, #0
 801df20:	d0c4      	beq.n	801deac <__sflush_r+0x34>
 801df22:	2b1d      	cmp	r3, #29
 801df24:	d001      	beq.n	801df2a <__sflush_r+0xb2>
 801df26:	2b16      	cmp	r3, #22
 801df28:	d101      	bne.n	801df2e <__sflush_r+0xb6>
 801df2a:	602f      	str	r7, [r5, #0]
 801df2c:	e7b1      	b.n	801de92 <__sflush_r+0x1a>
 801df2e:	89a3      	ldrh	r3, [r4, #12]
 801df30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801df34:	81a3      	strh	r3, [r4, #12]
 801df36:	e7ad      	b.n	801de94 <__sflush_r+0x1c>
 801df38:	690f      	ldr	r7, [r1, #16]
 801df3a:	2f00      	cmp	r7, #0
 801df3c:	d0a9      	beq.n	801de92 <__sflush_r+0x1a>
 801df3e:	0793      	lsls	r3, r2, #30
 801df40:	680e      	ldr	r6, [r1, #0]
 801df42:	bf08      	it	eq
 801df44:	694b      	ldreq	r3, [r1, #20]
 801df46:	600f      	str	r7, [r1, #0]
 801df48:	bf18      	it	ne
 801df4a:	2300      	movne	r3, #0
 801df4c:	eba6 0807 	sub.w	r8, r6, r7
 801df50:	608b      	str	r3, [r1, #8]
 801df52:	f1b8 0f00 	cmp.w	r8, #0
 801df56:	dd9c      	ble.n	801de92 <__sflush_r+0x1a>
 801df58:	6a21      	ldr	r1, [r4, #32]
 801df5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801df5c:	4643      	mov	r3, r8
 801df5e:	463a      	mov	r2, r7
 801df60:	4628      	mov	r0, r5
 801df62:	47b0      	blx	r6
 801df64:	2800      	cmp	r0, #0
 801df66:	dc06      	bgt.n	801df76 <__sflush_r+0xfe>
 801df68:	89a3      	ldrh	r3, [r4, #12]
 801df6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801df6e:	81a3      	strh	r3, [r4, #12]
 801df70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801df74:	e78e      	b.n	801de94 <__sflush_r+0x1c>
 801df76:	4407      	add	r7, r0
 801df78:	eba8 0800 	sub.w	r8, r8, r0
 801df7c:	e7e9      	b.n	801df52 <__sflush_r+0xda>
 801df7e:	bf00      	nop
 801df80:	20400001 	.word	0x20400001

0801df84 <_fflush_r>:
 801df84:	b538      	push	{r3, r4, r5, lr}
 801df86:	690b      	ldr	r3, [r1, #16]
 801df88:	4605      	mov	r5, r0
 801df8a:	460c      	mov	r4, r1
 801df8c:	b913      	cbnz	r3, 801df94 <_fflush_r+0x10>
 801df8e:	2500      	movs	r5, #0
 801df90:	4628      	mov	r0, r5
 801df92:	bd38      	pop	{r3, r4, r5, pc}
 801df94:	b118      	cbz	r0, 801df9e <_fflush_r+0x1a>
 801df96:	6983      	ldr	r3, [r0, #24]
 801df98:	b90b      	cbnz	r3, 801df9e <_fflush_r+0x1a>
 801df9a:	f000 f887 	bl	801e0ac <__sinit>
 801df9e:	4b14      	ldr	r3, [pc, #80]	; (801dff0 <_fflush_r+0x6c>)
 801dfa0:	429c      	cmp	r4, r3
 801dfa2:	d11b      	bne.n	801dfdc <_fflush_r+0x58>
 801dfa4:	686c      	ldr	r4, [r5, #4]
 801dfa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dfaa:	2b00      	cmp	r3, #0
 801dfac:	d0ef      	beq.n	801df8e <_fflush_r+0xa>
 801dfae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dfb0:	07d0      	lsls	r0, r2, #31
 801dfb2:	d404      	bmi.n	801dfbe <_fflush_r+0x3a>
 801dfb4:	0599      	lsls	r1, r3, #22
 801dfb6:	d402      	bmi.n	801dfbe <_fflush_r+0x3a>
 801dfb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dfba:	f000 f915 	bl	801e1e8 <__retarget_lock_acquire_recursive>
 801dfbe:	4628      	mov	r0, r5
 801dfc0:	4621      	mov	r1, r4
 801dfc2:	f7ff ff59 	bl	801de78 <__sflush_r>
 801dfc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dfc8:	07da      	lsls	r2, r3, #31
 801dfca:	4605      	mov	r5, r0
 801dfcc:	d4e0      	bmi.n	801df90 <_fflush_r+0xc>
 801dfce:	89a3      	ldrh	r3, [r4, #12]
 801dfd0:	059b      	lsls	r3, r3, #22
 801dfd2:	d4dd      	bmi.n	801df90 <_fflush_r+0xc>
 801dfd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dfd6:	f000 f908 	bl	801e1ea <__retarget_lock_release_recursive>
 801dfda:	e7d9      	b.n	801df90 <_fflush_r+0xc>
 801dfdc:	4b05      	ldr	r3, [pc, #20]	; (801dff4 <_fflush_r+0x70>)
 801dfde:	429c      	cmp	r4, r3
 801dfe0:	d101      	bne.n	801dfe6 <_fflush_r+0x62>
 801dfe2:	68ac      	ldr	r4, [r5, #8]
 801dfe4:	e7df      	b.n	801dfa6 <_fflush_r+0x22>
 801dfe6:	4b04      	ldr	r3, [pc, #16]	; (801dff8 <_fflush_r+0x74>)
 801dfe8:	429c      	cmp	r4, r3
 801dfea:	bf08      	it	eq
 801dfec:	68ec      	ldreq	r4, [r5, #12]
 801dfee:	e7da      	b.n	801dfa6 <_fflush_r+0x22>
 801dff0:	08020b8c 	.word	0x08020b8c
 801dff4:	08020bac 	.word	0x08020bac
 801dff8:	08020b6c 	.word	0x08020b6c

0801dffc <std>:
 801dffc:	2300      	movs	r3, #0
 801dffe:	b510      	push	{r4, lr}
 801e000:	4604      	mov	r4, r0
 801e002:	e9c0 3300 	strd	r3, r3, [r0]
 801e006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e00a:	6083      	str	r3, [r0, #8]
 801e00c:	8181      	strh	r1, [r0, #12]
 801e00e:	6643      	str	r3, [r0, #100]	; 0x64
 801e010:	81c2      	strh	r2, [r0, #14]
 801e012:	6183      	str	r3, [r0, #24]
 801e014:	4619      	mov	r1, r3
 801e016:	2208      	movs	r2, #8
 801e018:	305c      	adds	r0, #92	; 0x5c
 801e01a:	f7ff fcb1 	bl	801d980 <memset>
 801e01e:	4b05      	ldr	r3, [pc, #20]	; (801e034 <std+0x38>)
 801e020:	6263      	str	r3, [r4, #36]	; 0x24
 801e022:	4b05      	ldr	r3, [pc, #20]	; (801e038 <std+0x3c>)
 801e024:	62a3      	str	r3, [r4, #40]	; 0x28
 801e026:	4b05      	ldr	r3, [pc, #20]	; (801e03c <std+0x40>)
 801e028:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e02a:	4b05      	ldr	r3, [pc, #20]	; (801e040 <std+0x44>)
 801e02c:	6224      	str	r4, [r4, #32]
 801e02e:	6323      	str	r3, [r4, #48]	; 0x30
 801e030:	bd10      	pop	{r4, pc}
 801e032:	bf00      	nop
 801e034:	0801ebf5 	.word	0x0801ebf5
 801e038:	0801ec17 	.word	0x0801ec17
 801e03c:	0801ec4f 	.word	0x0801ec4f
 801e040:	0801ec73 	.word	0x0801ec73

0801e044 <_cleanup_r>:
 801e044:	4901      	ldr	r1, [pc, #4]	; (801e04c <_cleanup_r+0x8>)
 801e046:	f000 b8af 	b.w	801e1a8 <_fwalk_reent>
 801e04a:	bf00      	nop
 801e04c:	0801df85 	.word	0x0801df85

0801e050 <__sfmoreglue>:
 801e050:	b570      	push	{r4, r5, r6, lr}
 801e052:	2268      	movs	r2, #104	; 0x68
 801e054:	1e4d      	subs	r5, r1, #1
 801e056:	4355      	muls	r5, r2
 801e058:	460e      	mov	r6, r1
 801e05a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e05e:	f7ff fd03 	bl	801da68 <_malloc_r>
 801e062:	4604      	mov	r4, r0
 801e064:	b140      	cbz	r0, 801e078 <__sfmoreglue+0x28>
 801e066:	2100      	movs	r1, #0
 801e068:	e9c0 1600 	strd	r1, r6, [r0]
 801e06c:	300c      	adds	r0, #12
 801e06e:	60a0      	str	r0, [r4, #8]
 801e070:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e074:	f7ff fc84 	bl	801d980 <memset>
 801e078:	4620      	mov	r0, r4
 801e07a:	bd70      	pop	{r4, r5, r6, pc}

0801e07c <__sfp_lock_acquire>:
 801e07c:	4801      	ldr	r0, [pc, #4]	; (801e084 <__sfp_lock_acquire+0x8>)
 801e07e:	f000 b8b3 	b.w	801e1e8 <__retarget_lock_acquire_recursive>
 801e082:	bf00      	nop
 801e084:	2004c051 	.word	0x2004c051

0801e088 <__sfp_lock_release>:
 801e088:	4801      	ldr	r0, [pc, #4]	; (801e090 <__sfp_lock_release+0x8>)
 801e08a:	f000 b8ae 	b.w	801e1ea <__retarget_lock_release_recursive>
 801e08e:	bf00      	nop
 801e090:	2004c051 	.word	0x2004c051

0801e094 <__sinit_lock_acquire>:
 801e094:	4801      	ldr	r0, [pc, #4]	; (801e09c <__sinit_lock_acquire+0x8>)
 801e096:	f000 b8a7 	b.w	801e1e8 <__retarget_lock_acquire_recursive>
 801e09a:	bf00      	nop
 801e09c:	2004c052 	.word	0x2004c052

0801e0a0 <__sinit_lock_release>:
 801e0a0:	4801      	ldr	r0, [pc, #4]	; (801e0a8 <__sinit_lock_release+0x8>)
 801e0a2:	f000 b8a2 	b.w	801e1ea <__retarget_lock_release_recursive>
 801e0a6:	bf00      	nop
 801e0a8:	2004c052 	.word	0x2004c052

0801e0ac <__sinit>:
 801e0ac:	b510      	push	{r4, lr}
 801e0ae:	4604      	mov	r4, r0
 801e0b0:	f7ff fff0 	bl	801e094 <__sinit_lock_acquire>
 801e0b4:	69a3      	ldr	r3, [r4, #24]
 801e0b6:	b11b      	cbz	r3, 801e0c0 <__sinit+0x14>
 801e0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e0bc:	f7ff bff0 	b.w	801e0a0 <__sinit_lock_release>
 801e0c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e0c4:	6523      	str	r3, [r4, #80]	; 0x50
 801e0c6:	4b13      	ldr	r3, [pc, #76]	; (801e114 <__sinit+0x68>)
 801e0c8:	4a13      	ldr	r2, [pc, #76]	; (801e118 <__sinit+0x6c>)
 801e0ca:	681b      	ldr	r3, [r3, #0]
 801e0cc:	62a2      	str	r2, [r4, #40]	; 0x28
 801e0ce:	42a3      	cmp	r3, r4
 801e0d0:	bf04      	itt	eq
 801e0d2:	2301      	moveq	r3, #1
 801e0d4:	61a3      	streq	r3, [r4, #24]
 801e0d6:	4620      	mov	r0, r4
 801e0d8:	f000 f820 	bl	801e11c <__sfp>
 801e0dc:	6060      	str	r0, [r4, #4]
 801e0de:	4620      	mov	r0, r4
 801e0e0:	f000 f81c 	bl	801e11c <__sfp>
 801e0e4:	60a0      	str	r0, [r4, #8]
 801e0e6:	4620      	mov	r0, r4
 801e0e8:	f000 f818 	bl	801e11c <__sfp>
 801e0ec:	2200      	movs	r2, #0
 801e0ee:	60e0      	str	r0, [r4, #12]
 801e0f0:	2104      	movs	r1, #4
 801e0f2:	6860      	ldr	r0, [r4, #4]
 801e0f4:	f7ff ff82 	bl	801dffc <std>
 801e0f8:	68a0      	ldr	r0, [r4, #8]
 801e0fa:	2201      	movs	r2, #1
 801e0fc:	2109      	movs	r1, #9
 801e0fe:	f7ff ff7d 	bl	801dffc <std>
 801e102:	68e0      	ldr	r0, [r4, #12]
 801e104:	2202      	movs	r2, #2
 801e106:	2112      	movs	r1, #18
 801e108:	f7ff ff78 	bl	801dffc <std>
 801e10c:	2301      	movs	r3, #1
 801e10e:	61a3      	str	r3, [r4, #24]
 801e110:	e7d2      	b.n	801e0b8 <__sinit+0xc>
 801e112:	bf00      	nop
 801e114:	08020b68 	.word	0x08020b68
 801e118:	0801e045 	.word	0x0801e045

0801e11c <__sfp>:
 801e11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e11e:	4607      	mov	r7, r0
 801e120:	f7ff ffac 	bl	801e07c <__sfp_lock_acquire>
 801e124:	4b1e      	ldr	r3, [pc, #120]	; (801e1a0 <__sfp+0x84>)
 801e126:	681e      	ldr	r6, [r3, #0]
 801e128:	69b3      	ldr	r3, [r6, #24]
 801e12a:	b913      	cbnz	r3, 801e132 <__sfp+0x16>
 801e12c:	4630      	mov	r0, r6
 801e12e:	f7ff ffbd 	bl	801e0ac <__sinit>
 801e132:	3648      	adds	r6, #72	; 0x48
 801e134:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e138:	3b01      	subs	r3, #1
 801e13a:	d503      	bpl.n	801e144 <__sfp+0x28>
 801e13c:	6833      	ldr	r3, [r6, #0]
 801e13e:	b30b      	cbz	r3, 801e184 <__sfp+0x68>
 801e140:	6836      	ldr	r6, [r6, #0]
 801e142:	e7f7      	b.n	801e134 <__sfp+0x18>
 801e144:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e148:	b9d5      	cbnz	r5, 801e180 <__sfp+0x64>
 801e14a:	4b16      	ldr	r3, [pc, #88]	; (801e1a4 <__sfp+0x88>)
 801e14c:	60e3      	str	r3, [r4, #12]
 801e14e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e152:	6665      	str	r5, [r4, #100]	; 0x64
 801e154:	f000 f847 	bl	801e1e6 <__retarget_lock_init_recursive>
 801e158:	f7ff ff96 	bl	801e088 <__sfp_lock_release>
 801e15c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e160:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e164:	6025      	str	r5, [r4, #0]
 801e166:	61a5      	str	r5, [r4, #24]
 801e168:	2208      	movs	r2, #8
 801e16a:	4629      	mov	r1, r5
 801e16c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e170:	f7ff fc06 	bl	801d980 <memset>
 801e174:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e178:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e17c:	4620      	mov	r0, r4
 801e17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e180:	3468      	adds	r4, #104	; 0x68
 801e182:	e7d9      	b.n	801e138 <__sfp+0x1c>
 801e184:	2104      	movs	r1, #4
 801e186:	4638      	mov	r0, r7
 801e188:	f7ff ff62 	bl	801e050 <__sfmoreglue>
 801e18c:	4604      	mov	r4, r0
 801e18e:	6030      	str	r0, [r6, #0]
 801e190:	2800      	cmp	r0, #0
 801e192:	d1d5      	bne.n	801e140 <__sfp+0x24>
 801e194:	f7ff ff78 	bl	801e088 <__sfp_lock_release>
 801e198:	230c      	movs	r3, #12
 801e19a:	603b      	str	r3, [r7, #0]
 801e19c:	e7ee      	b.n	801e17c <__sfp+0x60>
 801e19e:	bf00      	nop
 801e1a0:	08020b68 	.word	0x08020b68
 801e1a4:	ffff0001 	.word	0xffff0001

0801e1a8 <_fwalk_reent>:
 801e1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e1ac:	4606      	mov	r6, r0
 801e1ae:	4688      	mov	r8, r1
 801e1b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e1b4:	2700      	movs	r7, #0
 801e1b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e1ba:	f1b9 0901 	subs.w	r9, r9, #1
 801e1be:	d505      	bpl.n	801e1cc <_fwalk_reent+0x24>
 801e1c0:	6824      	ldr	r4, [r4, #0]
 801e1c2:	2c00      	cmp	r4, #0
 801e1c4:	d1f7      	bne.n	801e1b6 <_fwalk_reent+0xe>
 801e1c6:	4638      	mov	r0, r7
 801e1c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e1cc:	89ab      	ldrh	r3, [r5, #12]
 801e1ce:	2b01      	cmp	r3, #1
 801e1d0:	d907      	bls.n	801e1e2 <_fwalk_reent+0x3a>
 801e1d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e1d6:	3301      	adds	r3, #1
 801e1d8:	d003      	beq.n	801e1e2 <_fwalk_reent+0x3a>
 801e1da:	4629      	mov	r1, r5
 801e1dc:	4630      	mov	r0, r6
 801e1de:	47c0      	blx	r8
 801e1e0:	4307      	orrs	r7, r0
 801e1e2:	3568      	adds	r5, #104	; 0x68
 801e1e4:	e7e9      	b.n	801e1ba <_fwalk_reent+0x12>

0801e1e6 <__retarget_lock_init_recursive>:
 801e1e6:	4770      	bx	lr

0801e1e8 <__retarget_lock_acquire_recursive>:
 801e1e8:	4770      	bx	lr

0801e1ea <__retarget_lock_release_recursive>:
 801e1ea:	4770      	bx	lr

0801e1ec <__swhatbuf_r>:
 801e1ec:	b570      	push	{r4, r5, r6, lr}
 801e1ee:	460e      	mov	r6, r1
 801e1f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e1f4:	2900      	cmp	r1, #0
 801e1f6:	b096      	sub	sp, #88	; 0x58
 801e1f8:	4614      	mov	r4, r2
 801e1fa:	461d      	mov	r5, r3
 801e1fc:	da08      	bge.n	801e210 <__swhatbuf_r+0x24>
 801e1fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801e202:	2200      	movs	r2, #0
 801e204:	602a      	str	r2, [r5, #0]
 801e206:	061a      	lsls	r2, r3, #24
 801e208:	d410      	bmi.n	801e22c <__swhatbuf_r+0x40>
 801e20a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e20e:	e00e      	b.n	801e22e <__swhatbuf_r+0x42>
 801e210:	466a      	mov	r2, sp
 801e212:	f000 fd55 	bl	801ecc0 <_fstat_r>
 801e216:	2800      	cmp	r0, #0
 801e218:	dbf1      	blt.n	801e1fe <__swhatbuf_r+0x12>
 801e21a:	9a01      	ldr	r2, [sp, #4]
 801e21c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e220:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e224:	425a      	negs	r2, r3
 801e226:	415a      	adcs	r2, r3
 801e228:	602a      	str	r2, [r5, #0]
 801e22a:	e7ee      	b.n	801e20a <__swhatbuf_r+0x1e>
 801e22c:	2340      	movs	r3, #64	; 0x40
 801e22e:	2000      	movs	r0, #0
 801e230:	6023      	str	r3, [r4, #0]
 801e232:	b016      	add	sp, #88	; 0x58
 801e234:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e238 <__smakebuf_r>:
 801e238:	898b      	ldrh	r3, [r1, #12]
 801e23a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e23c:	079d      	lsls	r5, r3, #30
 801e23e:	4606      	mov	r6, r0
 801e240:	460c      	mov	r4, r1
 801e242:	d507      	bpl.n	801e254 <__smakebuf_r+0x1c>
 801e244:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e248:	6023      	str	r3, [r4, #0]
 801e24a:	6123      	str	r3, [r4, #16]
 801e24c:	2301      	movs	r3, #1
 801e24e:	6163      	str	r3, [r4, #20]
 801e250:	b002      	add	sp, #8
 801e252:	bd70      	pop	{r4, r5, r6, pc}
 801e254:	ab01      	add	r3, sp, #4
 801e256:	466a      	mov	r2, sp
 801e258:	f7ff ffc8 	bl	801e1ec <__swhatbuf_r>
 801e25c:	9900      	ldr	r1, [sp, #0]
 801e25e:	4605      	mov	r5, r0
 801e260:	4630      	mov	r0, r6
 801e262:	f7ff fc01 	bl	801da68 <_malloc_r>
 801e266:	b948      	cbnz	r0, 801e27c <__smakebuf_r+0x44>
 801e268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e26c:	059a      	lsls	r2, r3, #22
 801e26e:	d4ef      	bmi.n	801e250 <__smakebuf_r+0x18>
 801e270:	f023 0303 	bic.w	r3, r3, #3
 801e274:	f043 0302 	orr.w	r3, r3, #2
 801e278:	81a3      	strh	r3, [r4, #12]
 801e27a:	e7e3      	b.n	801e244 <__smakebuf_r+0xc>
 801e27c:	4b0d      	ldr	r3, [pc, #52]	; (801e2b4 <__smakebuf_r+0x7c>)
 801e27e:	62b3      	str	r3, [r6, #40]	; 0x28
 801e280:	89a3      	ldrh	r3, [r4, #12]
 801e282:	6020      	str	r0, [r4, #0]
 801e284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e288:	81a3      	strh	r3, [r4, #12]
 801e28a:	9b00      	ldr	r3, [sp, #0]
 801e28c:	6163      	str	r3, [r4, #20]
 801e28e:	9b01      	ldr	r3, [sp, #4]
 801e290:	6120      	str	r0, [r4, #16]
 801e292:	b15b      	cbz	r3, 801e2ac <__smakebuf_r+0x74>
 801e294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e298:	4630      	mov	r0, r6
 801e29a:	f000 fd23 	bl	801ece4 <_isatty_r>
 801e29e:	b128      	cbz	r0, 801e2ac <__smakebuf_r+0x74>
 801e2a0:	89a3      	ldrh	r3, [r4, #12]
 801e2a2:	f023 0303 	bic.w	r3, r3, #3
 801e2a6:	f043 0301 	orr.w	r3, r3, #1
 801e2aa:	81a3      	strh	r3, [r4, #12]
 801e2ac:	89a0      	ldrh	r0, [r4, #12]
 801e2ae:	4305      	orrs	r5, r0
 801e2b0:	81a5      	strh	r5, [r4, #12]
 801e2b2:	e7cd      	b.n	801e250 <__smakebuf_r+0x18>
 801e2b4:	0801e045 	.word	0x0801e045

0801e2b8 <__malloc_lock>:
 801e2b8:	4801      	ldr	r0, [pc, #4]	; (801e2c0 <__malloc_lock+0x8>)
 801e2ba:	f7ff bf95 	b.w	801e1e8 <__retarget_lock_acquire_recursive>
 801e2be:	bf00      	nop
 801e2c0:	2004c050 	.word	0x2004c050

0801e2c4 <__malloc_unlock>:
 801e2c4:	4801      	ldr	r0, [pc, #4]	; (801e2cc <__malloc_unlock+0x8>)
 801e2c6:	f7ff bf90 	b.w	801e1ea <__retarget_lock_release_recursive>
 801e2ca:	bf00      	nop
 801e2cc:	2004c050 	.word	0x2004c050

0801e2d0 <__ssputs_r>:
 801e2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e2d4:	688e      	ldr	r6, [r1, #8]
 801e2d6:	429e      	cmp	r6, r3
 801e2d8:	4682      	mov	sl, r0
 801e2da:	460c      	mov	r4, r1
 801e2dc:	4690      	mov	r8, r2
 801e2de:	461f      	mov	r7, r3
 801e2e0:	d838      	bhi.n	801e354 <__ssputs_r+0x84>
 801e2e2:	898a      	ldrh	r2, [r1, #12]
 801e2e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e2e8:	d032      	beq.n	801e350 <__ssputs_r+0x80>
 801e2ea:	6825      	ldr	r5, [r4, #0]
 801e2ec:	6909      	ldr	r1, [r1, #16]
 801e2ee:	eba5 0901 	sub.w	r9, r5, r1
 801e2f2:	6965      	ldr	r5, [r4, #20]
 801e2f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e2f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e2fc:	3301      	adds	r3, #1
 801e2fe:	444b      	add	r3, r9
 801e300:	106d      	asrs	r5, r5, #1
 801e302:	429d      	cmp	r5, r3
 801e304:	bf38      	it	cc
 801e306:	461d      	movcc	r5, r3
 801e308:	0553      	lsls	r3, r2, #21
 801e30a:	d531      	bpl.n	801e370 <__ssputs_r+0xa0>
 801e30c:	4629      	mov	r1, r5
 801e30e:	f7ff fbab 	bl	801da68 <_malloc_r>
 801e312:	4606      	mov	r6, r0
 801e314:	b950      	cbnz	r0, 801e32c <__ssputs_r+0x5c>
 801e316:	230c      	movs	r3, #12
 801e318:	f8ca 3000 	str.w	r3, [sl]
 801e31c:	89a3      	ldrh	r3, [r4, #12]
 801e31e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e322:	81a3      	strh	r3, [r4, #12]
 801e324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e32c:	6921      	ldr	r1, [r4, #16]
 801e32e:	464a      	mov	r2, r9
 801e330:	f7ff fb18 	bl	801d964 <memcpy>
 801e334:	89a3      	ldrh	r3, [r4, #12]
 801e336:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e33a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e33e:	81a3      	strh	r3, [r4, #12]
 801e340:	6126      	str	r6, [r4, #16]
 801e342:	6165      	str	r5, [r4, #20]
 801e344:	444e      	add	r6, r9
 801e346:	eba5 0509 	sub.w	r5, r5, r9
 801e34a:	6026      	str	r6, [r4, #0]
 801e34c:	60a5      	str	r5, [r4, #8]
 801e34e:	463e      	mov	r6, r7
 801e350:	42be      	cmp	r6, r7
 801e352:	d900      	bls.n	801e356 <__ssputs_r+0x86>
 801e354:	463e      	mov	r6, r7
 801e356:	6820      	ldr	r0, [r4, #0]
 801e358:	4632      	mov	r2, r6
 801e35a:	4641      	mov	r1, r8
 801e35c:	f000 fce4 	bl	801ed28 <memmove>
 801e360:	68a3      	ldr	r3, [r4, #8]
 801e362:	1b9b      	subs	r3, r3, r6
 801e364:	60a3      	str	r3, [r4, #8]
 801e366:	6823      	ldr	r3, [r4, #0]
 801e368:	4433      	add	r3, r6
 801e36a:	6023      	str	r3, [r4, #0]
 801e36c:	2000      	movs	r0, #0
 801e36e:	e7db      	b.n	801e328 <__ssputs_r+0x58>
 801e370:	462a      	mov	r2, r5
 801e372:	f000 fcf3 	bl	801ed5c <_realloc_r>
 801e376:	4606      	mov	r6, r0
 801e378:	2800      	cmp	r0, #0
 801e37a:	d1e1      	bne.n	801e340 <__ssputs_r+0x70>
 801e37c:	6921      	ldr	r1, [r4, #16]
 801e37e:	4650      	mov	r0, sl
 801e380:	f7ff fb06 	bl	801d990 <_free_r>
 801e384:	e7c7      	b.n	801e316 <__ssputs_r+0x46>
	...

0801e388 <_svfiprintf_r>:
 801e388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e38c:	4698      	mov	r8, r3
 801e38e:	898b      	ldrh	r3, [r1, #12]
 801e390:	061b      	lsls	r3, r3, #24
 801e392:	b09d      	sub	sp, #116	; 0x74
 801e394:	4607      	mov	r7, r0
 801e396:	460d      	mov	r5, r1
 801e398:	4614      	mov	r4, r2
 801e39a:	d50e      	bpl.n	801e3ba <_svfiprintf_r+0x32>
 801e39c:	690b      	ldr	r3, [r1, #16]
 801e39e:	b963      	cbnz	r3, 801e3ba <_svfiprintf_r+0x32>
 801e3a0:	2140      	movs	r1, #64	; 0x40
 801e3a2:	f7ff fb61 	bl	801da68 <_malloc_r>
 801e3a6:	6028      	str	r0, [r5, #0]
 801e3a8:	6128      	str	r0, [r5, #16]
 801e3aa:	b920      	cbnz	r0, 801e3b6 <_svfiprintf_r+0x2e>
 801e3ac:	230c      	movs	r3, #12
 801e3ae:	603b      	str	r3, [r7, #0]
 801e3b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e3b4:	e0d1      	b.n	801e55a <_svfiprintf_r+0x1d2>
 801e3b6:	2340      	movs	r3, #64	; 0x40
 801e3b8:	616b      	str	r3, [r5, #20]
 801e3ba:	2300      	movs	r3, #0
 801e3bc:	9309      	str	r3, [sp, #36]	; 0x24
 801e3be:	2320      	movs	r3, #32
 801e3c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e3c4:	f8cd 800c 	str.w	r8, [sp, #12]
 801e3c8:	2330      	movs	r3, #48	; 0x30
 801e3ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801e574 <_svfiprintf_r+0x1ec>
 801e3ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e3d2:	f04f 0901 	mov.w	r9, #1
 801e3d6:	4623      	mov	r3, r4
 801e3d8:	469a      	mov	sl, r3
 801e3da:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e3de:	b10a      	cbz	r2, 801e3e4 <_svfiprintf_r+0x5c>
 801e3e0:	2a25      	cmp	r2, #37	; 0x25
 801e3e2:	d1f9      	bne.n	801e3d8 <_svfiprintf_r+0x50>
 801e3e4:	ebba 0b04 	subs.w	fp, sl, r4
 801e3e8:	d00b      	beq.n	801e402 <_svfiprintf_r+0x7a>
 801e3ea:	465b      	mov	r3, fp
 801e3ec:	4622      	mov	r2, r4
 801e3ee:	4629      	mov	r1, r5
 801e3f0:	4638      	mov	r0, r7
 801e3f2:	f7ff ff6d 	bl	801e2d0 <__ssputs_r>
 801e3f6:	3001      	adds	r0, #1
 801e3f8:	f000 80aa 	beq.w	801e550 <_svfiprintf_r+0x1c8>
 801e3fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e3fe:	445a      	add	r2, fp
 801e400:	9209      	str	r2, [sp, #36]	; 0x24
 801e402:	f89a 3000 	ldrb.w	r3, [sl]
 801e406:	2b00      	cmp	r3, #0
 801e408:	f000 80a2 	beq.w	801e550 <_svfiprintf_r+0x1c8>
 801e40c:	2300      	movs	r3, #0
 801e40e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e412:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e416:	f10a 0a01 	add.w	sl, sl, #1
 801e41a:	9304      	str	r3, [sp, #16]
 801e41c:	9307      	str	r3, [sp, #28]
 801e41e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e422:	931a      	str	r3, [sp, #104]	; 0x68
 801e424:	4654      	mov	r4, sl
 801e426:	2205      	movs	r2, #5
 801e428:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e42c:	4851      	ldr	r0, [pc, #324]	; (801e574 <_svfiprintf_r+0x1ec>)
 801e42e:	f7e1 feef 	bl	8000210 <memchr>
 801e432:	9a04      	ldr	r2, [sp, #16]
 801e434:	b9d8      	cbnz	r0, 801e46e <_svfiprintf_r+0xe6>
 801e436:	06d0      	lsls	r0, r2, #27
 801e438:	bf44      	itt	mi
 801e43a:	2320      	movmi	r3, #32
 801e43c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e440:	0711      	lsls	r1, r2, #28
 801e442:	bf44      	itt	mi
 801e444:	232b      	movmi	r3, #43	; 0x2b
 801e446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e44a:	f89a 3000 	ldrb.w	r3, [sl]
 801e44e:	2b2a      	cmp	r3, #42	; 0x2a
 801e450:	d015      	beq.n	801e47e <_svfiprintf_r+0xf6>
 801e452:	9a07      	ldr	r2, [sp, #28]
 801e454:	4654      	mov	r4, sl
 801e456:	2000      	movs	r0, #0
 801e458:	f04f 0c0a 	mov.w	ip, #10
 801e45c:	4621      	mov	r1, r4
 801e45e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e462:	3b30      	subs	r3, #48	; 0x30
 801e464:	2b09      	cmp	r3, #9
 801e466:	d94e      	bls.n	801e506 <_svfiprintf_r+0x17e>
 801e468:	b1b0      	cbz	r0, 801e498 <_svfiprintf_r+0x110>
 801e46a:	9207      	str	r2, [sp, #28]
 801e46c:	e014      	b.n	801e498 <_svfiprintf_r+0x110>
 801e46e:	eba0 0308 	sub.w	r3, r0, r8
 801e472:	fa09 f303 	lsl.w	r3, r9, r3
 801e476:	4313      	orrs	r3, r2
 801e478:	9304      	str	r3, [sp, #16]
 801e47a:	46a2      	mov	sl, r4
 801e47c:	e7d2      	b.n	801e424 <_svfiprintf_r+0x9c>
 801e47e:	9b03      	ldr	r3, [sp, #12]
 801e480:	1d19      	adds	r1, r3, #4
 801e482:	681b      	ldr	r3, [r3, #0]
 801e484:	9103      	str	r1, [sp, #12]
 801e486:	2b00      	cmp	r3, #0
 801e488:	bfbb      	ittet	lt
 801e48a:	425b      	neglt	r3, r3
 801e48c:	f042 0202 	orrlt.w	r2, r2, #2
 801e490:	9307      	strge	r3, [sp, #28]
 801e492:	9307      	strlt	r3, [sp, #28]
 801e494:	bfb8      	it	lt
 801e496:	9204      	strlt	r2, [sp, #16]
 801e498:	7823      	ldrb	r3, [r4, #0]
 801e49a:	2b2e      	cmp	r3, #46	; 0x2e
 801e49c:	d10c      	bne.n	801e4b8 <_svfiprintf_r+0x130>
 801e49e:	7863      	ldrb	r3, [r4, #1]
 801e4a0:	2b2a      	cmp	r3, #42	; 0x2a
 801e4a2:	d135      	bne.n	801e510 <_svfiprintf_r+0x188>
 801e4a4:	9b03      	ldr	r3, [sp, #12]
 801e4a6:	1d1a      	adds	r2, r3, #4
 801e4a8:	681b      	ldr	r3, [r3, #0]
 801e4aa:	9203      	str	r2, [sp, #12]
 801e4ac:	2b00      	cmp	r3, #0
 801e4ae:	bfb8      	it	lt
 801e4b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e4b4:	3402      	adds	r4, #2
 801e4b6:	9305      	str	r3, [sp, #20]
 801e4b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801e584 <_svfiprintf_r+0x1fc>
 801e4bc:	7821      	ldrb	r1, [r4, #0]
 801e4be:	2203      	movs	r2, #3
 801e4c0:	4650      	mov	r0, sl
 801e4c2:	f7e1 fea5 	bl	8000210 <memchr>
 801e4c6:	b140      	cbz	r0, 801e4da <_svfiprintf_r+0x152>
 801e4c8:	2340      	movs	r3, #64	; 0x40
 801e4ca:	eba0 000a 	sub.w	r0, r0, sl
 801e4ce:	fa03 f000 	lsl.w	r0, r3, r0
 801e4d2:	9b04      	ldr	r3, [sp, #16]
 801e4d4:	4303      	orrs	r3, r0
 801e4d6:	3401      	adds	r4, #1
 801e4d8:	9304      	str	r3, [sp, #16]
 801e4da:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e4de:	4826      	ldr	r0, [pc, #152]	; (801e578 <_svfiprintf_r+0x1f0>)
 801e4e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e4e4:	2206      	movs	r2, #6
 801e4e6:	f7e1 fe93 	bl	8000210 <memchr>
 801e4ea:	2800      	cmp	r0, #0
 801e4ec:	d038      	beq.n	801e560 <_svfiprintf_r+0x1d8>
 801e4ee:	4b23      	ldr	r3, [pc, #140]	; (801e57c <_svfiprintf_r+0x1f4>)
 801e4f0:	bb1b      	cbnz	r3, 801e53a <_svfiprintf_r+0x1b2>
 801e4f2:	9b03      	ldr	r3, [sp, #12]
 801e4f4:	3307      	adds	r3, #7
 801e4f6:	f023 0307 	bic.w	r3, r3, #7
 801e4fa:	3308      	adds	r3, #8
 801e4fc:	9303      	str	r3, [sp, #12]
 801e4fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e500:	4433      	add	r3, r6
 801e502:	9309      	str	r3, [sp, #36]	; 0x24
 801e504:	e767      	b.n	801e3d6 <_svfiprintf_r+0x4e>
 801e506:	fb0c 3202 	mla	r2, ip, r2, r3
 801e50a:	460c      	mov	r4, r1
 801e50c:	2001      	movs	r0, #1
 801e50e:	e7a5      	b.n	801e45c <_svfiprintf_r+0xd4>
 801e510:	2300      	movs	r3, #0
 801e512:	3401      	adds	r4, #1
 801e514:	9305      	str	r3, [sp, #20]
 801e516:	4619      	mov	r1, r3
 801e518:	f04f 0c0a 	mov.w	ip, #10
 801e51c:	4620      	mov	r0, r4
 801e51e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e522:	3a30      	subs	r2, #48	; 0x30
 801e524:	2a09      	cmp	r2, #9
 801e526:	d903      	bls.n	801e530 <_svfiprintf_r+0x1a8>
 801e528:	2b00      	cmp	r3, #0
 801e52a:	d0c5      	beq.n	801e4b8 <_svfiprintf_r+0x130>
 801e52c:	9105      	str	r1, [sp, #20]
 801e52e:	e7c3      	b.n	801e4b8 <_svfiprintf_r+0x130>
 801e530:	fb0c 2101 	mla	r1, ip, r1, r2
 801e534:	4604      	mov	r4, r0
 801e536:	2301      	movs	r3, #1
 801e538:	e7f0      	b.n	801e51c <_svfiprintf_r+0x194>
 801e53a:	ab03      	add	r3, sp, #12
 801e53c:	9300      	str	r3, [sp, #0]
 801e53e:	462a      	mov	r2, r5
 801e540:	4b0f      	ldr	r3, [pc, #60]	; (801e580 <_svfiprintf_r+0x1f8>)
 801e542:	a904      	add	r1, sp, #16
 801e544:	4638      	mov	r0, r7
 801e546:	f3af 8000 	nop.w
 801e54a:	1c42      	adds	r2, r0, #1
 801e54c:	4606      	mov	r6, r0
 801e54e:	d1d6      	bne.n	801e4fe <_svfiprintf_r+0x176>
 801e550:	89ab      	ldrh	r3, [r5, #12]
 801e552:	065b      	lsls	r3, r3, #25
 801e554:	f53f af2c 	bmi.w	801e3b0 <_svfiprintf_r+0x28>
 801e558:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e55a:	b01d      	add	sp, #116	; 0x74
 801e55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e560:	ab03      	add	r3, sp, #12
 801e562:	9300      	str	r3, [sp, #0]
 801e564:	462a      	mov	r2, r5
 801e566:	4b06      	ldr	r3, [pc, #24]	; (801e580 <_svfiprintf_r+0x1f8>)
 801e568:	a904      	add	r1, sp, #16
 801e56a:	4638      	mov	r0, r7
 801e56c:	f000 f9d4 	bl	801e918 <_printf_i>
 801e570:	e7eb      	b.n	801e54a <_svfiprintf_r+0x1c2>
 801e572:	bf00      	nop
 801e574:	08020bcc 	.word	0x08020bcc
 801e578:	08020bd6 	.word	0x08020bd6
 801e57c:	00000000 	.word	0x00000000
 801e580:	0801e2d1 	.word	0x0801e2d1
 801e584:	08020bd2 	.word	0x08020bd2

0801e588 <__sfputc_r>:
 801e588:	6893      	ldr	r3, [r2, #8]
 801e58a:	3b01      	subs	r3, #1
 801e58c:	2b00      	cmp	r3, #0
 801e58e:	b410      	push	{r4}
 801e590:	6093      	str	r3, [r2, #8]
 801e592:	da08      	bge.n	801e5a6 <__sfputc_r+0x1e>
 801e594:	6994      	ldr	r4, [r2, #24]
 801e596:	42a3      	cmp	r3, r4
 801e598:	db01      	blt.n	801e59e <__sfputc_r+0x16>
 801e59a:	290a      	cmp	r1, #10
 801e59c:	d103      	bne.n	801e5a6 <__sfputc_r+0x1e>
 801e59e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e5a2:	f7ff bba9 	b.w	801dcf8 <__swbuf_r>
 801e5a6:	6813      	ldr	r3, [r2, #0]
 801e5a8:	1c58      	adds	r0, r3, #1
 801e5aa:	6010      	str	r0, [r2, #0]
 801e5ac:	7019      	strb	r1, [r3, #0]
 801e5ae:	4608      	mov	r0, r1
 801e5b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e5b4:	4770      	bx	lr

0801e5b6 <__sfputs_r>:
 801e5b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5b8:	4606      	mov	r6, r0
 801e5ba:	460f      	mov	r7, r1
 801e5bc:	4614      	mov	r4, r2
 801e5be:	18d5      	adds	r5, r2, r3
 801e5c0:	42ac      	cmp	r4, r5
 801e5c2:	d101      	bne.n	801e5c8 <__sfputs_r+0x12>
 801e5c4:	2000      	movs	r0, #0
 801e5c6:	e007      	b.n	801e5d8 <__sfputs_r+0x22>
 801e5c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e5cc:	463a      	mov	r2, r7
 801e5ce:	4630      	mov	r0, r6
 801e5d0:	f7ff ffda 	bl	801e588 <__sfputc_r>
 801e5d4:	1c43      	adds	r3, r0, #1
 801e5d6:	d1f3      	bne.n	801e5c0 <__sfputs_r+0xa>
 801e5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e5dc <_vfiprintf_r>:
 801e5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5e0:	460d      	mov	r5, r1
 801e5e2:	b09d      	sub	sp, #116	; 0x74
 801e5e4:	4614      	mov	r4, r2
 801e5e6:	4698      	mov	r8, r3
 801e5e8:	4606      	mov	r6, r0
 801e5ea:	b118      	cbz	r0, 801e5f4 <_vfiprintf_r+0x18>
 801e5ec:	6983      	ldr	r3, [r0, #24]
 801e5ee:	b90b      	cbnz	r3, 801e5f4 <_vfiprintf_r+0x18>
 801e5f0:	f7ff fd5c 	bl	801e0ac <__sinit>
 801e5f4:	4b89      	ldr	r3, [pc, #548]	; (801e81c <_vfiprintf_r+0x240>)
 801e5f6:	429d      	cmp	r5, r3
 801e5f8:	d11b      	bne.n	801e632 <_vfiprintf_r+0x56>
 801e5fa:	6875      	ldr	r5, [r6, #4]
 801e5fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e5fe:	07d9      	lsls	r1, r3, #31
 801e600:	d405      	bmi.n	801e60e <_vfiprintf_r+0x32>
 801e602:	89ab      	ldrh	r3, [r5, #12]
 801e604:	059a      	lsls	r2, r3, #22
 801e606:	d402      	bmi.n	801e60e <_vfiprintf_r+0x32>
 801e608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e60a:	f7ff fded 	bl	801e1e8 <__retarget_lock_acquire_recursive>
 801e60e:	89ab      	ldrh	r3, [r5, #12]
 801e610:	071b      	lsls	r3, r3, #28
 801e612:	d501      	bpl.n	801e618 <_vfiprintf_r+0x3c>
 801e614:	692b      	ldr	r3, [r5, #16]
 801e616:	b9eb      	cbnz	r3, 801e654 <_vfiprintf_r+0x78>
 801e618:	4629      	mov	r1, r5
 801e61a:	4630      	mov	r0, r6
 801e61c:	f7ff fbbe 	bl	801dd9c <__swsetup_r>
 801e620:	b1c0      	cbz	r0, 801e654 <_vfiprintf_r+0x78>
 801e622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e624:	07dc      	lsls	r4, r3, #31
 801e626:	d50e      	bpl.n	801e646 <_vfiprintf_r+0x6a>
 801e628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e62c:	b01d      	add	sp, #116	; 0x74
 801e62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e632:	4b7b      	ldr	r3, [pc, #492]	; (801e820 <_vfiprintf_r+0x244>)
 801e634:	429d      	cmp	r5, r3
 801e636:	d101      	bne.n	801e63c <_vfiprintf_r+0x60>
 801e638:	68b5      	ldr	r5, [r6, #8]
 801e63a:	e7df      	b.n	801e5fc <_vfiprintf_r+0x20>
 801e63c:	4b79      	ldr	r3, [pc, #484]	; (801e824 <_vfiprintf_r+0x248>)
 801e63e:	429d      	cmp	r5, r3
 801e640:	bf08      	it	eq
 801e642:	68f5      	ldreq	r5, [r6, #12]
 801e644:	e7da      	b.n	801e5fc <_vfiprintf_r+0x20>
 801e646:	89ab      	ldrh	r3, [r5, #12]
 801e648:	0598      	lsls	r0, r3, #22
 801e64a:	d4ed      	bmi.n	801e628 <_vfiprintf_r+0x4c>
 801e64c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e64e:	f7ff fdcc 	bl	801e1ea <__retarget_lock_release_recursive>
 801e652:	e7e9      	b.n	801e628 <_vfiprintf_r+0x4c>
 801e654:	2300      	movs	r3, #0
 801e656:	9309      	str	r3, [sp, #36]	; 0x24
 801e658:	2320      	movs	r3, #32
 801e65a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e65e:	f8cd 800c 	str.w	r8, [sp, #12]
 801e662:	2330      	movs	r3, #48	; 0x30
 801e664:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e828 <_vfiprintf_r+0x24c>
 801e668:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e66c:	f04f 0901 	mov.w	r9, #1
 801e670:	4623      	mov	r3, r4
 801e672:	469a      	mov	sl, r3
 801e674:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e678:	b10a      	cbz	r2, 801e67e <_vfiprintf_r+0xa2>
 801e67a:	2a25      	cmp	r2, #37	; 0x25
 801e67c:	d1f9      	bne.n	801e672 <_vfiprintf_r+0x96>
 801e67e:	ebba 0b04 	subs.w	fp, sl, r4
 801e682:	d00b      	beq.n	801e69c <_vfiprintf_r+0xc0>
 801e684:	465b      	mov	r3, fp
 801e686:	4622      	mov	r2, r4
 801e688:	4629      	mov	r1, r5
 801e68a:	4630      	mov	r0, r6
 801e68c:	f7ff ff93 	bl	801e5b6 <__sfputs_r>
 801e690:	3001      	adds	r0, #1
 801e692:	f000 80aa 	beq.w	801e7ea <_vfiprintf_r+0x20e>
 801e696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e698:	445a      	add	r2, fp
 801e69a:	9209      	str	r2, [sp, #36]	; 0x24
 801e69c:	f89a 3000 	ldrb.w	r3, [sl]
 801e6a0:	2b00      	cmp	r3, #0
 801e6a2:	f000 80a2 	beq.w	801e7ea <_vfiprintf_r+0x20e>
 801e6a6:	2300      	movs	r3, #0
 801e6a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e6ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e6b0:	f10a 0a01 	add.w	sl, sl, #1
 801e6b4:	9304      	str	r3, [sp, #16]
 801e6b6:	9307      	str	r3, [sp, #28]
 801e6b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e6bc:	931a      	str	r3, [sp, #104]	; 0x68
 801e6be:	4654      	mov	r4, sl
 801e6c0:	2205      	movs	r2, #5
 801e6c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e6c6:	4858      	ldr	r0, [pc, #352]	; (801e828 <_vfiprintf_r+0x24c>)
 801e6c8:	f7e1 fda2 	bl	8000210 <memchr>
 801e6cc:	9a04      	ldr	r2, [sp, #16]
 801e6ce:	b9d8      	cbnz	r0, 801e708 <_vfiprintf_r+0x12c>
 801e6d0:	06d1      	lsls	r1, r2, #27
 801e6d2:	bf44      	itt	mi
 801e6d4:	2320      	movmi	r3, #32
 801e6d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e6da:	0713      	lsls	r3, r2, #28
 801e6dc:	bf44      	itt	mi
 801e6de:	232b      	movmi	r3, #43	; 0x2b
 801e6e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e6e4:	f89a 3000 	ldrb.w	r3, [sl]
 801e6e8:	2b2a      	cmp	r3, #42	; 0x2a
 801e6ea:	d015      	beq.n	801e718 <_vfiprintf_r+0x13c>
 801e6ec:	9a07      	ldr	r2, [sp, #28]
 801e6ee:	4654      	mov	r4, sl
 801e6f0:	2000      	movs	r0, #0
 801e6f2:	f04f 0c0a 	mov.w	ip, #10
 801e6f6:	4621      	mov	r1, r4
 801e6f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e6fc:	3b30      	subs	r3, #48	; 0x30
 801e6fe:	2b09      	cmp	r3, #9
 801e700:	d94e      	bls.n	801e7a0 <_vfiprintf_r+0x1c4>
 801e702:	b1b0      	cbz	r0, 801e732 <_vfiprintf_r+0x156>
 801e704:	9207      	str	r2, [sp, #28]
 801e706:	e014      	b.n	801e732 <_vfiprintf_r+0x156>
 801e708:	eba0 0308 	sub.w	r3, r0, r8
 801e70c:	fa09 f303 	lsl.w	r3, r9, r3
 801e710:	4313      	orrs	r3, r2
 801e712:	9304      	str	r3, [sp, #16]
 801e714:	46a2      	mov	sl, r4
 801e716:	e7d2      	b.n	801e6be <_vfiprintf_r+0xe2>
 801e718:	9b03      	ldr	r3, [sp, #12]
 801e71a:	1d19      	adds	r1, r3, #4
 801e71c:	681b      	ldr	r3, [r3, #0]
 801e71e:	9103      	str	r1, [sp, #12]
 801e720:	2b00      	cmp	r3, #0
 801e722:	bfbb      	ittet	lt
 801e724:	425b      	neglt	r3, r3
 801e726:	f042 0202 	orrlt.w	r2, r2, #2
 801e72a:	9307      	strge	r3, [sp, #28]
 801e72c:	9307      	strlt	r3, [sp, #28]
 801e72e:	bfb8      	it	lt
 801e730:	9204      	strlt	r2, [sp, #16]
 801e732:	7823      	ldrb	r3, [r4, #0]
 801e734:	2b2e      	cmp	r3, #46	; 0x2e
 801e736:	d10c      	bne.n	801e752 <_vfiprintf_r+0x176>
 801e738:	7863      	ldrb	r3, [r4, #1]
 801e73a:	2b2a      	cmp	r3, #42	; 0x2a
 801e73c:	d135      	bne.n	801e7aa <_vfiprintf_r+0x1ce>
 801e73e:	9b03      	ldr	r3, [sp, #12]
 801e740:	1d1a      	adds	r2, r3, #4
 801e742:	681b      	ldr	r3, [r3, #0]
 801e744:	9203      	str	r2, [sp, #12]
 801e746:	2b00      	cmp	r3, #0
 801e748:	bfb8      	it	lt
 801e74a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e74e:	3402      	adds	r4, #2
 801e750:	9305      	str	r3, [sp, #20]
 801e752:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e838 <_vfiprintf_r+0x25c>
 801e756:	7821      	ldrb	r1, [r4, #0]
 801e758:	2203      	movs	r2, #3
 801e75a:	4650      	mov	r0, sl
 801e75c:	f7e1 fd58 	bl	8000210 <memchr>
 801e760:	b140      	cbz	r0, 801e774 <_vfiprintf_r+0x198>
 801e762:	2340      	movs	r3, #64	; 0x40
 801e764:	eba0 000a 	sub.w	r0, r0, sl
 801e768:	fa03 f000 	lsl.w	r0, r3, r0
 801e76c:	9b04      	ldr	r3, [sp, #16]
 801e76e:	4303      	orrs	r3, r0
 801e770:	3401      	adds	r4, #1
 801e772:	9304      	str	r3, [sp, #16]
 801e774:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e778:	482c      	ldr	r0, [pc, #176]	; (801e82c <_vfiprintf_r+0x250>)
 801e77a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e77e:	2206      	movs	r2, #6
 801e780:	f7e1 fd46 	bl	8000210 <memchr>
 801e784:	2800      	cmp	r0, #0
 801e786:	d03f      	beq.n	801e808 <_vfiprintf_r+0x22c>
 801e788:	4b29      	ldr	r3, [pc, #164]	; (801e830 <_vfiprintf_r+0x254>)
 801e78a:	bb1b      	cbnz	r3, 801e7d4 <_vfiprintf_r+0x1f8>
 801e78c:	9b03      	ldr	r3, [sp, #12]
 801e78e:	3307      	adds	r3, #7
 801e790:	f023 0307 	bic.w	r3, r3, #7
 801e794:	3308      	adds	r3, #8
 801e796:	9303      	str	r3, [sp, #12]
 801e798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e79a:	443b      	add	r3, r7
 801e79c:	9309      	str	r3, [sp, #36]	; 0x24
 801e79e:	e767      	b.n	801e670 <_vfiprintf_r+0x94>
 801e7a0:	fb0c 3202 	mla	r2, ip, r2, r3
 801e7a4:	460c      	mov	r4, r1
 801e7a6:	2001      	movs	r0, #1
 801e7a8:	e7a5      	b.n	801e6f6 <_vfiprintf_r+0x11a>
 801e7aa:	2300      	movs	r3, #0
 801e7ac:	3401      	adds	r4, #1
 801e7ae:	9305      	str	r3, [sp, #20]
 801e7b0:	4619      	mov	r1, r3
 801e7b2:	f04f 0c0a 	mov.w	ip, #10
 801e7b6:	4620      	mov	r0, r4
 801e7b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e7bc:	3a30      	subs	r2, #48	; 0x30
 801e7be:	2a09      	cmp	r2, #9
 801e7c0:	d903      	bls.n	801e7ca <_vfiprintf_r+0x1ee>
 801e7c2:	2b00      	cmp	r3, #0
 801e7c4:	d0c5      	beq.n	801e752 <_vfiprintf_r+0x176>
 801e7c6:	9105      	str	r1, [sp, #20]
 801e7c8:	e7c3      	b.n	801e752 <_vfiprintf_r+0x176>
 801e7ca:	fb0c 2101 	mla	r1, ip, r1, r2
 801e7ce:	4604      	mov	r4, r0
 801e7d0:	2301      	movs	r3, #1
 801e7d2:	e7f0      	b.n	801e7b6 <_vfiprintf_r+0x1da>
 801e7d4:	ab03      	add	r3, sp, #12
 801e7d6:	9300      	str	r3, [sp, #0]
 801e7d8:	462a      	mov	r2, r5
 801e7da:	4b16      	ldr	r3, [pc, #88]	; (801e834 <_vfiprintf_r+0x258>)
 801e7dc:	a904      	add	r1, sp, #16
 801e7de:	4630      	mov	r0, r6
 801e7e0:	f3af 8000 	nop.w
 801e7e4:	4607      	mov	r7, r0
 801e7e6:	1c78      	adds	r0, r7, #1
 801e7e8:	d1d6      	bne.n	801e798 <_vfiprintf_r+0x1bc>
 801e7ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e7ec:	07d9      	lsls	r1, r3, #31
 801e7ee:	d405      	bmi.n	801e7fc <_vfiprintf_r+0x220>
 801e7f0:	89ab      	ldrh	r3, [r5, #12]
 801e7f2:	059a      	lsls	r2, r3, #22
 801e7f4:	d402      	bmi.n	801e7fc <_vfiprintf_r+0x220>
 801e7f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e7f8:	f7ff fcf7 	bl	801e1ea <__retarget_lock_release_recursive>
 801e7fc:	89ab      	ldrh	r3, [r5, #12]
 801e7fe:	065b      	lsls	r3, r3, #25
 801e800:	f53f af12 	bmi.w	801e628 <_vfiprintf_r+0x4c>
 801e804:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e806:	e711      	b.n	801e62c <_vfiprintf_r+0x50>
 801e808:	ab03      	add	r3, sp, #12
 801e80a:	9300      	str	r3, [sp, #0]
 801e80c:	462a      	mov	r2, r5
 801e80e:	4b09      	ldr	r3, [pc, #36]	; (801e834 <_vfiprintf_r+0x258>)
 801e810:	a904      	add	r1, sp, #16
 801e812:	4630      	mov	r0, r6
 801e814:	f000 f880 	bl	801e918 <_printf_i>
 801e818:	e7e4      	b.n	801e7e4 <_vfiprintf_r+0x208>
 801e81a:	bf00      	nop
 801e81c:	08020b8c 	.word	0x08020b8c
 801e820:	08020bac 	.word	0x08020bac
 801e824:	08020b6c 	.word	0x08020b6c
 801e828:	08020bcc 	.word	0x08020bcc
 801e82c:	08020bd6 	.word	0x08020bd6
 801e830:	00000000 	.word	0x00000000
 801e834:	0801e5b7 	.word	0x0801e5b7
 801e838:	08020bd2 	.word	0x08020bd2

0801e83c <_printf_common>:
 801e83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e840:	4616      	mov	r6, r2
 801e842:	4699      	mov	r9, r3
 801e844:	688a      	ldr	r2, [r1, #8]
 801e846:	690b      	ldr	r3, [r1, #16]
 801e848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e84c:	4293      	cmp	r3, r2
 801e84e:	bfb8      	it	lt
 801e850:	4613      	movlt	r3, r2
 801e852:	6033      	str	r3, [r6, #0]
 801e854:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e858:	4607      	mov	r7, r0
 801e85a:	460c      	mov	r4, r1
 801e85c:	b10a      	cbz	r2, 801e862 <_printf_common+0x26>
 801e85e:	3301      	adds	r3, #1
 801e860:	6033      	str	r3, [r6, #0]
 801e862:	6823      	ldr	r3, [r4, #0]
 801e864:	0699      	lsls	r1, r3, #26
 801e866:	bf42      	ittt	mi
 801e868:	6833      	ldrmi	r3, [r6, #0]
 801e86a:	3302      	addmi	r3, #2
 801e86c:	6033      	strmi	r3, [r6, #0]
 801e86e:	6825      	ldr	r5, [r4, #0]
 801e870:	f015 0506 	ands.w	r5, r5, #6
 801e874:	d106      	bne.n	801e884 <_printf_common+0x48>
 801e876:	f104 0a19 	add.w	sl, r4, #25
 801e87a:	68e3      	ldr	r3, [r4, #12]
 801e87c:	6832      	ldr	r2, [r6, #0]
 801e87e:	1a9b      	subs	r3, r3, r2
 801e880:	42ab      	cmp	r3, r5
 801e882:	dc26      	bgt.n	801e8d2 <_printf_common+0x96>
 801e884:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e888:	1e13      	subs	r3, r2, #0
 801e88a:	6822      	ldr	r2, [r4, #0]
 801e88c:	bf18      	it	ne
 801e88e:	2301      	movne	r3, #1
 801e890:	0692      	lsls	r2, r2, #26
 801e892:	d42b      	bmi.n	801e8ec <_printf_common+0xb0>
 801e894:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e898:	4649      	mov	r1, r9
 801e89a:	4638      	mov	r0, r7
 801e89c:	47c0      	blx	r8
 801e89e:	3001      	adds	r0, #1
 801e8a0:	d01e      	beq.n	801e8e0 <_printf_common+0xa4>
 801e8a2:	6823      	ldr	r3, [r4, #0]
 801e8a4:	68e5      	ldr	r5, [r4, #12]
 801e8a6:	6832      	ldr	r2, [r6, #0]
 801e8a8:	f003 0306 	and.w	r3, r3, #6
 801e8ac:	2b04      	cmp	r3, #4
 801e8ae:	bf08      	it	eq
 801e8b0:	1aad      	subeq	r5, r5, r2
 801e8b2:	68a3      	ldr	r3, [r4, #8]
 801e8b4:	6922      	ldr	r2, [r4, #16]
 801e8b6:	bf0c      	ite	eq
 801e8b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e8bc:	2500      	movne	r5, #0
 801e8be:	4293      	cmp	r3, r2
 801e8c0:	bfc4      	itt	gt
 801e8c2:	1a9b      	subgt	r3, r3, r2
 801e8c4:	18ed      	addgt	r5, r5, r3
 801e8c6:	2600      	movs	r6, #0
 801e8c8:	341a      	adds	r4, #26
 801e8ca:	42b5      	cmp	r5, r6
 801e8cc:	d11a      	bne.n	801e904 <_printf_common+0xc8>
 801e8ce:	2000      	movs	r0, #0
 801e8d0:	e008      	b.n	801e8e4 <_printf_common+0xa8>
 801e8d2:	2301      	movs	r3, #1
 801e8d4:	4652      	mov	r2, sl
 801e8d6:	4649      	mov	r1, r9
 801e8d8:	4638      	mov	r0, r7
 801e8da:	47c0      	blx	r8
 801e8dc:	3001      	adds	r0, #1
 801e8de:	d103      	bne.n	801e8e8 <_printf_common+0xac>
 801e8e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e8e8:	3501      	adds	r5, #1
 801e8ea:	e7c6      	b.n	801e87a <_printf_common+0x3e>
 801e8ec:	18e1      	adds	r1, r4, r3
 801e8ee:	1c5a      	adds	r2, r3, #1
 801e8f0:	2030      	movs	r0, #48	; 0x30
 801e8f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e8f6:	4422      	add	r2, r4
 801e8f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e8fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e900:	3302      	adds	r3, #2
 801e902:	e7c7      	b.n	801e894 <_printf_common+0x58>
 801e904:	2301      	movs	r3, #1
 801e906:	4622      	mov	r2, r4
 801e908:	4649      	mov	r1, r9
 801e90a:	4638      	mov	r0, r7
 801e90c:	47c0      	blx	r8
 801e90e:	3001      	adds	r0, #1
 801e910:	d0e6      	beq.n	801e8e0 <_printf_common+0xa4>
 801e912:	3601      	adds	r6, #1
 801e914:	e7d9      	b.n	801e8ca <_printf_common+0x8e>
	...

0801e918 <_printf_i>:
 801e918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e91c:	7e0f      	ldrb	r7, [r1, #24]
 801e91e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e920:	2f78      	cmp	r7, #120	; 0x78
 801e922:	4691      	mov	r9, r2
 801e924:	4680      	mov	r8, r0
 801e926:	460c      	mov	r4, r1
 801e928:	469a      	mov	sl, r3
 801e92a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e92e:	d807      	bhi.n	801e940 <_printf_i+0x28>
 801e930:	2f62      	cmp	r7, #98	; 0x62
 801e932:	d80a      	bhi.n	801e94a <_printf_i+0x32>
 801e934:	2f00      	cmp	r7, #0
 801e936:	f000 80d8 	beq.w	801eaea <_printf_i+0x1d2>
 801e93a:	2f58      	cmp	r7, #88	; 0x58
 801e93c:	f000 80a3 	beq.w	801ea86 <_printf_i+0x16e>
 801e940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e944:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e948:	e03a      	b.n	801e9c0 <_printf_i+0xa8>
 801e94a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e94e:	2b15      	cmp	r3, #21
 801e950:	d8f6      	bhi.n	801e940 <_printf_i+0x28>
 801e952:	a101      	add	r1, pc, #4	; (adr r1, 801e958 <_printf_i+0x40>)
 801e954:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e958:	0801e9b1 	.word	0x0801e9b1
 801e95c:	0801e9c5 	.word	0x0801e9c5
 801e960:	0801e941 	.word	0x0801e941
 801e964:	0801e941 	.word	0x0801e941
 801e968:	0801e941 	.word	0x0801e941
 801e96c:	0801e941 	.word	0x0801e941
 801e970:	0801e9c5 	.word	0x0801e9c5
 801e974:	0801e941 	.word	0x0801e941
 801e978:	0801e941 	.word	0x0801e941
 801e97c:	0801e941 	.word	0x0801e941
 801e980:	0801e941 	.word	0x0801e941
 801e984:	0801ead1 	.word	0x0801ead1
 801e988:	0801e9f5 	.word	0x0801e9f5
 801e98c:	0801eab3 	.word	0x0801eab3
 801e990:	0801e941 	.word	0x0801e941
 801e994:	0801e941 	.word	0x0801e941
 801e998:	0801eaf3 	.word	0x0801eaf3
 801e99c:	0801e941 	.word	0x0801e941
 801e9a0:	0801e9f5 	.word	0x0801e9f5
 801e9a4:	0801e941 	.word	0x0801e941
 801e9a8:	0801e941 	.word	0x0801e941
 801e9ac:	0801eabb 	.word	0x0801eabb
 801e9b0:	682b      	ldr	r3, [r5, #0]
 801e9b2:	1d1a      	adds	r2, r3, #4
 801e9b4:	681b      	ldr	r3, [r3, #0]
 801e9b6:	602a      	str	r2, [r5, #0]
 801e9b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e9bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e9c0:	2301      	movs	r3, #1
 801e9c2:	e0a3      	b.n	801eb0c <_printf_i+0x1f4>
 801e9c4:	6820      	ldr	r0, [r4, #0]
 801e9c6:	6829      	ldr	r1, [r5, #0]
 801e9c8:	0606      	lsls	r6, r0, #24
 801e9ca:	f101 0304 	add.w	r3, r1, #4
 801e9ce:	d50a      	bpl.n	801e9e6 <_printf_i+0xce>
 801e9d0:	680e      	ldr	r6, [r1, #0]
 801e9d2:	602b      	str	r3, [r5, #0]
 801e9d4:	2e00      	cmp	r6, #0
 801e9d6:	da03      	bge.n	801e9e0 <_printf_i+0xc8>
 801e9d8:	232d      	movs	r3, #45	; 0x2d
 801e9da:	4276      	negs	r6, r6
 801e9dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e9e0:	485e      	ldr	r0, [pc, #376]	; (801eb5c <_printf_i+0x244>)
 801e9e2:	230a      	movs	r3, #10
 801e9e4:	e019      	b.n	801ea1a <_printf_i+0x102>
 801e9e6:	680e      	ldr	r6, [r1, #0]
 801e9e8:	602b      	str	r3, [r5, #0]
 801e9ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e9ee:	bf18      	it	ne
 801e9f0:	b236      	sxthne	r6, r6
 801e9f2:	e7ef      	b.n	801e9d4 <_printf_i+0xbc>
 801e9f4:	682b      	ldr	r3, [r5, #0]
 801e9f6:	6820      	ldr	r0, [r4, #0]
 801e9f8:	1d19      	adds	r1, r3, #4
 801e9fa:	6029      	str	r1, [r5, #0]
 801e9fc:	0601      	lsls	r1, r0, #24
 801e9fe:	d501      	bpl.n	801ea04 <_printf_i+0xec>
 801ea00:	681e      	ldr	r6, [r3, #0]
 801ea02:	e002      	b.n	801ea0a <_printf_i+0xf2>
 801ea04:	0646      	lsls	r6, r0, #25
 801ea06:	d5fb      	bpl.n	801ea00 <_printf_i+0xe8>
 801ea08:	881e      	ldrh	r6, [r3, #0]
 801ea0a:	4854      	ldr	r0, [pc, #336]	; (801eb5c <_printf_i+0x244>)
 801ea0c:	2f6f      	cmp	r7, #111	; 0x6f
 801ea0e:	bf0c      	ite	eq
 801ea10:	2308      	moveq	r3, #8
 801ea12:	230a      	movne	r3, #10
 801ea14:	2100      	movs	r1, #0
 801ea16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ea1a:	6865      	ldr	r5, [r4, #4]
 801ea1c:	60a5      	str	r5, [r4, #8]
 801ea1e:	2d00      	cmp	r5, #0
 801ea20:	bfa2      	ittt	ge
 801ea22:	6821      	ldrge	r1, [r4, #0]
 801ea24:	f021 0104 	bicge.w	r1, r1, #4
 801ea28:	6021      	strge	r1, [r4, #0]
 801ea2a:	b90e      	cbnz	r6, 801ea30 <_printf_i+0x118>
 801ea2c:	2d00      	cmp	r5, #0
 801ea2e:	d04d      	beq.n	801eacc <_printf_i+0x1b4>
 801ea30:	4615      	mov	r5, r2
 801ea32:	fbb6 f1f3 	udiv	r1, r6, r3
 801ea36:	fb03 6711 	mls	r7, r3, r1, r6
 801ea3a:	5dc7      	ldrb	r7, [r0, r7]
 801ea3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ea40:	4637      	mov	r7, r6
 801ea42:	42bb      	cmp	r3, r7
 801ea44:	460e      	mov	r6, r1
 801ea46:	d9f4      	bls.n	801ea32 <_printf_i+0x11a>
 801ea48:	2b08      	cmp	r3, #8
 801ea4a:	d10b      	bne.n	801ea64 <_printf_i+0x14c>
 801ea4c:	6823      	ldr	r3, [r4, #0]
 801ea4e:	07de      	lsls	r6, r3, #31
 801ea50:	d508      	bpl.n	801ea64 <_printf_i+0x14c>
 801ea52:	6923      	ldr	r3, [r4, #16]
 801ea54:	6861      	ldr	r1, [r4, #4]
 801ea56:	4299      	cmp	r1, r3
 801ea58:	bfde      	ittt	le
 801ea5a:	2330      	movle	r3, #48	; 0x30
 801ea5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ea60:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801ea64:	1b52      	subs	r2, r2, r5
 801ea66:	6122      	str	r2, [r4, #16]
 801ea68:	f8cd a000 	str.w	sl, [sp]
 801ea6c:	464b      	mov	r3, r9
 801ea6e:	aa03      	add	r2, sp, #12
 801ea70:	4621      	mov	r1, r4
 801ea72:	4640      	mov	r0, r8
 801ea74:	f7ff fee2 	bl	801e83c <_printf_common>
 801ea78:	3001      	adds	r0, #1
 801ea7a:	d14c      	bne.n	801eb16 <_printf_i+0x1fe>
 801ea7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ea80:	b004      	add	sp, #16
 801ea82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ea86:	4835      	ldr	r0, [pc, #212]	; (801eb5c <_printf_i+0x244>)
 801ea88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801ea8c:	6829      	ldr	r1, [r5, #0]
 801ea8e:	6823      	ldr	r3, [r4, #0]
 801ea90:	f851 6b04 	ldr.w	r6, [r1], #4
 801ea94:	6029      	str	r1, [r5, #0]
 801ea96:	061d      	lsls	r5, r3, #24
 801ea98:	d514      	bpl.n	801eac4 <_printf_i+0x1ac>
 801ea9a:	07df      	lsls	r7, r3, #31
 801ea9c:	bf44      	itt	mi
 801ea9e:	f043 0320 	orrmi.w	r3, r3, #32
 801eaa2:	6023      	strmi	r3, [r4, #0]
 801eaa4:	b91e      	cbnz	r6, 801eaae <_printf_i+0x196>
 801eaa6:	6823      	ldr	r3, [r4, #0]
 801eaa8:	f023 0320 	bic.w	r3, r3, #32
 801eaac:	6023      	str	r3, [r4, #0]
 801eaae:	2310      	movs	r3, #16
 801eab0:	e7b0      	b.n	801ea14 <_printf_i+0xfc>
 801eab2:	6823      	ldr	r3, [r4, #0]
 801eab4:	f043 0320 	orr.w	r3, r3, #32
 801eab8:	6023      	str	r3, [r4, #0]
 801eaba:	2378      	movs	r3, #120	; 0x78
 801eabc:	4828      	ldr	r0, [pc, #160]	; (801eb60 <_printf_i+0x248>)
 801eabe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801eac2:	e7e3      	b.n	801ea8c <_printf_i+0x174>
 801eac4:	0659      	lsls	r1, r3, #25
 801eac6:	bf48      	it	mi
 801eac8:	b2b6      	uxthmi	r6, r6
 801eaca:	e7e6      	b.n	801ea9a <_printf_i+0x182>
 801eacc:	4615      	mov	r5, r2
 801eace:	e7bb      	b.n	801ea48 <_printf_i+0x130>
 801ead0:	682b      	ldr	r3, [r5, #0]
 801ead2:	6826      	ldr	r6, [r4, #0]
 801ead4:	6961      	ldr	r1, [r4, #20]
 801ead6:	1d18      	adds	r0, r3, #4
 801ead8:	6028      	str	r0, [r5, #0]
 801eada:	0635      	lsls	r5, r6, #24
 801eadc:	681b      	ldr	r3, [r3, #0]
 801eade:	d501      	bpl.n	801eae4 <_printf_i+0x1cc>
 801eae0:	6019      	str	r1, [r3, #0]
 801eae2:	e002      	b.n	801eaea <_printf_i+0x1d2>
 801eae4:	0670      	lsls	r0, r6, #25
 801eae6:	d5fb      	bpl.n	801eae0 <_printf_i+0x1c8>
 801eae8:	8019      	strh	r1, [r3, #0]
 801eaea:	2300      	movs	r3, #0
 801eaec:	6123      	str	r3, [r4, #16]
 801eaee:	4615      	mov	r5, r2
 801eaf0:	e7ba      	b.n	801ea68 <_printf_i+0x150>
 801eaf2:	682b      	ldr	r3, [r5, #0]
 801eaf4:	1d1a      	adds	r2, r3, #4
 801eaf6:	602a      	str	r2, [r5, #0]
 801eaf8:	681d      	ldr	r5, [r3, #0]
 801eafa:	6862      	ldr	r2, [r4, #4]
 801eafc:	2100      	movs	r1, #0
 801eafe:	4628      	mov	r0, r5
 801eb00:	f7e1 fb86 	bl	8000210 <memchr>
 801eb04:	b108      	cbz	r0, 801eb0a <_printf_i+0x1f2>
 801eb06:	1b40      	subs	r0, r0, r5
 801eb08:	6060      	str	r0, [r4, #4]
 801eb0a:	6863      	ldr	r3, [r4, #4]
 801eb0c:	6123      	str	r3, [r4, #16]
 801eb0e:	2300      	movs	r3, #0
 801eb10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801eb14:	e7a8      	b.n	801ea68 <_printf_i+0x150>
 801eb16:	6923      	ldr	r3, [r4, #16]
 801eb18:	462a      	mov	r2, r5
 801eb1a:	4649      	mov	r1, r9
 801eb1c:	4640      	mov	r0, r8
 801eb1e:	47d0      	blx	sl
 801eb20:	3001      	adds	r0, #1
 801eb22:	d0ab      	beq.n	801ea7c <_printf_i+0x164>
 801eb24:	6823      	ldr	r3, [r4, #0]
 801eb26:	079b      	lsls	r3, r3, #30
 801eb28:	d413      	bmi.n	801eb52 <_printf_i+0x23a>
 801eb2a:	68e0      	ldr	r0, [r4, #12]
 801eb2c:	9b03      	ldr	r3, [sp, #12]
 801eb2e:	4298      	cmp	r0, r3
 801eb30:	bfb8      	it	lt
 801eb32:	4618      	movlt	r0, r3
 801eb34:	e7a4      	b.n	801ea80 <_printf_i+0x168>
 801eb36:	2301      	movs	r3, #1
 801eb38:	4632      	mov	r2, r6
 801eb3a:	4649      	mov	r1, r9
 801eb3c:	4640      	mov	r0, r8
 801eb3e:	47d0      	blx	sl
 801eb40:	3001      	adds	r0, #1
 801eb42:	d09b      	beq.n	801ea7c <_printf_i+0x164>
 801eb44:	3501      	adds	r5, #1
 801eb46:	68e3      	ldr	r3, [r4, #12]
 801eb48:	9903      	ldr	r1, [sp, #12]
 801eb4a:	1a5b      	subs	r3, r3, r1
 801eb4c:	42ab      	cmp	r3, r5
 801eb4e:	dcf2      	bgt.n	801eb36 <_printf_i+0x21e>
 801eb50:	e7eb      	b.n	801eb2a <_printf_i+0x212>
 801eb52:	2500      	movs	r5, #0
 801eb54:	f104 0619 	add.w	r6, r4, #25
 801eb58:	e7f5      	b.n	801eb46 <_printf_i+0x22e>
 801eb5a:	bf00      	nop
 801eb5c:	08020bdd 	.word	0x08020bdd
 801eb60:	08020bee 	.word	0x08020bee

0801eb64 <_putc_r>:
 801eb64:	b570      	push	{r4, r5, r6, lr}
 801eb66:	460d      	mov	r5, r1
 801eb68:	4614      	mov	r4, r2
 801eb6a:	4606      	mov	r6, r0
 801eb6c:	b118      	cbz	r0, 801eb76 <_putc_r+0x12>
 801eb6e:	6983      	ldr	r3, [r0, #24]
 801eb70:	b90b      	cbnz	r3, 801eb76 <_putc_r+0x12>
 801eb72:	f7ff fa9b 	bl	801e0ac <__sinit>
 801eb76:	4b1c      	ldr	r3, [pc, #112]	; (801ebe8 <_putc_r+0x84>)
 801eb78:	429c      	cmp	r4, r3
 801eb7a:	d124      	bne.n	801ebc6 <_putc_r+0x62>
 801eb7c:	6874      	ldr	r4, [r6, #4]
 801eb7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801eb80:	07d8      	lsls	r0, r3, #31
 801eb82:	d405      	bmi.n	801eb90 <_putc_r+0x2c>
 801eb84:	89a3      	ldrh	r3, [r4, #12]
 801eb86:	0599      	lsls	r1, r3, #22
 801eb88:	d402      	bmi.n	801eb90 <_putc_r+0x2c>
 801eb8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eb8c:	f7ff fb2c 	bl	801e1e8 <__retarget_lock_acquire_recursive>
 801eb90:	68a3      	ldr	r3, [r4, #8]
 801eb92:	3b01      	subs	r3, #1
 801eb94:	2b00      	cmp	r3, #0
 801eb96:	60a3      	str	r3, [r4, #8]
 801eb98:	da05      	bge.n	801eba6 <_putc_r+0x42>
 801eb9a:	69a2      	ldr	r2, [r4, #24]
 801eb9c:	4293      	cmp	r3, r2
 801eb9e:	db1c      	blt.n	801ebda <_putc_r+0x76>
 801eba0:	b2eb      	uxtb	r3, r5
 801eba2:	2b0a      	cmp	r3, #10
 801eba4:	d019      	beq.n	801ebda <_putc_r+0x76>
 801eba6:	6823      	ldr	r3, [r4, #0]
 801eba8:	1c5a      	adds	r2, r3, #1
 801ebaa:	6022      	str	r2, [r4, #0]
 801ebac:	701d      	strb	r5, [r3, #0]
 801ebae:	b2ed      	uxtb	r5, r5
 801ebb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ebb2:	07da      	lsls	r2, r3, #31
 801ebb4:	d405      	bmi.n	801ebc2 <_putc_r+0x5e>
 801ebb6:	89a3      	ldrh	r3, [r4, #12]
 801ebb8:	059b      	lsls	r3, r3, #22
 801ebba:	d402      	bmi.n	801ebc2 <_putc_r+0x5e>
 801ebbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ebbe:	f7ff fb14 	bl	801e1ea <__retarget_lock_release_recursive>
 801ebc2:	4628      	mov	r0, r5
 801ebc4:	bd70      	pop	{r4, r5, r6, pc}
 801ebc6:	4b09      	ldr	r3, [pc, #36]	; (801ebec <_putc_r+0x88>)
 801ebc8:	429c      	cmp	r4, r3
 801ebca:	d101      	bne.n	801ebd0 <_putc_r+0x6c>
 801ebcc:	68b4      	ldr	r4, [r6, #8]
 801ebce:	e7d6      	b.n	801eb7e <_putc_r+0x1a>
 801ebd0:	4b07      	ldr	r3, [pc, #28]	; (801ebf0 <_putc_r+0x8c>)
 801ebd2:	429c      	cmp	r4, r3
 801ebd4:	bf08      	it	eq
 801ebd6:	68f4      	ldreq	r4, [r6, #12]
 801ebd8:	e7d1      	b.n	801eb7e <_putc_r+0x1a>
 801ebda:	4629      	mov	r1, r5
 801ebdc:	4622      	mov	r2, r4
 801ebde:	4630      	mov	r0, r6
 801ebe0:	f7ff f88a 	bl	801dcf8 <__swbuf_r>
 801ebe4:	4605      	mov	r5, r0
 801ebe6:	e7e3      	b.n	801ebb0 <_putc_r+0x4c>
 801ebe8:	08020b8c 	.word	0x08020b8c
 801ebec:	08020bac 	.word	0x08020bac
 801ebf0:	08020b6c 	.word	0x08020b6c

0801ebf4 <__sread>:
 801ebf4:	b510      	push	{r4, lr}
 801ebf6:	460c      	mov	r4, r1
 801ebf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ebfc:	f000 f8de 	bl	801edbc <_read_r>
 801ec00:	2800      	cmp	r0, #0
 801ec02:	bfab      	itete	ge
 801ec04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ec06:	89a3      	ldrhlt	r3, [r4, #12]
 801ec08:	181b      	addge	r3, r3, r0
 801ec0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ec0e:	bfac      	ite	ge
 801ec10:	6563      	strge	r3, [r4, #84]	; 0x54
 801ec12:	81a3      	strhlt	r3, [r4, #12]
 801ec14:	bd10      	pop	{r4, pc}

0801ec16 <__swrite>:
 801ec16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec1a:	461f      	mov	r7, r3
 801ec1c:	898b      	ldrh	r3, [r1, #12]
 801ec1e:	05db      	lsls	r3, r3, #23
 801ec20:	4605      	mov	r5, r0
 801ec22:	460c      	mov	r4, r1
 801ec24:	4616      	mov	r6, r2
 801ec26:	d505      	bpl.n	801ec34 <__swrite+0x1e>
 801ec28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec2c:	2302      	movs	r3, #2
 801ec2e:	2200      	movs	r2, #0
 801ec30:	f000 f868 	bl	801ed04 <_lseek_r>
 801ec34:	89a3      	ldrh	r3, [r4, #12]
 801ec36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ec3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ec3e:	81a3      	strh	r3, [r4, #12]
 801ec40:	4632      	mov	r2, r6
 801ec42:	463b      	mov	r3, r7
 801ec44:	4628      	mov	r0, r5
 801ec46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ec4a:	f000 b817 	b.w	801ec7c <_write_r>

0801ec4e <__sseek>:
 801ec4e:	b510      	push	{r4, lr}
 801ec50:	460c      	mov	r4, r1
 801ec52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec56:	f000 f855 	bl	801ed04 <_lseek_r>
 801ec5a:	1c43      	adds	r3, r0, #1
 801ec5c:	89a3      	ldrh	r3, [r4, #12]
 801ec5e:	bf15      	itete	ne
 801ec60:	6560      	strne	r0, [r4, #84]	; 0x54
 801ec62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ec66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ec6a:	81a3      	strheq	r3, [r4, #12]
 801ec6c:	bf18      	it	ne
 801ec6e:	81a3      	strhne	r3, [r4, #12]
 801ec70:	bd10      	pop	{r4, pc}

0801ec72 <__sclose>:
 801ec72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec76:	f000 b813 	b.w	801eca0 <_close_r>
	...

0801ec7c <_write_r>:
 801ec7c:	b538      	push	{r3, r4, r5, lr}
 801ec7e:	4d07      	ldr	r5, [pc, #28]	; (801ec9c <_write_r+0x20>)
 801ec80:	4604      	mov	r4, r0
 801ec82:	4608      	mov	r0, r1
 801ec84:	4611      	mov	r1, r2
 801ec86:	2200      	movs	r2, #0
 801ec88:	602a      	str	r2, [r5, #0]
 801ec8a:	461a      	mov	r2, r3
 801ec8c:	f7e4 ffd7 	bl	8003c3e <_write>
 801ec90:	1c43      	adds	r3, r0, #1
 801ec92:	d102      	bne.n	801ec9a <_write_r+0x1e>
 801ec94:	682b      	ldr	r3, [r5, #0]
 801ec96:	b103      	cbz	r3, 801ec9a <_write_r+0x1e>
 801ec98:	6023      	str	r3, [r4, #0]
 801ec9a:	bd38      	pop	{r3, r4, r5, pc}
 801ec9c:	2004c054 	.word	0x2004c054

0801eca0 <_close_r>:
 801eca0:	b538      	push	{r3, r4, r5, lr}
 801eca2:	4d06      	ldr	r5, [pc, #24]	; (801ecbc <_close_r+0x1c>)
 801eca4:	2300      	movs	r3, #0
 801eca6:	4604      	mov	r4, r0
 801eca8:	4608      	mov	r0, r1
 801ecaa:	602b      	str	r3, [r5, #0]
 801ecac:	f7e4 ffe3 	bl	8003c76 <_close>
 801ecb0:	1c43      	adds	r3, r0, #1
 801ecb2:	d102      	bne.n	801ecba <_close_r+0x1a>
 801ecb4:	682b      	ldr	r3, [r5, #0]
 801ecb6:	b103      	cbz	r3, 801ecba <_close_r+0x1a>
 801ecb8:	6023      	str	r3, [r4, #0]
 801ecba:	bd38      	pop	{r3, r4, r5, pc}
 801ecbc:	2004c054 	.word	0x2004c054

0801ecc0 <_fstat_r>:
 801ecc0:	b538      	push	{r3, r4, r5, lr}
 801ecc2:	4d07      	ldr	r5, [pc, #28]	; (801ece0 <_fstat_r+0x20>)
 801ecc4:	2300      	movs	r3, #0
 801ecc6:	4604      	mov	r4, r0
 801ecc8:	4608      	mov	r0, r1
 801ecca:	4611      	mov	r1, r2
 801eccc:	602b      	str	r3, [r5, #0]
 801ecce:	f7e4 ffde 	bl	8003c8e <_fstat>
 801ecd2:	1c43      	adds	r3, r0, #1
 801ecd4:	d102      	bne.n	801ecdc <_fstat_r+0x1c>
 801ecd6:	682b      	ldr	r3, [r5, #0]
 801ecd8:	b103      	cbz	r3, 801ecdc <_fstat_r+0x1c>
 801ecda:	6023      	str	r3, [r4, #0]
 801ecdc:	bd38      	pop	{r3, r4, r5, pc}
 801ecde:	bf00      	nop
 801ece0:	2004c054 	.word	0x2004c054

0801ece4 <_isatty_r>:
 801ece4:	b538      	push	{r3, r4, r5, lr}
 801ece6:	4d06      	ldr	r5, [pc, #24]	; (801ed00 <_isatty_r+0x1c>)
 801ece8:	2300      	movs	r3, #0
 801ecea:	4604      	mov	r4, r0
 801ecec:	4608      	mov	r0, r1
 801ecee:	602b      	str	r3, [r5, #0]
 801ecf0:	f7e4 ffdd 	bl	8003cae <_isatty>
 801ecf4:	1c43      	adds	r3, r0, #1
 801ecf6:	d102      	bne.n	801ecfe <_isatty_r+0x1a>
 801ecf8:	682b      	ldr	r3, [r5, #0]
 801ecfa:	b103      	cbz	r3, 801ecfe <_isatty_r+0x1a>
 801ecfc:	6023      	str	r3, [r4, #0]
 801ecfe:	bd38      	pop	{r3, r4, r5, pc}
 801ed00:	2004c054 	.word	0x2004c054

0801ed04 <_lseek_r>:
 801ed04:	b538      	push	{r3, r4, r5, lr}
 801ed06:	4d07      	ldr	r5, [pc, #28]	; (801ed24 <_lseek_r+0x20>)
 801ed08:	4604      	mov	r4, r0
 801ed0a:	4608      	mov	r0, r1
 801ed0c:	4611      	mov	r1, r2
 801ed0e:	2200      	movs	r2, #0
 801ed10:	602a      	str	r2, [r5, #0]
 801ed12:	461a      	mov	r2, r3
 801ed14:	f7e4 ffd6 	bl	8003cc4 <_lseek>
 801ed18:	1c43      	adds	r3, r0, #1
 801ed1a:	d102      	bne.n	801ed22 <_lseek_r+0x1e>
 801ed1c:	682b      	ldr	r3, [r5, #0]
 801ed1e:	b103      	cbz	r3, 801ed22 <_lseek_r+0x1e>
 801ed20:	6023      	str	r3, [r4, #0]
 801ed22:	bd38      	pop	{r3, r4, r5, pc}
 801ed24:	2004c054 	.word	0x2004c054

0801ed28 <memmove>:
 801ed28:	4288      	cmp	r0, r1
 801ed2a:	b510      	push	{r4, lr}
 801ed2c:	eb01 0402 	add.w	r4, r1, r2
 801ed30:	d902      	bls.n	801ed38 <memmove+0x10>
 801ed32:	4284      	cmp	r4, r0
 801ed34:	4623      	mov	r3, r4
 801ed36:	d807      	bhi.n	801ed48 <memmove+0x20>
 801ed38:	1e43      	subs	r3, r0, #1
 801ed3a:	42a1      	cmp	r1, r4
 801ed3c:	d008      	beq.n	801ed50 <memmove+0x28>
 801ed3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ed42:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ed46:	e7f8      	b.n	801ed3a <memmove+0x12>
 801ed48:	4402      	add	r2, r0
 801ed4a:	4601      	mov	r1, r0
 801ed4c:	428a      	cmp	r2, r1
 801ed4e:	d100      	bne.n	801ed52 <memmove+0x2a>
 801ed50:	bd10      	pop	{r4, pc}
 801ed52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ed56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ed5a:	e7f7      	b.n	801ed4c <memmove+0x24>

0801ed5c <_realloc_r>:
 801ed5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed60:	4680      	mov	r8, r0
 801ed62:	4614      	mov	r4, r2
 801ed64:	460e      	mov	r6, r1
 801ed66:	b921      	cbnz	r1, 801ed72 <_realloc_r+0x16>
 801ed68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ed6c:	4611      	mov	r1, r2
 801ed6e:	f7fe be7b 	b.w	801da68 <_malloc_r>
 801ed72:	b92a      	cbnz	r2, 801ed80 <_realloc_r+0x24>
 801ed74:	f7fe fe0c 	bl	801d990 <_free_r>
 801ed78:	4625      	mov	r5, r4
 801ed7a:	4628      	mov	r0, r5
 801ed7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed80:	f000 f82e 	bl	801ede0 <_malloc_usable_size_r>
 801ed84:	4284      	cmp	r4, r0
 801ed86:	4607      	mov	r7, r0
 801ed88:	d802      	bhi.n	801ed90 <_realloc_r+0x34>
 801ed8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ed8e:	d812      	bhi.n	801edb6 <_realloc_r+0x5a>
 801ed90:	4621      	mov	r1, r4
 801ed92:	4640      	mov	r0, r8
 801ed94:	f7fe fe68 	bl	801da68 <_malloc_r>
 801ed98:	4605      	mov	r5, r0
 801ed9a:	2800      	cmp	r0, #0
 801ed9c:	d0ed      	beq.n	801ed7a <_realloc_r+0x1e>
 801ed9e:	42bc      	cmp	r4, r7
 801eda0:	4622      	mov	r2, r4
 801eda2:	4631      	mov	r1, r6
 801eda4:	bf28      	it	cs
 801eda6:	463a      	movcs	r2, r7
 801eda8:	f7fe fddc 	bl	801d964 <memcpy>
 801edac:	4631      	mov	r1, r6
 801edae:	4640      	mov	r0, r8
 801edb0:	f7fe fdee 	bl	801d990 <_free_r>
 801edb4:	e7e1      	b.n	801ed7a <_realloc_r+0x1e>
 801edb6:	4635      	mov	r5, r6
 801edb8:	e7df      	b.n	801ed7a <_realloc_r+0x1e>
	...

0801edbc <_read_r>:
 801edbc:	b538      	push	{r3, r4, r5, lr}
 801edbe:	4d07      	ldr	r5, [pc, #28]	; (801eddc <_read_r+0x20>)
 801edc0:	4604      	mov	r4, r0
 801edc2:	4608      	mov	r0, r1
 801edc4:	4611      	mov	r1, r2
 801edc6:	2200      	movs	r2, #0
 801edc8:	602a      	str	r2, [r5, #0]
 801edca:	461a      	mov	r2, r3
 801edcc:	f7e4 ff1a 	bl	8003c04 <_read>
 801edd0:	1c43      	adds	r3, r0, #1
 801edd2:	d102      	bne.n	801edda <_read_r+0x1e>
 801edd4:	682b      	ldr	r3, [r5, #0]
 801edd6:	b103      	cbz	r3, 801edda <_read_r+0x1e>
 801edd8:	6023      	str	r3, [r4, #0]
 801edda:	bd38      	pop	{r3, r4, r5, pc}
 801eddc:	2004c054 	.word	0x2004c054

0801ede0 <_malloc_usable_size_r>:
 801ede0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ede4:	1f18      	subs	r0, r3, #4
 801ede6:	2b00      	cmp	r3, #0
 801ede8:	bfbc      	itt	lt
 801edea:	580b      	ldrlt	r3, [r1, r0]
 801edec:	18c0      	addlt	r0, r0, r3
 801edee:	4770      	bx	lr

0801edf0 <_init>:
 801edf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801edf2:	bf00      	nop
 801edf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801edf6:	bc08      	pop	{r3}
 801edf8:	469e      	mov	lr, r3
 801edfa:	4770      	bx	lr

0801edfc <_fini>:
 801edfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801edfe:	bf00      	nop
 801ee00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ee02:	bc08      	pop	{r3}
 801ee04:	469e      	mov	lr, r3
 801ee06:	4770      	bx	lr
